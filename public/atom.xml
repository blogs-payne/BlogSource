<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴志鹏｜Payne-Wu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://paynewu.com/"/>
  <updated>2021-11-04T09:37:33.725Z</updated>
  <id>https://paynewu.com/</id>
  
  <author>
    <name>吴志鹏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reset VsCode config</title>
    <link href="https://paynewu.com/1614406133.html"/>
    <id>https://paynewu.com/1614406133.html</id>
    <published>2021-11-04T09:29:48.000Z</published>
    <updated>2021-11-04T09:37:33.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重置-Visual-Studio-Code所有配置"><a href="#重置-Visual-Studio-Code所有配置" class="headerlink" title="重置 Visual Studio Code所有配置"></a>重置 Visual Studio Code所有配置</h2><p>随着使用期限的增长，各种问题便逐渐出现啦。当我们对于Visual Studio Code因为配置问题而造成使用不适，此处有一剂良药——初始化配置<br><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">rm -rf ~/.vscode</span><br><span class="line">rm -rf ~/Library/Application Support/Code</span><br></pre>            </td>        </tr>    </table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重置-Visual-Studio-Code所有配置&quot;&gt;&lt;a href=&quot;#重置-Visual-Studio-Code所有配置&quot; class=&quot;headerlink&quot; title=&quot;重置 Visual Studio Code所有配置&quot;&gt;&lt;/a&gt;重置 Visual S
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://paynewu.com/categories/Mac/"/>
    
      <category term="Visual Studio Code" scheme="https://paynewu.com/categories/Mac/Visual-Studio-Code/"/>
    
    
      <category term="Mac" scheme="https://paynewu.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>golang配置神器viper</title>
    <link href="https://paynewu.com/2559205426.html"/>
    <id>https://paynewu.com/2559205426.html</id>
    <published>2021-10-18T09:09:16.000Z</published>
    <updated>2021-10-22T07:03:39.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Viper简介"><a href="#Viper简介" class="headerlink" title="Viper简介"></a>Viper简介</h2><p>Viper是一个完整的Go语言项目的配置解决方案。它可以处理所有类型的配置需求和格式，相关链接如下</p><p>包文档：<a href="https://pkg.go.dev/github.com/spf13/viper" target="_blank" rel="noopener">https://pkg.go.dev/github.com/spf13/viper</a></p><p>github：<a href="https://github.com/spf13/viper" target="_blank" rel="noopener">https://github.com/spf13/viper</a></p><h2 id="Viper的优势"><a href="#Viper的优势" class="headerlink" title="Viper的优势"></a>Viper的优势</h2><p>在构建Golang程序时可以不必担心配置文件格式而更专注于实现。</p><p>viper主要包含以下操作：</p><ol>    <li>查找、加载和反序列化 “json”, “toml”, “yaml”, “yml”, “properties”, “props”, “prop”, “hcl”, “tfvars”, “dotenv”, “env”, “ini”</li>    <li>提供一种机制来为不同的配置选项设置默认值。</li>    <li>提供一种机制来为通过命令行参数设置指定覆盖值。</li>    <li>提供别名，以在不破坏现有代码的情况下轻松重命名参数。</li>    <li>使区分用户何时提供与默认值相同的命令行或配置文件变得容易。</li></ol><p>每个项目的优先级都高于它下面的项目，Viper优先顺序。</p><ul>    <li>显式调用 <code>Set</code></li>    <li>命令行参数（flag）</li>    <li>环境变量</li>    <li>配置文件</li>    <li>key/value存储</li>    <li>默认值</li></ul><blockquote>    <p> <strong>重要提示：</strong> Viper 配置键不区分大小写。正在进行关于使之成为可选项的讨论。</p></blockquote><h2 id="Viper使用场景"><a href="#Viper使用场景" class="headerlink" title="Viper使用场景"></a>Viper使用场景</h2><ul>    <li>设置默认值</li>    <li>“json”, “toml”, “yaml”, “yml”, “properties”, “props”, “prop”, “hcl”, “tfvars”, “dotenv”, “env”, “ini”文件中读取载入</li>    <li>实时观看和重新读取配置文件（可选）</li>    <li>从环境变量中读取</li>    <li>从远程配置系统（etcd 或 Consul）读取，并观察变化</li>    <li>从命令行标志读取</li>    <li>从缓冲区读取</li>    <li>设置显式值</li></ul><blockquote>    <p>Viper 可以被认为是满足所有应用程序配置需求的注册表</p></blockquote><h2 id="Viper的安装"><a href="#Viper的安装" class="headerlink" title="Viper的安装"></a>Viper的安装</h2><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">go get -u -v github.com/spf13/viper</span><br></pre>            </td>        </tr>    </table></figure><h2 id="Viper使用实例"><a href="#Viper使用实例" class="headerlink" title="Viper使用实例"></a>Viper使用实例</h2><h3 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h3><p>一个好的配置系统对于默认值拥有良好的支持，其重要性不言而喻。在Viper中的默认值使用如下</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetDefault(<span class="string">`Name`</span>, <span class="string">`Payne`</span>)</span><br><span class="line">viper.SetDefault(<span class="string">`Age`</span>, <span class="number">20</span>)</span><br><span class="line">viper.SetDefault(<span class="string">`hobby`</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">`First hobby`</span>:  <span class="string">`sing`</span>,</span><br><span class="line"><span class="string">`Second hobby`</span>: <span class="string">`jump`</span>,</span><br><span class="line"><span class="string">`Third hobby`</span>:  <span class="string">`Rap`</span>,</span><br><span class="line"><span class="string">`fourth hobby`</span>: <span class="string">`Play Basketball`</span>,</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(viper.Get(<span class="string">`Name`</span>))</span><br><span class="line">fmt.Println(viper.Get(<span class="string">`Age`</span>))</span><br><span class="line">fmt.Println(viper.Get(<span class="string">`hobby`</span>))</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> viper.GetStringMapString(<span class="string">`hobby`</span>) &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><h3 id="覆盖设置"><a href="#覆盖设置" class="headerlink" title="覆盖设置"></a>覆盖设置</h3><p>这些可能来自命令行标志，也可能来自你自己的应用程序逻辑。</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.Set(<span class="string">"Verbose"</span>, <span class="literal">true</span>)</span><br><span class="line">viper.Set(<span class="string">"LogFile"</span>, LogFile)</span><br></pre>            </td>        </tr>    </table></figure><h3 id="注册和使用别名"><a href="#注册和使用别名" class="headerlink" title="注册和使用别名"></a>注册和使用别名</h3><p>别名允许多个键引用单个值</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.RegisterAlias(<span class="string">"loud"</span>, <span class="string">"Verbose"</span>)  <span class="comment">// 注册别名（此处loud和Verbose建立了别名）</span></span><br><span class="line"></span><br><span class="line">viper.Set(<span class="string">"verbose"</span>, <span class="literal">true</span>) <span class="comment">// 结果与下一行相同</span></span><br><span class="line">viper.Set(<span class="string">"loud"</span>, <span class="literal">true</span>)   <span class="comment">// 结果与前一行相同</span></span><br><span class="line"></span><br><span class="line">viper.GetBool(<span class="string">"loud"</span>) <span class="comment">// true</span></span><br><span class="line">viper.GetBool(<span class="string">"verbose"</span>) <span class="comment">// true</span></span><br></pre>            </td>        </tr>    </table></figure><h2 id="配置文件使用"><a href="#配置文件使用" class="headerlink" title="配置文件使用"></a>配置文件使用</h2><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>抽离统一化管理成为配置文件，将所有的配置写在文件中便于管理修改与编辑。Viper 支持 “json”, “toml”, “yaml”, “yml”, “properties”, “props”, “prop”, “hcl”, “tfvars”, “dotenv”, “env”, “ini” 属性文件。Viper 可以搜索多个路径，但目前单个 Viper 实例仅支持单个配置文件。Viper 不会默认任何配置搜索路径，将默认决定留给应用程序。不需要任何特定路径，但应至少提供一个需要配置文件的路径。以下是如何使用 Viper 搜索和读取配置文件的示例。</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.SetConfigFile(<span class="string">"./config.yaml"</span>) <span class="comment">// 指定配置文件路径</span></span><br><span class="line"></span><br><span class="line">viper.SetConfigName(<span class="string">"config"</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">viper.SetConfigType(<span class="string">"yaml"</span>) <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line"></span><br><span class="line">viper.AddConfigPath(<span class="string">"/etc/appname/"</span>)   <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"$HOME/.appname"</span>)  <span class="comment">// 多次调用以添加多个搜索路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"."</span>)               <span class="comment">// 还可以在工作目录中查找配置</span></span><br><span class="line"></span><br><span class="line">err := viper.ReadInConfig() <span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Fatal error config file: %s \n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件读取异常处理</span></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line"><span class="comment">// Config file not found; ignore error if desired</span></span><br><span class="line">log.Println(<span class="string">"no such config file"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Config file was found but another error was produced</span></span><br><span class="line">log.Println(<span class="string">"read config error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(err) <span class="comment">// 读取配置文件失败致命错误</span></span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p><strong>注意</strong>若采用<code>setConfigName</code>则只会使用第一个配置文件夹</p>    <p>推荐使用<code>SetConfigFile(&quot;path/file_name&quot;)</code> 来完成配置文件的载入</p></blockquote><h3 id="从io-Reader读取配置"><a href="#从io-Reader读取配置" class="headerlink" title="从io.Reader读取配置"></a>从io.Reader读取配置</h3><p>Viper预先定义了许多配置源，如文件、环境变量、标志和远程K/V存储，但也可以实现自己所需的配置源并将其提供给viper。</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">yamlConf</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigType(<span class="string">"yaml"</span>) </span><br><span class="line">ExampleYaml := []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">name: Payne</span></span><br><span class="line"><span class="string">Age: 18</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">viper.ReadConfig(bytes.NewBuffer(ExampleYaml))</span><br><span class="line">fmt.Println(viper.Get(<span class="string">"NAME"</span>))</span><br><span class="line">fmt.Println(viper.Get(<span class="string">"Age"</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jsonConf</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigType(<span class="string">`json`</span>)</span><br><span class="line"></span><br><span class="line">ExampleJSON := []<span class="keyword">byte</span>(<span class="string">`&#123;</span></span><br><span class="line"><span class="string"> "name": "payne",</span></span><br><span class="line"><span class="string"> "age": 21</span></span><br><span class="line"><span class="string">&#125;`</span>)</span><br><span class="line">viper.ReadConfig(bytes.NewBuffer(ExampleJSON))</span><br><span class="line">fmt.Println(viper.Get(<span class="string">"name"</span>))</span><br><span class="line">fmt.Println(viper.GetInt(<span class="string">"age"</span>))</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><h3 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h3><p>从配置文件中读取是很有用的，但有时你想存储在运行时所作的所有修改都比较繁琐。viper提供了相关功能</p><ul>    <li>WriteConfig - 将当前的<code>viper</code>配置写入预定义的路径并覆盖（如果存在的话）。如果没有预定义的路径，则报错。</li>    <li>SafeWriteConfig - 将当前的<code>viper</code>配置写入预定义的路径。如果没有预定义的路径，则报错。如果存在，将不会覆盖当前的配置文件。</li>    <li>WriteConfigAs - 将当前的<code>viper</code>配置写入给定的文件路径。将覆盖给定的文件(如果它存在的话)。</li>    <li>SafeWriteConfigAs - 将当前的<code>viper</code>配置写入给定的文件路径。不会覆盖给定的文件(如果它存在的话)。</li></ul><blockquote>    <p> 根据经验，标记为<code>safe</code>的所有方法都不会覆盖任何文件，而是直接创建（如果不存在），而默认行为是创建或截断。</p></blockquote><h3 id="监听配置文件"><a href="#监听配置文件" class="headerlink" title="监听配置文件"></a>监听配置文件</h3><p>Viper支持在运行时实时读取配置文件的功能。</p><p>需要重新启动服务器以使配置生效的日子已经一去不复返了，viper驱动的应用程序可以在运行时读取配置文件的更新，而不会错过任何消息。</p><p>只需告诉viper实例watchConfig。可选地，你可以为Viper提供一个回调函数，以便在每次发生更改时运行。</p><blockquote>    <p><strong>确保在调用<code>WatchConfig()</code>之前添加了所有的配置路径。</strong></p></blockquote><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 配置文件发生变更之后会调用的回调函数</span></span><br><span class="line">fmt.Println(<span class="string">"Config file changed:"</span>, e.Name)</span><br><span class="line">&#125;)</span><br></pre>            </td>        </tr>    </table></figure><p><strong>实例</strong></p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/fsnotify/fsnotify"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">viper.SetConfigFile(<span class="string">`./example/config.yaml`</span>)</span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line"><span class="comment">// Config file not found; ignore error if desired</span></span><br><span class="line">log.Println(<span class="string">"no such config file"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Config file was found but another error was produced</span></span><br><span class="line">log.Println(<span class="string">"read config error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(err) <span class="comment">// 读取配置文件失败致命错误</span></span><br><span class="line">&#125;</span><br><span class="line">viper.SetDefault(<span class="string">`a`</span>, <span class="string">`b`</span>)</span><br><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line"><span class="comment">// 配置文件发生变更之后会调用的回调函数</span></span><br><span class="line">fmt.Println(<span class="string">"Config file changed:"</span>, e.Name)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(viper.Get(<span class="string">`port`</span>))</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>Viper完全支持环境变量。以下几种方法进行对ENV协作:</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">// AllowEmptyEnv 告诉 Viper 将设置但为空的环境变量视为有效值，而不是回退。出于向后兼容性的原因，默认情况下这是错误的</span></span><br><span class="line">AllowEmptyEnv(allowEmptyEnv <span class="keyword">bool</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// AutomaticEnv 使 Viper 检查环境变量是否与任何现有键（配置、默认值或标志）匹配。如果找到匹配的环境变量，则将它们加载到 Viper 中</span></span><br><span class="line">AutomaticEnv()</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindEnv 将 Viper 键绑定到 ENV 变量。ENV 变量区分大小写。如果只提供了一个键，它将使用与键匹配的 env 键，大写。如果提供了更多参数，它们将表示应绑定到此键的环境变量名称，并将按指定顺序使用。当未提供 env 名称时，将在设置时使用 EnvPrefix。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BindEnv</span><span class="params">(input ...<span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SetEnvPrefix 定义了 ENVIRONMENT 变量将使用的前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetEnvPrefix</span><span class="params">(in <span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SetEnvKeyReplacer允许你使用strings.Replacer对象在一定程度上重写 Env 键</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetEnvKeyReplacer</span><span class="params">(r *strings.Replacer)</span></span></span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p><strong><em>使用ENV变量时，务必要意识到Viper将ENV变量视为区分大小写。</em></strong></p></blockquote><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">// case 1</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  viper.SetDefault(<span class="string">`Val`</span>, <span class="string">`Original`</span>)</span><br><span class="line">  viper.BindEnv(<span class="string">`Val`</span>)</span><br><span class="line">  fmt.Println(viper.Get(<span class="string">`Val`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通常是在应用程序之外完成的</span></span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">    os.Setenv(<span class="string">"VAL"</span>, <span class="string">"changed"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(i)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  viper.SetDefault(<span class="string">`Val`</span>, <span class="string">`Original`</span>)</span><br><span class="line">  viper.SetEnvPrefix(<span class="string">`CUSTOM`</span>) <span class="comment">// 将自动转为大写</span></span><br><span class="line">  viper.BindEnv(<span class="string">`Val`</span>)</span><br><span class="line">  fmt.Println(viper.Get(<span class="string">`Val`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通常是在应用程序之外完成的</span></span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">    os.Setenv(<span class="string">"CUSTOM_VAL"</span>, <span class="string">"changed"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(i)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>当第四次输出时<code>VAL</code>,将输出<code>change</code></p>    <p>小技巧：在使用环境变量的时候推荐采用全大写，避免混淆</p></blockquote><h2 id="使用viper获取值"><a href="#使用viper获取值" class="headerlink" title="使用viper获取值"></a>使用viper获取值</h2><blockquote>    <p>获取函数如下所示，具体作用见名思意</p></blockquote><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>            </td>            <td class="code">                <pre><span class="line">Get(key <span class="keyword">string</span>) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Sub(key <span class="keyword">string</span>) *Viper</span><br><span class="line">GetBool(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">GetDuration(key <span class="keyword">string</span>) time.Duration</span><br><span class="line">GetFloat64(key <span class="keyword">string</span>) <span class="keyword">float64</span></span><br><span class="line">GetInt(key <span class="keyword">string</span>) <span class="keyword">int</span></span><br><span class="line">GetInt32(key <span class="keyword">string</span>) <span class="keyword">int32</span></span><br><span class="line">GetInt64(key <span class="keyword">string</span>) <span class="keyword">int64</span></span><br><span class="line">GetIntSlice(key <span class="keyword">string</span>) []<span class="keyword">int</span></span><br><span class="line">GetSizeInBytes(key <span class="keyword">string</span>) <span class="keyword">uint</span></span><br><span class="line">GetString(key <span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">GetStringMap(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetStringMapString(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">GetStringMapStringSlice(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line">GetStringSlice(key <span class="keyword">string</span>) []<span class="keyword">string</span></span><br><span class="line">GetTime(key <span class="keyword">string</span>) time.Time</span><br><span class="line">GetUint(key <span class="keyword">string</span>) <span class="keyword">uint</span></span><br><span class="line">GetUint32(key <span class="keyword">string</span>) <span class="keyword">uint32</span></span><br><span class="line">GetUint64(key <span class="keyword">string</span>) <span class="keyword">uint64</span></span><br><span class="line">InConfig(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">IsSet(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">AllSettings() <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre>            </td>        </tr>    </table></figure><h3 id="访问嵌套的键"><a href="#访问嵌套的键" class="headerlink" title="访问嵌套的键"></a>访问嵌套的键</h3><p>访问器方法也接受深度嵌套键的格式化路径。例如，如果加载下面的JSON文件：</p><figure class="highlight json">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>            </td>            <td class="code">                <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"host"</span>: &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">5799</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"datastore"</span>: &#123;</span><br><span class="line">        <span class="attr">"metric"</span>: &#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">3099</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"warehouse"</span>: &#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"198.21.112.32"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">2112</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p>Viper可以通过传入<code>.</code>分隔的路径来访问嵌套字段：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">GetString(<span class="string">"datastore.datastore.warehouse.host"</span>) </span><br><span class="line"><span class="comment">// 返回 "198.21.112.32"</span></span><br></pre>            </td>        </tr>    </table></figure><p>这遵守上面建立的优先规则；搜索路径将遍历其余配置注册表，直到找到为止。(译注：因为Viper支持从多种配置来源，例如磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值，我们在查找一个配置的时候如果在当前配置源中没找到，就会继续从后续的配置源查找，直到找到为止。)</p><p>例如，在给定此配置文件的情况下，<code>datastore.metric.host</code>和<code>datastore.metric.port</code>均已定义（并且可以被覆盖）。如果另外在默认值中定义了<code>datastore.metric.protocol</code>，Viper也会找到它。然而，如果<code>datastore.metric</code>被直接赋值覆盖（被flag，环境变量，<code>set()</code>方法等等…），那么<code>datastore.metric</code>的所有子键都将变为未定义状态，它们被高优先级配置级别“遮蔽”（shadowed）了。最后，如果存在与分隔的键路径匹配的键，则返回其值。例如：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>            </td>            <td class="code">                <pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"datastore.metric.host"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"host"</span>: &#123;</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">5799</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"datastore"</span>: &#123;</span><br><span class="line">        <span class="string">"metric"</span>: &#123;</span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="string">"port"</span>: <span class="number">3099</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"warehouse"</span>: &#123;</span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"198.0.0.1"</span>,</span><br><span class="line">            <span class="string">"port"</span>: <span class="number">2112</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetString(<span class="string">"datastore.metric.host"</span>) </span><br><span class="line"><span class="comment">// 返回 "0.0.0.0"</span></span><br></pre>            </td>        </tr>    </table></figure><h3 id="提取子树"><a href="#提取子树" class="headerlink" title="提取子树"></a>提取子树</h3><p>从Viper中提取子树，<code>viper</code>实例现在代表了以下配置：</p><figure class="highlight yaml">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">cache1:</span></span><br><span class="line">    <span class="attr">max-items:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">item-size:</span> <span class="number">64</span></span><br><span class="line">  <span class="attr">cache2:</span></span><br><span class="line">    <span class="attr">max-items:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">item-size:</span> <span class="number">80</span></span><br></pre>            </td>        </tr>    </table></figure><p>执行后：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">subv := viper.Sub(<span class="string">"app.cache1"</span>)</span><br></pre>            </td>        </tr>    </table></figure><p><code>subv</code>现在就代表：</p><figure class="highlight yaml">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="attr">max-items:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">item-size:</span> <span class="number">64</span></span><br></pre>            </td>        </tr>    </table></figure><p>假设我们现在有这么一个函数：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCache</span><span class="params">(cfg *Viper)</span> *<span class="title">Cache</span></span> &#123;...&#125;</span><br></pre>            </td>        </tr>    </table></figure><p>它基于<code>subv</code>格式的配置信息创建缓存。现在，可以轻松地分别创建这两个缓存，如下所示：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line">cfg1 := viper.Sub(<span class="string">"app.cache1"</span>)</span><br><span class="line">cache1 := NewCache(cfg1)</span><br><span class="line"></span><br><span class="line">cfg2 := viper.Sub(<span class="string">"app.cache2"</span>)</span><br><span class="line">cache2 := NewCache(cfg2)</span><br></pre>            </td>        </tr>    </table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>你还可以选择将所有或特定的值解析到结构体、map等。</p><p>有两种方法可以做到这一点：</p><ul>    <li><code>Unmarshal(rawVal interface{}) : error</code></li>    <li><code>UnmarshalKey(key string, rawVal interface{}) : error</code></li></ul><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Port <span class="keyword">int</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">PathMap <span class="keyword">string</span> <span class="string">`mapstructure:"path_map"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">err := viper.Unmarshal(&amp;C)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"unable to decode into struct, %v"</span>, err)</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p>如果你想要解析那些键本身就包含<code>.</code>(默认的键分隔符）的配置，你需要修改分隔符：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>            </td>            <td class="code">                <pre><span class="line">v := viper.NewWithOptions(viper.KeyDelimiter(<span class="string">"::"</span>))</span><br><span class="line"></span><br><span class="line">v.SetDefault(<span class="string">"chart::values"</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"ingress"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">"annotations"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">"traefik.frontend.rule.type"</span>:                 <span class="string">"PathPrefix"</span>,</span><br><span class="line">            <span class="string">"traefik.ingress.kubernetes.io/ssl-redirect"</span>: <span class="string">"true"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Chart <span class="keyword">struct</span>&#123;</span><br><span class="line">        Values <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">v.Unmarshal(&amp;C)</span><br></pre>            </td>        </tr>    </table></figure><p>Viper还支持解析到嵌入的结构体：</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Example config:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">module:</span></span><br><span class="line"><span class="comment">    enabled: true</span></span><br><span class="line"><span class="comment">    token: 89h3f98hbwf987h3f98wenf89ehf</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Module <span class="keyword">struct</span> &#123;</span><br><span class="line">Enabled <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">moduleConfig <span class="string">`mapstructure:",squash"`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// moduleConfig could be in a module specific package</span></span><br><span class="line"><span class="keyword">type</span> moduleConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Token <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">err := viper.Unmarshal(&amp;C)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"unable to decode into struct, %v"</span>, err)</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p>Viper在后台使用<a href="https://github.com/mitchellh/mapstructure" target="_blank" rel="noopener">github.com/mitchellh/mapstructure</a>来解析值，其默认情况下使用<code>mapstructure</code>tag。</p><blockquote>    <p><strong>注意</strong> 当我们需要将viper读取的配置反序列到我们定义的结构体变量中时，一定要使用<code>mapstructure</code>tag！</p></blockquote><h3 id="序列化成字符串"><a href="#序列化成字符串" class="headerlink" title="序列化成字符串"></a>序列化成字符串</h3><p>你可能需要将viper中保存的所有设置序列化到一个字符串中，而不是将它们写入到一个文件中。你可以将自己喜欢的格式的序列化器与<code>AllSettings()</code>返回的配置一起使用。</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    yaml <span class="string">"gopkg.in/yaml.v2"</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">yamlStringSettings</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    c := viper.AllSettings()</span><br><span class="line">    bs, err := yaml.Marshal(c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"unable to marshal config to YAML: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(bs)</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><h2 id="远程Key-Value存储支持"><a href="#远程Key-Value存储支持" class="headerlink" title="远程Key/Value存储支持"></a>远程Key/Value存储支持</h2><p>在Viper中启用远程支持，需要在代码中匿名导入<code>viper/remote</code>这个包。</p><figure class="highlight haxe">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">import</span> <span class="literal">_</span> <span class="string">"github.com/spf13/viper/remote"</span></span><br></pre>            </td>        </tr>    </table></figure><p>Viper将读取从Key/Value存储（例如etcd或Consul）中的路径检索到的配置字符串（如<code>JSON</code>、<code>TOML</code>、<code>YAML</code>、<code>HCL</code>、<code>envfile</code>和<code>Java properties</code>格式）。这些值的优先级高于默认值，但是会被从磁盘、flag或环境变量检索到的配置值覆盖。（译注：也就是说Viper加载配置值的优先级为：磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值。）</p><p>Viper使用<a href="https://github.com/bketelsen/crypt" target="_blank" rel="noopener">crypt</a>从K/V存储中检索配置，这意味着如果你有正确的gpg密匙，你可以将配置值加密存储并自动解密。加密是可选的。</p><p>你可以将远程配置与本地配置结合使用，也可以独立使用。</p><p><code>crypt</code>有一个命令行助手，你可以使用它将配置放入K/V存储中。<code>crypt</code>默认使用在<a href="http://127.0.0.1:4001/" target="_blank" rel="noopener">http://127.0.0.1:4001</a>的etcd。</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">$ go get github.com/bketelsen/crypt/bin/crypt</span><br><span class="line">$ crypt <span class="built_in">set</span> -plaintext /config/hugo.json /Users/hugo/settings/config.json</span><br></pre>            </td>        </tr>    </table></figure><p>确认值已经设置：</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">$ crypt get -plaintext /config/hugo.json</span><br></pre>            </td>        </tr>    </table></figure><p>有关如何设置加密值或如何使用Consul的示例，请参见<code>crypt</code>文档。</p><h3 id="远程Key-Value存储示例-未加密"><a href="#远程Key-Value存储示例-未加密" class="headerlink" title="远程Key/Value存储示例-未加密"></a>远程Key/Value存储示例-未加密</h3><h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h4><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.AddRemoteProvider(<span class="string">"etcd"</span>, <span class="string">"http://127.0.0.1:4001"</span>,<span class="string">"/config/hugo.json"</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">"json"</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>            </td>        </tr>    </table></figure><h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h4><p>你需要 Consul Key/Value存储中设置一个Key保存包含所需配置的JSON值。例如，创建一个key<code>MY_CONSUL_KEY</code>将下面的值存入Consul key/value 存储：</p><figure class="highlight">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.AddRemoteProvider("consul", "localhost:8500", "MY_CONSUL_KEY")</span><br><span class="line">viper.SetConfigType("json") // 需要显示设置成json</span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>            </td>        </tr>    </table></figure><h4 id="Firestore"><a href="#Firestore" class="headerlink" title="Firestore"></a>Firestore</h4><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.AddRemoteProvider(<span class="string">"firestore"</span>, <span class="string">"google-cloud-project-id"</span>, <span class="string">"collection/document"</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">"json"</span>) <span class="comment">// 配置的格式: "json", "toml", "yaml", "yml"</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>            </td>        </tr>    </table></figure><p>当然，你也可以使用<code>SecureRemoteProvider</code>。</p><h3 id="远程Key-Value存储示例-加密"><a href="#远程Key-Value存储示例-加密" class="headerlink" title="远程Key/Value存储示例-加密"></a>远程Key/Value存储示例-加密</h3><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">viper.AddSecureRemoteProvider(<span class="string">"etcd"</span>,<span class="string">"http://127.0.0.1:4001"</span>,<span class="string">"/config/hugo.json"</span>,<span class="string">"/etc/secrets/mykeyring.gpg"</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">"json"</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>            </td>        </tr>    </table></figure><h3 id="监控etcd中的更改-未加密"><a href="#监控etcd中的更改-未加密" class="headerlink" title="监控etcd中的更改-未加密"></a>监控etcd中的更改-未加密</h3><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">// 或者你可以创建一个新的viper实例</span></span><br><span class="line"><span class="keyword">var</span> runtime_viper = viper.New()</span><br><span class="line"></span><br><span class="line">runtime_viper.AddRemoteProvider(<span class="string">"etcd"</span>, <span class="string">"http://127.0.0.1:4001"</span>, <span class="string">"/config/hugo.yml"</span>)</span><br><span class="line">runtime_viper.SetConfigType(<span class="string">"yaml"</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次从远程读取配置</span></span><br><span class="line">err := runtime_viper.ReadRemoteConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启一个单独的goroutine一直监控远端的变更</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">5</span>) <span class="comment">// 每次请求后延迟一下</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前只测试了etcd支持</span></span><br><span class="line">    err := runtime_viper.WatchRemoteConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Errorf(<span class="string">"unable to read remote config: %v"</span>, err)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新配置反序列化到我们运行时的配置结构体中。你还可以借助channel实现一个通知系统更改的信号</span></span><br><span class="line">    runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre>            </td>        </tr>    </table></figure><h2 id="基于Viper实现的环境变量动态链接"><a href="#基于Viper实现的环境变量动态链接" class="headerlink" title="基于Viper实现的环境变量动态链接"></a>基于Viper实现的环境变量动态链接</h2><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"github.com/spf13/viper"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DynamicEnv is a dynamic adapter that interoperates with environment variables</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DynamicEnv</span><span class="params">(envName, Prefix <span class="keyword">string</span>, defaultVal <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">   viper.SetDefault(envName, defaultVal)</span><br><span class="line">   viper.SetEnvPrefix(Prefix)</span><br><span class="line">   viper.BindEnv(envName)</span><br><span class="line">   <span class="keyword">return</span> viper.Get(envName)</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Viper简介&quot;&gt;&lt;a href=&quot;#Viper简介&quot; class=&quot;headerlink&quot; title=&quot;Viper简介&quot;&gt;&lt;/a&gt;Viper简介&lt;/h2&gt;
&lt;p&gt;Viper是一个完整的Go语言项目的配置解决方案。它可以处理所有类型的配置需求和格式，相关链接如下
      
    
    </summary>
    
    
      <category term="Go" scheme="https://paynewu.com/categories/Go/"/>
    
    
      <category term="Go" scheme="https://paynewu.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>go日志库之logrus</title>
    <link href="https://paynewu.com/1475843192.html"/>
    <id>https://paynewu.com/1475843192.html</id>
    <published>2021-09-24T22:59:56.000Z</published>
    <updated>2021-10-15T02:48:21.124Z</updated>
    
    <content type="html"><![CDATA[<p>无路是在开发、测试、亦或者调试有一好的日志，都会事半功倍。本节我来学习一下 go 语言明星日志库 logrus。相关链接如下所示<br><a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener" title="github">github</a>: <a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener">https://github.com/sirupsen/logrus</a><br><a href="https://pkg.go.dev/logur.dev/adapter/logrus" target="_blank" rel="noopener" title="pkg">pkg</a>： <a href="https://pkg.go.dev/logur.dev/adapter/logrus" target="_blank" rel="noopener">https://pkg.go.dev/logur.dev/adapter/logrus</a></p><h2 id="Logrus-简介"><a href="#Logrus-简介" class="headerlink" title="Logrus 简介"></a>Logrus 简介</h2><p>Logrus 是 Go 语言结构化的 logger，与标准库 logger 完全 API 兼容。</p><p>它有以下特点：</p><ul>    <li>完全兼容标准日志库，拥有七种日志级别：<code>Trace</code>, <code>Debug</code>, <code>Info</code>, <code>Warning</code>, <code>Error</code>, <code>Fatal</code>and <code>Panic</code>。</li>    <li>可选的日志输出格式，内置了两种日志格式 JSONFormater 和 TextFormatter，还可以自定义日志格式</li>    <li>Field 机制，通过 Filed 机制进行结构化的日志记录</li>    <li>可扩展的 Hook 机制，允许使用者通过 Hook 的方式将日志分发到任意地方，如本地文件系统，logstash，elasticsearch 或者 mq 等，或者通过 Hook 定义日志内容和格式等</li>    <li>线程安全</li></ul><h2 id="logrus-的安装"><a href="#logrus-的安装" class="headerlink" title="logrus 的安装"></a>logrus 的安装</h2><p>logrus 安装也非常的简单，直接使用<code>go get</code>即可，安装命令如下所示</p><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">go get -v -u logur.dev/adapter/logrus</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>其中</p>    <p><code>-v</code> 为显示包安装信息</p>    <p><code>-u</code> 为安装最新版</p></blockquote><h2 id="logrus-的使用"><a href="#logrus-的使用" class="headerlink" title="logrus 的使用"></a>logrus 的使用</h2><p>介绍的包的使用，或许可以从几个维度，初始化、基本使用、骚操作及拓展。源于包使用，但不限于包使用</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>logrus 相关于初始化的方面，一共有三种方式。基于<code>New()</code>、<code>Logger</code>、<code>不操作</code></p><h4 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h4><p>直接使用相对来说更便捷，更清亮。也是相对来说性能最高的，但不足也显而易言，那就是不能有更自由的操作了，如设置 log Level、Hook、Format 等等。</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>            </td>            <td class="code">                <pre><span class="line">logrus.Trace(<span class="string">"trace msg"</span>)</span><br><span class="line">logrus.Tracef(<span class="string">"trace %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Debug(<span class="string">"debug msg"</span>)</span><br><span class="line">logrus.Debugf(<span class="string">"debug %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Info(<span class="string">"info msg"</span>)</span><br><span class="line">logrus.Infof(<span class="string">"info %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Warn(<span class="string">"warn msg"</span>)</span><br><span class="line">logrus.Warnf(<span class="string">"warn %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Error(<span class="string">"error msg"</span>)</span><br><span class="line">logrus.Errorf(<span class="string">"error %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Fatal(<span class="string">"fatal msg"</span>)</span><br><span class="line">logrus.Fatalf(<span class="string">"fatal  %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Panic(<span class="string">"panic msg"</span>)</span><br><span class="line">logrus.Panicf(<span class="string">"panic  %v"</span>, <span class="string">"msg"</span>)</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>当然根据默认的规则会忽略掉一些输出信息</p></blockquote><h4 id="使用-New-初始化于定制"><a href="#使用-New-初始化于定制" class="headerlink" title="使用 New 初始化于定制"></a>使用 New 初始化于定制</h4><p>相对直接使用，使用 New 初始化，拥有更多的操作空间。</p><p>首先声明一个全局变量<code>log</code>，代码如下所示</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">var</span> log = logrus.New()</span><br></pre>            </td>        </tr>    </table></figure><p>常规情况下对于日志的定制主要在以下几个方面</p><ul>    <li>日志可见等级</li>    <li>日志格式配置</li>    <li>执行调用信息</li>    <li>日志另存为</li></ul><p><strong>日志可见等级</strong></p><blockquote>    <p>相关源码如下</p></blockquote><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// PanicLevel level, highest level of severity. Logs and then calls panic with the</span></span><br><span class="line"><span class="comment">// message passed to Debug, Info, ...</span></span><br><span class="line">PanicLevel Level = <span class="literal">iota</span></span><br><span class="line"><span class="comment">// FatalLevel level. Logs and then calls `logger.Exit(1)`. It will exit even if the</span></span><br><span class="line"><span class="comment">// logging level is set to Panic.</span></span><br><span class="line">FatalLevel</span><br><span class="line"><span class="comment">// ErrorLevel level. Logs. Used for errors that should definitely be noted.</span></span><br><span class="line"><span class="comment">// Commonly used for hooks to send errors to an error tracking service.</span></span><br><span class="line">ErrorLevel</span><br><span class="line"><span class="comment">// WarnLevel level. Non-critical entries that deserve eyes.</span></span><br><span class="line">WarnLevel</span><br><span class="line"><span class="comment">// InfoLevel level. General operational entries about what's going on inside the</span></span><br><span class="line"><span class="comment">// application.</span></span><br><span class="line">InfoLevel</span><br><span class="line"><span class="comment">// DebugLevel level. Usually only enabled when debugging. Very verbose logging.</span></span><br><span class="line">DebugLevel</span><br><span class="line"><span class="comment">// TraceLevel level. Designates finer-grained informational events than the Debug.</span></span><br><span class="line">TraceLevel</span><br><span class="line">)</span><br></pre>            </td>        </tr>    </table></figure><p>简而言之，登记越高（数字越大），显示的等级越全。如 6 显示所有的日志，0 只显示<code>Panic</code></p><p>设置可见等级之需要在<code>log.SetLevel()</code><em>（log 为<code>var log = logrus.New()</code>而来）</em>设置整形(6-0)即可。</p><p><strong>日志格式化配置</strong></p><p>日志格式化主要分为文本格式化、JSON 格式化、自定义格式化或第三方插件格式化</p><p>如下</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">// log.SetFormatter(&amp;logrus.TextFormatter&#123;</span></span><br><span class="line"><span class="comment">//DisableColors: false,</span></span><br><span class="line"><span class="comment">//FullTimestamp: true,</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"><span class="keyword">type</span> TextFormatter <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Set to true to bypass checking for a TTY before outputting colors.</span></span><br><span class="line">ForceColors <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Force disabling colors.</span></span><br><span class="line">DisableColors <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Force quoting of all values</span></span><br><span class="line">ForceQuote <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DisableQuote disables quoting for all values.</span></span><br><span class="line"><span class="comment">// DisableQuote will have a lower priority than ForceQuote.</span></span><br><span class="line"><span class="comment">// If both of them are set to true, quote will be forced on all values.</span></span><br><span class="line">DisableQuote <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Override coloring based on CLICOLOR and CLICOLOR_FORCE. - https://bixense.com/clicolors/</span></span><br><span class="line">EnvironmentOverrideColors <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable timestamp logging. useful when output is redirected to logging</span></span><br><span class="line"><span class="comment">// system that already adds timestamps.</span></span><br><span class="line">DisableTimestamp <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable logging the full timestamp when a TTY is attached instead of just</span></span><br><span class="line"><span class="comment">// the time passed since beginning of execution.</span></span><br><span class="line">FullTimestamp <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TimestampFormat to use for display when a full timestamp is printed.</span></span><br><span class="line"><span class="comment">// The format to use is the same than for time.Format or time.Parse from the standard</span></span><br><span class="line"><span class="comment">// library.</span></span><br><span class="line"><span class="comment">// The standard Library already provides a set of predefined format.</span></span><br><span class="line">TimestampFormat <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The fields are sorted by default for a consistent output. For applications</span></span><br><span class="line"><span class="comment">// that log extremely frequently and don't use the JSON formatter this may not</span></span><br><span class="line"><span class="comment">// be desired.</span></span><br><span class="line">DisableSorting <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The keys sorting function, when uninitialized it uses sort.Strings.</span></span><br><span class="line">SortingFunc <span class="function"><span class="keyword">func</span><span class="params">([]<span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Disables the truncation of the level text to 4 characters.</span></span><br><span class="line">DisableLevelTruncation <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PadLevelText Adds padding the level text so that all the levels output at the same length</span></span><br><span class="line"><span class="comment">// PadLevelText is a superset of the DisableLevelTruncation option</span></span><br><span class="line">PadLevelText <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QuoteEmptyFields will wrap empty fields in quotes if true</span></span><br><span class="line">QuoteEmptyFields <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether the logger's out is to a terminal</span></span><br><span class="line">isTerminal <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FieldMap allows users to customize the names of keys for default fields.</span></span><br><span class="line"><span class="comment">// As an example:</span></span><br><span class="line"><span class="comment">// formatter := &amp;TextFormatter&#123;</span></span><br><span class="line"><span class="comment">//     FieldMap: FieldMap&#123;</span></span><br><span class="line"><span class="comment">//         FieldKeyTime:  "@timestamp",</span></span><br><span class="line"><span class="comment">//         FieldKeyLevel: "@level",</span></span><br><span class="line"><span class="comment">//         FieldKeyMsg:   "@message"&#125;&#125;</span></span><br><span class="line">FieldMap FieldMap</span><br><span class="line"></span><br><span class="line"><span class="comment">// CallerPrettyfier can be set by the user to modify the content</span></span><br><span class="line"><span class="comment">// of the function and file keys in the data when ReportCaller is</span></span><br><span class="line"><span class="comment">// activated. If any of the returned value is the empty string the</span></span><br><span class="line"><span class="comment">// corresponding key will be removed from fields.</span></span><br><span class="line">CallerPrettyfier <span class="function"><span class="keyword">func</span><span class="params">(*runtime.Frame)</span> <span class="params">(function <span class="keyword">string</span>, file <span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line">terminalInitOnce sync.Once</span><br><span class="line"></span><br><span class="line"><span class="comment">// The max length of the level text, generated dynamically on init</span></span><br><span class="line">levelTextMaxLength <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p>格式 JSON 化</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">// log.SetFormatter(&amp;logrus.JSONFormatter&#123;&#125;)</span></span><br><span class="line"><span class="keyword">type</span> JSONFormatter <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// TimestampFormat sets the format used for marshaling timestamps.</span></span><br><span class="line"><span class="comment">// The format to use is the same than for time.Format or time.Parse from the standard</span></span><br><span class="line"><span class="comment">// library.</span></span><br><span class="line"><span class="comment">// The standard Library already provides a set of predefined format.</span></span><br><span class="line">TimestampFormat <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DisableTimestamp allows disabling automatic timestamps in output</span></span><br><span class="line">DisableTimestamp <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DisableHTMLEscape allows disabling html escaping in output</span></span><br><span class="line">DisableHTMLEscape <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DataKey allows users to put all the log entry parameters into a nested dictionary at a given key.</span></span><br><span class="line">DataKey <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FieldMap allows users to customize the names of keys for default fields.</span></span><br><span class="line"><span class="comment">// As an example:</span></span><br><span class="line"><span class="comment">// formatter := &amp;JSONFormatter&#123;</span></span><br><span class="line"><span class="comment">//   FieldMap: FieldMap&#123;</span></span><br><span class="line"><span class="comment">//  FieldKeyTime:  "@timestamp",</span></span><br><span class="line"><span class="comment">//  FieldKeyLevel: "@level",</span></span><br><span class="line"><span class="comment">//  FieldKeyMsg:   "@message",</span></span><br><span class="line"><span class="comment">//  FieldKeyFunc:  "@caller",</span></span><br><span class="line"><span class="comment">//    &#125;,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">FieldMap FieldMap</span><br><span class="line"></span><br><span class="line"><span class="comment">// CallerPrettyfier can be set by the user to modify the content</span></span><br><span class="line"><span class="comment">// of the function and file keys in the json data when ReportCaller is</span></span><br><span class="line"><span class="comment">// activated. If any of the returned value is the empty string the</span></span><br><span class="line"><span class="comment">// corresponding key will be removed from json fields.</span></span><br><span class="line">CallerPrettyfier <span class="function"><span class="keyword">func</span><span class="params">(*runtime.Frame)</span> <span class="params">(function <span class="keyword">string</span>, file <span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PrettyPrint will indent all json logs</span></span><br><span class="line">PrettyPrint <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p><a href="https://github.com/sirupsen/logrus#formatters" target="_blank" rel="noopener">https://github.com/sirupsen/logrus#formatters</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guu60plma8j60l00740to02.jpg" alt="image-20210926173746478"></p><p><strong>写入文件夹 SetOutput</strong></p><p>O_RDONLY：只读模式(read-only)</p><p>O_WRONLY：只写模式(write-only)</p><p>O_RDWR：读写模式(read-write)</p><p>O_APPEND：追加模式(append)</p><p>O_CREATE：文件不存在就创建(create a new file if none exists.)</p><p>O_EXCL：与 O_CREATE 一起用，构成一个新建文件的功能，它要求文件必须不存在(used with O_CREATE, file must not exist)</p><p>O_SYNC：同步方式打开，即不使用缓存，直接写入硬盘 O_TRUNC：打开并清空文件</p><p>示例代码如下</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">logDirPath := <span class="string">`log/`</span> + time.Now().Format(<span class="string">"2006-01-02"</span>)</span><br><span class="line">logFilePath := filepath.Join(logDirPath, time.Now().Format(<span class="string">`15`</span>))</span><br><span class="line">os.MkdirAll(logFilePath, <span class="number">0775</span>)</span><br><span class="line">file, err := os.OpenFile(logFilePath + <span class="string">`/`</span> + time.Now().Format(<span class="string">`04`</span>) + <span class="string">`.log`</span>, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(<span class="string">`open file error`</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.SetOutput(file)</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p><code>log.SetReportCaller()</code>: 显示调用关系，开启这个模式会增加性能开销(成本在 20% 到 40% 之间)。</p><p><strong>Hook</strong></p><p>logrus 通过实现 <code>Hook</code>接口扩展 hook 机制,可以根据需求将日志分发到任意的存储介质, 比如 es, mq 或者监控报警系统,及时获取异常日志。可以说极大的提高了日志系统的可扩展性。</p><figure class="highlight go">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">type</span> Hook <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// 定义哪些等级的日志触发 hook 机制</span></span><br><span class="line">Levels() []Level</span><br><span class="line">  <span class="comment">// hook 触发器的具体执行操作</span></span><br><span class="line">  <span class="comment">// 如果 Fire 执行失败,错误日志会重定向到标准错误流</span></span><br><span class="line">Fire(*Entry) error</span><br><span class="line">&#125;</span><br></pre>            </td>        </tr>    </table></figure><p>具体 Hook 示列可参考 <a href="https://github.com/sirupsen/logrus/blob/master/hooks/syslog/README.md" target="_blank" rel="noopener">https://github.com/sirupsen/logrus/blob/master/hooks/syslog/README.md</a></p><h2 id="referer"><a href="#referer" class="headerlink" title="referer"></a>referer</h2><p><a href="https://blog.csdn.net/wangzhezhilu001/article/details/95363789" target="_blank" rel="noopener">https://blog.csdn.net/wangzhezhilu001/article/details/95363789</a></p><p><a href="https://blog.csdn.net/sserf/article/details/103388133" target="_blank" rel="noopener">https://blog.csdn.net/sserf/article/details/103388133</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无路是在开发、测试、亦或者调试有一好的日志，都会事半功倍。本节我来学习一下 go 语言明星日志库 logrus。相关链接如下所示&lt;br&gt;&lt;a href=&quot;https://github.com/sirupsen/logrus&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="Go" scheme="https://paynewu.com/categories/Go/"/>
    
    
      <category term="Go" scheme="https://paynewu.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>js调试小笔记</title>
    <link href="https://paynewu.com/2341116369.html"/>
    <id>https://paynewu.com/2341116369.html</id>
    <published>2021-09-20T10:40:06.000Z</published>
    <updated>2021-10-15T02:48:21.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作键"><a href="#操作键" class="headerlink" title="操作键"></a>操作键</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guna6e3v4wj60bm01imwy02.jpg" alt="image-20210920184244435"></p><p><strong>resume/pause script execution</strong>: 恢复/暂停脚本执行</p><p><strong>step over next function call</strong>: 跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。</p><p><strong>step into next function call</strong>: 跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。</p><p><strong>step out of current function</strong>:跳出当前函数</p><p><strong>deactivate breakpoints</strong>:停用断点</p><p><strong>don‘t pause on exceptions</strong>:不暂停异常捕获</p><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guna86ju6bj6042016gld02.jpg" alt="image-20210920184426027"></p><p>变量监听</p><p>定位到关键值时加入Watch中实现实时监听，可根据监听内容变化预估此变化。</p><h2 id="BreakPoints"><a href="#BreakPoints" class="headerlink" title="BreakPoints"></a>BreakPoints</h2><p>所有断点列表，且自动按照执行顺序排序</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guna98mrchj60jm082mxp02.jpg" alt="image-20210920184528622"></p><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>该范围内所有变量的值</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunafyd9hhj60kc0mc40502.jpg" alt="image-20210920185155365"></p><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p><strong>一个 procedure（通常译作“过程”）吃进来一些参数，干一些事情，再吐出去一个返回值（或者什么也不吐）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunaocua19j60co02m3ye02.jpg" alt="image-20210920185959949"></p><h2 id="XHR-fetch-Breakpints"><a href="#XHR-fetch-Breakpints" class="headerlink" title="XHR/fetch Breakpints"></a>XHR/fetch Breakpints</h2><p>XHR/fetch Breakpints：请求断点（拦截），当发生符合要求的将触发定位到请求发送前一步</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunaonikx8j60kw03kaa902.jpg" alt="image-20210920190017589"></p><h2 id="DOM-Break-points"><a href="#DOM-Break-points" class="headerlink" title="DOM Break points"></a>DOM Break points</h2><p>当符合条件时触发定位到BOM</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunau1dh9bj60ay038q2y02.jpg" alt="image-20210920190528135"></p><h2 id="Global-Listeners"><a href="#Global-Listeners" class="headerlink" title="Global Listeners"></a>Global Listeners</h2><p>全局时间监听，包含所有时间，如点击、滑动等</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunavas820j60g80ect9a02.jpg" alt="image-20210920190640937"></p><h2 id="Event-Listener-Break-points"><a href="#Event-Listener-Break-points" class="headerlink" title="Event Listener Break points"></a>Event Listener Break points</h2><p>事件侦听器断点，监听所有事件与断点实现。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunawqe43pj60gw0nyjsk02.jpg" alt="image-20210920190803044"></p><h3 id="预览几种不同的breakpoint类型"><a href="#预览几种不同的breakpoint类型" class="headerlink" title="预览几种不同的breakpoint类型"></a>预览几种不同的breakpoint类型</h3><p>众人皆知的breakpoint类型是line-of-code。但是line-of-code型breakpoint有的时候没法设置（<strong>其实就是没法在代码左边点出一个绿点来</strong>），或者如果你正在使用一个大型的代码库。通过学习如何和何时使用这些不同类型的breakpoint debug，会大大节约你的时间。</p><div class="table-container">    <table>        <thead>            <tr>                <th>断点类型</th>                <th>当你想Pause的时候使用</th>            </tr>        </thead>        <tbody>            <tr>                <td>Line-of-code</td>                <td>代码具体某一行（<strong>其实就是没法在代码左边点出一个绿点来</strong>）</td>            </tr>            <tr>                <td>Conditional line-of-code</td>                <td>代码具体某一行，但是只有在一些条件为true时</td>            </tr>            <tr>                <td>DOM</td>                <td>在改变或者移除一个DOM节点或者它的DOM子节点时</td>            </tr>            <tr>                <td>XHR</td>                <td>当一个XHR URL包含一个string pattern</td>            </tr>            <tr>                <td>Event Listener</td>                <td>在运行了某个特定事件后的代码上，例如click事件触发</td>            </tr>            <tr>                <td>Exception</td>                <td>在抛出了一个caught或者uncaught的exception时</td>            </tr>            <tr>                <td>Function</td>                <td>当一个函数被调用时</td>            </tr>        </tbody>    </table></div><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>全局作用域 this = window </p><p>局部作用域 this = 调用者 </p><p>类的方法里面 this = 类自己</p><p><a href="https://blog.csdn.net/xc_zhou/article/details/106269239" target="_blank" rel="noopener">https://blog.csdn.net/xc_zhou/article/details/106269239</a></p><p><a href="https://blog.csdn.net/qq_27324983/article/details/102467199" target="_blank" rel="noopener">https://blog.csdn.net/qq_27324983/article/details/102467199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作键&quot;&gt;&lt;a href=&quot;#操作键&quot; class=&quot;headerlink&quot; title=&quot;操作键&quot;&gt;&lt;/a&gt;操作键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNgy1guna6e3v4wj60b
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Crawler" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/Crawler/"/>
    
      <category term="JavaScript" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/Crawler/JavaScript/"/>
    
      <category term="技巧" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/Crawler/JavaScript/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="JS" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/Crawler/JavaScript/%E6%8A%80%E5%B7%A7/JS/"/>
    
    
      <category term="爬虫" scheme="https://paynewu.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Crawler" scheme="https://paynewu.com/tags/Crawler/"/>
    
      <category term="Web Spider" scheme="https://paynewu.com/tags/Web-Spider/"/>
    
      <category term="数据采集" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
      <category term="JS" scheme="https://paynewu.com/tags/JS/"/>
    
      <category term="Chrome" scheme="https://paynewu.com/tags/Chrome/"/>
    
      <category term="JavaScript" scheme="https://paynewu.com/tags/JavaScript/"/>
    
      <category term="技巧" scheme="https://paynewu.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化与内存管理</title>
    <link href="https://paynewu.com/4026155221.html"/>
    <id>https://paynewu.com/4026155221.html</id>
    <published>2021-09-12T10:33:27.000Z</published>
    <updated>2021-10-15T01:56:58.264Z</updated>
    
    <content type="html"><![CDATA[<p>redis的持久化方式有两种，一种是RDB持久化，一种是AOF持久化。</p><h1 id="RDB快照（snapshot）"><a href="#RDB快照（snapshot）" class="headerlink" title="RDB快照（snapshot）"></a>RDB快照（snapshot）</h1><p>redis把数据以快照的方式保存在磁盘上。默认的情况下，redis将数据保存在文件名为dump.rdb的二进制文件中。</p><p>redis在运行时，会把内存中的数据快照保存到磁盘上，在redis重启时，会从rdb文件中读取数据还原redis数据库的状态。</p><p>rdb是自动默认开启的，但并没有开启触发规则。</p><h2 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h2><p>RDB的触发可分为两大类，一类是自动触发，一类是手动触发。</p><p>自动触发</p><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p>当数据操作满足一定的规则，自动触发。详细规则如下</p><blockquote>    <p>默认开启rdb，但没有配置规则，若需要使用或配置则需要在配置文件中将注释放开<br>    <figure class="highlight shell">        <table>            <tr>                <td class="gutter">                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>                </td>                <td class="code">                    <pre><span class="line"><span class="meta">#</span><span class="bash"> RDB自动持久化规则</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当 900 秒内有至少有 1 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当 300 秒内有至少有 10 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当 60 秒内有至少有 10000 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta">#</span><span class="bash"> RDB持久化文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据持久化文件存储目录</span></span><br><span class="line">dir /var/lib/redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> bgsave发生错误时是否停止写入，通常为yes</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> rdb文件是否使用压缩格式</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否对rdb文件进行校验和检验，通常为yes</span></span><br><span class="line">rdbchecksum yes</span><br></pre>                </td>            </tr>        </table>    </figure>    </p></blockquote><h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><h4 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h4><p>在客户端执行save命令，会触发一次保存快照。save命令是同步命令，在save执行时，会占用主进程，导致redis其他命令无法使用。在数据量过大时，可能会导致redis反应变慢。</p><h4 id="bgsave命令"><a href="#bgsave命令" class="headerlink" title="bgsave命令"></a>bgsave命令</h4><p>bgsave命令是异步操作，执行bgsave命令保存快照，可以在生成快照的同时，依然可以正常处理其他命令。bgsave子进程是由主线程fock生成的，它不影响主进程的执行，同时还可以共享主进程的数据</p><h4 id="save和bgsave对比"><a href="#save和bgsave对比" class="headerlink" title="save和bgsave对比"></a>save和bgsave对比</h4><div class="table-container">    <table>        <thead>            <tr>                <th>命令</th>                <th>save</th>                <th>bgsave</th>            </tr>        </thead>        <tbody>            <tr>                <td>IO类型</td>                <td>同步</td>                <td>异步</td>            </tr>            <tr>                <td>是否阻塞redis</td>                <td>是</td>                <td>是(在生成子进程时有短暂阻塞，速度很快，基本没有影响)</td>            </tr>            <tr>                <td>时间复杂度</td>                <td>O(n)</td>                <td>O(n)</td>            </tr>            <tr>                <td>优点</td>                <td>不消耗额外内存</td>                <td>不阻塞客户端</td>            </tr>            <tr>                <td>缺点</td>                <td>阻塞客户端命令</td>                <td>需要fork子进程，消耗内存</td>            </tr>        </tbody>    </table></div><h3 id="关闭RDB"><a href="#关闭RDB" class="headerlink" title="关闭RDB"></a>关闭RDB</h3><p>虽然这种方式可能不需要，但若需要关闭rdb的时候，在redis-shell中只需要执行即可</p><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">config set save ""</span><br></pre>            </td>        </tr>    </table></figure><p>当然也可以在配置文件中将 <code>save &quot;&quot;</code> 注释打开，也可以。</p><h1 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h1><blockquote>    <p>默认情况下，Redis 异步转储磁盘上的数据集。RDB模式在很多应用场景中已经足够好了，但是 Redis 进程的问题或断电可能会导致几分钟的写入丢失（取决于配置的保存点）。 Append Only File 是另一种持久性模式，可提供更好的持久性。<br>例如，使用默认的数据 fsync 策略（见后面的配置文件）Redis 可能会在服务器断电等戏剧性事件中丢失一秒钟的写入，或者如果 Redis 进程本身发生问题，则会丢失一次写入，但是操作系统仍然正常运行。可以同时启用 AOF 和 RDB 持久化。如果在启动时启用了 AOF，Redis 将加载 AOF，即具有更好持久性保证的文件。</p></blockquote><p>AOF是通过将修改的每一条指令写入一个记录文件件appendonly.aof中(先写入os cache，每隔一段时间 fsync到磁盘)。这样子的话，在redis重启时，可以通过读取指令来重新写入数据达到重建数据库的目的。</p><h2 id="开启AOF"><a href="#开启AOF" class="headerlink" title="开启AOF"></a>开启AOF</h2><p>可以通过修改配置文件来打开AOF功能与命令，配置文件中如下：</p><blockquote>    <p>在配置文件中将 <code>appendonly yes</code>注释打开即可<br>    <figure class="highlight shell">        <table>            <tr>                <td class="gutter">                    <pre><span class="line">1</span><br></pre>                </td>                <td class="code">                    <pre><span class="line">appendonly yes</span><br></pre>                </td>            </tr>        </table>    </figure><br>命令<br>    <figure class="highlight shell">        <table>            <tr>                <td class="gutter">                    <pre><span class="line">1</span><br></pre>                </td>                <td class="code">                    <pre><span class="line">config set appendonly yes</span><br></pre>                </td>            </tr>        </table>    </figure>    </p>    <h2 id="AOF保存策略"><a href="#AOF保存策略" class="headerlink" title="AOF保存策略"></a>AOF保存策略</h2></blockquote><ul>    <li>appendfsync always：每次有新命令追加到 AOF 文件时就执行一次 fsync ，非常慢，也非常安全。</li>    <li>appendfsync everysec：每秒 fsync 一次，足够快，并且在故障时只会丢失 1 秒钟的数据。</li>    <li>appendfsync no：从不 fsync ，将数据交给操作系统来处理。更快，也更不安全的选择。<blockquote>            <p> 推荐（也就是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p>            <h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2>        </blockquote>    </li></ul><p>由于AOF不断的将命令追加到文件的末尾，因此随着命令的不断增加，AOF文件的体积会变的越来越大。</p><p>例如执行INCR命令执行了1000次，在AOF内会生成1000个操作命令。但实际上来说，只需要SET到当前值的命令就可以存储了，前面的999次INCR都是无意义的。</p><blockquote>    <p>实际上可能不止这一种多余的废操作，因此Redis可以对AOF文件进行重写，会把命令进行精简整合成一个新的AOF文件，新的文件里包含生成当前数据的最少命令。</p></blockquote><p>执行AOF重写的方式也有两种，一种是命令，一种是配置文件</p><h3 id="配置文件配置aof重写"><a href="#配置文件配置aof重写" class="headerlink" title="配置文件配置aof重写"></a>配置文件配置aof重写</h3><blockquote>    <p>默认开启重写，但需要先开始aof<br>    <figure class="highlight shell">        <table>            <tr>                <td class="gutter">                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>                </td>                <td class="code">                    <pre><span class="line"><span class="meta">#</span><span class="bash"> 当前大小大于指定的百分比触发重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF 文件指定最小大小</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre>                </td>            </tr>        </table>    </figure><br>将此基本大小与当前大小进行比较。如果当前大小大于指定的百分比，则触发重写。此外，您还需要为要重写的 AOF 文件指定最小大小，这对于避免重写 AOF 文件（即使达到百分比增加但仍然很小）很有用。指定百分比为零以禁用自动 AOF 重写功能。</p>    <h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3></blockquote><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">bgrewriteaof</span><br></pre>            </td>        </tr>    </table></figure><h1 id="RDB-与-AOF对比"><a href="#RDB-与-AOF对比" class="headerlink" title="RDB 与 AOF对比"></a>RDB 与 AOF对比</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p><strong>优点</strong></p><ul>    <li>文件紧凑，很适合进行数据备份和容灾恢复</li>    <li>恢复大量数据时RDB速度快</li></ul><p><strong>缺点</strong></p><ul>    <li>数据量越大，二进制保存到磁盘会耗时越久</li>    <li>遇见意外的情况下，如宕机等，可能导致未持久化的数据完全丢失<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2>    </li></ul><p><strong>优点</strong></p><ul>    <li>可以使用不同的fsync策略，在默认的每秒fsync下，最多丢失1s的数据</li>    <li>AOF的持久化记录是文件追加，保存速度快</li>    <li>存储的是操作命令，AOF文件易读，可以轻易的进行文件分析</li></ul><p><strong>缺点</strong></p><ul>    <li>文件体积较RDB大</li>    <li>重启时恢复数据速度较慢</li></ul><div class="table-container">    <table>        <thead>            <tr>                <th>类型</th>                <th>RDB</th>                <th>AOF</th>            </tr>        </thead>        <tbody>            <tr>                <td>启动优先级</td>                <td>低</td>                <td>高</td>            </tr>            <tr>                <td>体积</td>                <td>小</td>                <td>大</td>            </tr>            <tr>                <td>宕机恢复速度</td>                <td>快</td>                <td>慢</td>            </tr>            <tr>                <td>数据安全性</td>                <td>可能丢失数据</td>                <td>每秒fsync最多丢失1s数据</td>            </tr>        </tbody>    </table></div><h2 id="是rdb还是aof？"><a href="#是rdb还是aof？" class="headerlink" title="是rdb还是aof？"></a>是rdb还是aof？</h2><p>使用可以根据需要来自行选择，如果对数据丢失不敏感的，使用rdb即可。当然在生产环境使用时，可以两种方式都启用。rdb文件可以用来做备份，aof文件来保证数据的安全性</p><h2 id="RDB与AOF混用"><a href="#RDB与AOF混用" class="headerlink" title="RDB与AOF混用"></a>RDB与AOF混用</h2><blockquote>    <p>必须先开启aof</p></blockquote><pre><code>在redis4.0之后，出现了一个新的持久化选项——混合持久化。    可以通过以下配置开启混合持久化</code></pre><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="meta">#</span><span class="bash"> 在配置文件中设置</span></span><br><span class="line">aof‐use‐rdb‐preamble yes</span><br></pre>            </td>        </tr>    </table></figure><p>开启混合持久化后，AOF在重写时，不是单纯的把命令写入AOF文件，而是把重写这一刻之前的内存数据做RDB快照处理，在重写之后的还是继续使用AOF命令的形式保存。这样aof文件里就有历史的RDB快照和增量的AOF命令。<br> 我们知道，RDB文件的恢复速度比AOF快的多，因此这种混合的模式，在redis重启的时候能大大提升效率。</p><h1 id="Redis淘汰机制"><a href="#Redis淘汰机制" class="headerlink" title="Redis淘汰机制"></a>Redis淘汰机制</h1><p>将内存使用限制设置为指定的字节数。当达到内存限制时，Redis 将尝试根据选择的驱逐策略删除键。</p><p>MAXMEMORY 策略：</p><blockquote>    <p>当达到 maxmemory 时，Redis 将如何选择要删除的内容。可以从以下行为中选择一项</p></blockquote><p>noeviction：默认禁止驱逐数据。内存不够使用时，对申请内存的命令报错。</p><p>volatile-lru：从设置了过期时间的数据集中淘汰最近没使用的数据。</p><p>volatile-ttl：从设置了过期时间的数据集中淘汰即将要过期的数据。</p><p>volatile-random：从设置了过期时间的数据中随机淘汰数据。</p><p>allkeys-lru：淘汰最近没使用的数据。</p><p>allkeys-random：随机淘汰数据。</p><blockquote>    <p>注意：使用上述任何一种策略，当没有合适的键用于驱逐时，Redis 将在需要更多内存的写操作时返回错误。这些通常是创建新密钥、添加数据或修改现有密钥的命令。一些示例是：SET、INCR、HSET、LPUSH、SUNIONSTORE、SORT（由于 STORE 参数）和 EXEC（如果事务包括任何需要内存的命令）。</p></blockquote><p>如果 Redis 无法根据策略删除键，或者如果策略设置为“noeviction”，Redis 将开始对会使用更多内存的命令（如 SET、LPUSH 等）回复错误信息，并将继续回复像 GET 这样的只读命令。简而言之…如果附加了副本，建议为 maxmemory 设置一个下限，以便系统上有一些空闲 RAM 用于副本输出缓冲区（但如果策略是“noeviction”，则不需要这样做）</p><p>警告：如果您将副本附加到启用了 maxmemory 的实例，则从使用的内存计数中减去提供副本所需的输出缓冲区的大小，以便网络问题重新同步不会触发密钥被逐出的循环，并且在将副本的输出缓冲区填满，删除键的 DEL 触发删除更多键，依此类推，直到数据库完全清空</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;redis的持久化方式有两种，一种是RDB持久化，一种是AOF持久化。&lt;/p&gt;
&lt;h1 id=&quot;RDB快照（snapshot）&quot;&gt;&lt;a href=&quot;#RDB快照（snapshot）&quot; class=&quot;headerlink&quot; title=&quot;RDB快照（snapshot）&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://paynewu.com/categories/Redis/"/>
    
      <category term="redis" scheme="https://paynewu.com/categories/Redis/redis/"/>
    
    
      <category term="Redis" scheme="https://paynewu.com/tags/Redis/"/>
    
      <category term="redis" scheme="https://paynewu.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎</title>
    <link href="https://paynewu.com/1336292242.html"/>
    <id>https://paynewu.com/1336292242.html</id>
    <published>2021-09-09T18:21:20.000Z</published>
    <updated>2021-10-15T01:56:58.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote>    <p>Server version: 8.0.20 Source distribution</p></blockquote><p><code>SHOW ENGINES</code></p><div class="table-container">    <table>        <thead>            <tr>                <th style="text-align:left">Engine</th>                <th style="text-align:left">Support</th>                <th style="text-align:left">Comment</th>                <th style="text-align:left">Transactions</th>                <th style="text-align:left">XA</th>                <th style="text-align:left">Savepoints</th>                <th></th>            </tr>        </thead>        <tbody>            <tr>                <td style="text-align:left">FEDERATED</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">Federated MySQL storage engine</td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"><em>NULL</em></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">MEMORY</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">Hash based, stored in memory, useful for temporary…</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">InnoDB</td>                <td style="text-align:left">DEFAULT</td>                <td style="text-align:left">Supports transactions, row-level locking, and fore…</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">YES</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">PERFORMANCE_SCHEMA</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">Performance Schema</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">MyISAM</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">MyISAM storage engine</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">MRG_MYISAM</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">Collection of identical MyISAM tables</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">BLACKHOLE</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">/dev/null storage engine (anything you write to it…</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">CSV</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">CSV storage engine</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td></td>            </tr>            <tr>                <td style="text-align:left">ARCHIVE</td>                <td style="text-align:left">YES</td>                <td style="text-align:left">Archive storage engine</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">NO</td>            </tr>        </tbody>    </table></div><p>MySQL中常用的存储引擎有InnoDB、MyISAM、MEMORY、ARCHIVE和CSV</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h3><p>支持事务<br>锁级别为行锁，比MyISAM存储引擎支持更高的并发<br>能够通过二进制日志恢复数据<br>支持外键操作<br>在索引存储上，索引和数据存储在同一个文件中，默认按照B+Tree组织索引的结构。同时，主键索引的叶子节点存储完整的数据记录，非主键索引的叶子节点存储主键的值。</p><p><strong>在MySQL 5.6版本之后，默认使用InnoDB存储引擎。</strong></p><p><strong>在MySQL 5.6版本之后，InnoDB存储引擎支持全文索引。</strong></p><h3 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h3><p>不支持事务。</p><p>锁级别为表锁，在要求高并发的场景下不太适用。</p><p>如果数据文件损坏，难以恢复数据。</p><p>不支持外键。</p><p>在索引存储上，索引文件与数据文件分离。</p><p>支持全文索引。</p><h3 id="MEMORY存储引擎"><a href="#MEMORY存储引擎" class="headerlink" title="MEMORY存储引擎"></a>MEMORY存储引擎</h3><p>不支持TEXT和BLOB数据类型，只支持固定长度的字符串类型。例如，在MEMORY存储引擎中，会将VARCHAR类型自动转化成CHAR类型。</p><p>锁级别为表锁，在高并发场景下会成为瓶颈。</p><p>通常会被作为临时表使用，存储查询数据时产生中间结果。</p><p>数据存储在内存中，重启服务器后数据会丢失。如果是需要持久化的数据，不适合存储在MEMORY存储引擎的数据表中。</p><h3 id="ARCHIVE存储引擎"><a href="#ARCHIVE存储引擎" class="headerlink" title="ARCHIVE存储引擎"></a>ARCHIVE存储引擎</h3><p>支持数据压缩，在存储数据前会对数据进行压缩处理，适合存储归档的数据。</p><p>只支持数据的插入和查询，插入数据后，不能对数据进行更改和删除，而只能查询。</p><p>只支持在整数自增类型的字段上添加索引。</p><h3 id="CSV存储引擎"><a href="#CSV存储引擎" class="headerlink" title="CSV存储引擎"></a>CSV存储引擎</h3><p>主要存储的是csv格式的文本数据，可以直接打开存储的文件进行编辑。</p><p>可以将MySQL中某个数据表中的数据直接导出为csv文件，也可以将.csv文件导入数据表中。</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
    &lt;p&gt;Server version: 8.0.20 Source distribution&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;SHOW ENGINES&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;table-containe
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引</title>
    <link href="https://paynewu.com/1135024868.html"/>
    <id>https://paynewu.com/1135024868.html</id>
    <published>2021-09-09T11:26:41.000Z</published>
    <updated>2021-10-15T01:56:58.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><blockquote>    <p>索引：可简单理解为一本书的目录的集合</p></blockquote><p>​ 索引（在MySQL中也叫<strong>键（key）</strong>）是存储引擎用于快速查找记录的一种数据结构。索引对于性能拥有至关重要的地位。尤其是当表中的数据量越来越大，索引对于性能的影响愈发重要。反之不恰当的索引对于性能也会急剧下降。</p><p><strong>索引是一把双刃剑</strong></p><h2 id="索引的优与劣"><a href="#索引的优与劣" class="headerlink" title="索引的优与劣"></a>索引的优与劣</h2><h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ul>    <li>大大减少扫描数据量</li>    <li>帮助服务器避免排序和临时表</li>    <li>将随机I/O变为顺序I/O</li>    <li>可以大大加快数据的检索速度，这也是创建索引的最主要的用途。</li>    <li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul><h3 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h3><p><strong>时间方面</strong></p><p>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</p><p><strong>空间方面</strong></p><p>索引需要占物理空间，如果要建立聚簇索引，那么需要的空间就会更大</p><p>当对表中的数据进行增加、删除、修改的时索引也要动态的维护，这样就降低了数据的维护速度。</p><p><strong>应用方面</strong></p><p>锁竞争</p><h2 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h2><p>索引有很多种类，可以为不同场景提供更好的性能。索引在存储引擎层实现的，故并没有<strong>统一的</strong>索引标准</p><blockquote>    <p>不同的存储引擎的索引工作方式也不尽相同</p></blockquote><h3 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h3><h4 id="物理顺序与键值的索引逻辑顺序关系"><a href="#物理顺序与键值的索引逻辑顺序关系" class="headerlink" title="物理顺序与键值的索引逻辑顺序关系"></a>物理顺序与键值的索引逻辑顺序关系</h4><p>聚集索引：数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有<strong>一个聚集索引</strong>。</p><p>非聚集索引：逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有<strong>多个非聚集索引</strong>。</p><p><strong>聚簇索引与非聚簇索引异同</strong></p><p>在 InnoDB 里，索引B+ Tree的叶子节点存储了整行数据的是主键索引，也被称之为聚簇索引，即将数据存储与索引放到了一块，找到索引也就找到了数据。</p><p>而索引B+ Tree的叶子节点存储了主键的值的是非主键索引，也被称之为非聚簇索引、二级索引。</p><p>聚簇索引与非聚簇索引的区别：</p><ul>    <li>非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键（行号）</li>    <li>对于InnoDB来说，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为<strong>回表</strong>。第一次索引一般是顺序IO，回表的操作属于随机IO。需要回表的次数越多，即随机IO次数越多，我们就越倾向于使用全表扫描 。</li>    <li>通常情况下， 主键索引（聚簇索引）查询只会查一次，而非主键索引（非聚簇索引）需要回表查询多次。当然，如果是覆盖索引的话，查一次即可</li></ul><p>注意：MyISAM无论主键索引还是二级索引都是非聚簇索引，而InnoDB的主键索引是聚簇索引，二级索引是非聚簇索引。我们自己建的索引基本都是非聚簇索引。</p><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><blockquote>    <p>这里所描述的是索引存储时保存的形式</p></blockquote><ul>    <li>        <p>B Tree索引（B-Tree或B+Tree索引）BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中（二叉树），每次查询都是从树的入口root开始，依次遍历node，获取leaf。这是<strong>MySQL里默认和最常用的索引类型。</strong></p>    </li>    <li>        <p>Hash索引，HASH索引可以一次定位，不需要像树形索引那样逐层查找,因此具有极高的效率。但是，这种高效是有条件的，即只在“=”和“in”条件下高效，对于范围查询、排序及组合索引仍然效率不高</p>    </li>    <li>        <p>full index 全文索引，其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引</p>    </li>    <li>        <p>R-Tree索引。RTREE在MySQL很少使用，<strong>仅支持geometry数据类型</strong>，相对于BTREE，RTREE的优势在于范围查找。</p>    </li></ul><h5 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B Tree 索引"></a>B Tree 索引</h5><p>通常意味着所有的值都是顺序存储的，并且每个叶子页到根的距离相同</p><p><strong>适用范围</strong></p><p>全键值、键值范围、前缀查找</p><p><strong>应用场景</strong></p><p>全值匹配、匹配最左前缀、匹配列前缀、匹配范围值、精确匹配某一列并范围匹配另一列、值访问索引的查询</p><p><strong>限制</strong></p><ul>    <li>必须为最左开始，否则不使用索引</li>    <li>无法跳跃查询索引中的列</li>    <li>范围查询影响，右边的无法使用索引</li></ul><h5 id="Hash-索引"><a href="#Hash-索引" class="headerlink" title="Hash 索引"></a>Hash 索引</h5><p>基于Hash表实现，只有<strong>精确匹配</strong>索引<strong>所有列</strong>的查询<strong>才有效</strong></p><p>对于每一行数据存储引擎都会对所有的索引计算一个hash code。hash code 较小的值，并且不同键值的行计算出来的hash code页不一样。hash索引将所有的hash code存储在索引中，同时在hash table中保存指向每个数据的指针</p><p><strong>hash索引查询步骤</strong></p><ol>    <li>先计算数据的hashcode，并使用该值查找对应的记录指针</li>    <li>查找在hash table中的指向</li>    <li>值比较确认</li></ol><p><strong>特点</strong></p><p>因为索引自身只需要存储对应的hash code，所有索引结构<strong>非常紧凑</strong>，这也让hash索引查找速度非常快</p><p><strong>限制</strong></p><ul>    <li>        <p>hash index 只包含hash值和行指针，而不存储字段值，所以不能使用hash index来避免读取行。同时访问内存中的数据速度非常快，所以对于大部分情况下这一点对于性能影响并不明显</p>    </li>    <li>        <p>hash index数据并不是按照索引顺序存储的，所以无法用于排序</p>    </li>    <li>hash index 也不支持部分索引列匹配查找</li>    <li>hash index 只支持<strong>等值比较</strong>查询，包括=、IN、&lt;=、=&gt;。也不支持任何范围查询</li>    <li>hash index访问数据非常快，除非有很多hash冲突。同时hash冲突很多，索引维护代价较高昂</li></ul><h5 id="R-Tree索引"><a href="#R-Tree索引" class="headerlink" title="R Tree索引"></a>R Tree索引</h5><blockquote>    <p>空间数据索引</p></blockquote><p>这类索引无需前缀查询，空间索引将会从所有的维度来进行索引数据</p><h5 id="full-index"><a href="#full-index" class="headerlink" title="full index"></a>full index</h5><blockquote>    <p>全文索引</p></blockquote><p>全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而非比较索引中的值</p><p>全文搜索和其他几种类型的索引的匹配方式完全不同，如停用词、词干、复数、布尔搜索等</p><p>全文索引更类似于搜索引擎所做的事情，而不是简单的where条件匹配，而是MATCH AGAINST操作。支持Char、VARCHAR、TEXT类型、自然语言搜索、bool搜索</p><h4 id="应用层次"><a href="#应用层次" class="headerlink" title="应用层次"></a>应用层次</h4><ul>    <li>主键索引： 加速查询 + 列值唯一（不可以有null）+ 表中只有一个</li>    <li>        <p>普通索引： 仅加速查询</p>    </li>    <li>        <p>唯一索引: 加速查询 + 列值唯一（可以有null）</p>    </li>    <li>        <p>复合索引: 多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</p>    </li>    <li>全文索引： 对文本的内容进行分词，进行搜索</li>    <li>覆盖索引: select的数据列只用从索引中就能够取得，不必读取数据行，换句话说查询列要被所建的索引覆盖</li></ul><blockquote>    <p>索引合并，使用多个单列索引组合搜索</p></blockquote><h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2><p>正确的创建索引是实现高性能查询的基础</p><h3 id="建索引的原则"><a href="#建索引的原则" class="headerlink" title="建索引的原则"></a>建索引的原则</h3><blockquote>    <p>为了使索引的使用效率更高，在创建索引时，必须考虑</p>    <ul>        <li>            <p><strong>在哪些字段上创建索引</strong></p>        </li>        <li>            <p><strong>创建什么类型的索引</strong>。</p>        </li>        <li>            <p><strong>索引设计原则</strong></p>        </li>    </ul></blockquote><ol>    <li>必须要有主键,如果没有可以做为主键条件的列,创建无关列</li>    <li>经常做为where条件列 order by group by join on, distinct 的条件(业务:产品功能+用户行为)</li>    <li>最好使用唯一值多的列作为索引,如果索引列重复值较多,可以考虑使用联合索引</li>    <li>列值长度较长的索引列,建议使用前缀索引.</li>    <li>降低索引条目,一方面不要创建没用索引,不常使用的索引清理,percona toolkit(xxxxx)</li>    <li>索引维护要避开业务繁忙期</li></ol><p><strong>CREATE TABLE创建索引</strong></p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>            </td>            <td class="code">                <pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;ch_people_msg&#96; ( </span><br><span class="line">  &#96;p_id&#96;  SERIAL NOT NULL AUTO_INCREMENT COMMENT &#39;用户id&#39; , </span><br><span class="line">  &#96;p_uic&#96; CHAR(18) NOT NULL COMMENT &#39;用户身份证&#39;,</span><br><span class="line">  &#96;p_nickname&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户昵称&#39;, </span><br><span class="line">  &#96;p_gender&#96; ENUM(&#39;m&#39;,&#39;f&#39;, &#39;n&#39;) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;用户性别&#39;, </span><br><span class="line">  &#96;p_age&#96; TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#39;用户年龄&#39;, </span><br><span class="line">  &#96;p_pnum&#96; CHAR(11) NOT NULL COMMENT &#39;用户电话&#39;, </span><br><span class="line">  &#96;p_address&#96; VARCHAR(100) NOT NULL COMMENT &#39;用户地址&#39;, </span><br><span class="line">  &#96;p_email&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户邮箱&#39;, </span><br><span class="line">  &#96;p_add_time&#96; TIMESTAMP NOT NULL DEFAULT NOW() COMMENT &#39;统计用户时间&#39;,</span><br><span class="line">   PRIMARY KEY (&#96;p_id&#96;),</span><br><span class="line">   UNIQUE KEY &#96;p_uic&#96;(&#96;p_uic&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARSET&#x3D;utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#x3D; &#39;中国成员信息表&#39;;</span><br></pre>            </td>        </tr>    </table></figure><p><strong>ALTER TABLE命令去增加索引</strong></p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br></pre>            </td>        </tr>    </table></figure><h3 id="创建索引时注意点"><a href="#创建索引时注意点" class="headerlink" title="创建索引时注意点"></a>创建索引时注意点</h3><ul>    <li>非空字段：应该指定列为NOT NULL，除非你想存储NULL。在mysql中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值；</li>    <li>取值离散大的字段：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；</li>    <li>索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。</li></ul><h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><p><strong>函数导致的索引失效</strong></p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">SELECT * FROM &#96;user&#96; WHERE DATE(create_time) &#x3D; &#39;2012-11-03&#39;;</span><br></pre>            </td>        </tr>    </table></figure><p><strong>运算符导致的索引失效</strong></p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 如果对列进行了（+，-，*，&#x2F;，!）运算, 那么都将不会走索引。</span><br><span class="line">select p_id from xxx where p_id + 10 &#x3D; 12</span><br></pre>            </td>        </tr>    </table></figure><p><strong>OR引起的索引失效</strong></p><blockquote>    <p>OR导致索引是在特定情况下的，并不是所有的OR都是使索引失效</p>    <p>如果OR连接的是同一个字段，那么索引不会失效，反之索引失效。</p></blockquote><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">SELECT * FROM &#96;xxx&#96; WHERE &#96;name&#96; &#x3D; &#39;xxx&#39; OR age &#x3D; 20;</span><br></pre>            </td>        </tr>    </table></figure><p><strong>模糊搜索导致的索引失效</strong></p><blockquote>    <p>当模糊查询<code>%</code>在匹配字段前缀不走索引，放在后面才会走索引。</p></blockquote><p><strong>使用!= 或者 &lt;&gt; 导致索引失效</strong></p><p><strong>类型不一致导致的索引失效</strong></p><p><strong>NOT IN、NOT EXISTS导致索引失效</strong></p><p><strong>避免索引失效总结</strong></p><ol>    <li>尽量采用确认的、顺序的、逐步的</li>    <li>模糊查询<code>%</code>不在前</li>    <li>索引列不运算</li></ol><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>自5.6引入了索引下推优化。默认开启</p><blockquote>    <p>可使用<code>SET optimizer_switch = ‘index_condition_pushdown=off;</code>将其关闭。</p></blockquote><ul>    <li>有了索引下推优化，可以在<strong>减少回表次数</strong></li>    <li>在InnoDB中只针对二级索引有效</li></ul><p>官方文档中给的例子和解释如下：</p><p>在 people_table中有一个二级索引(zipcode，lastname，firstname)，查询是SELECT * FROM people WHERE zipcode=’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’;</p><ul>    <li>如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件</li>    <li>如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。</li></ul><h2 id="默认使用B-Tree的优势"><a href="#默认使用B-Tree的优势" class="headerlink" title="默认使用B+Tree的优势"></a>默认使用B+Tree的优势</h2><blockquote>    <p>为什么索引结构默认使用B+Tree，而不是B-Tree，Hash，二叉树，红黑树？</p></blockquote><p>B-tree：</p><ul>    <li>B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B(B-)树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对<code>IO读写次数就降低</code>了。</li>    <li>由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在<code>区间查询</code>的情况，所以通常B+树用于数据库索引。</li></ul><p>Hash：</p><ul>    <li>        <p>虽然可以快速定位，但是没有顺序，IO复杂度高；</p>    </li>    <li>        <p>基于Hash表实现，只有Memory存储引擎显式支持哈希索引 ；</p>    </li>    <li>适合<strong>等值查询</strong>，如=、in()、&lt;=&gt;，不支持范围查询 ；</li>    <li>因为不是按照索引值顺序存储的，就不能像B+Tree索引一样利用索引完成排序 ；</li>    <li>Hash索引在查询等值时非常快 ；</li>    <li>因为Hash索引始终索引的<strong>所有列的全部内容</strong>，所以不支持部分索引列的匹配查找 ；</li>    <li>如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题 。</li></ul><p>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且IO代价高。</p><p>红黑树：树的高度随着数据量增加而增加，IO代价高。</p><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p>《高性能MySQL》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是索引&quot;&gt;&lt;a href=&quot;#什么是索引&quot; class=&quot;headerlink&quot; title=&quot;什么是索引&quot;&gt;&lt;/a&gt;什么是索引&lt;/h2&gt;
&lt;blockquote&gt;
    &lt;p&gt;索引：可简单理解为一本书的目录的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的安装与配置</title>
    <link href="https://paynewu.com/1439700985.html"/>
    <id>https://paynewu.com/1439700985.html</id>
    <published>2021-09-04T15:29:41.000Z</published>
    <updated>2021-10-15T01:56:58.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux平台下MySQL的安装"><a href="#Linux平台下MySQL的安装" class="headerlink" title="Linux平台下MySQL的安装"></a>Linux平台下MySQL的安装</h2><p>LSB Version: :core-4.1-amd64:core-4.1-noarch</p><p>Distributor ID: CentOS</p><p>Description: CentOS Linux release 7.9.2009 (Core)</p><p>Release: 7.9.2009</p><p>Codename: Core</p><p>ldd (GNU libc) :2.17</p><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><h4 id="删除mariadb"><a href="#删除mariadb" class="headerlink" title="删除mariadb"></a>删除mariadb</h4><figure class="highlight routeros">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">yum <span class="builtin-name">remove</span> -y mariadb-libs.x86_64</span><br></pre>            </td>        </tr>    </table></figure><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><h4 id="安装rpm"><a href="#安装rpm" class="headerlink" title="安装rpm"></a>安装rpm</h4><p>进入MySQL的<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">yum仓库</a>，如下图所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu50sz34orj616r0u079a02.jpg" alt="image-20210904233814767"></p><p>官方rpm包: <a href="https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</a></p><p>清华镜像rpm包: <a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql80-community-el7/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql80-community-el7/mysql80-community-release-el7-3.noarch.rpm</a></p><figure class="highlight llvm">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">wget -<span class="keyword">c</span> rpm地址</span><br></pre>            </td>        </tr>    </table></figure><h4 id="安装yum仓库文件"><a href="#安装yum仓库文件" class="headerlink" title="安装yum仓库文件"></a>安装yum仓库文件</h4><blockquote>    <p>可使用rpm -ivh或是yum localinstall 去安装，两者实质是一样的</p></blockquote><figure class="highlight css">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">mysql80-community-release-el7-3</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre>            </td>        </tr>    </table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">yum install -y  mysql-community-server</span><br></pre>            </td>        </tr>    </table></figure><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu5lm5v8toj61aq06wdik02.jpg" alt="image-20210905113818649"></p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 下</span></span><br><span class="line">wget -c https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line">tar zf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br></pre>            </td>        </tr>    </table></figure><h4 id="建立用户与授权"><a href="#建立用户与授权" class="headerlink" title="建立用户与授权"></a>建立用户与授权</h4><figure class="highlight awk">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">useradd mysql &amp;&amp; usermod -s <span class="regexp">/sbin/</span>nologin mysql</span><br><span class="line">mkdir -p <span class="regexp">/opt/</span>databases<span class="regexp">/mysql &amp;&amp; chown -R mysql. /</span>opt<span class="regexp">/databases/my</span>sql</span><br></pre>            </td>        </tr>    </table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="line"><span class="comment"># changes to the binary log between backups.</span></span><br><span class="line"><span class="comment"># log_bin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span><br><span class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></span><br><span class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="comment"># join_buffer_size = 128M</span></span><br><span class="line"><span class="comment"># sort_buffer_size = 2M</span></span><br><span class="line"><span class="comment"># read_rnd_buffer_size = 2M</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_general_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">secure_file_priv=<span class="string">''</span></span><br><span class="line">user = mysql</span><br><span class="line">port=8916</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre>            </td>        </tr>    </table></figure><h3 id="获取初始root密码"><a href="#获取初始root密码" class="headerlink" title="获取初始root密码"></a>获取初始root密码</h3><figure class="highlight lasso">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">grep <span class="string">'temporary password'</span> /<span class="built_in">var</span>/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span></span><br></pre>            </td>        </tr>    </table></figure><h3 id="创建用户与授权"><a href="#创建用户与授权" class="headerlink" title="创建用户与授权"></a>创建用户与授权</h3><p>根据业务、公司情况创建管理员，若公司成员较少，管理员管全局。反之管单库</p><blockquote>    <ol>        <li>root不允许远程连接</li>        <li>修改root密码</li>    </ol></blockquote><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>授权</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line">远程登录还需要授权远程登录Mysql默认不允许远程登录，我们需要设置关闭selinux或者防火墙，不关防火墙就开放3306端口；</span><br><span class="line"><span class="comment">#放开3306端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux平台下MySQL的安装&quot;&gt;&lt;a href=&quot;#Linux平台下MySQL的安装&quot; class=&quot;headerlink&quot; title=&quot;Linux平台下MySQL的安装&quot;&gt;&lt;/a&gt;Linux平台下MySQL的安装&lt;/h2&gt;
&lt;p&gt;LSB Version: 
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ssh结合actions实现源码分离部署</title>
    <link href="https://paynewu.com/3847153486.html"/>
    <id>https://paynewu.com/3847153486.html</id>
    <published>2021-09-04T05:37:41.000Z</published>
    <updated>2021-10-15T01:56:58.267Z</updated>
    
    <content type="html"><![CDATA[<p>本博客采用github page实现部署，但由于github的性质无法有效的进行分离快速部署。</p><p>必须博客展示页，必须以username.github.io结尾，这样感觉不是很方便</p><p>部署前基本流程为，部署github page -&gt; 手动上传源码到对应仓库。</p><p>那么我们是否可以直接push到私有源码仓库，出发二段部署从实现自动的博客部署，此时我们只需要关心与维护自己的博客源码，再也不用刻意的关注部署了</p><p>说干就干</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><h3 id="ssh部署"><a href="#ssh部署" class="headerlink" title="ssh部署"></a>ssh部署</h3><figure class="highlight excel">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"your email"</span></span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>若配置了全局的git email 可使用<code>ssh-keygen -t rsa -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</code></p></blockquote><p>完成后将在本地<code>$HOME/.ssh</code>中生成私钥<code>id_rsa</code>,与公钥，<code>id_rsa.pub</code>,将公钥上传到github上，进入<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a> ，登陆自己的github账号。如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4h329orfj60tf0a775a02.jpg" alt="image-20210904121559885"></p><p>New SSH Key</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4h3tn133j60lp0bomxg02.jpg" alt="image-20210904121643113"></p><p>其中title为自定义，key为<code>id_rsa.pub</code>中内容。完成后点击Add SSH key即可</p><h2 id="建立私有博客源码仓库"><a href="#建立私有博客源码仓库" class="headerlink" title="建立私有博客源码仓库"></a>建立私有博客源码仓库</h2><p>github上创建一个私有仓库即可，详细流程不在过多赘述</p><h2 id="创建Actions"><a href="#创建Actions" class="headerlink" title="创建Actions"></a>创建Actions</h2><h3 id="配置Actions-secrets"><a href="#配置Actions-secrets" class="headerlink" title="配置Actions secrets"></a>配置Actions secrets</h3><p>Settings -&gt; Deploy keys -&gt; New repository secrets，如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4ezhkflmj61mk0u0aeq02.jpg" alt="image-20210904110320916"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4f2jcgr5j61sv0u00v602.jpg" alt="image-20210904110617453"></p><p>将上面生成的id_rsa，复制到私钥中。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4hbf985wj6172072wf202.jpg" alt="image-20210904122401191"></p><p>将workflow增加到源码文件中，拉取到本地。</p><p>deploy.yml如下</p><figure class="highlight yaml">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run. Triggers the workflow on push or pull request</span></span><br><span class="line"><span class="comment"># events but only for the master branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called "build"</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Env</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$<span class="template-variable">&#123;&#123; secrets.DEPLOY_KEY &#125;&#125;</span>"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span><span class="comment"># DEPLOY_KEY 为secret name</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="comment"># setup deploy git account</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"your user name"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"your email"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">find</span> <span class="string">.</span> <span class="string">-type</span> <span class="string">f</span> <span class="string">-name</span> <span class="string">*.log</span> <span class="string">-delete</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre>            </td>        </tr>    </table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上便是github page 源码保护分析详细过程，其基本原理就是将ssh部署的工作交给自动构建的Actions。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本博客采用github page实现部署，但由于github的性质无法有效的进行分离快速部署。&lt;/p&gt;
&lt;p&gt;必须博客展示页，必须以username.github.io结尾，这样感觉不是很方便&lt;/p&gt;
&lt;p&gt;部署前基本流程为，部署github page -&amp;gt; 手动上传
      
    
    </summary>
    
    
      <category term="blog" scheme="https://paynewu.com/categories/blog/"/>
    
      <category term="ssh" scheme="https://paynewu.com/categories/blog/ssh/"/>
    
      <category term="actions" scheme="https://paynewu.com/categories/blog/ssh/actions/"/>
    
    
      <category term="ssh" scheme="https://paynewu.com/tags/ssh/"/>
    
      <category term="actions" scheme="https://paynewu.com/tags/actions/"/>
    
      <category term="blog" scheme="https://paynewu.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>MySQL优化</title>
    <link href="https://paynewu.com/507251385.html"/>
    <id>https://paynewu.com/507251385.html</id>
    <published>2021-09-03T16:27:43.000Z</published>
    <updated>2021-10-15T01:56:58.263Z</updated>
    
    <content type="html"><![CDATA[<p>mysql优化老生常谈了，但却也离不开业务。脱离业务来讲mysql可以从两个方面进行优化</p><ul>    <li>        <p>安全优化（业务持续性）</p>    </li>    <li>        <p>性能优化（业务高效性）</p>    </li></ul><p>所谓优化，个人认为有两大需要提前知道的<strong>稳定性和业务可持续性通常比性能更重要</strong>，<strong>优化是由业务需要驱使的</strong></p><p>通常优化也与操作系统、运行环境等息息相关，结合业务适合自己才是最好的。</p><h2 id="安全优化"><a href="#安全优化" class="headerlink" title="安全优化"></a>安全优化</h2><p>足够强度的安全是保证业务正常运行的基石，安全优化通常可以以系统安全，应用程序安全，与sql安全。</p><h3 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h3><blockquote>    <p>具体详情请参考Linux系统安全</p></blockquote><p><strong>物理安全</strong></p><p>物理环境安全，小微企业一般使用云服务器，大型企业一般有多个机房，实现异地多活</p><p><strong>防火墙策略、关闭或切换不必要的端口</strong></p><blockquote>    <ol>        <li>修改常见应用默认端口，22、3306、27017、6379等</li>    </ol></blockquote><p><strong>账户安全</strong></p><p>用户连接权限、用户权限</p><blockquote>    <ol>        <li>禁止root远程</li>        <li>账号管理（密码强度、用户权限）</li>    </ol></blockquote><p><strong>源代码文件目录权限管理</strong></p><p><strong>备份</strong>等</p><h3 id="MySQL安全"><a href="#MySQL安全" class="headerlink" title="MySQL安全"></a>MySQL安全</h3><blockquote>    <p><a href="https://www.cnblogs.com/doublexi/p/9732274.html" target="_blank" rel="noopener">https://www.cnblogs.com/doublexi/p/9732274.html</a></p></blockquote><p>MySQL版本的选择</p><p>MySQL的命名机制使用由3个数字和一个后缀组成的版本号。例如，像mysql-5.0.9-beta的版本号这样解释：</p><p>数字(5)是主版本号，描述了文件格式。所有版本5的发行都有相同的文件格式。</p><p>数字(0)是发行级别。主版本号和发行级别组合到一起便构成了发行序列号。</p><p>数字(9)是在此发行系列的版本号，随每个新分发版递增。通常你需要已经选择的发行(release)的最新版本(版本)。</p><p>每次更新后，版本字符串的最后一个数字递增。如果相对于前一个版本增加了新功能或有微小的不兼容性，字符串的第二个数字递增。如果文件格式改变，第一个数字递增。</p><p>后缀显示发行的稳定性级别。通过一系列后缀显示如何改进稳定性。可能的后缀有：</p><p><strong>·alpha表明发行包含大量未被彻底测试的新代码</strong>。已知的缺陷应该在新闻小节被记录。请参见附录D：MySQL变更史。在大多数alpha版本中也有新的命令和扩展。alpha版本也可能有主要代码更改等开发。但我们在发布前一定对其进行测试。</p><p><strong>·beta意味着该版本功能是完整的</strong>，并且所有的新代码被测试了，没有增加重要的新特征，应该没有已知的缺陷。当alpha版本至少一个月没有出现报导的致命漏洞，并且没有计划增加导致已经实施的功能不稳定的新功能时，版本则从alpha版变为beta版。</p><p>在以后的beta版、发布版或产品发布中，所有API、外部可视结构和SQL命令列均不再更改。</p><p><strong>·rc是发布代表</strong>；是一个发行了一段时间的beta版本，看起来应该运行正常。只增加了很小的修复。(发布代表即以前所称的gamma版)</p><p>·如果没有后缀，这意味着该版本已经在很多地方运行一段时间了，而且没有非平台特定的缺陷报告。只增加了关键漏洞修复修复。这就是我们称为一个产品(稳定)或“通用”版本的东西。</p><p>MySQL的命名机制于其它产品稍有不同。一般情况，我们可以很放心地使用已经投放市场两周而没有被相同发布系列的新版本所代替的版本。</p><ul>    <li>稳定不要最新：最新GA版超过10个月或比最新GA版晚3、4个版本的GA版。</li>    <li>前后无大BUG：要选择前后几个月没有<strong>大的BUG修复的版本</strong>，而不是大量<strong>修复BUG的集中版本</strong>。</li>    <li>向后少更新：最好向后较长时间没有更新发布的版本，<strong>若目标版本修复的BUG巨多，向前推进一个版本号。</strong></li>    <li>兼容开发：验证功能瓶颈、性能瓶颈，要考虑开发人员开发程序使用的版本是否兼容你选的版本</li>    <li>测试先行：作为内部开发测试数据库环境，跑大概3-6个月的时间。</li>    <li>非核心先行：优先企业非核心业务采用新版本的数据库GA版本软件。</li></ul><h4 id="用户安全"><a href="#用户安全" class="headerlink" title="用户安全"></a>用户安全</h4><p><strong>禁止root账户远程访问</strong></p><p>root权限太高，拥有安全隐患，root只允许本地登陆</p><p><strong>mysql用户登录shell为nologin</strong></p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">usermod -s /sbin/nologin mysql</span><br></pre>            </td>        </tr>    </table></figure><p><strong>对MySQL运行用户降权，以普通用户身份运行MySQL</strong></p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br></pre>            </td>        </tr>    </table></figure><p><strong>删除匿名账号和空口令账号</strong></p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 删除空密码用户</span></span><br><span class="line">delete from mysql.user <span class="built_in">where</span> user is NULL or Password IS NULL;</span><br></pre>            </td>        </tr>    </table></figure><p><strong>用户与权限管理</strong></p><p>遵循权限最小化原则。</p><h4 id="连接安全"><a href="#连接安全" class="headerlink" title="连接安全"></a>连接安全</h4><p>修改默认端口</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">port=8912</span><br></pre>            </td>        </tr>    </table></figure><h4 id="容灾"><a href="#容灾" class="headerlink" title="容灾"></a>容灾</h4><p>在误删除数据的情况下，可以通过二进制日志恢复到某个时间点</p><h4 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h4><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 查看bin log（sql）</span><br><span class="line">show variables like &#39;%log_bin%&#39;</span><br></pre>            </td>        </tr>    </table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu5zib6numj60p40ag75902.jpg" alt="image-20210905193857001"></p><p>修改MySQL配置文件my.cnf，加入如下两行</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">server-id = 1</span><br><span class="line">log_bin = /data/mysql/mysql-bin</span><br></pre>            </td>        </tr>    </table></figure><p>重启服务</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">效果 sql与索引优化&gt;Schema设计&gt;数据库实例优化&gt;文件系统&gt;操作系统&gt;硬件优化</span><br><span class="line">成本 硬件优化&gt;操作系统&gt;文件系统&gt;数据库实例优化&gt;Schema设计&gt;sql与索引优化</span><br></pre>            </td>        </tr>    </table></figure><h3 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h3><h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">真实的硬件（PC Server）: DELL  R系列 ，华为，浪潮，HP，联想</span><br><span class="line">云产品：ECS、数据库RDS、DRDS</span><br><span class="line">IBM 小型机 P6  570  595   P7 720  750 780     P8</span><br></pre>            </td>        </tr>    </table></figure><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><blockquote>    <p>根据业务场景选择</p></blockquote><p>OLTP \ OLAP<br>IO密集型：线上系统，OLTP主要是IO密集型的业务，高并发<br>CPU密集型：数据分析数据处理，OLAP，cpu密集型的，需要CPU高计算能力（i系列，IBM power系列）<br>CPU密集型： I 系列的，主频很高，核心少<br>IO密集型： E系列（至强），主频相对低，核心数量多</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>建议2-3倍cpu核心数量 （ECC）</p><h4 id="磁盘选择"><a href="#磁盘选择" class="headerlink" title="磁盘选择"></a>磁盘选择</h4><p>SATA-III SAS Fc SSD（sata） pci-e ssd Flash<br>主机 RAID卡的BBU(Battery Backup Unit)关闭</p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>根据存储数据种类的不同，选择不同的存储设备<br>配置合理的RAID级别(raid5、raid10、热备盘)<br>r0 :条带化 ,性能高<br>r1 :镜像，安全<br>r5 :校验+条带化，安全较高+性能较高（读），写性能较低 （适合于读多写少）<br>r10：安全+性能都很高，最少四块盘，浪费一半的空间（高IO要求）</p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p>1、硬件买好的（单卡单口）<br>2、网卡绑定（bonding），交换机堆叠<br>以上问题，提前规避掉。</p><h3 id="操作系统优化"><a href="#操作系统优化" class="headerlink" title="操作系统优化"></a>操作系统优化</h3><h4 id="Swap调整"><a href="#Swap调整" class="headerlink" title="Swap调整"></a>Swap调整</h4><figure class="highlight vim">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">echo</span> <span class="number">0</span> &gt;/proc/sys/<span class="keyword">vm</span>/swappiness的内容改成<span class="number">0</span>（临时），</span><br><span class="line">/etc/sysctl.<span class="keyword">conf</span></span><br><span class="line">上添加<span class="keyword">vm</span>.swappiness=<span class="number">0</span>（永久）</span><br><span class="line">sysctl -<span class="keyword">p</span></span><br></pre>            </td>        </tr>    </table></figure><p>此参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。<br>当然，这个参数只能减少使用swap的概率，并不能避免Linux使用swap。</p><p>修改MySQL的配置参数innodb_flush_method，开启O_DIRECT模式<br>这种情况下，InnoDB的buffer pool会直接绕过文件系统cache来访问磁盘，但是redo log依旧会使用文件系统cache。值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多</p><h4 id="IO调度策略"><a href="#IO调度策略" class="headerlink" title="IO调度策略"></a>IO调度策略</h4><p>raid、no lvm、ext4或xfs、ssd、IO调度策略</p><h3 id="数据库实例优化"><a href="#数据库实例优化" class="headerlink" title="数据库实例优化"></a>数据库实例优化</h3><p>查看系统配置</p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">show variables like “xxx”</span><br></pre>            </td>        </tr>    </table></figure><p>查看状态</p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span></span><br></pre>            </td>        </tr>    </table></figure><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><h5 id="max-connect-errors"><a href="#max-connect-errors" class="headerlink" title="max_connect_errors"></a><strong>max_connect_errors</strong></h5><p> max_connect_errors是一个mysql中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码等情况，当超过指定次数，mysql服务器将禁连接请求，</p><p>直到mysql服务器重启或通过flush hosts命令清空此host的相关信息 max_connect_errors的值与性能并无太大关系。</p><figure class="highlight jboss-cli">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">修改<span class="string">/etc/my.cnf</span>文件，在[mysqld]下面添加如下内容</span><br><span class="line">max_<span class="keyword">connect</span>_errors=1000</span><br></pre>            </td>        </tr>    </table></figure><h5 id="Max-connections"><a href="#Max-connections" class="headerlink" title="Max_connections"></a><strong>Max_connections</strong></h5><blockquote>    <p>Mysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值</p></blockquote><p>开启数据库时,临时设置一个比较大的测试值, 观察show status like ‘Max_used_connections’;变化<br>如果max_used_connections跟max_connections相同,那么就是max_connections设置过低或者超过服务器的负载上限了，低于10%则设置过大. </p><h5 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a><strong>back_log</strong></h5><blockquote>    <p> mysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。<br>back_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它</p></blockquote><p><u><em>判断依据</em></u></p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">show full processlist</span><br></pre>            </td>        </tr>    </table></figure><p>发现大量的待连接进程时，就需要加大back_log或者加大max_connections的值</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># vim /etc/my.cnf </span></span><br><span class="line">back_log=xxx</span><br></pre>            </td>        </tr>    </table></figure><h5 id="wait-timeout"><a href="#wait-timeout" class="headerlink" title="wait_timeout"></a><strong>wait_timeout</strong></h5><blockquote>    <p>wait_timeout：指的是mysql在关闭一个非交互的连接之前所要等待的秒数，如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用。长连接的应用，为了不去反复的回收和分配资源，降低额外的开销。</p></blockquote><p>如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低</p><p><strong>interactive_timeout</strong></p><blockquote>    <p> 如果设置太大，容易造成连接打开时间过长造成资源损耗，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低</p></blockquote><p>关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为7200</p><h5 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h5><p>key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度</p><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>            </td>            <td class="code">                <pre><span class="line">临时表的创建有关（多表链接、子查询中、union）</span><br><span class="line">     在有以上查询语句出现的时候，需要创建临时表，用完之后会被丢弃</span><br><span class="line">     临时表有两种创建方式：</span><br><span class="line">                        内存中-------&gt;key_buffer_size</span><br><span class="line">                        磁盘上-------&gt;ibdata1(<span class="number">5.6</span>)</span><br><span class="line">                                      ibtmp1 (<span class="number">5.7</span>）</span><br></pre>            </td>        </tr>    </table></figure><h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><h5 id="sort-buffer-size"><a href="#sort-buffer-size" class="headerlink" title="sort_buffer_size"></a>sort_buffer_size</h5><blockquote>    <p>每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速</p></blockquote><figure class="highlight crystal">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line">ORDER BY </span><br><span class="line">GROUP BY</span><br><span class="line">distinct</span><br><span class="line"><span class="class"><span class="keyword">union</span></span></span><br></pre>            </td>        </tr>    </table></figure><p>Sort_Buffer_Size并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。<br>列如：500个连接将会消耗500*sort_buffer_size（2M）=1G内存</p><p><strong>配置方法</strong><br>修改/etc/my.cnf文件，在[mysqld]下面添加如下：<br>sort_buffer_size=1M</p><h5 id="max-allowed-packet"><a href="#max-allowed-packet" class="headerlink" title="max_allowed_packet"></a>max_allowed_packet</h5><blockquote>    <p>mysql根据配置文件会限制，server接受的数据包大小</p></blockquote><p>有时候大的插入和更新会受max_allowed_packet参数限制，导致写入或者更新失败，更大值是1GB，必须设置1024的倍数</p><figure class="highlight ini">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">32</span>M</span><br></pre>            </td>        </tr>    </table></figure><h5 id="join-buffer-size"><a href="#join-buffer-size" class="headerlink" title="join_buffer_size"></a>join_buffer_size</h5><p>用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。<br>尽量在SQL与方面进行优化，效果较为明显。<br>优化的方法：在on条件列加索引，至少应当是有MUL索引</p><h5 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h5><blockquote>    <p>服务器线程缓存，这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时,那么客户端的线程将被放到缓存中以响应下一个客户而不是销毁(前提是缓存数未达上限),如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能</p></blockquote><p>通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。<br>设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。<br>服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)</p><div class="table-container">    <table>        <thead>            <tr>                <th style="text-align:left">Variable_name</th>                <th style="text-align:left">Value</th>                <th></th>            </tr>        </thead>        <tbody>            <tr>                <td style="text-align:left">Threads_cached</td>                <td style="text-align:left">178</td>                <td>当前此时此刻线程缓存中有多少空闲线程</td>            </tr>            <tr>                <td style="text-align:left">Threads_connected</td>                <td style="text-align:left">78</td>                <td>当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数</td>            </tr>            <tr>                <td style="text-align:left">Threads_created</td>                <td style="text-align:left">479</td>                <td>从最近一次服务启动，已创建线程的数量，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗cpu SYS资源，可以适当增加配置文件中thread_cache_size值</td>            </tr>            <tr>                <td style="text-align:left">Threads_running</td>                <td style="text-align:left">2</td>                <td>当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态</td>            </tr>        </tbody>    </table></div><p>Threads_created ：一般在架构设计阶段，会设置一个测试值，做压力测试。<br>结合zabbix监控，看一段时间内此状态的变化。<br>如果在一段时间内，Threads_created趋于平稳，说明对应参数设定是OK。<br>如果一直陡峭的增长，或者出现大量峰值，那么继续增加此值的大小，在系统资源够用的情况下（内存）</p><h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h5><blockquote>    <p>对于InnoDB表来说，innodb_buffer_pool_size的作用就相当于key_buffer_size对于MyISAM表的作用一样。</p></blockquote><p><em><u>配置依据</u></em></p><p>InnoDB使用该参数指定大小的内存来缓冲数据和索引。</p><p>对于单独的MySQL数据库服务器，最大可以把该值设置成物理内存的80%,一般我们建议不要超过物理内存的70%。</p><p><u><em>配置方法</em></u></p><p>innodb_buffer_pool_size=2048M</p><h5 id="innodb-flush-log-at-trx-commit"><a href="#innodb-flush-log-at-trx-commit" class="headerlink" title="innodb_flush_log_at_trx_commit"></a><strong>innodb_flush_log_at_trx_commit</strong></h5><p>主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。<br>0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；<br>1，每次事务的提交都会引起redo日志文件写入、flush磁盘的操作，确保了事务的ACID；<br>2，每次事务提交引起写入日志文件的动作,但每秒钟完成一次flush磁盘操作。</p><p><strong><em>配置依据</em></strong><br>实际测试发现，该值对插入数据的速度影响非常大，设置为2时插入10000条记录只需要2秒，设置为0时只需要1秒，而设置为1时则需要229秒。因此，MySQL手册也建议尽量将插入操作合并成一个事务，这样可以大幅提高速度。<br>根据MySQL官方文档，在允许丢失最近部分事务的危险的前提下，可以把该值设为0或2。</p><p><u><em>配置方法</em></u></p><p>innodb_flush_log_at_trx_commit=1<br>双1标准中的一个1</p><h5 id="innodb-thread-concurrency"><a href="#innodb-thread-concurrency" class="headerlink" title="innodb_thread_concurrency"></a><strong>innodb_thread_concurrency</strong></h5><blockquote>    <p>此参数用来设置innodb线程的并发数量，默认值为0表示不限制。</p></blockquote><p>在官方文档上，对于innodb_thread_concurrency的使用，也给出了一些建议，如下：</p><ul>    <li>如果一个工作负载中，并发用户线程的数量小于64，建议设置innodb_thread_concurrency=0；</li>    <li>如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置innodb_thread_concurrency=128，<br>并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，</li></ul><p>假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，<br>性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，<br>建议设置innodb_thread_concurrency参数为80，以避免影响性能。</p><p>如果你不希望InnoDB使用的虚拟CPU数量比用户线程使用的虚拟CPU更多（比如20个虚拟CPU），<br>建议通过设置innodb_thread_concurrency 参数为这个值（也可能更低，这取决于性能体现），</p><p>如果你的目标是将MySQL与其他应用隔离，你可以l考虑绑定mysqld进程到专有的虚拟CPU。<br>但是需 要注意的是，这种绑定，在myslqd进程一直不是很忙的情况下，可能会导致非最优的硬件使用率。在这种情况下，<br>你可能会设置mysqld进程绑定的虚拟 CPU，允许其他应用程序使用虚拟CPU的一部分或全部。<br>在某些情况下，最佳的innodb_thread_concurrency参数设置可以比虚拟CPU的数量小。<br>定期检测和分析系统，负载量、用户数或者工作环境的改变可能都需要对innodb_thread_concurrency参数的设置进行调整</p><p>128 ——-&gt; top cpu<br><u><em>设置标准</em></u><br>1、当前系统cpu使用情况，均不均匀<br>top</p><p>2、当前的连接数，有没有达到顶峰<br>show status like ‘threads_%’;<br>show processlist;<br>（3）配置方法：<br>innodb_thread_concurrency=8<br>方法:</p><pre><code>   1. 看top ,观察每个cpu的各自的负载情况2. 发现不平均,先设置参数为cpu个数,然后不断增加(一倍)这个数值3. 一直观察top状态,直到达到比较均匀时,说明已经到位了.</code></pre><h5 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a><strong>innodb_log_buffer_size</strong></h5><figure class="highlight objectivec">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line">此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，对于较大的事务，可以增大缓存大小。</span><br><span class="line">innodb_log_buffer_size=<span class="number">128</span>M</span><br><span class="line">设定依据：</span><br><span class="line"><span class="number">1</span>、大事务： 存储过程调用 <span class="built_in">CALL</span></span><br><span class="line"><span class="number">2</span>、多事务</span><br></pre>            </td>        </tr>    </table></figure><h5 id="innodb-log-file-size-100M"><a href="#innodb-log-file-size-100M" class="headerlink" title="innodb_log_file_size = 100M"></a><strong><em>innodb_log_file_size = 100M</em></strong></h5><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">设置 ib_logfile0  ib_logfile1 </span><br><span class="line">此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能.</span><br><span class="line">innodb_log_file_size &#x3D; 100M</span><br></pre>            </td>        </tr>    </table></figure><h5 id="innodb-log-files-in-group-3"><a href="#innodb-log-files-in-group-3" class="headerlink" title="innodb_log_files_in_group = 3"></a><strong>innodb_log_files_in_group = 3</strong></h5><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br></pre>            </td>        </tr>    </table></figure><h5 id="read-buffer-size-1M"><a href="#read-buffer-size-1M" class="headerlink" title="read_buffer_size = 1M"></a><strong>read_buffer_size = 1M</strong></h5><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和 sort_buffer_size一样，该参数对应的分配内存也是每个连接独享</span><br></pre>            </td>        </tr>    </table></figure><h5 id="read-rnd-buffer-size-1M"><a href="#read-rnd-buffer-size-1M" class="headerlink" title="read_rnd_buffer_size = 1M"></a><strong>read_rnd_buffer_size = 1M</strong></h5><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</span><br><span class="line">注：顺序读是指根据索引的叶节点数据就能顺序地读取所需要的行数据。随机读是指一般需要根据辅助索引叶节点中的主键寻找实际行数据，而辅助索引和主键所在的数据段不同，因此访问方式是随机的。</span><br></pre>            </td>        </tr>    </table></figure><h5 id="bulk-insert-buffer-size-8M"><a href="#bulk-insert-buffer-size-8M" class="headerlink" title="bulk_insert_buffer_size = 8M"></a><strong>bulk_insert_buffer_size = 8M</strong></h5><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>            </td>            <td class="code">                <pre><span class="line">批量插入数据缓存大小，可以有效提高插入效率，默认为8M</span><br><span class="line">tokuDB    percona</span><br><span class="line">myrocks   </span><br><span class="line">RocksDB</span><br><span class="line">TiDB</span><br><span class="line">MongoDB</span><br></pre>            </td>        </tr>    </table></figure><h5 id="binary-log"><a href="#binary-log" class="headerlink" title="binary log"></a><strong>binary log</strong></h5><figure class="highlight kotlin">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>            </td>            <td class="code">                <pre><span class="line">log-bin=/<span class="keyword">data</span>/mysql-bin</span><br><span class="line">binlog_cache_size = <span class="number">2</span>M <span class="comment">//为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存, 提高记录bin-log的效率。没有什么大事务，dml也不是很频繁的情况下可以设置小一点，如果事务大而且多，dml操作也频繁，则可以适当的调大一点。前者建议是--1M，后者建议是：即 2--4M</span></span><br><span class="line">max_binlog_cache_size = <span class="number">8</span>M <span class="comment">//表示的是binlog 能够使用的最大cache 内存大小</span></span><br><span class="line">max_binlog_size= <span class="number">512</span>M <span class="comment">//指定binlog日志文件的大小，如果当前的日志大小达到max_binlog_size，还会自动创建新的二进制日志。你不能将该变量设置为大于1GB或小于4096字节。默认值是1GB。在导入大容量的sql文件时，建议关闭sql_log_bin，否则硬盘扛不住，而且建议定期做删除。</span></span><br><span class="line">expire_logs_days = <span class="number">7</span> <span class="comment">//定义了mysql清除过期日志的时间。</span></span><br><span class="line">二进制日志自动删除的天数。默认值为<span class="number">0</span>,表示“没有自动删除”。</span><br><span class="line">log-bin=/mysql-bin</span><br><span class="line">binlog_format=row </span><br><span class="line">sync_binlog=<span class="number">1</span></span><br><span class="line">双<span class="number">1</span>标准(基于安全的控制)：</span><br><span class="line">sync_binlog=<span class="number">1</span>   <span class="comment">// 什么时候刷新binlog到磁盘，每次事务commit</span></span><br><span class="line">innodb_flush_log_at_trx_commit=<span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> sql_log_bin=<span class="number">0</span>;</span><br><span class="line">show status like <span class="string">'com_%'</span>;</span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight routeros">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre>            </td>            <td class="code">                <pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">basedir</span>=/data/mysql</span><br><span class="line"><span class="attribute">datadir</span>=/data/mysql/data</span><br><span class="line"><span class="attribute">socket</span>=/tmp/mysql.sock</span><br><span class="line"><span class="attribute">log-error</span>=/var/log/mysql.log</span><br><span class="line"><span class="attribute">log_bin</span>=/data/binlog/mysql-bin</span><br><span class="line"><span class="attribute">binlog_format</span>=row</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="attribute">server-id</span>=52</span><br><span class="line"><span class="attribute">gtid-mode</span>=on</span><br><span class="line"><span class="attribute">enforce-gtid-consistency</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">log-slave-updates</span>=1</span><br><span class="line"><span class="attribute">relay_log_purge</span>=0</span><br><span class="line"><span class="attribute">max_connections</span>=1024</span><br><span class="line"><span class="attribute">back_log</span>=128</span><br><span class="line"><span class="attribute">wait_timeout</span>=60</span><br><span class="line"><span class="attribute">interactive_timeout</span>=7200</span><br><span class="line"><span class="attribute">key_buffer_size</span>=16M</span><br><span class="line"><span class="attribute">query_cache_size</span>=64M</span><br><span class="line"><span class="attribute">query_cache_type</span>=1</span><br><span class="line"><span class="attribute">query_cache_limit</span>=50M</span><br><span class="line"><span class="attribute">max_connect_errors</span>=20</span><br><span class="line"><span class="attribute">sort_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">max_allowed_packet</span>=32M</span><br><span class="line"><span class="attribute">join_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">thread_cache_size</span>=200</span><br><span class="line"><span class="attribute">innodb_buffer_pool_size</span>=1024M</span><br><span class="line"><span class="attribute">innodb_flush_log_at_trx_commit</span>=1</span><br><span class="line"><span class="attribute">innodb_log_buffer_size</span>=32M</span><br><span class="line"><span class="attribute">innodb_log_file_size</span>=128M</span><br><span class="line"><span class="attribute">innodb_log_files_in_group</span>=3</span><br><span class="line"><span class="attribute">binlog_cache_size</span>=2M</span><br><span class="line"><span class="attribute">max_binlog_cache_size</span>=8M</span><br><span class="line"><span class="attribute">max_binlog_size</span>=512M</span><br><span class="line"><span class="attribute">expire_logs_days</span>=7</span><br><span class="line"><span class="attribute">read_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">read_rnd_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">bulk_insert_buffer_size</span>=8M</span><br><span class="line">[client]</span><br><span class="line"><span class="attribute">socket</span>=/tmp/mysql.sock</span><br></pre>            </td>        </tr>    </table></figure><h2 id="sql与索引优化"><a href="#sql与索引优化" class="headerlink" title="sql与索引优化"></a>sql与索引优化</h2><h3 id="sql使用建议"><a href="#sql使用建议" class="headerlink" title="sql使用建议"></a>sql使用建议</h3><p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： </p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line">可以在<span class="keyword">num</span>上设置默认值<span class="number">0</span>，确保表中<span class="keyword">num</span>列没有<span class="literal">null</span>值，然后这样查询：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">0</span></span><br></pre>            </td>        </tr>    </table></figure><p>3.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p>4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： </p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span>=<span class="number">20</span>   </span><br><span class="line">可以这样查询：   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span>   </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre>            </td>        </tr>    </table></figure><p>5.in 和 not in 也要慎用，否则会导致全表扫描，如： </p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   </span><br><span class="line">对于连续的数值，能用 <span class="keyword">between</span> 就不要用 <span class="keyword">in</span> 了：   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre>            </td>        </tr>    </table></figure><p>6.下面的查询也将导致全表扫描：</p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%abc%'</span></span><br></pre>            </td>        </tr>    </table></figure><p>7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>/<span class="number">2</span>=<span class="number">100</span>   </span><br><span class="line">应改为:   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">100</span>*<span class="number">2</span></span><br></pre>            </td>        </tr>    </table></figure><p>8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">1</span>,<span class="number">3</span>)=<span class="string">'abc'</span><span class="comment">--name以abc开头的id   </span></span><br><span class="line">应改为:   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'abc%'</span></span><br></pre>            </td>        </tr>    </table></figure><p>9.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 </p><p>10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 </p><p>11.不要写一些没有意义的查询，如需要生成一个空表结构</p><p>12.很多时候用 exists 代替 in 是一个好的选择： </p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> b)   </span><br><span class="line">用下面的语句替换：   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> <span class="keyword">num</span>=a.num)</span><br></pre>            </td>        </tr>    </table></figure><p>13.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。 </p><p>14.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，<br>因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 </p><p>15.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 </p><p>16.尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，<br>其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 </p><p>17.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。 </p><p>18.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p>19.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p>20.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，<br>以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p><p>21.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。 </p><p>22.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 </p><p>23.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p>24.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。</p><p>在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p>25.尽量避免大事务操作，提高系统并发能力。</p><p>26.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><h3 id="sql调优思路"><a href="#sql调优思路" class="headerlink" title="sql调优思路"></a>sql调优思路</h3><ol>    <li>slow_query_log 收集慢日志 结合explain分析索引命中与进行索引优化</li>    <li>减少索引扫描行数，对于慢sql进行优化</li>    <li>建立联合索引，由于联合索引的每个叶子节点都包含检索字段信息，按最左原则匹配，按照其他条件过滤，减少回表的数据量</li>    <li>使用虚拟列和联合索引来提升复杂查询执行效率</li></ol><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><ol>    <li>没有查询条件，或者查询条件没有建立索引</li>    <li>查询结果集是原表中的大部分数据</li>    <li>索引本身失效，统计数据不真实</li>    <li>查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)</li>    <li>隐式转换导致索引失效</li>    <li>&lt;&gt; ，not in 不走索引（辅助索引）</li>    <li>ike “%_” 百分号在最前面不走</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mysql优化老生常谈了，但却也离不开业务。脱离业务来讲mysql可以从两个方面进行优化&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;p&gt;安全优化（业务持续性）&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;性能优化（业务高效性）&lt;/p&gt;
 
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes NFS实践</title>
    <link href="https://paynewu.com/2760374101.html"/>
    <id>https://paynewu.com/2760374101.html</id>
    <published>2021-09-03T15:46:49.000Z</published>
    <updated>2021-10-15T01:56:58.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NFS实践"><a href="#NFS实践" class="headerlink" title="NFS实践"></a>NFS实践</h2><h3 id="安装NFS"><a href="#安装NFS" class="headerlink" title="安装NFS"></a>安装NFS</h3><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line">yum install -y nfs-common nfs-utils rpcbind</span><br><span class="line">mkdir /nfs &amp;&amp; chmod 766 /nfs &amp;&amp; chown nfsnobody /nfs/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/nfs *(rw,no_root_squash,no_all_squash,sync)"</span> &gt;&gt; /etc/exports</span><br><span class="line">exportfs -r</span><br><span class="line">systemctl restart rpcbind &amp;&amp; systemctl restart nfs &amp;&amp; systemctl status rpcbind &amp;&amp; systemctl status nfs</span><br></pre>            </td>        </tr>    </table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><blockquote>    <p>IP: 主机地址</p></blockquote><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>            </td>            <td class="code">                <pre><span class="line">showmount -e IP</span><br><span class="line">mkdir /test</span><br><span class="line">mount -t nfs IP:/nfs /test</span><br><span class="line">cd /test</span><br><span class="line">echo <span class="string">"asdsadsa"</span> &gt;&gt; a.txt</span><br><span class="line">cd /</span><br><span class="line">umount /test &amp;&amp; rm -rf /test</span><br></pre>            </td>        </tr>    </table></figure><h3 id="部署PV"><a href="#部署PV" class="headerlink" title="部署PV"></a>部署PV</h3><figure class="highlight yaml">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv-master</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.27</span> <span class="comment"># 节点ip</span></span><br></pre>            </td>        </tr>    </table></figure><h3 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h3><figure class="highlight yaml">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre>            </td>            <td class="code">                <pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">"nfs"</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre>            </td>        </tr>    </table></figure><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><figure class="highlight maxima">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">kubectl <span class="built_in">get</span> <span class="built_in">pv</span></span><br><span class="line">kubectl desc</span><br></pre>            </td>        </tr>    </table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu3v3oji9fj62090u047b02.jpg" alt="image-20210903233505574"></p><figure class="highlight lsl">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># <span class="number">192.168</span><span class="number">.0</span><span class="number">.27</span> /nfs</span><br><span class="line">echo <span class="string">"asds"</span>  &gt; index.html</span><br><span class="line">kubectl get pod -o wid</span><br></pre>            </td>        </tr>    </table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu3vd2jo46j61vk04uace02.jpg" alt="image-20210903234426686"></p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">curl 10.244.1.53</span><br><span class="line"><span class="comment"># asds</span></span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NFS实践&quot;&gt;&lt;a href=&quot;#NFS实践&quot; class=&quot;headerlink&quot; title=&quot;NFS实践&quot;&gt;&lt;/a&gt;NFS实践&lt;/h2&gt;
&lt;h3 id=&quot;安装NFS&quot;&gt;&lt;a href=&quot;#安装NFS&quot; class=&quot;headerlink&quot; title=&quot;安装
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://paynewu.com/categories/Kubernetes/"/>
    
      <category term="NFS" scheme="https://paynewu.com/categories/Kubernetes/NFS/"/>
    
    
      <category term="Kubernetes" scheme="https://paynewu.com/tags/Kubernetes/"/>
    
      <category term="NFS" scheme="https://paynewu.com/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的SQL使用之下</title>
    <link href="https://paynewu.com/3191410054.html"/>
    <id>https://paynewu.com/3191410054.html</id>
    <published>2021-09-02T13:46:39.000Z</published>
    <updated>2021-10-15T01:56:58.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql用户管理"><a href="#mysql用户管理" class="headerlink" title="mysql用户管理"></a>mysql用户管理</h2><blockquote>    <p> DCL（Data Control Language，数据控制语言）：用于定义数据库的访问权限和安全级别，主要包含GRANT、REVOKE、COMMIT和ROLLBACK等语句。</p></blockquote><p><strong>mysql用户管理主要涉及到用户的增删改查与权限管理</strong></p><p>mysql中存在4个控制权限的表，分别为user表，db表，tables_priv表，columns_priv表</p><p><strong>权限表的验证过程</strong></p><ol>    <li>先从user表中的Host,User,Password这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</li>    <li>通过身份认证后，进行权限分配，按照user，db，tables_priv，columns_priv的顺序进行验证。即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将不再检查db, tables_priv,columns_priv；如果为N，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限；如果db中为N，则检查tables_priv中此数据库对应的具体表，取得表中的权限Y，以此类推。</li></ol><p><strong>MySQL 权限级别</strong><br>全局性的管理权限： 作用于整个MySQL实例级别<br>数据库级别的权限： 作用于某个指定的数据库上或者所有的数据库上<br>数据库对象级别的权限：作用于指定的数据库对象上（表、视图等）或者所有的数据库对象上</p><h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 创建用户</span><br><span class="line">create user user_name@&#39;host&#39; identified by &#39;password&#39;;</span><br><span class="line"># example: </span><br><span class="line"># create user acs@&#39;10.0.0.%&#39; identified by &#39;123123&#39;;</span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 删除用户</span><br><span class="line">drop user user_name@&#39;host&#39;;</span><br><span class="line"># example:</span><br><span class="line"># drop user acs@&#39;10.0.0.%&#39;</span><br><span class="line"># DELETE FROM &#96;user&#96; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;10.0.0.%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 修改用户</span><br><span class="line">alter user user_name@&#39;host&#39; identified by &#39;password&#39;;</span><br><span class="line"># example</span><br><span class="line">## 修改密码</span><br><span class="line">alter user acs@&#39;10.0.0.%&#39; identified by &#39;321312312123&#39;;</span><br><span class="line">## 修改 host</span><br><span class="line">UPDATE &#96;user&#96; SET &#96;Host&#96; &#x3D; &#39;%&#39; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;10.0.0.%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br><span class="line">## 修改权限</span><br><span class="line">UPDATE &#96;user&#96; SET &#96;Select_priv&#96; &#x3D; &#39;Y&#39; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br><span class="line">UPDATE &#96;user&#96; SET &#96;Select_priv&#96; &#x3D; &#39;Y&#39;, &#96;Delete_priv&#96; &#x3D; &#39;Y&#39; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 删除用户</span><br><span class="line">drop user user_name@&#39;host&#39;;</span><br><span class="line"># example</span><br><span class="line">drop user acs@&#39;%&#39;</span><br><span class="line">DELETE FROM &#96;user&#96; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;10.0.0.%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>user_name：用户名</p>    <p>host ：可允许连接ip(Localhost代表本机， 127.0.0.1代表ipv4本机地址， ::1代表ipv6的本机地址,)</p>    <p>password：用户密码</p></blockquote><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>权限可细分为操作权限与操作范围</p><p>常用权限介绍</p><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">ALL:SELECT,INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br><span class="line">ALL : 所有权限，一般是普通管理员拥有的</span><br><span class="line"><span class="keyword">with</span> grant option：给别的用户授权的功能</span><br></pre>            </td>        </tr>    </table></figure><p>权限作用范围</p><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line">*.*               ----&gt;所有：管理员用户</span><br><span class="line">dbname.*          ----&gt;指定库下所有：开发和应用用户</span><br><span class="line">dbname.t1----&gt;指定表</span><br></pre>            </td>        </tr>    </table></figure><p><strong>开发人员用户授权流程</strong></p><ol>    <li>你从哪来</li>    <li>对谁操作</li>    <li>权限</li>    <li>密码要求</li></ol><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>可以使用GRANT给用户添加权限，权限会自动叠加，不会覆盖之前授予的权限，比如你先给用户添加一个SELECT权限，后来又给用户添加了一个INSERT权限，那么该用户就同时拥有了SELECT和INSERT权限</p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 查看MYSQL有哪些用户</span><br><span class="line">select user,host from mysql.user;</span><br><span class="line"># 查看权限</span><br><span class="line">show grants for user_name@&#39;host&#39;;</span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 授权</span><br><span class="line">grant 权限 on 权限范围 to 用户 identified by 密码 with grant option;</span><br></pre>            </td>        </tr>    </table></figure><p> <strong>all privileges：</strong>表示将所有权限授予给用户。也可指定具体的权限，如：SELECT、CREATE、DROP等。<br> <strong>on：</strong>表示这些权限对哪些数据库和表生效，格式：数据库名.表名，这里写“<em>”表示所有数据库，所有表。如果我要指定将权限应用到test库的user表中，可以这么写：test.user<br> <strong>to：</strong>将权限授予哪个用户。格式：”用户名”@”登录IP或域名”。%表示没有限制，在任何主机都可以登录。比如：”payne”@”192.168.0%”，表示yangxin这个用户只能在192.168.0IP段登录<br> <strong>•identified by：</strong>指定用户的登录密码<br> <em>*•with grant option：</em></em>表示允许用户将自己的权限授权给其它用户 </p><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 收回权限</span><br><span class="line">revoke delete on 权限范围 from 用户@‘host’</span><br><span class="line">revoke delete on app.*  from app@&#39;10.0.0.%&#39;；</span><br></pre>            </td>        </tr>    </table></figure><h3 id="如何授权"><a href="#如何授权" class="headerlink" title="如何授权"></a>如何授权</h3><p>用户的权限一定是与业务分离不开的，但通常普通用户会</p><ul>    <li>禁用删除权限</li>    <li>规定范围</li></ul><h2 id="如何做好用户管理"><a href="#如何做好用户管理" class="headerlink" title="如何做好用户管理"></a>如何做好用户管理</h2><ul>    <li>密码系数足够高</li>    <li>root禁用远程登录</li>    <li>分级别，类似于公司管理。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line">8.0在grant命令添加新特性</span><br><span class="line">建用户和授权分开了</span><br><span class="line">grant 不再支持自动创建用户了，不支持改密码</span><br><span class="line">授权之前，必须要提前创建用户。</span><br></pre>            </td>        </tr>    </table></figure><ul>    <li>执行Grant,revoke,set password,rename user命令修改权限之后， MySQL会自动将修改后的权限信息同步加载到系统内存中</li>    <li>如果执行insert/update/delete操作上述的系统权限表之后，则必须再执行刷新权限命令才能同步到系统内存中，刷新权限命令包括： <code>flush privileges</code>/mysqladmin flush-privileges / mysqladmin reload</li>    <li>如果是修改tables和columns级别的权限，则客户端的下次操作新权限就会生效</li>    <li>如果是修改database级别的权限，则新权限在客户端执行use database命令后生效</li>    <li>如果是修改global级别的权限，则需要重新创建连接新权限才能生效</li>    <li>如果是修改global级别的权限，则需要重新创建连接新权限才能生效 (例如修改密码)</li></ul><p>mysql user表</p><div class="table-container">    <table>        <thead>            <tr>                <th style="text-align:left"><strong>名字</strong></th>                <th style="text-align:left"><strong>类型</strong></th>                <th style="text-align:left">Null</th>                <th style="text-align:left">主键</th>                <th style="text-align:left">默认</th>                <th style="text-align:left"></th>                <th></th>            </tr>        </thead>        <tbody>            <tr>                <td style="text-align:left">Host</td>                <td style="text-align:left">char(255)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">PRI</td>                <td style="text-align:left"></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">User</td>                <td style="text-align:left">char(32)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left">PRI</td>                <td style="text-align:left"></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Select_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Insert_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Update_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Delete_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Drop_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Reload_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Shutdown_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Process_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">File_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Grant_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">References_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Index_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Alter_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Show_db_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Super_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_tmp_table_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Lock_tables_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Execute_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Repl_slave_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Repl_client_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_view_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Show_view_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_routine_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Alter_routine_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_user_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Event_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Trigger_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_tablespace_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">ssl_type</td>                <td style="text-align:left">enum(‘’,’ANY’,’X509’,’SPECIFIED’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left"></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">ssl_cipher</td>                <td style="text-align:left">blob</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">x509_issuer</td>                <td style="text-align:left">blob</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">x509_subject</td>                <td style="text-align:left">blob</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">max_questions</td>                <td style="text-align:left">int unsigned</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">0</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">max_updates</td>                <td style="text-align:left">int unsigned</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">0</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">max_connections</td>                <td style="text-align:left">int unsigned</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">0</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">max_user_connections</td>                <td style="text-align:left">int unsigned</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">0</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">plugin</td>                <td style="text-align:left">char(64)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">caching_sha2_password</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">authentication_string</td>                <td style="text-align:left">text</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">password_expired</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">password_last_changed</td>                <td style="text-align:left">timestamp</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">password_lifetime</td>                <td style="text-align:left">smallint unsigned</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">account_locked</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Create_role_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Drop_role_priv</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">NO</td>                <td style="text-align:left"></td>                <td style="text-align:left">N</td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Password_reuse_history</td>                <td style="text-align:left">smallint unsigned</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Password_reuse_time</td>                <td style="text-align:left">smallint unsigned</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">Password_require_current</td>                <td style="text-align:left">enum(‘N’,’Y’)</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>                <td></td>            </tr>            <tr>                <td style="text-align:left">User_attributes</td>                <td style="text-align:left">json</td>                <td style="text-align:left">YES</td>                <td style="text-align:left"></td>                <td style="text-align:left"><em>NULL</em></td>                <td style="text-align:left"></td>            </tr>        </tbody>    </table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql用户管理&quot;&gt;&lt;a href=&quot;#mysql用户管理&quot; class=&quot;headerlink&quot; title=&quot;mysql用户管理&quot;&gt;&lt;/a&gt;mysql用户管理&lt;/h2&gt;
&lt;blockquote&gt;
    &lt;p&gt; DCL（Data Control Langua
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>docker分层构建</title>
    <link href="https://paynewu.com/2890729769.html"/>
    <id>https://paynewu.com/2890729769.html</id>
    <published>2021-09-02T10:08:44.000Z</published>
    <updated>2021-10-15T01:56:58.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>​ 在构建、部署、测试等情景中下不知你也是否遇到过这么几个问题，构建慢、依赖安装慢、重复性构建。以至于每一次采用docker来构建时，都需要等上那么几分钟。有时候是非常的浪费时间，那么是否有方法进行一次分离构建呢。当然正如docker口号所说的那般”<strong>Build once，Run anywher</strong>“，</p><p>那么该如何解决“<strong>构建慢、依赖安装慢、重复性构建</strong>”的问题呢，看似三个或者更多问题，其实归根结底是一个问题——分层构建</p><h2 id="分层构建"><a href="#分层构建" class="headerlink" title="分层构建"></a>分层构建</h2><p>想深层理解docker的分层构建，不得不从docker的设计特性出发。虚拟机与docker结构，如下图所示。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu2gf5gk5aj60kn0c40tr02.jpg" alt="image-20210902182150947"></p><p><strong>一层一层的分层结构</strong>，那么所谓分层构建只需要将<strong>环境依赖</strong>与<strong>业务代码</strong>分开构建即可。实现如下</p><ul>    <li>        <p>短时间内环境依赖构建一次且仅构建一次</p>    </li>    <li>        <p>业务代码触发构建</p>    </li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight dockerfile">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">#构建环境依赖</span></span><br><span class="line"><span class="comment">## 拉取pythoo镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"><span class="comment">## 设置环境变量，相当于linux的export</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/bin:$PATH</span><br><span class="line"><span class="comment">## 在容器中进入根目录code（如果没有code目录则创建）相当于cd</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="comment">## 将执行docker build 路径下的所有文件copy到容器内所在的目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt .</span></span><br><span class="line"><span class="comment">## 执行shell命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m pip install -U pip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    python3 -m pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/</span></span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight sh">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker build -t user/img_name:version .</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">docker push user/img_name:version</span><br></pre>            </td>        </tr>    </table></figure><figure class="highlight dockerfile">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment">#项目构建</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span>/img_name:version</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"supervisord"</span>,<span class="string">"-c"</span>, <span class="string">"supervisord.conf"</span>]</span></span><br></pre>            </td>        </tr>    </table></figure><h4 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h4><p>两层： 1.依赖构建 2.编译与项目构建</p><p>三层： 1. 依赖构建 2.编译构建 3. 运行文件构建</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>            </td>            <td class="code">                <pre><span class="line">FROM golang:1.16 as builder</span><br><span class="line"><span class="comment"># Setting environment variables</span></span><br><span class="line">ENV GOPROXY=<span class="string">"https://goproxy.cn,direct"</span> GO111MODULE=<span class="string">"on"</span> CGO_ENABLED=<span class="string">"0"</span> GOOS=<span class="string">"linux"</span> GOARCH=<span class="string">"amd64"</span></span><br><span class="line"><span class="comment">## add rely</span></span><br><span class="line">go mod tidy </span><br><span class="line"><span class="comment"># Switch to workspace</span></span><br><span class="line">WORKDIR /go/src/github.com/gowebspider/goproxies/</span><br><span class="line"><span class="comment"># Load file</span></span><br><span class="line">COPY . .</span><br><span class="line"><span class="comment"># Build and place the results in /tmp/goproxies</span></span><br><span class="line">RUN go build -o /tmp/goproxies .</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY --from=builder /tmp/goproxies .</span><br><span class="line">CMD [<span class="string">"./goproxies"</span>]</span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;
&lt;p&gt;​ 在构建、部署、测试等情景中下不知你也是否遇到过这么几个问题，构建慢、依赖安装慢、重复性构建。以至于每一次采用docker来构建时，都需
      
    
    </summary>
    
    
      <category term="容器编排" scheme="https://paynewu.com/categories/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
    
    
      <category term="docker" scheme="https://paynewu.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>cni already has an IP address different from ...</title>
    <link href="https://paynewu.com/4032605777.html"/>
    <id>https://paynewu.com/4032605777.html</id>
    <published>2021-08-30T15:20:51.000Z</published>
    <updated>2021-10-15T01:56:58.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误如下"><a href="#错误如下" class="headerlink" title="错误如下"></a>错误如下</h2><p>cni already has an IP address different from …</p><p>如图所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz8c50ce1j627w0mex5w02.jpg" alt="1421630332579_.pic_hd"></p><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>node之前反复添加</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 找到对应的节点</span></span><br><span class="line">kubectl get pod --all-namespace -o wide</span><br></pre>            </td>        </tr>    </table></figure><p>在对应node上执行如下命令</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 重置Kubernetes集群</span></span><br><span class="line">kubeadm reset &amp;&amp; systemctl stop kubelet &amp;&amp; systemctl stop docker</span><br><span class="line"><span class="comment"># 删除残留</span></span><br><span class="line">rm -rf /var/lib/cni/ &amp;&amp; rm -rf /var/lib/kubelet/* &amp;&amp; rm -rf /etc/cni/</span><br><span class="line"><span class="comment"># 删除旧网络</span></span><br><span class="line">ifconfig cni0 down &amp;&amp; ifconfig flannel.1 down &amp;&amp; ifconfig docker0 down </span><br><span class="line">ip link delete cni0 &amp;&amp; ip link delete flannel.1</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart docker &amp;&amp; systemctl start kubelet</span><br></pre>            </td>        </tr>    </table></figure><p>在master上获取join token</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br></pre>            </td>        </tr>    </table></figure><p>重新加入节点</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/wangxu01/articles/11803547.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangxu01/articles/11803547.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;错误如下&quot;&gt;&lt;a href=&quot;#错误如下&quot; class=&quot;headerlink&quot; title=&quot;错误如下&quot;&gt;&lt;/a&gt;错误如下&lt;/h2&gt;
&lt;p&gt;cni already has an IP address different from …&lt;/p&gt;
&lt;p&gt;如图所示&lt;/p
      
    
    </summary>
    
    
      <category term="Error Set" scheme="https://paynewu.com/categories/Error-Set/"/>
    
      <category term="错误集合" scheme="https://paynewu.com/categories/Error-Set/%E9%94%99%E8%AF%AF%E9%9B%86%E5%90%88/"/>
    
      <category term="Kubernetes" scheme="https://paynewu.com/categories/Error-Set/%E9%94%99%E8%AF%AF%E9%9B%86%E5%90%88/Kubernetes/"/>
    
    
      <category term="错误集合" scheme="https://paynewu.com/tags/%E9%94%99%E8%AF%AF%E9%9B%86%E5%90%88/"/>
    
      <category term="Error Set" scheme="https://paynewu.com/tags/Error-Set/"/>
    
      <category term="Kubernetes" scheme="https://paynewu.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes搭建dashboard</title>
    <link href="https://paynewu.com/1529878275.html"/>
    <id>https://paynewu.com/1529878275.html</id>
    <published>2021-08-30T11:38:42.000Z</published>
    <updated>2021-10-15T01:56:58.266Z</updated>
    
    <content type="html"><![CDATA[<p>当部署完Kubernetes集群之后，为了便于管理Web UI或许是一种新型且快捷的部署方式。本节将以部署工具helm搭建Kubernetes Dashboard。以及拍坑</p><p>helm相关文档：</p><ul>    <li><a href="https://helm.sh/zh/docs/" target="_blank" rel="noopener">helm</a></li>    <li><a href="https://www.cncf.io/reports/cncf-helm-project-journey-report/" target="_blank" rel="noopener">CNCF Helm 项目过程报告</a></li></ul><h2 id="helm初始化"><a href="#helm初始化" class="headerlink" title="helm初始化"></a>helm初始化</h2><p>在这里推荐使用Kubernetes dashboard官方的仓库。在helm初始化完成后可使用如下命令进行helm repo初始化</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># add repo</span></span><br><span class="line">helm repo add kubernetes-dashboardhttps://kubernetes.github.io/dashboard/</span><br></pre>            </td>        </tr>    </table></figure><p>为避免加入的repo非最新，可使用如下命令进行更新</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">helm repo update</span><br></pre>            </td>        </tr>    </table></figure><p>效果如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz2xowgsrj61di0880wn02.jpg" alt="image-20210830201834557"></p><h3 id="helm安装Kubernetes-dashboard"><a href="#helm安装Kubernetes-dashboard" class="headerlink" title="helm安装Kubernetes dashboard"></a>helm安装Kubernetes dashboard</h3><p>笔者建议使用新的namespace</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># create namespace</span></span><br><span class="line">Kubernetes create ns monitor</span><br><span class="line"><span class="comment"># helm install kubernetes dashboard</span></span><br><span class="line">helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard -n monitor</span><br></pre>            </td>        </tr>    </table></figure><p>输出如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz47x30vvj627u0k2aj602.jpg" alt="image-20210830210303410"></p><p>等待部署完成，查看如下图所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz67m63w5j60yc08sdi602.jpg" alt="image-20210830221157231"></p><h4 id="修改端口暴露类型"><a href="#修改端口暴露类型" class="headerlink" title="修改端口暴露类型"></a>修改端口暴露类型</h4><figure class="highlight routeros">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">kubectl <span class="builtin-name">edit</span> -n monitor<span class="built_in"> service </span>kubernetes-dashboard</span><br></pre>            </td>        </tr>    </table></figure><p>将type：ClusterIP修改为NodePort类型暴露端口，如下所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6dpjcmjj60v20r844s02.jpg" alt="image-20210830221749368"></p><p>修改完成后，就可以获得暴露的端口啦，如下</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6cvz8lmj610809iacr02.jpg" alt="image-20210830221701538"></p><blockquote>    <p>若在云服务器上请开启对应端口，笔者这里为32623</p></blockquote><p>此时访问服务器ip+端口，即可进入登陆页面。如下图所示</p><blockquote>    <ol>        <li>            <p>必须为<a href="https://ip:port">https://ip:port</a></p>        </li>        <li>            <p>建议使用火狐浏览器</p>        </li>    </ol></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6inwfgxj624m0mqq6802.jpg" alt="image-20210830222235151"></p><p>至此部署部分已经完成</p><h2 id="获取token与授权访问"><a href="#获取token与授权访问" class="headerlink" title="获取token与授权访问"></a>获取token与授权访问</h2><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><figure class="highlight smali">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 查看token名称</span></span><br><span class="line">kubectl get secrets -n<span class="built_in"> monitor </span>| grep kubernetes-dashboard-token</span><br><span class="line"><span class="comment"># 查看token详情</span></span><br><span class="line">kubectl describe secrets -n<span class="built_in"> monitor </span>| grep kubernetes-dashboard-token-你自己的后缀名</span><br></pre>            </td>        </tr>    </table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6lrrzogj611001o74u02.jpg" alt="image-20210830222534534"></p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>此时我们刚进去界面，发现什么资源都显示不了，是因为dashboard默认的<code>serviceaccount</code>并没有权限，所以我们需要给予它授权。</p><blockquote>    <p><strong>注意</strong>：这里直接赋予的是超级管理员权限，如果需要更加细颗粒度的授权，请参照官方的说明</p>    <p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6nfrdq3j62060oktgn02.jpg" alt="image-20210830222709899"></p><figure class="highlight yaml">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitor</span></span><br></pre>            </td>        </tr>    </table></figure><p>将以上的yaml文件copy到master服务器上创建即可,当然若您也是使用的monitor 的namespace可直接使用如下命令</p><figure class="highlight bash">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/KubernetersDeployExample/script/main/dashboard/authorization.yaml</span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当部署完Kubernetes集群之后，为了便于管理Web UI或许是一种新型且快捷的部署方式。本节将以部署工具helm搭建Kubernetes Dashboard。以及拍坑&lt;/p&gt;
&lt;p&gt;helm相关文档：&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://paynewu.com/categories/Kubernetes/"/>
    
      <category term="docker" scheme="https://paynewu.com/categories/Kubernetes/docker/"/>
    
    
      <category term="Kubernetes" scheme="https://paynewu.com/tags/Kubernetes/"/>
    
      <category term="docker" scheme="https://paynewu.com/tags/docker/"/>
    
      <category term="容器编排" scheme="https://paynewu.com/tags/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
    
      <category term="部署" scheme="https://paynewu.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的SQL使用之中</title>
    <link href="https://paynewu.com/1815382139.html"/>
    <id>https://paynewu.com/1815382139.html</id>
    <published>2021-08-26T06:53:02.000Z</published>
    <updated>2021-10-15T01:56:58.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DML的使用"><a href="#DML的使用" class="headerlink" title="DML的使用"></a>DML的使用</h2><p>对表中的数据行进行增、删、改</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><blockquote>    <p>向数据表内插入数据</p></blockquote><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># INSERT语法</span><br><span class="line">INSERT [INTO] table_name[(field_name_1, field_name_2...)] VALUES(value1, value2...),[(value1, value2...)...]</span><br><span class="line"># 常见示例</span><br><span class="line">## 插入</span><br><span class="line">INSERT INTO ch_people_msg(&#96;p_uic&#96;, &#96;p_nickname&#96;, &#96;p_gender&#96;, &#96;p_age&#96;, &#96;p_pnum&#96;, &#96;p_address&#96;, &#96;p_email&#96;) VALUES</span><br><span class="line">(&quot;431122200008868162&quot;, &quot;payne&quot;, &quot;m&quot;, 22, 17672655132, &quot;湖南省xx市xx区雨花a世界&quot;, &quot;127xxxx261&quot;),</span><br><span class="line">(&quot;431122200002148162&quot;, &quot;tom&quot;, &quot;m&quot;, 25, 17672655132, &quot;湖南省xx市xx区雨花a世界&quot;, &quot;127xxxx221&quot;),</span><br><span class="line">(&quot;431122200002168163&quot;, &quot;tom&quot;, &quot;m&quot;, 25, 17672655132, &quot;湖南省xx市xx区雨花a世界&quot;, &quot;127xxxx221&quot;)</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <figure class="highlight plain">        <table>            <tr>                <td class="gutter">                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>                </td>                <td class="code">                    <pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;ch_people_msg&#96; ( </span><br><span class="line">  &#96;p_id&#96;  SERIAL NOT NULL AUTO_INCREMENT COMMENT &#39;用户id&#39; , </span><br><span class="line">  &#96;p_uic&#96; CHAR(18) NOT NULL COMMENT &#39;用户身份证&#39;,</span><br><span class="line">  &#96;p_nickname&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户昵称&#39;, </span><br><span class="line">  &#96;p_gender&#96; ENUM(&#39;m&#39;,&#39;f&#39;, &#39;n&#39;) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;用户性别&#39;, </span><br><span class="line">  &#96;p_age&#96; TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#39;用户年龄&#39;, </span><br><span class="line">  &#96;p_pnum&#96; CHAR(11) NOT NULL COMMENT &#39;用户电话&#39;, </span><br><span class="line">  &#96;p_address&#96; VARCHAR(100) NOT NULL COMMENT &#39;用户地址&#39;, </span><br><span class="line">  &#96;p_email&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户邮箱&#39;, </span><br><span class="line">  &#96;p_add_time&#96; TIMESTAMP NOT NULL DEFAULT NOW() COMMENT &#39;统计用户时间&#39;,</span><br><span class="line">   PRIMARY KEY (&#96;p_id&#96;),</span><br><span class="line">   UNIQUE KEY &#96;p_uic&#96;(&#96;p_uic&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARSET&#x3D;utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#x3D; &#39;中国成员信息表&#39;;</span><br></pre>                </td>            </tr>        </table>    </figure></blockquote><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight pgsql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="built_in">table_name</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="built_in">table_name</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">table</span> <span class="built_in">table_name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>: DML操作, 是逻辑性质删除,逐行进行删除,速度慢.</span><br><span class="line"><span class="keyword">truncate</span>: DDL操作,对与表段中的数据页进行清空,速度快.</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p> 当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，</p>    <p> DELETE操作不会减少表或索引所占用的空间。</p>    <p> drop语句将表所占用的空间全释放掉。</p>    <p>释放空间与速度：drop &gt; truncate &gt; delete</p></blockquote><p><strong>delete</strong></p><ul>    <li>delete是DML，执行delete操作时，每次从表中删除一行，并且同时将该行的的删除操作记录在redo和undo表空间中以便进行回滚（rollback）和重做操作，但要注意表空间要足够大，需要手动提交（commit）操作才能生效，可以通过rollback撤消操作。</li>    <li>        <p>delete可根据条件删除表中满足条件的数据，如果不指定where子句，那么删除表中所有记录。</p>    </li>    <li>        <p>delete语句不影响表所占用的extent，高水线(high watermark)保持原位置不变。</p>    </li></ul><p><strong>truncate</strong></p><ul>    <li>truncate是DDL，会隐式提交，所以，不能回滚，不会触发触发器。</li>    <li>        <p>truncate会删除表中所有记录，并且将重新设置高水线和所有的索引，缺省情况下将空间释放到minextents个extent，除非使用reuse storage，。不会记录日志，所以执行速度很快，但不能通过rollback撤消操作（如果一不小心把一个表truncate掉，也是可以恢复的，只是不能通过rollback来恢复）。</p>    </li>    <li>        <p>对于外键（foreignkey ）约束引用的表，不能使用 truncate table，而应使用不带 where 子句的 delete 语句。</p>    </li>    <li>        <p>truncatetable不能用于参与了索引视图的表。</p>    </li></ul><p><strong>drop</strong></p><ul>    <li>drop是DDL，会隐式提交，所以，不能回滚，不会触发触发器。</li>    <li>        <p>drop语句删除表结构及所有数据，并将表所占用的空间全部释放。</p>    </li>    <li>        <p>drop语句将删除表的结构所依赖的约束，触发器，索引，依赖于该表的存储过程/函数将保留,但是变为invalid状态。</p>    </li></ul><blockquote>    <ul>        <li>            <p>如果想删除表，当然用drop； </p>        </li>        <li>            <p>如果想保留表而将所有数据删除，如果和事务无关，用truncate即可；</p>        </li>        <li>            <p>如果和事务有关，或者想触发trigger，还是用delete；</p>        </li>        <li>            <p>如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。</p>        </li>    </ul></blockquote><p>伪删除：用update来替代delete，最终保证业务中查不到（select）即可</p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>            </td>            <td class="code">                <pre><span class="line">1.添加状态列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ch_people_msg <span class="keyword">ADD</span> state <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ch_people_msg;</span><br><span class="line">2. <span class="keyword">UPDATE</span> 替代 <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">UPDATE</span> ch_people_msg <span class="keyword">SET</span> state=<span class="number">0</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">6</span>;</span><br><span class="line">3. 业务语句查询</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ch_people_msg <span class="keyword">WHERE</span> state=<span class="number">1</span>;</span><br></pre>            </td>        </tr>    </table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight routeros">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">UPDATE ch_people_msg <span class="builtin-name">SET</span> <span class="attribute">p_nickname</span>=<span class="string">'zero'</span> WHERE <span class="attribute">id</span>=2;</span><br></pre>            </td>        </tr>    </table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 基本语法</span><br><span class="line">select--from--[where]--[group by]--[having]--[order by]</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>FROM：对FROM子句中的前两个表执行笛卡尔积（Cartesian product)(交叉联接），生成虚拟表VT1 ON：对VT1应用ON筛选器。只有那些使<join_condition>为真的行才被插入VT2<br>OUTER(JOIN)：如果指定了OUTER JOIN（相对于CROSS JOIN 或(INNER JOIN),保留表（preserved table：左外部联接把左表标记为保留表，右外部联接把右表标记为保留表，完全外部联接把两个表都标记为保留表）中未找到匹配的行将作为外部行添加到 VT2,生成VT3.如果FROM子句包含两个以上的表，则对上一个联接生成的结果表和下一个表重复执行步骤1到步骤3，直到处理完所有的表为止。<br>WHERE：对VT3应用WHERE筛选器。只有使<where_condition>为true的行才被插入VT4.<br>GROUP BY：按GROUP BY子句中的列列表对VT4中的行分组，生成VT5.<br>CUBE|ROLLUP：把超组(Suppergroups)插入VT5,生成VT6.<br>HAVING：对VT6应用HAVING筛选器。只有使<having_condition>为true的组才会被插入VT7.<br>SELECT：处理SELECT列表，产生VT8.<br>DISTINCT：将重复的行从VT8中移除，产生VT9.<br>ORDER BY：将VT9中的行按ORDER BY 子句中的列列表排序，生成游标（VC10).<br>TOP：从VC10的开始处选择指定数量或比例的行，生成表VT11,并返回调用者。</p></blockquote><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 单表子句-from</span><br><span class="line">SELECT 列<span class="number">1</span>,列<span class="number">2</span> FROM 表</span><br><span class="line">SELECT  *  FROM 表</span><br></pre>            </td>        </tr>    </table></figure><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>            </td>            <td class="code">                <pre><span class="line"># 等值查询</span><br><span class="line">SELECT  *  FROM 表 where 列 = 值</span><br><span class="line">SELECT 列<span class="number">1</span>,列<span class="number">2</span> FROM 表 where 列 = 值</span><br><span class="line">  </span><br><span class="line"># 比较运算符</span><br><span class="line">&gt;、&lt;、&gt;=、&lt;=、!=、=</span><br><span class="line">SELECT * FROM 表 where 列 &gt;= 值</span><br><span class="line">SELECT 列,... FROM 表 where 列 &lt;= 值</span><br><span class="line">  </span><br><span class="line"># 模糊查询</span><br><span class="line">%代表任何个数的任何字符 _:它代表一个任何字符</span><br><span class="line">注意：%不能放在前面,因为不走索引,要找%或_,转义就行了\%和\_</span><br><span class="line">  </span><br><span class="line"># or、and</span><br><span class="line">  SELECT * FROM 表 where 列 &gt;= 值 or 列 &lt; 值</span><br><span class="line">  </span><br><span class="line"># where配合<span class="keyword">in</span>语句</span><br><span class="line">  SELECT * FROM 表 WHERE 列 IN (VALUES, VALUES);</span><br><span class="line"></span><br><span class="line"># where配合between and</span><br><span class="line">  SELECT * FROM city  WHERE population &gt;<span class="number">1000000</span> AND population &lt;<span class="number">2000000</span>;</span><br><span class="line">SELECT * FROM city  WHERE population BETWEEN <span class="number">1000000</span> AND <span class="number">2000000</span>;</span><br></pre>            </td>        </tr>    </table></figure><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>根据 by后面的条件进行<strong>分组</strong>，方便统计，by后面跟一个列或多个列</p><blockquote>    <p><strong>max()</strong> ：最大值<br><strong>min()</strong> ：最小值<br><strong>avg()</strong> ：平均值<br><strong>sum()</strong> ：总和<br><strong>count()</strong> ：个数<br><strong>group_concat()</strong> : 列转行</p></blockquote><p><strong>having</strong></p><p>​ having语句是分组后过滤的条件，在group by之后使用，也就是如果要用having语句，必须要先有group by语句。</p><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>实现先排序，by后添加条件列</p><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># distinct：去重复查询</span></span><br><span class="line"><span class="keyword">SELECT</span> 列 <span class="keyword">FROM</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(列) <span class="keyword">FROM</span> city  ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合查询- union all</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> city </span><br><span class="line"><span class="keyword">WHERE</span> countrycode <span class="keyword">IN</span> (<span class="string">'CHN'</span> ,<span class="string">'USA'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> countrycode=<span class="string">'CHN'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> countrycode=<span class="string">'USA'</span></span><br><span class="line"></span><br><span class="line">说明:一般情况下,我们会将 <span class="keyword">IN</span> 或者 <span class="keyword">OR</span> 语句 改写成 <span class="keyword">UNION</span> <span class="keyword">ALL</span>,来提高性能</span><br><span class="line"><span class="keyword">UNION</span>     去重复</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> 不去重复</span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DML的使用&quot;&gt;&lt;a href=&quot;#DML的使用&quot; class=&quot;headerlink&quot; title=&quot;DML的使用&quot;&gt;&lt;/a&gt;DML的使用&lt;/h2&gt;
&lt;p&gt;对表中的数据行进行增、删、改&lt;/p&gt;
&lt;h3 id=&quot;增&quot;&gt;&lt;a href=&quot;#增&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>优雅的从服务器上传下载文件</title>
    <link href="https://paynewu.com/1195400737.html"/>
    <id>https://paynewu.com/1195400737.html</id>
    <published>2021-08-25T02:59:37.000Z</published>
    <updated>2021-10-15T01:56:58.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何优雅的从Linux服务器上进行文件“上传”与“下载”</strong></p><p>不知你是否也遇到以下几种情形：</p><ul>    <li>本地电脑上传文件至Linux服务器</li>    <li>Linux服务器之间文件传递</li></ul><p>那么如何有效、且优雅的的进行呢。特意为了此下载xshell、finalshell等软件？其实也大可不必，隐患太多也并不方便。只需要学会使用Linux中scp命令即可</p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>scp在网络上的主机之间复制文件。它使用ssh进行数据传输，并使用与ssh相同的身份验证和提供相同的安全性。scp如果身份验证需要密码或密码短语，则会询问密码或密码。</p><p>scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。</p><blockquote>    <p>文件名可能包含用户和主机规范，以指示将文件复制到该主机或从该主机复制文件。本地文件名可以使用绝对或相对路径名</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">scp [options] remote_ip:remote_folder(remote_file) local_folder(local_file)</span><br><span class="line">scp [options] remote_user@remote_ip:remote_folder(remote_file) local_folder(local_file)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传</span></span><br><span class="line">scp [options] local_folder(local_file) remote_ip:remote_folder(remote_file)</span><br><span class="line">scp [options] local_folder(local_file) remote_user@remote_ip:remote_folder(remote_file)</span><br></pre>            </td>        </tr>    </table></figure><p><strong>记忆</strong></p><blockquote>    <p>remote_ip 在前即下载，在后即上传</p></blockquote><h3 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h3><ul>    <li>-1： 强制scp命令使用协议ssh1</li>    <li>-2： 强制scp命令使用协议ssh2</li>    <li>-4： 强制scp命令只使用IPv4寻址</li>    <li>-6： 强制scp命令只使用IPv6寻址</li>    <li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li>    <li>-C： 允许压缩（将-C标志传递给ssh，从而打开压缩功能）</li>    <li>-q： 不显示传输进度条。</li>    <li>-r： 递归复制整个目录。</li>    <li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li>    <li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li>    <li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>    <li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li>    <li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li>    <li>-o ssh_option： 如果习惯于使用ssh_config中的参数传递方式，</li>    <li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li>    <li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。</p><p>如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下：</p><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="meta">#</span><span class="bash"> scp 命令使用端口号 4526</span></span><br><span class="line">scp -P 4526 remote@s2:/usr/local/checkNetwokr.sh ~/</span><br></pre>            </td>        </tr>    </table></figure><h2 id="实例脚本"><a href="#实例脚本" class="headerlink" title="实例脚本"></a>实例脚本</h2><p>使用scp实现文件(夹)分发上传到服务器</p><figure class="highlight shell">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 远程地址列表 remote hosts List</span></span></span><br><span class="line">rhs_list=(s1 s2)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 本地文件路径</span></span></span><br><span class="line">local_file=~/c.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 目的文件路径</span></span></span><br><span class="line">target_path=~/</span><br><span class="line"></span><br><span class="line">for host in $&#123;rhs_list[@]&#125;; do</span><br><span class="line">scp -C $&#123;local_file&#125; root@$&#123;host&#125;:~/</span><br><span class="line">done</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>反之也可下载</p></blockquote><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>配合ssh免密登陆与host解析scp更加丝滑哦</p><p>具体可参考基于ssh-key实现服务器免密登陆</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;如何优雅的从Linux服务器上进行文件“上传”与“下载”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知你是否也遇到以下几种情形：&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;本地电脑上传文件至Linux服务器&lt;/li&gt;
    &lt;li&gt;Linux服务器之间文件传递&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="ssh" scheme="https://paynewu.com/categories/ssh/"/>
    
      <category term="Linux" scheme="https://paynewu.com/categories/ssh/Linux/"/>
    
      <category term="服务器" scheme="https://paynewu.com/categories/ssh/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="文件传输" scheme="https://paynewu.com/categories/ssh/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    
      <category term="scp" scheme="https://paynewu.com/categories/ssh/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/scp/"/>
    
    
      <category term="ssh" scheme="https://paynewu.com/tags/ssh/"/>
    
      <category term="Linux" scheme="https://paynewu.com/tags/Linux/"/>
    
      <category term="服务器" scheme="https://paynewu.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="文件传输" scheme="https://paynewu.com/tags/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    
      <category term="scp" scheme="https://paynewu.com/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>如何做好自我介绍</title>
    <link href="https://paynewu.com/2241892771.html"/>
    <id>https://paynewu.com/2241892771.html</id>
    <published>2021-08-24T18:27:34.000Z</published>
    <updated>2021-10-15T01:56:58.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>​ 介，古代传递宾主之言的人。绍，绍继、接续。介绍指相继传话；为人引进或带入新的事物。自我介绍是向别人展示你，认识你。</p><p>​ 自我介绍好不好，重要性不言而喻其直接关系到你给别人的第一印象的好坏及以后交往的顺利与否。同时，也是认识自我的手段。</p><h3 id="如何做好自我介绍"><a href="#如何做好自我介绍" class="headerlink" title="如何做好自我介绍"></a>如何做好自我介绍</h3><p>自我介绍一是为了更好的破冰，让别人记住你、了解你等，那么如何做自我介绍自然也从这几点切入。</p><h3 id="自嘲式"><a href="#自嘲式" class="headerlink" title="自嘲式"></a>自嘲式</h3><blockquote>    <p>适用场景：演讲</p>    <p>关键词：破冰</p></blockquote><p>有趣的自嘲可以快速吸引注意力，让人对你记忆犹新。</p><p>例如：你（大家）好，我叫xxx。原本想做一名x x x,可能是xxx不太好。所以目前做了xxx</p><h3 id="八卦式"><a href="#八卦式" class="headerlink" title="八卦式"></a>八卦式</h3><blockquote>    <p>适用场景：非正式场合</p>    <p>关键词：好奇</p></blockquote><p>在远古社会，智人凭借八卦，使整个群体更趋于稳定和学会更多的协作，而协作就是智人强大起来的秘诀，但是为什么八卦可以使一个族群稳定和协作呢?因为信任，因为八卦这种社交行为可以让智人相互信任，而信任的基础就是相互了解，八卦就是智人相互了解的过程。 ——《人类简史》</p><p>例如：大家好，我叫xxx，来自xxx，（合理热点）结果xxx。我xxx</p><h3 id="自荐式"><a href="#自荐式" class="headerlink" title="自荐式"></a>自荐式</h3><blockquote>    <p>适用场景：商务场合、聚会，面试</p>    <p>关键词：自我推荐</p></blockquote><p>我是xxx，他人最需要自我价值面。</p><blockquote>    <p>切记避免<strong>多次</strong>,尽量全面</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介绍&lt;/h2&gt;
&lt;p&gt;​ 介，古代传递宾主之言的人。绍，绍继、接续。介绍指相继传话；为人引进或带入新的事物。自我介绍是向别人展示你，认识你。&lt;/
      
    
    </summary>
    
    
      <category term="个人随笔" scheme="https://paynewu.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
      <category term="所思所想" scheme="https://paynewu.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
    
      <category term="个人随笔" scheme="https://paynewu.com/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
      <category term="所思所想" scheme="https://paynewu.com/tags/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>反爬虫常见策略总结</title>
    <link href="https://paynewu.com/358032656.html"/>
    <id>https://paynewu.com/358032656.html</id>
    <published>2021-08-24T17:56:48.000Z</published>
    <updated>2021-10-15T01:56:58.267Z</updated>
    
    <content type="html"><![CDATA[<p>知己知彼，百战不殆 ——《孙子兵法》。</p><blockquote>    <p>本文仅总结鄙人所知的反爬虫方式，不涉猎任何具体的分析与绕过方案。</p></blockquote><h1 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h1><p>反爬虫，即应对爬虫进行反制的统称，<strong>主要区分“正常用户”与“机器人”的一种策略统称</strong>。</p><h2 id="认识反爬虫"><a href="#认识反爬虫" class="headerlink" title="认识反爬虫"></a>认识反爬虫</h2><p>​ 正所谓知其然，知其所以然。对于反爬虫的措施有所了解与认知，一方面便于快捷定位防护点实现分析或绕过，另一方面组成爬虫攻防体系。万变自不离其宗，应对反爬虫措施游刃有余。一般常在如下几大部分<strong>设伏</strong>。</p><blockquote>    <p> 以下便不考虑第三方测试工具的校验</p></blockquote><h3 id="请求前校验"><a href="#请求前校验" class="headerlink" title="请求前校验"></a>请求前校验</h3><h4 id="抓包拦截"><a href="#抓包拦截" class="headerlink" title="抓包拦截"></a><strong>抓包拦截</strong></h4><p>​ 做过爬虫的小伙伴，一定知道在分析加密、执行爬虫项目之前。首先第一步一定是先抓包，定位到对应数据包，然后继续才进行分析或规律。那么在此无疑是<strong>最为有效</strong>的反抓，捕获不到流量包URL未知，除了使用自动化测试工具、RPC等通常可能都毫无办法。</p><p>抓包拦截又可细分为控制台检测、端口转移、证书校验，私有协议总而言之就是让你抓不到包，其方法无所不用其极。</p><p>控制台检测抓包绕过策略：</p><ul>    <li>        <p>替代法: 采用<strong>中间人抓包</strong>（Charles、mitmproxy、firdler等）</p>    </li>    <li>        <p>分析绕过法：定位到检测处，分析绕过</p>    </li></ul><p>端口转移绕过策略：</p><ul>    <li>强制端口</li>    <li>流量转发</li></ul><p><strong>证书锁定与公钥锁定</strong></p><p>​ 为了防止中间人攻击，采用SSL-Pinning的技术来反抓包。 中间人抓包要点是伪造了一个假的证书实现拦截与转发，从而在中间获取的过路数据包实现抓包。<br>反抓思路就是，客户端也预置一份服务端的证书，比较一下就知道真假了。SSL-pinning有两种方式证书锁定（Certificate Pinning）与公钥锁定（Public Key Pinning）</p><p>证书锁定</p><blockquote>    <p>​ 证书锁定是SSL/TLS加密的额外保证手段。它会将服务器的证书公钥预先保存在客户端。在建立安全连接的过程中，客户端会将预置的公钥和接受的证书做比较。<br>如果一致，就建立连接，否则就拒绝连接。在客户端设置证书只允许设置指定域名的证书，而不接受操作系统或浏览器内置的CA根证书对应的任何证书。</p></blockquote><p>公钥锁定</p><blockquote>    <p> HTTP公钥锁定是HTTPS网站防止攻击者CA机构错误签发的证书进行中间人攻击的一种安全机制，用于预防CA遭受入侵或其他会造成CA签发未授权证书的情况。<br>采用公钥锁定时，网站会提供已授权公钥的哈希列表，指示客户端在后续通讯中只接受列表上的公钥。提取证书中的公钥并内置到客户端中，通过与服务器对比公钥值来验证连接的正确性。</p></blockquote><p>绕过：Hook到证书校验，无论如何返回正确的即可</p><p><strong>私有协议通讯</strong></p><p>一线大厂自定义通讯协议，自然考虑到了抓包。那么自然而然也设置了反抓包</p><p>绕过：Hook、沙箱</p><h4 id="运行环境检测"><a href="#运行环境检测" class="headerlink" title="运行环境检测"></a>运行环境检测</h4><p>CDN网络分发加验证:经典产品5秒盾</p><blockquote>    <p>其核心为 请求 -&gt; cdn -&gt; 返回关键参数 -&gt; 通过 -&gt; 数据(可能为假)</p></blockquote><h3 id="请求校验"><a href="#请求校验" class="headerlink" title="请求校验"></a>请求校验</h3><blockquote>    <p>当抓到包之后，便是模拟用户请求了。那么这里的常见的反抓措施有哪些呢</p></blockquote><p>请求校验，即在发送请求时即对网络请求时进行校验，实现区分。<strong>通过则返回数据，未通过不返回或返回假数据</strong>常有如下几种方式</p><h4 id="协议校验"><a href="#协议校验" class="headerlink" title="协议校验"></a><strong>协议校验</strong></h4><p>常见通用的协议有HTTP1.0、 HTTP1.1、HTTP2.0 ，若强行只允许HTTP2.0协议来完成请求与响应。那么平常使用其他</p><h4 id="TSL指纹"><a href="#TSL指纹" class="headerlink" title="TSL指纹"></a><strong>TSL指纹</strong></h4><p>每个请求库其实是有自己的库指纹，若只允许某段或某规则指纹通过，那么自然而言实现了反抓的效果。</p><h4 id="header校验"><a href="#header校验" class="headerlink" title="header校验"></a>header校验</h4><p>header校验又可分为两种。其一是字段校验，其二是header字段顺序校验</p><p>header各字段校验，如ua、sign、cookie、token、safe等</p><blockquote>    <p>绕过方案或思想：<br>通过JS解密或逆向获取关键参数缺啥补啥，完成模拟即可</p></blockquote><p>header字段顺序：当我们打开一个网页其实是一个新的会话那么在未断开或重新连接的时候那么这个顺序就是固定的。而字典格式中位置其实是随机分配的，自定义客户端刷新，对header取指纹或字段顺序检测即可实现鉴别</p><blockquote>    <p>绕过方案或思想：保持会话一致</p></blockquote><h4 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h4><p>通常字段不仅在header中校验还经常在请求参数中，如sgin、token、safe等。</p><blockquote>    <p>参数不可无缘无故来，主要来源JS 生成、服务器下发(不限于文件、JS、wasm等)。又可进行多次中间操作</p></blockquote><h4 id="前后端分离技术Ajax"><a href="#前后端分离技术Ajax" class="headerlink" title="前后端分离技术Ajax"></a>前后端分离技术Ajax</h4><blockquote>    <p>严格来说并不算反扒而是前后端分离技术,但常常结合反抓共同出现</p></blockquote><p>Ajax（异步JavaScript和XML）也叫不刷新页面请求。</p><h4 id="RPC防护"><a href="#RPC防护" class="headerlink" title="RPC防护"></a>RPC防护</h4><p>采用RPC及加密或编码方式实现前后端分离、微服务架构等。</p><blockquote>    <p>rpc结合反抓基本步骤，客户端请求(中间极有可能涉猎加密)RPC服务端，RPC客户端(原服务端)再次(中间极有可能涉猎加密)请求(一次或多次)。实现“分端”请求，多端加密。</p>    <p>逆写rpc进行调用，模拟“第一次”客户端请求rpc无差别，绕过</p></blockquote><h4 id="请求校验小结"><a href="#请求校验小结" class="headerlink" title="请求校验小结"></a>请求校验小结</h4><p>通常设置参数有两种情况，</p><ol>    <li>二次或多次请求：<ol>            <li>RPC：客户端请求，服务端使用RPC等再请求。</li>            <li>AJax</li>        </ol>    </li>    <li>JS设置关键参数（<strong>含二次刷新删除源文件跳转页面</strong>）</li></ol><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><ul>    <li>识别点选或输入型</li>    <li>滑轨、滑块型</li>    <li>计算型</li>    <li>空值补齐型</li>    <li>空间推理型</li>    <li>短信或语音验证型</li></ul><h2 id="风控"><a href="#风控" class="headerlink" title="风控"></a>风控</h2><p>范围极大极广，简而言之，用户行为、运行环境等是否<strong>合理</strong>。从而实现区分</p><p>IP封禁</p><p>代码运行环境检测</p><p>等</p><h3 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h3><p>在不改变原有展示的情况下实现<strong>“隐藏”</strong></p><p>通常数据保护有以下种方式：</p><ol>    <li>动态字体</li>    <li>CSS偏移</li>    <li>内容加密映射</li>    <li>SVG映射等</li>    <li>内容图片化</li></ol><h2 id="代码防护"><a href="#代码防护" class="headerlink" title="代码防护"></a>代码防护</h2><h3 id="JS代码混淆"><a href="#JS代码混淆" class="headerlink" title="JS代码混淆"></a>JS代码混淆</h3><p>在遇见需要逆向的参数时候，往往不像表面一个参数那般平静。一查看各种混淆、防护又来了。怎么办怎么办，肝啊！当然也可以使用渲染工具模拟，此方案在此便不在过多赘述。</p><p>代码混淆是增加分析难度而牺牲部分性能的一种方案，此方案大部分是体现在通过逻辑转换换等方式将代码转化为难以分析的代码。难以分析是混淆的目的，等价转换是需要确保混淆前后的代码需不影响运行的功能。对于混淆可以又分为如下四种：布局混淆、数据混淆、控制混淆、预防混淆</p><p><strong>布局混淆</strong></p><p>布局混淆指在源代码中删除原有无用代码，处理常量名、变量名函数名等标识符，增加对于代码的阅读与分析。</p><p>无用代码：注释、调试信息、缩进、换行、无用函数与数据等</p><p>处理常量名、变量名函数名等标识符：</p><ul>    <li>标识重命名：将原有代码重命名为无具体意义的字符，例如 将name 重命名为a</li></ul><blockquote>    <p> 注意点：作用域内标识符碰撞情况</p></blockquote><p><strong>小结</strong>：布局混淆并不会影响执行的过程、内存开销，甚至代码体积反而减少了。</p><p><strong>数据混淆</strong></p><p>JS拥有常见的7种数据类型，number、string、boolean、unfined、null、Object</p><p><strong>数字混淆</strong></p><p>数据混淆有常见：进制转换、数字分治、其他</p><ul>    <li>        <p>进制转换：将十进制转化为二进制、八进制、十六进制等，从而达到“混淆”的目的</p>    </li>    <li>        <p><strong>数学分治</strong>：简而言之就是将数拆开，例如 2 = 1 + 1，也等于2 - 1 - 1 + 2再辅以数学公式等</p>    </li>    <li>        <p>其他：重新赋值等</p>    </li></ul><p><strong>字符串混淆</strong></p><p>字符串混淆常见的有编码转换编译、加密。常见的有hash、base64、md5等</p><p><strong>boolean</strong></p><p>我们都知道Boolean值为True、False。根据对boolean的处理，变成难以显示阅读的代码。</p><figure class="highlight erlang-repl">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>            </td>            <td class="code">                <pre><span class="line">!<span class="number">0</span>,!<span class="number">1</span></span><br><span class="line">![], !![]</span><br><span class="line">!&#123;&#125;,!!&#123;&#125;</span><br><span class="line">!NaN,!!NaN</span><br><span class="line">!<span class="string">""</span>, !!<span class="string">""</span></span><br><span class="line">!undefined, !!undefined</span><br><span class="line">!null, !!null</span><br><span class="line">!Object, !!Object</span><br><span class="line">!void(<span class="number">0</span>),!!void(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">|,||, &amp;, &amp;&amp;, Boolean()</span><br></pre>            </td>        </tr>    </table></figure><p><strong>控制混淆</strong></p><p>控制混淆是指对程序的控制流进行转换变化，常见的方式有插入僵尸代码、控制流平坦化</p><p>插入僵尸代码：插入僵尸代码即插入无用的代码，增强调试难度</p><p>控制流平坦化：控制流平坦化,将原本的的执行流程平坦化。具体可自行搜索</p><p><strong>预防混淆</strong></p><p>主要体现在 提高反混淆的难度或检测现有混淆器中的漏洞设计</p><h3 id="JS虚拟机"><a href="#JS虚拟机" class="headerlink" title="JS虚拟机"></a>JS虚拟机</h3><p>自定义或定制JavaScript虚拟机，基于给予二进制文件获取结果</p><h3 id="Android-iOS-SDK-加固保护"><a href="#Android-iOS-SDK-加固保护" class="headerlink" title="Android/iOS SDK 加固保护"></a>Android/iOS SDK 加固保护</h3><p><strong>代码混淆</strong></p><blockquote>    <p>具体可参考JS混淆部分，殊归同途</p></blockquote><p><strong>Dex 加固与抽取</strong></p><p>​ Dex 加固即将需要保护的代码单独生成Dex，在so加载时解密jar并通过DexClassLoader加载到内存里。该方案的主要问题在于解密后的Dex会以文件形式存储在手机内存中，而且通过内存dump 的方式能够获取解密后的jar 包，而没有生成文件加载的方式存在很多兼容性的问题</p><p>​ 在实际对抗环境下，Dex 无论如何保护，都有方法还原至原始的Dex，进而反编译得到Java 代码。而C 代码相对而言较难逆向。Java2c 是指将原有的Java 代码抽取出来，通过jni 在native 层反射实现。</p><p>流程如下：Dex→smali→抽取+native 化→生成so</p><p>抽取后的原始Java 函数，反编译出来是native 函数，在运行过程中也不会还原。Java2c 配合C 语言的代码混淆技术和字符串混淆技术，可以对Android 的Java 代码起到很好的保护效果。同时也不需要对原始Java 代码进行重写</p><p><strong>LLVM</strong></p><p>LLVM 是Low Level Virtual Machine 的缩写，其定位是一个比较底层的虚拟机。然而LLVM 本身并不是一个完整的编译器，LLVM 是一个编译器基础架构，把很多编译器需要的功能以可调用的模块形式实现出来并包装成库，其他编译器实现者可以根据自己的需要使用或扩展，主要聚焦于编译器后端功能，如代码生成、代码优化、JIT 等。</p><p><strong>代码虚拟化</strong></p><p>​ 代码虚拟化保护技术是一种比Dex 文件保护、Java2c 技术更强的安全防护技术，可以更有效地对抗逆向工程或破解，避免造成核心技术和风控逻辑被泄密的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">graph LR</span><br><span class="line">A(已有)&#x3D;&#x3D;无数次的中间转换&#x3D;&#x3D;&gt; B1(所需)</span><br></pre>            </td>        </tr>    </table></figure><p>以上便是本人对于所见所知所想的反爬虫，各种加密、编译、混淆等。中间围绕无数种可能。一起加油吧！！！</p><p>好像什么都说了，什么都没说。望君参考却不限于此。</p><p>总体来说就是抓包、请求前校验、请求校验、数据保护。以及风控、验证码、及对于代码进行保护。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知己知彼，百战不殆 ——《孙子兵法》。&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;本文仅总结鄙人所知的反爬虫方式，不涉猎任何具体的分析与绕过方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;反爬虫&quot;&gt;&lt;a href=&quot;#反爬虫&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Crawler" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/Crawler/"/>
    
      <category term="数据采集" scheme="https://paynewu.com/categories/%E7%88%AC%E8%99%AB/Crawler/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
    
      <category term="爬虫" scheme="https://paynewu.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Crawler" scheme="https://paynewu.com/tags/Crawler/"/>
    
      <category term="Web Spider" scheme="https://paynewu.com/tags/Web-Spider/"/>
    
      <category term="数据采集" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的SQL使用之上</title>
    <link href="https://paynewu.com/3376299280.html"/>
    <id>https://paynewu.com/3376299280.html</id>
    <published>2021-08-23T14:37:55.000Z</published>
    <updated>2021-10-15T01:56:58.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h2><p>结构化查询语言,5.7 以后符合SQL92严格模式,通过sql_mode参数来控制</p><p>DDL（Data Definition Language，数据定义语言）：用于定义数据库、数据表和列，可以用来创建、删除、修改数据库和数据表的结构，包含CREATE、DROP和ALTER等语句。</p><p>DML（Data Manipulation Language，数据操作语言）：用于操作数据记录，可以对数据库中数据表的数据记录进行增加、删除和修改等操作，包含INSERT、DELETE和UPDATE等语句。</p><p>DCL（Data Control Language，数据控制语言）：用于定义数据库的访问权限和安全级别，主要包含GRANT、REVOKE、COMMIT和ROLLBACK等语句。</p><p>DQL（Data Query Language，数据查询语言）：用于查询数据表中的数据记录，主要包含SELECT语句。</p><a id="more"></a><h2 id="DDL的应用"><a href="#DDL的应用" class="headerlink" title="DDL的应用"></a>DDL的应用</h2><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p>建库规范：</p><ol>    <li>库名要和业务相关</li>    <li>库名不能有<strong>大写字母</strong>、<strong>数字</strong>开头</li>    <li>建库要加字符集</li></ol><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">create database [<span class="keyword">if</span> not exists] 数据库名 [charset 字符编码名称(utf8mb4)] [collate 排序规则(utf8mb4_general_ci)];</span><br></pre>            </td>        </tr>    </table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><blockquote>    <p>生产中禁止使用</p></blockquote><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br></pre>            </td>            <td class="code">                <pre><span class="line">drop database 数据库名</span><br></pre>            </td>        </tr>    </table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><blockquote>    <p>先查在改</p></blockquote><figure class="highlight dart">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>            </td>            <td class="code">                <pre><span class="line">SHOW CREATE DATABASE 数据库名;</span><br><span class="line">ALTER DATABASE 数据库名 [charset 字符编码名称] [collate 排序规则];</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>注意：修改字符集，修改后的字符集一定是原字符集的严格超集</p></blockquote><h4 id="查（DQL）"><a href="#查（DQL）" class="headerlink" title="查（DQL）"></a>查（DQL）</h4><p>显示所有数据库 形式:show databases;</p><p>显示一个数据库的创建语句: show create database 数据库名;</p><p>其他:show charset; show collation;</p><p>当前选择的数据库:\s、select database();</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p><strong>创建表规范</strong></p><ol>    <li>库名需与业务相关，且小写与非数字开头，表、列均需有注释</li>    <li>注意字符集和存储引擎</li>    <li>选择<strong>合适</strong>的<strong>数据类型</strong></li>    <li>每个列设置为非空，若无法保证非空，用0来填充。</li></ol><h4 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h4><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(</span><br><span class="line"> 字段<span class="number">1</span> 数据类型 [约束条件] [默认值],</span><br><span class="line"> 字段<span class="number">2</span> 数据类型 [约束条件] [默认值],</span><br><span class="line">  [表约束条件]</span><br><span class="line">) [表选项<span class="number">1</span>,表选项<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`ch_people_msg`</span> ( </span><br><span class="line">  <span class="string">`p_id`</span>  <span class="built_in">SERIAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span> , </span><br><span class="line">  <span class="string">`p_uic`</span> <span class="built_in">CHAR</span>(<span class="number">18</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户身份证'</span>,</span><br><span class="line">  <span class="string">`p_nickname`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>, </span><br><span class="line">  <span class="string">`p_gender`</span> ENUM(<span class="string">'m'</span>,<span class="string">'f'</span>, <span class="string">'n'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'n'</span> <span class="keyword">COMMENT</span> <span class="string">'用户性别'</span>, </span><br><span class="line">  <span class="string">`p_age`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户年龄'</span>, </span><br><span class="line">  <span class="string">`p_pnum`</span> <span class="built_in">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户电话'</span>, </span><br><span class="line">  <span class="string">`p_address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户地址'</span>, </span><br><span class="line">  <span class="string">`p_email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>, </span><br><span class="line">  <span class="string">`p_add_time`</span> <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NOW</span>() <span class="keyword">COMMENT</span> <span class="string">'统计用户时间'</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="string">`p_id`</span>),</span><br><span class="line">   <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`p_uic`</span>(<span class="string">`p_uic`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">COMMENT</span> = <span class="string">'中国成员信息表'</span>;</span><br></pre>            </td>        </tr>    </table></figure><blockquote>    <p>注意：字段结束为<code>,</code>分隔， 整体结束为<code>)</code>分隔</p></blockquote><h4 id="删除-生产中禁用命令"><a href="#删除-生产中禁用命令" class="headerlink" title="删除(生产中禁用命令)"></a>删除(生产中禁用命令)</h4><p>DROP TABLE table_name</p><h3 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h3><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">ADD</span>、<span class="keyword">DROP</span>、<span class="keyword">MODIFY</span>]</span><br><span class="line"><span class="comment"># 增加字段'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在表首列加入p_num列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`ch_people_msg`</span> <span class="keyword">ADD</span> p_num <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数字'</span> <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在列p_nickname 后增加 p_wechat列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`ch_people_msg`</span> <span class="keyword">ADD</span> p_wechat <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>  <span class="keyword">COMMENT</span> <span class="string">'微信号'</span> <span class="keyword">AFTER</span> <span class="string">`p_nickname`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在表中(最后)增加p_qq列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`ch_people_msg`</span> <span class="keyword">ADD</span> p_qq <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'用户qq号'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> 字段名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">MODIFY</span> 字段名 约束条件 默认值</span><br></pre>            </td>        </tr>    </table></figure><h4 id="表属性查询（DQL）"><a href="#表属性查询（DQL）" class="headerlink" title="表属性查询（DQL）"></a>表属性查询（DQL）</h4><figure class="highlight sql">    <table>        <tr>            <td class="gutter">                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>            </td>            <td class="code">                <pre><span class="line"><span class="comment"># 罗列所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>；</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表状态</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> [<span class="keyword">from</span> db_name] [<span class="keyword">like</span> table_name];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表结构</span></span><br><span class="line">desc `table_name`;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`table_name`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建相同类型的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db_name_2`</span> <span class="keyword">LIKE</span> <span class="string">`db_name_1`</span>;</span><br></pre>            </td>        </tr>    </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL介绍&quot;&gt;&lt;a href=&quot;#SQL介绍&quot; class=&quot;headerlink&quot; title=&quot;SQL介绍&quot;&gt;&lt;/a&gt;SQL介绍&lt;/h2&gt;
&lt;p&gt;结构化查询语言,5.7 以后符合SQL92严格模式,通过sql_mode参数来控制&lt;/p&gt;
&lt;p&gt;DDL（Data Definition Language，数据定义语言）：用于定义数据库、数据表和列，可以用来创建、删除、修改数据库和数据表的结构，包含CREATE、DROP和ALTER等语句。&lt;/p&gt;
&lt;p&gt;DML（Data Manipulation Language，数据操作语言）：用于操作数据记录，可以对数据库中数据表的数据记录进行增加、删除和修改等操作，包含INSERT、DELETE和UPDATE等语句。&lt;/p&gt;
&lt;p&gt;DCL（Data Control Language，数据控制语言）：用于定义数据库的访问权限和安全级别，主要包含GRANT、REVOKE、COMMIT和ROLLBACK等语句。&lt;/p&gt;
&lt;p&gt;DQL（Data Query Language，数据查询语言）：用于查询数据表中的数据记录，主要包含SELECT语句。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://paynewu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://paynewu.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://paynewu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
