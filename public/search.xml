<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang-Array</title>
    <url>/62372.html</url>
    <content><![CDATA[<h2 id="Array-数组-的介绍"><a href="#Array-数组-的介绍" class="headerlink" title="Array(数组)的介绍"></a>Array(数组)的介绍</h2>
<p>数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。 基本语法：</p>
<a id="more"></a>
<blockquote>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="keyword">var</span> 数组变量名 [数组数量]数组类型</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>//数组的长度必须是常量，并且长度是数组类型的一部分。<br>// 一旦定义，长度不能变。 [1]int和[2]int是不同的两种类型。<br>数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1，访问越界（下标在合法范围之外），则触发访问越界，会panic。</p>
    <p>例如：</p>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">	<span class="keyword">var</span> a [<span class="number">1</span>]<span class="keyword">int</span></span><br><span class="line">	<span class="keyword">var</span> b [<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">	a = b </span><br><span class="line"><span class="comment">//  cannot use b (type [2]int) as type [1]int in assignment</span></span><br><span class="line"><span class="comment">//不可以这样做，因为此时a和b是不同的类型</span></span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<h2 id="Array-数组-的定义"><a href="#Array-数组-的定义" class="headerlink" title="Array(数组)的定义"></a>Array(数组)的定义</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	definitionPart1()</span><br><span class="line">	definitionPart2()</span><br><span class="line">	definitionPart3()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化列表来设置数组元素的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">definitionPart1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> testArray [<span class="number">3</span>]<span class="keyword">int</span>                        <span class="comment">//数组会初始化为int类型的零值</span></span><br><span class="line">	<span class="keyword">var</span> numArray = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;              <span class="comment">//使用指定的初始值完成初始化</span></span><br><span class="line">	<span class="keyword">var</span> cityArray = [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"北京"</span>, <span class="string">"上海"</span>, <span class="string">"深圳"</span>&#125; <span class="comment">//使用指定的初始值完成初始化</span></span><br><span class="line">	fmt.Println(testArray)                      <span class="comment">//[0 0 0]</span></span><br><span class="line">	fmt.Println(numArray)                       <span class="comment">//[1 2 0]</span></span><br><span class="line">	fmt.Println(cityArray)                      <span class="comment">//[北京 上海 深圳]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照上面的方法每次都要确保提供的初始值和数组长度一致，一般情况下我们可以让编译器根据初始值的个数自行推断数组的长度，</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">definitionPart2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> testArray [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line">	<span class="keyword">var</span> numArray = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> cityArray = [...]<span class="keyword">string</span>&#123;<span class="string">"北京"</span>, <span class="string">"上海"</span>, <span class="string">"深圳"</span>&#125;</span><br><span class="line">	fmt.Println(testArray)                          <span class="comment">//[0 0 0]</span></span><br><span class="line">	fmt.Println(numArray)                           <span class="comment">//[1 2]</span></span><br><span class="line">	fmt.Printf(<span class="string">"type of numArray:%T\n"</span>, numArray)   <span class="comment">//type of numArray:[2]int</span></span><br><span class="line">	fmt.Println(cityArray)                          <span class="comment">//[北京 上海 深圳]</span></span><br><span class="line">	fmt.Printf(<span class="string">"type of cityArray:%T\n"</span>, cityArray) <span class="comment">//type of cityArray:[3]string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指定索引值的方式来初始化数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">definitionPart3</span><span class="params">()</span> <span class="params">()</span></span> &#123;</span><br><span class="line">	a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(a)                  <span class="comment">// [0 1 0 5]</span></span><br><span class="line">	fmt.Printf(<span class="string">"type of a:%T\n"</span>, a) <span class="comment">//type of a:[4]int</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="Array-数组-的定义遍历"><a href="#Array-数组-的定义遍历" class="headerlink" title="Array(数组)的定义遍历"></a>Array(数组)的定义遍历</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [...]<span class="keyword">string</span>&#123;<span class="string">"北京"</span>, <span class="string">"上海"</span>, <span class="string">"广州"</span>, <span class="string">"深圳"</span>&#125;</span><br><span class="line">	<span class="comment">// 方法1：for循环遍历</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">		fmt.Println(a[i])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 方法2：for range遍历</span></span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> a &#123;</span><br><span class="line">		fmt.Println(index, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="多维数组-嵌套数组"><a href="#多维数组-嵌套数组" class="headerlink" title="多维数组(嵌套数组)"></a>多维数组(嵌套数组)</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="string">"长沙"</span>,</span><br><span class="line">		&#123;<span class="string">"北京"</span>, <span class="string">"上海"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"广州"</span>, <span class="string">"深圳"</span>&#125;,</span><br><span class="line">		&#123;<span class="string">"成都"</span>, <span class="string">"重庆"</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(a) <span class="comment">//[[北京 上海] [广州 深圳] [成都 重庆]]</span></span><br><span class="line">	fmt.Println(a[<span class="number">2</span>][<span class="number">1</span>]) <span class="comment">//支持索引取值:重庆</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h2>
<p>数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyArray</span><span class="params">(x [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	x[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyArray2</span><span class="params">(x [3][2]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	x[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line">	modifyArray(a) <span class="comment">//在modify中修改的是a的副本x</span></span><br><span class="line">	fmt.Println(a) <span class="comment">//[10 20 30]</span></span><br><span class="line">	b := [<span class="number">3</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	modifyArray2(b) <span class="comment">//在modify中修改的是b的副本x</span></span><br><span class="line">	fmt.Println(b)  <span class="comment">//[[1 1] [1 1] [1 1]]</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>注意：</strong></p>
<ol>
    <li>数组支持 “==“、”!=” 操作符，因为内存总是被初始化过的。</li>
    <li><code>[n]*T</code>表示指针数组，<code>*[n]T</code>表示数组指针</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>cni already has an IP address different from ...</title>
    <url>/4032605777.html</url>
    <content><![CDATA[<h2 id="错误如下"><a href="#错误如下" class="headerlink" title="错误如下"></a>错误如下</h2>
<p>cni already has an IP address different from …</p>
<p>如图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz8c50ce1j627w0mex5w02.jpg" alt="1421630332579_.pic_hd"></p>
<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2>
<p>node之前反复添加</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 找到对应的节点</span></span><br><span class="line">kubectl get pod --all-namespace -o wide</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在对应node上执行如下命令</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 重置Kubernetes集群</span></span><br><span class="line">kubeadm reset &amp;&amp; systemctl stop kubelet &amp;&amp; systemctl stop docker</span><br><span class="line"><span class="comment"># 删除残留</span></span><br><span class="line">rm -rf /var/lib/cni/ &amp;&amp; rm -rf /var/lib/kubelet/* &amp;&amp; rm -rf /etc/cni/</span><br><span class="line"><span class="comment"># 删除旧网络</span></span><br><span class="line">ifconfig cni0 down &amp;&amp; ifconfig flannel.1 down &amp;&amp; ifconfig docker0 down </span><br><span class="line">ip link delete cni0 &amp;&amp; ip link delete flannel.1</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart docker &amp;&amp; systemctl start kubelet</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在master上获取join token</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>重新加入节点</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>
<p><a href="https://www.cnblogs.com/wangxu01/articles/11803547.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangxu01/articles/11803547.html</a></p>
]]></content>
      <categories>
        <category>Error Set</category>
        <category>错误集合</category>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>错误集合</tag>
        <tag>Error Set</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-Defer详解</title>
    <url>/17571.html</url>
    <content><![CDATA[<h2 id="defer触发时机"><a href="#defer触发时机" class="headerlink" title="defer触发时机"></a>defer触发时机</h2>
<blockquote>
    <p>A “defer” statement invokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.</p>
</blockquote>
<p>Go官方文档中对defer的执行时机做了阐述，分别是。</p>
<ul>
    <li>包裹defer的函数返回时</li>
    <li>包裹defer的函数执行到末尾时 </li>
    <li>所在的goroutine发生panic时</li>
    <li>
        <a id="more"></a>
    </li>
</ul>
<h2 id="defer执行顺序"><a href="#defer执行顺序" class="headerlink" title="defer执行顺序"></a>defer执行顺序</h2>
<p>当一个方法中有多个defer时， defer会将要延迟执行的方法“压栈”，当defer被触发时，将所有“压栈”的方法“出栈”并执行。所以defer的执行顺序是LIFO的。</p>
<p>执行顺序如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 常规执行</span></span><br><span class="line"></span><br><span class="line">语句1 -&gt; 语句2 -&gt; 语句3 -&gt; 语句4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在语句2，语句3中添加defer后执行顺序如下</span></span><br><span class="line"></span><br><span class="line">语句1 -&gt; 语句4 -&gt; 语句3(带defer) -&gt; 语句2(带defer)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="defer示例"><a href="#defer示例" class="headerlink" title="defer示例"></a>defer示例</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	d()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">d</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">"start"</span> + <span class="string">"  "</span>)</span><br><span class="line">	fmt.Print(<span class="string">"processing1"</span> + <span class="string">"  "</span>)</span><br><span class="line">	fmt.Print(<span class="string">"processing2"</span> + <span class="string">"  "</span>)</span><br><span class="line">	fmt.Print(<span class="string">"end"</span> + <span class="string">"  "</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li>没有defer：start -&gt; processing1 -&gt; processing2 -&gt; end </li>
    <li>processing1、processing2 加入defer：start -&gt; end -&gt; processing2 -&gt; processing1</li>
</ul>
<h2 id="defer使用规则"><a href="#defer使用规则" class="headerlink" title="defer使用规则"></a>defer使用规则</h2>
<h3 id="defer会实时解析参数"><a href="#defer会实时解析参数" class="headerlink" title="defer会实时解析参数"></a>defer会实时解析参数</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">	i ++</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>这是因为虽然我们在defer后面定义的是一个带变量的函数: fmt.Println(i). 但这个变量(i)在defer被声明的时候，就已经确定其确定的值了</p>
</blockquote>
<h3 id="defer的类栈执行"><a href="#defer的类栈执行" class="headerlink" title="defer的类栈执行"></a>defer的类栈执行</h3>
<blockquote>
    <p>栈：先入后出</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> f1()</span><br><span class="line">	f2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2\1</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="defer可以读取有名返回值"><a href="#defer可以读取有名返回值" class="headerlink" title="defer可以读取有名返回值"></a>defer可以读取有名返回值</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">c</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; i++ &#125;()</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   fmt.Println(c())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>在开头的时候，我们说过defer是在return调用之后才执行的。 这里需要明确的是defer代码块的作用域仍然在函数之内，结合上面的函数也就是说，defer的作用域仍然在c函数之内。因此defer仍然可以读取c函数内的变量(如果无法读取函数内变量，那又如何进行变量清除呢…)。<br>当执行return 1 之后，i的值就是1. 此时此刻，defer代码块开始执行，对i进行自增操作。 因此输出2.</p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-Map</title>
    <url>/3744.html</url>
    <content><![CDATA[<p>Go语言中提供的映射关系容器为<code>map</code>，其内部使用<code>散列表（hash）</code>实现map</p>
<p>map是一种无序的基于<code>key-value</code>的数据结构，Go语言中的map是<code>引用类型</code>，必须<code>初始化</code>才能使用。</p>
<a id="more"></a>
<h2 id="定义Map"><a href="#定义Map" class="headerlink" title="定义Map"></a>定义Map</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 初始化定义</span></span><br><span class="line"><span class="keyword">map</span>[KeyType]ValueType</span><br><span class="line"></span><br><span class="line"><span class="comment">// KeyType:表示键的类型。map可以嵌套map，可以是key 也是是value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ValueType:表示键对应的值的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span>类型的变量默认初始值为<span class="literal">nil</span>，需要使用<span class="built_in">make</span>()函数来分配内存。语法为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span>(<span class="keyword">map</span>[KeyType]ValueType, [<span class="built_in">cap</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span>[KeyType]ValueType&#123;</span><br><span class="line">  key1:value1</span><br><span class="line">  key2:value2</span><br><span class="line">  key4:value3</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">a[<span class="string">"name"</span>] = <span class="string">"Payne"</span></span><br><span class="line">a[<span class="string">"sex"</span>] = <span class="string">"male"</span></span><br><span class="line">a[<span class="string">"year"</span>] = <span class="string">"20"</span></span><br><span class="line">fmt.Println(<span class="string">"a:"</span>, a)               <span class="comment">// a: map[name:Payne sex:male year:20]</span></span><br><span class="line">fmt.Println(<span class="string">"a['sex']:"</span>, a[<span class="string">"sex"</span>]) <span class="comment">// a['sex']: male</span></span><br><span class="line">fmt.Printf(<span class="string">"Type of a:%T\n"</span>, a)      <span class="comment">// Type of a:map[string]string</span></span><br><span class="line"></span><br><span class="line">b := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="string">"Name"</span>: <span class="string">"Tim"</span>,</span><br><span class="line">    <span class="string">"Sex"</span>:  <span class="string">"male"</span>,</span><br><span class="line">    <span class="string">"Year"</span>: <span class="string">"20"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"b:"</span>, b)               <span class="comment">// b: map[Name:Tim Sex:male Year:20]</span></span><br><span class="line">    fmt.Println(<span class="string">"b['sex']:"</span>, b[<span class="string">"Sex"</span>]) <span class="comment">// b['sex']: male</span></span><br><span class="line">    fmt.Printf(<span class="string">"Type of b:%T"</span>, b)   <span class="comment">// Type of b:map[string]string</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="判断某个键是否存在"><a href="#判断某个键是否存在" class="headerlink" title="判断某个键是否存在"></a>判断某个键是否存在</h2>
<p>Go语言中有个判断map中键是否存在的特殊写法，格式如下:</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">value, ok := <span class="keyword">map</span>[key]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 value可以为任意接受值。而 ok 必须写</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name1"</span>: <span class="string">"Tom"</span>,</span><br><span class="line"><span class="string">"name2"</span>: <span class="string">"Tim"</span>,</span><br><span class="line"><span class="string">"name3"</span>: <span class="string">"Payne"</span>,</span><br><span class="line"><span class="string">"name4"</span>: <span class="string">"John"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值</span></span><br><span class="line">value, ok := c[<span class="string">"name1"</span>]</span><br><span class="line">fmt.Println(value, ok)     <span class="comment">// Tom true</span></span><br><span class="line"></span><br><span class="line">value, ok := c[<span class="string">"name5"</span>]</span><br><span class="line">fmt.Println(value, ok)     <span class="comment">// false</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Println(value) <span class="comment">// Tom</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h2>
<p>Go语言中使用<code>for range</code>遍历map。</p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">d := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name1"</span>: <span class="string">"Tom"</span>,</span><br><span class="line"><span class="string">"name2"</span>: <span class="string">"Tim"</span>,</span><br><span class="line"><span class="string">"name3"</span>: <span class="string">"Payne"</span>,</span><br><span class="line"><span class="string">"name4"</span>: <span class="string">"John"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历key</span></span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> d &#123;</span><br><span class="line">fmt.Print(d + <span class="string">","</span>)  <span class="comment">// name1,name2,name3,name4,</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment">// 只遍历value</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> d &#123;</span><br><span class="line">fmt.Print(v + <span class="string">","</span>)  <span class="comment">// Tom,Tim,Payne,John,</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment">// 遍历key value</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> d &#123;</span><br><span class="line">fmt.Print(k, <span class="string">":"</span>, v, <span class="string">" "</span>)   <span class="comment">// name2:Tim name3:Payne name4:John name1:Tom</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h2>
<p>使用<code>delete()</code>内建函数从map中删除一组键值对，<code>delete()</code>函数的格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="built_in">delete</span>(<span class="keyword">map</span>, key)</span><br><span class="line"><span class="comment">// map:表示要删除键值对的map</span></span><br><span class="line"><span class="comment">// key:表示要删除的键值对</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">f := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name1"</span>: <span class="string">"Tom"</span>,</span><br><span class="line"><span class="string">"name2"</span>: <span class="string">"Tim"</span>,</span><br><span class="line"><span class="string">"name3"</span>: <span class="string">"Payne"</span>,</span><br><span class="line"><span class="string">"name4"</span>: <span class="string">"John"</span>,</span><br><span class="line">&#125;</span><br><span class="line">v1, ok := f[<span class="string">"name1"</span>]</span><br><span class="line">fmt.Println(v1, ok)  <span class="comment">// Tom true</span></span><br><span class="line"><span class="built_in">delete</span>(f, <span class="string">"name1"</span>)</span><br><span class="line">v2, ok := f[<span class="string">"name1"</span>]</span><br><span class="line">fmt.Println(v2, ok)  <span class="comment">// false</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="元素为map类型的切片"><a href="#元素为map类型的切片" class="headerlink" title="元素为map类型的切片"></a>元素为map类型的切片</h2>
<p>下面的代码演示了切片中的元素为map类型时的操作：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mapSlice := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">for</span> index, value := <span class="keyword">range</span> mapSlice &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"index:%d value:%v\n"</span>, index, value)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(<span class="string">"after init"</span>)</span><br><span class="line"> <span class="comment">// 对切片中的map元素进行初始化</span></span><br><span class="line"> mapSlice[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line"> mapSlice[<span class="number">0</span>][<span class="string">"name"</span>] = <span class="string">"payne"</span></span><br><span class="line"> mapSlice[<span class="number">0</span>][<span class="string">"password"</span>] = <span class="string">"123456"</span></span><br><span class="line"> mapSlice[<span class="number">0</span>][<span class="string">"address"</span>] = <span class="string">"cs"</span></span><br><span class="line"> <span class="keyword">for</span> index, value := <span class="keyword">range</span> mapSlice &#123;</span><br><span class="line"> fmt.Printf(<span class="string">"index:%d value:%v\n"</span>, index, value)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index:0 value:map[]</span></span><br><span class="line"><span class="comment">// index:1 value:map[]</span></span><br><span class="line"><span class="comment">// index:2 value:map[]</span></span><br><span class="line"><span class="comment">// after init</span></span><br><span class="line"><span class="comment">// index:0 value:map[address:cs name:payne password:123456]</span></span><br><span class="line"><span class="comment">// index:1 value:map[]</span></span><br><span class="line"><span class="comment">// index:2 value:map[]</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="值为切片类型的map"><a href="#值为切片类型的map" class="headerlink" title="值为切片类型的map"></a>值为切片类型的map</h2>
<p>下面的代码演示了map中值为切片类型的操作：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  sliceMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line"> fmt.Println(sliceMap)</span><br><span class="line"> fmt.Println(<span class="string">"after init"</span>)</span><br><span class="line">key := <span class="string">"中国"</span></span><br><span class="line">value, ok := sliceMap[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">value = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> value = <span class="built_in">append</span>(value, <span class="string">"北京"</span>, <span class="string">"上海"</span>)</span><br><span class="line"> sliceMap[key] = value</span><br><span class="line">fmt.Println(sliceMap)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map[]</span></span><br><span class="line"><span class="comment">// after init</span></span><br><span class="line"><span class="comment">// map[中国:[北京 上海]]</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>可以map理解为key-value的容器，里面可包含基本数据类型\Map,不包含Array。包含sclice</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Book List</title>
    <url>/19099.html</url>
    <content><![CDATA[<h2 id="图书清单"><a href="#图书清单" class="headerlink" title="图书清单"></a>图书清单</h2>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3>
<p>操作系统导论</p>
<p>现代操作系统</p>
<a id="more"></a>
<p>深入理解计算机操作系统</p>
<p>操作系统-精髓与设计原理</p>
<p>编译原理</p>
<p>系统之美</p>
<p>计算机程序设计艺术</p>
<p>计算机程序的构造和解释</p>
<p>计算机是怎么跑起来的</p>
<blockquote>
    <p>较为适合入门,鸟瞰全茂</p>
</blockquote>
<p>性能之巅：洞悉系统、企业与云计算洞悉系统、企业与云计算</p>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3>
<p>计算机网络-谢希仁</p>
<blockquote>
    <p>该书全面系统地介绍了计算机网络的发展和原理体系结构</p>
</blockquote>
<p>网络是怎样连接的</p>
<blockquote>
    <p>本书以探索之旅的形式，从在浏览器中输入网址开始，一路追踪了到显示出网页内容为止的整个过程，以图配文，讲解了网络的全貌，并重点介绍了实际的网络设备和软件是如何工作的。目的是帮助读者理解网络的本质意义，理解实际的设备和软件，进而熟练运用网络技术。</p>
</blockquote>
<p>图解TCP/IP</p>
<p>图解http</p>
<blockquote>
    <p>对互联网HTTP基盘- HTTP协议进行全面系统的介绍。该书由HTTP协议发展史娓娓道来。严谨细致的剖析HTTP结构，在讲解的同是还辅以大量的生动通讯图。最后延伸到Web安全、最新技术动向等方面。</p>
</blockquote>
<p>HTTP权威指南</p>
<blockquote>
    <p>本书是HTTP及相关核心web技术的核心之作。主要介绍了web应用程序是怎么工作的，核心的英特网协议如何与架构交互的</p>
</blockquote>
<p>Wireshark网络分析就是这么简单</p>
<blockquote>
    <p>采用风趣幽默的手法，由浅入深的使用Wireshark分析常见的网络协议</p>
</blockquote>
<p>Wireshark网络分析的艺术</p>
<blockquote>
    <p>采用实际的场景通俗易懂的纵横Wireshark网络分析</p>
</blockquote>
<p>计算机网络-自顶向下方法</p>
<p>TCP/IP详解 卷1：协议</p>
<p>TCP/IP详解 卷2：实现</p>
<p>TCP/IP详解 卷3：TCP事务协议、HTTP、NNTP和UNIX域协议</p>
<h3 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h3>
<p>算法导论</p>
<p>算法</p>
<p>剑指offer</p>
<p>算法图解</p>
<p>算法之美</p>
<p>程序员代码面试指南：</p>
<p>labuladong的算法小抄: 构造刷题框架</p>
<p><strong>相信以后的做为程序员的你一定会感谢曾经学过算法的自己，无论是在面试，coding、亦或者日常解决问题 都是如虎添翼</strong></p>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3>
<p>程序员的数学</p>
<p>程序员的数学1</p>
<p>程序员的数学2</p>
<p>数学之美</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3>
<p>Linux命令行大全<br>Linux系统命令及Shell脚本</p>
<p>精通Linux<br>Linux程序设计<br>Raspberry Pi入门指南</p>
<p>高性能Linux服务器运维实战</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3>
<h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库:"></a>关系型数据库:</h4>
<h5 id="My-SQL"><a href="#My-SQL" class="headerlink" title="My SQL"></a>My SQL</h5>
<p>高性能的MySQL</p>
<blockquote>
    <p>mysql 领域的经典之作，拥有广泛的影响力。第三版不但涵盖了最新mysql 5.5版本的新特性，也讲述了关于固态盘、高可扩展性设计和云计算环境下的数据库相关的新内容，原有的基准测试和性能优化部分也做了大量的扩展和补充。全书共分为16 章和6 个附录，内容涵盖mysql 架构和历史，基准测试和性能剖析，数据库软硬件性能优化，复制、备份和恢复，高可用与高可扩展性，以及云端的mysql 和mysql相关工具等方面的内容。</p>
</blockquote>
<p>高可用MySQL</p>
<p>SQL必知必会</p>
<blockquote>
    <p>与其他同类图书不同，它没有过多阐述数据库基础理论，而是专门针对一线软件开发人员，直接从SQL SELECT开始，讲述实际工作环境中最常用和最必需的SQL知识，实用性极强。通过本书，读者能够从没有多少SQL经验的新手，迅速编写出世界级的SQL！</p>
    <p>本书是麻省理工学院、伊利诺伊大学等众多大学的参考教材。除了作为教程之外，独特的编排方式还使本书成为方便的快速查询手册。</p>
</blockquote>
<p>SQL入门经典</p>
<blockquote>
    <p>详细介绍了SQL语言的基本语法、基本概念，说明了各种SQL实现与ANSI标准之间的差别。书中包含了大量的范例，直观地说明了如何使用SQL对数据进行处理。每章后面还有针对性很强的测验与练习，能够帮助读者更好地理解和掌握学习的内容。在最后的附录里还有关于安装MySQL的详细介绍、书中用到的关键SQL语句、测验和练习的答案。</p>
</blockquote>
<p>前金良方:MySQL性能优化金字塔法则</p>
<blockquote>
    <p>一共分为3篇：基础篇、案例篇和工具篇。“基础篇”从理论基础和基本原理层面介绍了MySQL的安装与配置、升级和体系结构，information_schema、sys_schema、performance_schema和mysql_schema，MySQL复制，MySQL事务，SQL语句优化及架构设计基础知识。“案例篇”从硬件和系统、MySQL架构等方面给出了性能优化的十几个案例，包括：性能测试的基本优化思路和需要关注的性能指标解释、对日常SQL语句执行慢的基本定位、避免x86可用性的一般性方法、节能模式会怎样影响性能、I/O存储作为数据库重要的依赖是如何影响数据库性能的、主备复制不一致可能有哪些原因、字符集不一致会造成哪些性能问题、在实际场景中锁的争用是怎样的。“工具篇”介绍了在MySQL性能优化过程中需要用到的各种工具，包括：dmidecode、top、dstat等硬件和系统排查工具；FIO、sysbench、HammerDB等压力测试工具；mysqldump、XtraBackup等备份工具；Percona、innotop、Prometheus等监控工具</p>
</blockquote>
<p><strong>一本 《高性能的MySQL》足以争霸纵横</strong></p>
<h4 id="非关系性数据库："><a href="#非关系性数据库：" class="headerlink" title="非关系性数据库："></a>非关系性数据库：</h4>
<h5 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h5>
<p>MongoDB权威指南</p>
<blockquote>
    <p>此书可作为数据库开发人员的工作指南，也可作为系统管理人员的进阶指导，还可供项目中其他成员了解MongoDB使用。书中介绍了面向文档的存储方式及利用MongoDB的无模式数据模型处理文档、集合和多个数据库，讲述了如何执行基本的写操作以及各种复杂的条件查询，还介绍了索引、聚合工具以及其他高级查询技术，另外对监控、安全性和身份验证、备份和修复、水平扩展MongoDB数据库等内容也有所涉及。</p>
</blockquote>
<p>深入学习MongoDB</p>
<blockquote>
    <p>第一部分全面讲解了有关建立和使用集群的内容，不仅从应用开发人员的角度讲解了MongoDB的使用，而且从运维方面介绍了集群的管理。其中内容包括通过分片设置MongoDB集群，分片的工作原理，查询和更新数据，操作、监控和备份集群，错误处理。第二部分依次从应用设计、实现、优化、数据安全和管理方面介绍了使用MongoDB构建应用的技巧，内容包括范式化与反范式化的利弊权衡，复制组的故障恢复等。</p>
</blockquote>
<p>大数据存储 MongoDB实战指南</p>
<blockquote>
    <p> 什么是MongoDB及其核心进程； MongoDB的查询语言系统； MongoDB的索引与查询优化； 增、删、改语句； Journaling日志功能； 聚集分析框架与MapReduce的编程模型； 复制集的功能与工作机制； 分片集群； 分布式文件系统； MongoDB的管理与监控； 权限控制； MongoDB的PHP驱动接口； 一个完整的电商平台实例。 本书适合有海量数据存储需求的人员、数据库管理开发人员、数据挖掘与分析人员以及各类基于数据库的应用开发人员。读者将从书中获得诸多实用的知识和开发技巧</p>
</blockquote>
<h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5>
<p>Redis开发与运维</p>
<blockquote>
    <p>本书全面讲解Redis基本功能及其应用，并结合线上开发与运维监控中的实际使用案例，深入分析并总结了实际开发运维中遇到的“陷阱”，以及背后的原因， 包含大规模集群开发与管理的场景、应用案例与开发技巧，为高效开发运维提供了大量实际经验和建议。本书不要求读者有任何Redis使用经验,对入门与进阶DevOps的开发者提供有价值的帮助。主要内容包括：Redis的安装配置、API、各种高效功能、客户端、持久化、复制、高可用、内存、哨兵、集群、缓存设计等，Redis高可用集群解决方案，Redis设计和使用中的问题，最后提供了一个开源工具：Redis监控运维云平台CacheCloud。</p>
</blockquote>
<p>Redis设计与实现</p>
<blockquote>
    <p>本书全面而完整地讲解了Redis的内部机制与实现方式，对Redis的大多数单机功能以及所有多机功能的实现原理进行了介绍，展示了这些功能的核心数据结构以及关键的算法思想,图示丰富，描述清晰，并给出大量参考信息。通过阅读本书，读者可以快速、有效地了解Redis的内部构造以及运作机制，更好、更高效地使用Redis。</p>
    <p>本书主要分为四大部分。第一部分“数据结构与对象”介绍了Redis中的各种对象及其数据结构，并说明这些数据结构如何影响对象的功能和性能。第二部分“单机数据库的实现”对Redis实现单机数据库的方法进行了介绍，包括数据库、RDB持久化、AOF持久化、事件等。第三部分“多机数据库的实现”对Redis的Sentinel、复制、集群三个多机功能进行了介绍。第四部分“独立功能的实现”对Redis中各个相对独立的功能模块进行了介绍，涉及发布与订阅、事务、Lua脚本、排序、二进制位数组、慢查询日志、监视器等。</p>
</blockquote>
<p>Redis 深度历险核心原理与应用实践</p>
<blockquote>
    <p>分为基础和应用篇、原理篇、集群篇、拓展篇、源码篇共 5 大块内容。基础和应用篇讲解对读者来说最有价值的内容，可以直接应用到实际工作中；原理篇、集群篇让开发者透过简单的技术表面看到精致的底层世界；拓展篇帮助读者拓展技术视野和夯实基础，便于进阶学习；源码篇让高阶的读者能够读懂源码，掌握核心技术实力</p>
</blockquote>
<h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3>
<p>垃圾回收算法手册：自动内存管理的艺术</p>
<blockquote>
    <p>本书汇集了自动内存管理研究者和开发者们在过去50年间的丰富经验，在本书中，作者在一个统一的易于接受的框架内比较了当下最重要的回收策略以及最先进的回收技术。</p>
    <p>本书从近年来硬件与软件的发展给垃圾回收所带来的新挑战出发，探讨了这些挑战给高性能垃圾回收器的设计者与实现者所带来的影响。在简单的传统回收算法之外，本书还涵盖了并行垃圾回收、增量式垃圾回收、并发垃圾回收以及实时垃圾回收。书中配备了丰富的伪代码与插图，以描述各种算法与概念。</p>
</blockquote>
<p>垃圾回收的算法与实现</p>
<blockquote>
    <p>本书前半介绍基本GC算法，包括标记-清除GC、引用计数、复制算法的GC、串行GC的算法、并发GC的算法等。后半介绍V8、Rubinius、Dalvik、CPython等几种具体GC的实现</p>
    <p>深入浅出理解 垃圾回收 与实现</p>
</blockquote>
<p>深入分析gcc</p>
<blockquote>
    <p>结合GCC4.4.0源代码，围绕GCC编译过程，详细介绍了GCC的设计框架和实现过程，包括从源代码到AST、从AST到GIMPLE、从GIMPLE到RTL，以及从RTL到终的目标机器代码的详细过程，涉及各个阶段中间表示的详细分析、生成过程，使读者在了解编译原理的基础上进一步掌握其实现的总体流程和实现细节</p>
</blockquote>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3>
<p>Head First设计模式</p>
<p>重构</p>
<blockquote>
    <p>Refactoring: Improving the Design of Existing Code</p>
    <p> 重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。多年前，正是本书原版的出版，使重构终于从编程高手们的小圈子走出，成为众多普通程序员日常开发工作中不可或缺的一部分。</p>
    <p> 本书凝聚了软件开发社区专家多年摸索而获得的宝贵经验，拥有不因时光流逝而磨灭的价值。今天，无论是重构本身，业界对重构的理解，还是开发工具对重构的支持力度，都与本书最初出版时不可同日而语，但书中所蕴涵的意味和精华，依然值得反复咀嚼，而且往往能够常读常新。</p>
</blockquote>
<p>Effeactivate Debugging：软件和系统调试的66个有效方法</p>
<blockquote>
    <p>本书所要讲解的调试知识，包括与调试有关的策略、工具及方法。当我们在开发并运作一款复杂的计算系统时，可能会遇到各种问题，而这些调试知识，则使大家能够应对这些问题。</p>
    <p>过去我们所说的调试，主要是指检测并修复程序错误，而当前却很少有哪个程序会孤立地运作，即便是一个很小的程序，也会与外部的程序库相链接（通常是动态链接）。更为复杂的程序会运行在应用程序服务器中，会调用 Web 服务，会使用关系型数据库及 NoSQL 数据库，会从目录服务器上获取数据，会运行外部的程序，会利用其他的中间件，也会纳入很多第三方的软件包。于是，要想令整个系统及服务正常地运作，就必须确保其中的组件不会发生故障，这些组件可能是由公司内部人员所开发的，也可能是由第三方所提供的，它们所在的主机或许分布在全球各地。</p>
</blockquote>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3>
<p>企业IT架构转型之道</p>
<p>微服务架构设计模式</p>
<p>架构简洁之道</p>
<p>大型网站技术架构</p>
<p>高可用架构</p>
<p>大型网站技术架构演进与性能优化</p>
<p>京东基础架构建设之路</p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3>
<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4>
<p>Kafka:The Definitive Guide: Real-Time Data and Stream Processing at Scale</p>
<p>Kafka权威指南</p>
<blockquote>
    <p>本书由出身于LinkedIn的Kafka核心作者和一线技术人员共同执笔，详细介绍了如何部署Kafka集群、开发可靠的基于事件驱动的微服务，以及基于Kafka平台构建可伸缩的流式应用程序。通过详尽示例，你将会了解到Kafka的设计原则、可靠性保证、关键API，以及复制协议、控制器和存储层等架构细节</p>
</blockquote>
<p>深入理解Kafka：核心设计与实践原理</p>
<blockquote>
    <p>从Kafka的基础概念切入，循序渐进地转入对其内部原理的剖析。主要阐述了Kafka中生产者客户端、消费者客户端、主题与分区、日志存储、原理解析、监控管理、应用扩展及流式计算等内容。</p>
    <p>虽然Kafka的内核使用Scala语言编写，但基本以Java语言作为主要的示例语言，方便大多数读者的理解。</p>
    <p>总体上可以划分为三个部分：基础篇、原理篇和扩展篇，前4章为基础篇，包括基础概念、生产者、消费者，以及主题与分区，学习完这4章的内容完全可以应对绝大多数的开发场景。第5章至第8章为原理篇，包括对日志存储、协议设计、控制器、组协调器、事务、一致性、可靠性等内容的探究，学习完这4章的内容可以让读者对Kafka有一个深刻的认知。最后4章从应用扩展层面来做讲解，可以归类为扩展篇，主要内容包括监控、应用工具、应用扩展（延时队列、重试队列、死信队列、消息轨迹等）、与Spark的集成等，让读者可以对Kafka的生态有一个更加全面的认知。</p>
</blockquote>
<h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4>
<p>Elasticsearch: The Definitive Guide A distributed real-time search and analytics engine</p>
<p>Elasticsearch in Action</p>
<p>本书主要展示如何使用Elasticsearch构建可扩展的搜索应用程序。书中覆盖了Elasticsearch的主要特性，从使用不同的分析器和查询类型进行相关性调优，到使用聚集功能进行实时性分析，还有地理空间搜索和文档过滤等更多吸引人的特性。</p>
<p>全书共分两个部分，第一部分解释了核心特性，内容主要涉及Elasticsearch的介绍，数据的索引、更新和删除，数据的搜索，数据的分析，使用相关性进行搜索，使用聚集来探索数据，文档间的关系等；第二部分介绍每个特性工作的更多细节及其对性能和可扩展性的影响，以便对核心功能进行产品化，内容主要涉及水平扩展和性能提升等。</p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3>
<p>Python编程：从入门到实战</p>
<p>Python学习手册</p>
<p>Think Python</p>
<blockquote>
    <p>Think Python: How to Think Like a Computer Scientist</p>
    <p>本书从基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引领读者循序渐进地学习变量、表达式、语句、函数和数据结构。书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法错误、运行时错误和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。</p>
</blockquote>
<p>Head First Python</p>
<p>Learn Python The Hard Way</p>
<p>Python Cookbook</p>
<blockquote>
    <p>本书介绍了Python应用在各个领域中的一些使用技巧和方法，从最基本的字符、文件序列、字典和排序，到进阶的面向对象编程、数据库和数据持久化、 XML处理和Web编程，再到比较高级和抽象的描述符、装饰器、元类、迭代器和生成器，均有涉及。书中还介绍了一些第三方包和库的使用，包括 Twisted、GIL、PyWin32等。本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中的代码和方法具有很强的实用性，可以方便地应用到实际的项目中，并产生立竿见影的效果。尤为难得的是，本书的各位作者都具有丰富的业界实践经验，因此，本书不仅给出了对各种问题的解决方案，同时还体现了很多专家的思维方式和良好的编程习惯，与具体的细节性知识相比，这部分内容无疑是本书的精华。</p>
</blockquote>
<p>Python源码剖析</p>
<blockquote>
    <p>为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值</p>
</blockquote>
<p>流畅的Python</p>
<blockquote>
    <p>本书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。</p>
</blockquote>
<p>Python高性能编程</p>
<blockquote>
    <p>围绕如何进行代码优化和加快实际应用的运行速度进行详细讲解。本书主要包含以下主题：计算机内部结构的背景知识、列表和元组、字典和集合、迭代器和生成器、矩阵和矢量计算、并发、集群和工作队列等。最后，通过一系列真实案例展现了在应用场景中需要注意的问题</p>
</blockquote>
<p>编写高质量代码：改善Python程序的91个建议</p>
<blockquote>
    <p>Effective Python: 90 Specific Ways to Write Better Python, Second Edition</p>
    <p>本书可以帮你掌握真正的 Pythonic 编程方式，令你能够完全发挥出 Python 语言的强大功能，并写出健壮而高效的代码。汇聚了 90 条实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。</p>
</blockquote>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3>
<p>Java核心技术</p>
<p>Effective Java</p>
<p>重学Java设计模式</p>
<p>Java编程思想</p>
<p>深入理解Java虚拟机</p>
<p>揭秘Java虚拟机</p>
<p>Java并发编程实战</p>
<p>Java性能权威指南</p>
<p>深入分析Java Web技术内幕</p>
<p>代码简洁之道(clean code)</p>
<blockquote>
    <p> Clean Code: A Handbook of Agile Software Craftsmanship</p>
    <p>软件质量，不但依赖于架构及项目管理，而且与代码质量紧密相关。这一点，无论是敏捷开发流派还是传统开发流派，都不得不承认。</p>
    <p>本书提出一种观念：代码质量与其整洁度成正比。干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。作为编程领域的佼佼者，本书作者给出了一系列行之有效的整洁代码操作实践。这些实践在本书中体现为一条条规则（或称“启示”），并辅以来自现实项目的正、反两面的范例。只要遵循这些规则，就能编写出干净的代码，从而有效提升代码质量。</p>
    <p>本书阅读对象为一切有志于改善代码质量的程序员及技术经理。书中介绍的规则均来自作者多年的实践经验，涵盖从命名到重构的多个编程方面，虽为一“家”之言，然诚有可资借鉴的价值。</p>
</blockquote>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3>
<p>第一行代码:Android</p>
<p>打造高质量Android应用</p>
<p>Android进阶之光</p>
<p>Android 源码设计模式解析与实战</p>
<h3 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h3>
<p>go语言程序设计</p>
<p>Go语言趣学指南</p>
<p>Go语言并发之道</p>
<p>Go语言编程之旅:一起用go做项目</p>
<p>Go语言学习笔记</p>
<p>Go Web 编程</p>
<p>Go专家编程</p>
<p>Go语言实战(Go in Action)</p>
<p>Go语言高级编程</p>
<p>GO语言高并发与微服务实战</p>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3>
<p>Web性能实战</p>
<blockquote>
    <p>创建快速网站的指南，指导你如何以正确的方式创建高性能网站。书中介绍了如何加快向用户交付站点资源的速度、提高渲染速度、减少网站占用空间；探讨了HTTP/2等能够大幅提升网站速度的技术；阐述了如何构建一个自动化的工作流以完成常见的优化任务，同时提高开发效率。</p>
</blockquote>
<p>Web性能权威指南</p>
<blockquote>
    <p>涵盖Web 开发者技术体系中应该掌握的所有网络及性能优化知识。全书以性能优化为主线，从TCP、UDP 和TLS 协议讲起，解释了如何针对这几种协议和基础设施来优化应用。然后深入探讨了无线和移动网络的工作机制。最后，揭示了HTTP 协议的底层细节，同时详细介绍了HTTP 2.0、 XHR、SSE、WebSocket、WebRTC 和DataChannel 等现代浏览器新增的具有革命性的新能力。</p>
</blockquote>
<p>前端架构设计</p>
<p>同构 JavaScript 应用开发</p>
<h3 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h3>
<p><strong>Python 网络爬虫从入门到实践</strong></p>
<p><strong>Python3网络爬虫开发实战</strong></p>
<p><strong>Python3反爬虫原理与绕过实战</strong></p>
<p><strong>Android安全攻防权威指南</strong></p>
<p><strong>Android应用安全和逆向分析</strong></p>
<p><strong>IDA PRO 权威指南</strong></p>
<h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3>
<h4 id="通识类"><a href="#通识类" class="headerlink" title="通识类"></a>通识类</h4>
<blockquote>
    <p>认识数据分析，构建数据分析思维，练就数据分析能力</p>
</blockquote>
<p><strong>深入浅出数据分析</strong></p>
<p><strong>精益数据分析</strong></p>
<p><strong>数学之美</strong></p>
<h4 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h4>
<p><strong>统计学</strong></p>
<p><strong>深入浅出统计学</strong></p>
<p><strong>赤裸裸的统计学</strong></p>
<p><strong>统计学七支柱</strong></p>
<p>统计学习方法-李航</p>
<h4 id="实践类"><a href="#实践类" class="headerlink" title="实践类"></a>实践类</h4>
<blockquote>
    <p>what do? How do? Why do?</p>
</blockquote>
<h5 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h5>
<p><strong>谁说菜鸟不会数据分析</strong></p>
<p><strong>Excel数据分析思维、技术、与实践</strong></p>
<p><strong>对比Excel轻松学习数据分析</strong></p>
<h5 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h5>
<p><strong>Python数据分析</strong></p>
<p><strong>利用Python进行数据分析</strong></p>
<p><strong>Python金融大数据分析</strong></p>
<p><strong>Python数据分析实战</strong></p>
<h5 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h5>
<p><strong>用图表说话</strong></p>
<p><strong>Excel图表之道</strong></p>
<h4 id="数据分析技术的应用"><a href="#数据分析技术的应用" class="headerlink" title="数据分析技术的应用"></a>数据分析技术的应用</h4>
<p>Python数据分析与数据化运营</p>
<p>数据挖掘与数据化运营实战</p>
<p>社交网站的数据挖掘与分析</p>
<h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3>
<p>数据挖掘-概念与技术</p>
<p>数据挖掘导论</p>
<h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3>
<p>深度学习的数学</p>
<p>深度学习入门</p>
<p>Python深度学习</p>
<p>深度学习</p>
<p>动手学习深度学习</p>
<p>深度学习进阶</p>
<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3>
<p>机器学习(西瓜书)-周志华</p>
<p>统计学习方法-李航</p>
<p>Patten Recongnition and Machine Learning</p>
<p>统计自然语言处理</p>
<h3 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h3>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4>
<p>深入浅出docker</p>
<blockquote>
    <p>深入浅出的介绍了docker相关知识，清晰详细的操作步骤结合大量实际代码</p>
</blockquote>
<p>Docker容器与容器云</p>
<blockquote>
    <p>从概念用法解析到核心原理分析，然后到高级实践，层层递进。全面介绍了docker以及围绕Docker构建的各类容器云平台，深入分析了Kubernetes背后的技术原理与设计思想</p>
</blockquote>
<p>第一本Docker书</p>
<blockquote>
    <p>本书专注于指导读者完成Docker的安装、部署、管理和扩展，带领读者经历从测试到生产的整个开发生命周期，让读者了解Docker适用于什么场景。书中先介绍Docker及其组件的基础知识，然后介绍用Docker构建容器和服务来完成各种任务：利用Docker为新项目建立测试环境，演示如何使用持续集成的工作流集成Docker，如何构建应用程序服务和平台，如何使用Docker的API，如何扩展Docker。</p>
</blockquote>
<h4 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h4>
<p>每天五分钟玩转Kubernetes</p>
<blockquote>
    <p>内容简洁实用，核心观点点到即止。适合入门与碎片化学习</p>
</blockquote>
<p>再也不踩坑的Kubernetes</p>
<blockquote>
    <p>各种环境搭建如Redis集群、RabbitMQ等。适合当工具书</p>
</blockquote>
<p>Kubernetes权威指南</p>
<blockquote>
    <p>从架构师、开发人员和运维人员的角度，阐述了Kubernetes的基本概念、实践指南、核心原理、开发指导、运维指南、新特性演进等内容，图文并茂、内容丰富、由浅入深、讲解全面；并围绕在生产环境中可能出现的问题，给出了大量的典型案例，比如安全配置方案、网络方案、共享存储方案、高可用方案及Trouble Shooting技巧等，有很强的实战指导意义。</p>
</blockquote>
<p>Kubernetes进阶实战</p>
<p>Kubernetes网络权威指南</p>
<h3 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h3>
<p>程序员的三门课：技术精进，架构修炼、管理探秘</p>
<p>代码之外的功夫：程序员精进之道</p>
<p>程序员修炼之道:从小工到专家</p>
<p>高效程序员的45个习惯：敏捷开发修炼之道</p>
<p>Google方法法</p>
<p>Google 工作整理术</p>
<p>程序的自我修养</p>
<p>软件随想录</p>
<p>程序员的职业素养</p>
<p>人月神话</p>
<p>决断力</p>
<p>金字塔原理</p>
<p>逻辑表达：高效沟通的金字塔思维</p>
<p>麦肯锡教我的思维武器</p>
<p>持续更新…</p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-匿名函数与闭包</title>
    <url>/45903.html</url>
    <content><![CDATA[<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2>
<h3 id="什么是匿名函数"><a href="#什么是匿名函数" class="headerlink" title="什么是匿名函数"></a>什么是匿名函数</h3>
<p>没有名字的函数，由于函数中不可定义<code>有名字</code>的函数，所有出现匿名函数，匿名函数常使用于函数中定义函数</p>
<a id="more"></a>
<h3 id="匿名函数的定义"><a href="#匿名函数的定义" class="headerlink" title="匿名函数的定义"></a>匿名函数的定义</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(参数)</span> <span class="params">(返回值)</span></span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>其中参数、返回值视情况酌情加入</p>
</blockquote>
<p>简单的示例</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x * y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(f1(<span class="number">2</span>, <span class="number">2</span>))   <span class="comment">// 4</span></span><br><span class="line">	fmt.Println(f2(<span class="number">2</span>, <span class="number">2</span>))   <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>f1:普通的函数有参数、返回值。直接使用<code>f1()</code>调用即可</p>
    <p>f2:匿名函数，有参数，有返回值。变量f2,为函数类型，使用<code>f2()</code>可调用</p>
</blockquote>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2>
<p>闭包指的是一个函数和与其相关的引用环境组合而成的实体。<code>闭包=函数+引用环境</code>。 示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(f1()(<span class="number">1</span>, <span class="number">2</span>)) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span> <span class="title">func</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>可以简单理解为函数里面包含函数(多为匿名函数)</p>
</blockquote>
<h3 id="深入理解闭包"><a href="#深入理解闭包" class="headerlink" title="深入理解闭包"></a>深入理解闭包</h3>
<p>闭包常常与作用域之间的关系慎密，首先让我们回顾一下作用域，作用域的范围由上到下分为这几种：</p>
<ul>
    <li>全局：即全局均可调用，当在函数中调用修改后并不会直接影响</li>
    <li>函数作用域：仅在此函数中进行有效</li>
    <li>代码块作用域：仅在此代码块中有效，用完即释放。且外部访问不到此变量(常量)</li>
</ul>
<blockquote>
    <p>除全局外，二者均是相对的概念，不必过于拘泥。</p>
</blockquote>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3>
<p>一旦进行嵌套的，很多朋友就会懵，那么我们进行几个case来尝试一下。如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		x += y</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := f1()</span><br><span class="line">	fmt.Println(f(<span class="number">11</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">22</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">33</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">44</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">55</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11,33,66,110,165</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>变量<code>f</code>是一个函数并且它引用了其外部作用域中的<code>x</code>变量，此时<code>f</code>就是一个闭包。 在<code>f</code>的生命周期内，变量<code>x</code>也一直有效。</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		x += y</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := f2(<span class="number">20</span>)</span><br><span class="line">	fmt.Println(f(<span class="number">21</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">22</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">23</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">24</span>))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>变量<code>f</code>是一个函数并且它引用了其外部作用域中的<code>x</code>变量，此时<code>f</code>就是一个闭包。 在<code>f</code>的生命周期内，变量<code>x</code>也一直有效。</p>
</blockquote>
<h3 id="装饰器函数"><a href="#装饰器函数" class="headerlink" title="装饰器函数"></a>装饰器函数</h3>
<p>学其他语言的同学，一定听说过甚至使用过<code>装饰器</code>。那让我们使用golang来实现装饰器的这个功能，如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decorator</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"The start Time: %s\n"</span>, time.Now())</span><br><span class="line">	f()</span><br><span class="line">	fmt.Printf(<span class="string">"The end Time: %s\n"</span>, time.Now())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hw</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"HelloWorld"</span>)</span><br><span class="line">	time.Sleep(<span class="number">20</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//fmt.Println(f1()(1, 2))</span></span><br><span class="line">	Decorator(Hw)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>输入效果如下：</p>
    <p>The start Time: 2020-11-17 19:24:23.969042 +0800 CST m=+0.000082415<br>helloWorld<br>The end Time: 2020-11-17 19:24:43.974545 +0800 CST m=+20.005388822</p>
</blockquote>
<p>闭包其实并不复杂，只要牢记<code>闭包=函数+引用环境(变量作用域)</code></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-接口(interface)</title>
    <url>/1962.html</url>
    <content><![CDATA[<p><strong>接口是一种类型</strong></p>
<p>最初的<code>int</code>、<code>string</code>、<code>bool</code>,再到稍微复杂的<code>Array</code>、<code>Map</code>、<code>Slice</code>。他们都称之为基础数据类型，以及到多维度符合类型的<code>结构体</code>。以及今日咱们所需要学习的<code>接口</code>。</p>
<p>在Go语言编程中，Go(强类型语言)，也就是说必须是一种具体的类型，当我们需要只关注能调用它的什么方法，而不关注它是什么类型,该怎么办呢？</p>
<p>Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。</p>
<p><strong>疑问：只关心调用的函数，而不关注其类型</strong></p>
<a id="more"></a>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"shit~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"汪汪汪~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受一个参数，进来什么，什么就要speak</span></span><br><span class="line">	x.speak()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> 接口类型名 <span class="keyword">interface</span>&#123;</span><br><span class="line">    方法名<span class="number">1</span>( 参数列表<span class="number">1</span>，参数列表<span class="number">2</span> ... ) (返回值列表<span class="number">1</span>,返回值列表<span class="number">2</span> ...)</span><br><span class="line">    方法名<span class="number">2</span>( 参数列表<span class="number">1</span>，参数列表<span class="number">2</span> ...) (返回值列表<span class="number">1</span>,返回值列表<span class="number">2</span> ...)</span><br><span class="line">   	... ...</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ul>
        <li>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</li>
        <li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li>
        <li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</li>
    </ul>
</blockquote>
<p>那么为了解决以上<a href="#jump_1">问题</a>，我们可以定义接口。实现如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">type</span> speak <span class="keyword">interface</span> &#123;</span><br><span class="line">	speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体person的实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"shit~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体dog 实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"汪汪汪~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(s speak)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受一个参数，进来什么，什么就调用它的speak</span></span><br><span class="line">	s.speak()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p1 person</span><br><span class="line">	<span class="keyword">var</span> d1 dog</span><br><span class="line"></span><br><span class="line">	do(p1)</span><br><span class="line">	do(d1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// shit~</span></span><br><span class="line"><span class="comment">// 汪汪汪~</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="实现接口的条件"><a href="#实现接口的条件" class="headerlink" title="实现接口的条件"></a>实现接口的条件</h3>
<p>一个变量如果实现了接口中全部的方法，那么此变量就实现了这个接口。</p>
<p>接口是一个<strong>需要实现的类型(方法列表)</strong>。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">type</span> speak <span class="keyword">interface</span> &#123;</span><br><span class="line">	speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体person的实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"shit~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体dog 实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"汪汪汪~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(s speak)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受一个参数，进来什么，什么就调用它的speak</span></span><br><span class="line">	s.speak()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p1 person</span><br><span class="line">	<span class="keyword">var</span> d1 dog</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义一个接口类型：speak的变量speaks</span></span><br><span class="line">	<span class="keyword">var</span> speaks speak</span><br><span class="line">	speaks = d1</span><br><span class="line">	speaks = p1</span><br><span class="line">	fmt.Print(speaks)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="接口类型变量"><a href="#接口类型变量" class="headerlink" title="接口类型变量"></a>接口类型变量</h3>
<p>接口类型变量能够存储所有实现了该接口的实例。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> say <span class="keyword">interface</span> &#123;</span><br><span class="line">	say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cats <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> dogs <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cats)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Fish~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dogs)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">"Shit~"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayer</span><span class="params">(s say)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受一个参数，进来什么，什么就调用它的speak</span></span><br><span class="line">	s.say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x say</span><br><span class="line">	a := cats&#123;&#125;</span><br><span class="line">	b := dogs&#123;&#125;</span><br><span class="line">	x = a</span><br><span class="line">	x.say()</span><br><span class="line">	x = b</span><br><span class="line">	x.say()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="值的接受者与指针接收者实现接口"><a href="#值的接受者与指针接收者实现接口" class="headerlink" title="值的接受者与指针接收者实现接口"></a>值的接受者与指针接收者实现接口</h3>
<h4 id="值的接受者实现接口"><a href="#值的接受者实现接口" class="headerlink" title="值的接受者实现接口"></a>值的接受者实现接口</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> moving <span class="keyword">interface</span> &#123;</span><br><span class="line">	move()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"丁丁～"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"喵呜～"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(m moving)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受一个参数，进来什么，什么就调用它的speak</span></span><br><span class="line">	m.move()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x moving</span><br><span class="line">	a := dog&#123;&#125;</span><br><span class="line">	b := &amp;cat&#123;&#125;</span><br><span class="line">	x = a</span><br><span class="line">	x.move()</span><br><span class="line">	x = b</span><br><span class="line">	x.move()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针<em>dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，cat指针<code>x</code>内部会自动求值`(</em> ** x)`</p>
<h4 id="指针接收者实现接口"><a href="#指针接收者实现接口" class="headerlink" title="指针接收者实现接口"></a>指针接收者实现接口</h4>
<p>同样的代码我们再来测试一下使用指针接收者有什么区别：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> moving <span class="keyword">interface</span> &#123;</span><br><span class="line">	move()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"丁丁～"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cat)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"喵呜～"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(m moving)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受一个参数，进来什么，什么就调用它的speak</span></span><br><span class="line">	m.move()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x moving</span><br><span class="line">	a := dog&#123;&#125; <span class="comment">// a是dog类型</span></span><br><span class="line">	x = a      <span class="comment">// 可以接收dog类型</span></span><br><span class="line">	x.move()</span><br><span class="line">	b := cat&#123;&#125;</span><br><span class="line">	x = b <span class="comment">// 不可以接受指针类型</span></span><br><span class="line">	x.move()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// # command-line-arguments</span></span><br><span class="line"><span class="comment">// ./pointer.go:28:4: cannot use b (type cat) as type moving in assignment:</span></span><br><span class="line"><span class="comment">// cat does not implement moving (move method has pointer receiver)</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-结构体实现学生管理系统</title>
    <url>/1506.html</url>
    <content><![CDATA[<h2 id="基于“结构体”实现简易版学生管理系统"><a href="#基于“结构体”实现简易版学生管理系统" class="headerlink" title="基于“结构体”实现简易版学生管理系统"></a>基于“结构体”实现简易版学生管理系统</h2>
<p>首先咱们在做项目之前，需要对项目进行分析。切记不可贪功冒进，从而导致无用功</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3>
<ol>
    <li>学生类</li>
    <li>管理者类</li>
    <li>菜单栏</li>
    <li>基于管理类实现功能<ol>
            <li>查看</li>
            <li>添加</li>
            <li>修改</li>
            <li>删除</li>
            <li>退出</li>
        </ol>
    </li>
</ol>
<a id="more"></a>
<p>结构图如下:</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkzgz3v3vuj30gc0c4dhc.jpg" alt=""></p>
<p>采用<code>自顶向下</code>的编程思维对以上分析进行复述，先整体、后细节(先全局、后详细)实现如上结构</p>
<h3 id="定义全局的学生类"><a href="#定义全局的学生类" class="headerlink" title="定义全局的学生类"></a>定义全局的学生类</h3>
<p>在定义学生类之前，我们需了解学生类包含的字段。这里我只定义了Id、姓名。其中id为唯一，姓名可重复。代码如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	id   <span class="keyword">int64</span></span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="定义全局的管理-即操作类"><a href="#定义全局的管理-即操作类" class="headerlink" title="定义全局的管理(即操作类)"></a>定义全局的管理(即操作类)</h3>
<p>由于学号为唯一，且其对照关系，非常适合使用Map的<code>Key-value</code>格式。在这里仅做定义及声明并不做初始化，代码如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> studentMgr <span class="keyword">struct</span> &#123;</span><br><span class="line">	allStudent <span class="keyword">map</span>[<span class="keyword">int64</span>]student</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>借用好的数据结构，会让您的编程效率，编码思维，事半功倍</p>
</blockquote>
<h3 id="定义菜单栏"><a href="#定义菜单栏" class="headerlink" title="定义菜单栏"></a>定义菜单栏</h3>
<p>定义菜单栏，以供使用者选择所对应的功能。根据其功能展示。并根据相对功能，定义应函数。如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"Welcome student Manage System, TimeNow:%v"</span>, time.Now())</span><br><span class="line">	fmt.Println(</span><br><span class="line">		<span class="string">` </span></span><br><span class="line"><span class="string">			1: 查看学生</span></span><br><span class="line"><span class="string">			2: 增加学生</span></span><br><span class="line"><span class="string">			3: 修改学生</span></span><br><span class="line"><span class="string">			4: 删除学生</span></span><br><span class="line"><span class="string">			5: 退出~</span></span><br><span class="line"><span class="string">				`</span>)</span><br><span class="line">	fmt.Print(<span class="string">"What are you want do? Please input Serial number:"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>由以上所知，我们许定义的函数有5个，他们分别是<code>查看学生</code>,<code>增加学生</code>,<code>修改学生</code>,<code>删除学生</code>,<code>退出</code>,如下所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	smr = studentMgr&#123;</span><br><span class="line">		allStudent: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int64</span>]student),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		showMenu()</span><br><span class="line">		<span class="keyword">var</span> choice <span class="keyword">int64</span></span><br><span class="line">		fmt.Scan(&amp;choice)</span><br><span class="line">		fmt.Printf(<span class="string">"You select %d\n"</span>, choice)</span><br><span class="line">		<span class="keyword">switch</span> choice &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			smr.showStudent()</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			smr.addStudent()</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			smr.editStudent()</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			smr.delStudent()</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			os.Exit(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"Invalid input, please select again："</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在这里实例化了一个全局的管理类，所有的操作都经过它。</p>
<p>使用switch语句，进行多项的条件分支，更有利于我们编写更简洁的代码</p>
<h3 id="定义功能函数"><a href="#定义功能函数" class="headerlink" title="定义功能函数"></a>定义功能函数</h3>
<p><code>查看学生</code>,<code>增加学生</code>,<code>修改学生</code>,<code>删除学生</code></p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 查看学生函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">showStudent</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">// 增加学生函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">addStudent</span><span class="params">()</span></span>	&#123;&#125;</span><br><span class="line"><span class="comment">// 修改学生函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">editStudent</span><span class="params">()</span></span>	&#123;&#125;</span><br><span class="line"><span class="comment">// 删除学生函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">delStudent</span><span class="params">()</span></span>	&#123;&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>基本的就已经做完了，基础结构就已经完成了，鼓掌～</p>
<p>那么接下来，我们只需要一个个实现相对应的函数。即可实现功能。</p>
<p>首先我们实现的是查看学生函数。</p>
<h3 id="实现查看学生功能"><a href="#实现查看学生功能" class="headerlink" title="实现查看学生功能"></a>实现查看学生功能</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">showStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, stu := <span class="keyword">range</span> s.allStudent &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"ID:%d, Name:%s\n"</span>, stu.id, stu.name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>我们只需要遍历Map中所有的键与值，即可拿到所有的学生。这里没什么好说的</p>
</blockquote>
<p>实现增加学生功能</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">addStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		stuId   <span class="keyword">int64</span></span><br><span class="line">		stuName <span class="keyword">string</span></span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 1. 根据输入内容创建学生</span></span><br><span class="line">	fmt.Print(<span class="string">"Please input you need ID:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;stuId)</span><br><span class="line">	fmt.Print(<span class="string">"Please input you need name:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;stuName)</span><br><span class="line">	newStu := student&#123;</span><br><span class="line">		id:   stuId,</span><br><span class="line">		name: stuName,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2. 将创建的学生加入stu中</span></span><br><span class="line">	s.allStudent[newStu.id] = newStu</span><br><span class="line">	fmt.Println(<span class="string">"Added successfully"</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在这里，我们需要进行的有两步</p>
<ol>
    <li>
        <p>获取用户键盘输入</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">		stuId   <span class="keyword">int64</span></span><br><span class="line">		stuName <span class="keyword">string</span></span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 1. 根据输入内容创建学生</span></span><br><span class="line">	fmt.Print(<span class="string">"Please input you need ID:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;stuId)</span><br><span class="line">	fmt.Print(<span class="string">"Please input you need name:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;stuName)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
</ol>
<ol>
    <li>
        <p>将输入的学生信息加入到管理函数中</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line">newStu := student&#123;</span><br><span class="line">		id:   stuId,</span><br><span class="line">		name: stuName,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2. 将创建的学生加入stu中</span></span><br><span class="line">	s.allStudent[newStu.id] = newStu</span><br><span class="line">	fmt.Println(<span class="string">"Added successfully"</span>)</span><br><span class="line">&#125;</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
        <blockquote>
            <p>添加成功则提示成功</p>
        </blockquote>
    </li>
</ol>
<p>做到这里，咱们就可以进行一个小小的检测，有木有点小激动以及一点小方张。反正我有，示例如下</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkzi01hhipj30zm0u0jx0.jpg" alt=""></p>
<p><strong>留下一个小Bug，等你去解决，提示，如果key已存在，那么该添加操作会进行？如果暂时没思路，可以继续往下看。虽然并没有直接这里告诉你，但却在下方进行的相对应的解决</strong></p>
<h3 id="实现修改学生功能"><a href="#实现修改学生功能" class="headerlink" title="实现修改学生功能"></a>实现修改学生功能</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">editStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取用户输入</span></span><br><span class="line">	<span class="keyword">var</span> StuId <span class="keyword">int64</span></span><br><span class="line">	fmt.Print(<span class="string">"Please input want change student IdCode:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;StuId)</span><br><span class="line">  <span class="comment">// 检查该学号学生是否存在，没有则提示不存在</span></span><br><span class="line">	value, ok := s.allStudent[StuId]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Not found"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"You want change student message:"</span>+</span><br><span class="line">		<span class="string">" Id: %d, Name:%s\n"</span>, value.id, value.name)</span><br><span class="line">	<span class="comment">// 获取修改</span></span><br><span class="line">	<span class="keyword">var</span> newName <span class="keyword">string</span></span><br><span class="line">	fmt.Print(<span class="string">"Please change to new message:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;newName)</span><br><span class="line">	value.name = newName</span><br><span class="line">	<span class="comment">// 更新学生的姓名</span></span><br><span class="line">	s.allStudent[StuId] = value</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ol>
    <li>
        <p>首先我们获取用户输入</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"><span class="comment">// 获取用户输入</span></span><br><span class="line">	<span class="keyword">var</span> StuId <span class="keyword">int64</span></span><br><span class="line">	fmt.Print(<span class="string">"Please input want change student IdCode:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;StuId)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
    <li>
        <p>拿着用户输入的学生Id，去Map里面查找相对应的学生Id</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line">value, ok := s.allStudent[StuId]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Not found"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"You want change student message:"</span>+</span><br><span class="line">		<span class="string">" Id: %d, Name:%s\n"</span>, value.id, value.name)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
        <p>若想实现修改，是需要存在的。如果不存在此学生，提示没有找到该学生，直接return掉。证明无法修改。如果存在那么它一定是唯一的一个Id，因为我们用的是Map格式的嘛，key唯一。</p>
    </li>
    <li>
        <p>如果存在我们就需要获取到用户所修改的值，并且将原有的Name覆盖掉。即可实现修改</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"><span class="keyword">var</span> newName <span class="keyword">string</span></span><br><span class="line">	fmt.Print(<span class="string">"Please change to new message:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;newName)</span><br><span class="line">	value.name = newName</span><br><span class="line">	<span class="comment">// 更新学生的姓名</span></span><br><span class="line">	s.allStudent[StuId] = value</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
</ol>
<p>测试时间，示例如下：</p>
<p>首先我是添加了一个学生在里面，<code>Id:1,Name:Payne</code>.</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkziis5yxvj31020u044i.jpg" alt=""></p>
<h3 id="实现删除学生功能"><a href="#实现删除学生功能" class="headerlink" title="实现删除学生功能"></a>实现删除学生功能</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s studentMgr)</span> <span class="title">delStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> studentID <span class="keyword">int64</span></span><br><span class="line">	<span class="comment">// 获取用户需删除的id</span></span><br><span class="line">	fmt.Print(<span class="string">"Please input want delete studentId："</span>)</span><br><span class="line">	fmt.Scanln(&amp;studentID)</span><br><span class="line">	<span class="comment">// 去map里面查找，若有则删除。没有则退出重新选择</span></span><br><span class="line">	value, ok := s.allStudent[studentID]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Not found"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"You want delete student message:"</span>+</span><br><span class="line">		<span class="string">" Id: %d, Name:%s\n"</span>, value.id, value.name)</span><br><span class="line">	<span class="built_in">delete</span>(s.allStudent, studentID)</span><br><span class="line">	fmt.Print(<span class="string">"Deleted Successfully\n"</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ol>
    <li>
        <p>首先我们需要删除，那么它是一定存在我们才能去删除。这个没毛病吧？我觉很ok。</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"><span class="keyword">var</span> studentID <span class="keyword">int64</span></span><br><span class="line"><span class="comment">// 获取用户需删除的id</span></span><br><span class="line">fmt.Print(<span class="string">"Please input want delete studentId："</span>)</span><br><span class="line">fmt.Scanln(&amp;studentID)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
    <li>
        <p>不存在提示未找到</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line">value, ok := s.allStudent[studentID]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Not found"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"You want delete student message:"</span>+</span><br><span class="line">		<span class="string">" Id: %d, Name:%s\n"</span>, value.id, value.name)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
    <li>
        <p>存在进行修改</p>
        <figure class="highlight go">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line">fmt.Printf(<span class="string">"You want delete student message:"</span>+</span><br><span class="line">	<span class="string">" Id: %d, Name:%s\n"</span>, value.id, value.name)</span><br><span class="line"><span class="built_in">delete</span>(s.allStudent, studentID)</span><br><span class="line">fmt.Print(<span class="string">"Deleted Successfully\n"</span>)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang介绍</title>
    <url>/10519.html</url>
    <content><![CDATA[<blockquote>
    <ul>
        <li>Golang官网地址:<a href="https://golang.org/" target="_blank" rel="noopener">https://golang.org/</a></li>
        <li>Golang官方文档:<a href="https://golang.org/doc/" target="_blank" rel="noopener">https://golang.org/doc/</a></li>
        <li>Golang Packages:<a href="https://golang.org/pkg/" target="_blank" rel="noopener">https://golang.org/pkg/</a></li>
        <li>Golang中文网：<a href="https://studygolang.com/" target="_blank" rel="noopener">https://studygolang.com/</a></li>
        <li>Golang中文文档：<a href="http://docscn.studygolang.com/" target="_blank" rel="noopener">http://docscn.studygolang.com/</a></li>
        <li>Golang中文Packages：<a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">https://studygolang.com/pkgdoc</a></li>
    </ul>
</blockquote>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2>
<p>Golang(又称Go)是<a href="https://zh.wikipedia.org/wiki/Google" target="_blank" rel="noopener">Google</a>公司开发的一种<a href="https://zh.wikipedia.org/wiki/静态类型" target="_blank" rel="noopener">静态</a><a href="https://zh.wikipedia.org/wiki/強類型" target="_blank" rel="noopener">强类型</a>、<a href="https://zh.wikipedia.org/wiki/編譯語言" target="_blank" rel="noopener">编译型</a>、<a href="https://zh.wikipedia.org/wiki/並行計算" target="_blank" rel="noopener">并发型</a>，并具有<a href="https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學" target="_blank" rel="noopener">垃圾回收功能</a>)的<a href="https://zh.wikipedia.org/wiki/编程语言" target="_blank" rel="noopener">编程语言</a>。</p>
<p><a href="https://zh.wikipedia.org/w/index.php?title=羅伯特·格瑞史莫&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">罗伯特·格瑞史莫</a>，<a href="https://zh.wikipedia.org/wiki/羅勃·派克" target="_blank" rel="noopener">罗勃·派克</a>（Rob Pike）及<a href="https://zh.wikipedia.org/wiki/肯·汤普逊" target="_blank" rel="noopener">肯·汤普逊</a>于2007年9月开始设计GO，稍后Ian Lance Taylor、Russ Cox加入项目。Go是基于<a href="https://zh.wikipedia.org/wiki/Inferno" target="_blank" rel="noopener">Inferno</a>操作系统所开发的。Go于2009年11月正式宣布推出，成为<a href="https://zh.wikipedia.org/wiki/開放原始碼" target="_blank" rel="noopener">开放源代码</a>项目，支持<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>、<a href="https://zh.wikipedia.org/wiki/MacOS" target="_blank" rel="noopener">macOS</a>、<a href="https://zh.wikipedia.org/wiki/Windows" target="_blank" rel="noopener">Windows</a>等操作系统。在2016年，Go被软件评价公司TIOBE 选为“TIOBE 2016 年最佳语言”。</p>
<p>目前，Go每半年发布一个二级版本（即从a.x升级到a.y）。</p>
<a id="more"></a>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2>
<p>Go的语法接近<a href="https://zh.wikipedia.org/wiki/C语言" target="_blank" rel="noopener">C语言</a>，但对于<a href="https://zh.wikipedia.org/w/index.php?title=变量的声明&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">变量的声明</a>有所不同。Go支持<a href="https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學" target="_blank" rel="noopener">垃圾回收功能</a>)。Go的<a href="https://zh.wikipedia.org/wiki/并行计算" target="_blank" rel="noopener">并行计算</a>模型是以<a href="https://zh.wikipedia.org/wiki/東尼·霍爾" target="_blank" rel="noopener">东尼·霍尔</a>的<a href="https://zh.wikipedia.org/wiki/交談循序程式" target="_blank" rel="noopener">通信顺序进程</a>（CSP）为基础，采取类似模型的其他语言包括<a href="https://zh.wikipedia.org/wiki/Occam" target="_blank" rel="noopener">Occam</a>和<a href="https://zh.wikipedia.org/wiki/Limbo" target="_blank" rel="noopener">Limbo</a><a href="https://zh.wikipedia.org/wiki/Go#cite_note-langfaq-3" target="_blank" rel="noopener">[3]</a>，Go也具有这个模型的特征，比如<a href="https://zh.wikipedia.org/wiki/通道_(编程" target="_blank" rel="noopener">通道</a>)传输。通过goroutine和通道等并行构造可以建造<a href="https://zh.wikipedia.org/wiki/线程池" target="_blank" rel="noopener">线程池</a>和<a href="https://zh.wikipedia.org/wiki/管道_(软件" target="_blank" rel="noopener">管道</a>)等<a href="https://zh.wikipedia.org/wiki/Go#cite_note-8" target="_blank" rel="noopener">[8]</a>。在1.8版本中开放插件（Plugin）的支持，这意味着现在能从Go中动态加载部分函数。</p>
<p>与C++相比，Go并不包括如<a href="https://zh.wikipedia.org/wiki/枚举" target="_blank" rel="noopener">枚举</a>、<a href="https://zh.wikipedia.org/wiki/异常处理" target="_blank" rel="noopener">异常处理</a>、<a href="https://zh.wikipedia.org/wiki/繼承_(計算機科學" target="_blank" rel="noopener">继承</a>)、<a href="https://zh.wikipedia.org/wiki/泛型" target="_blank" rel="noopener">泛型</a>、<a href="https://zh.wikipedia.org/wiki/斷言_(程式" target="_blank" rel="noopener">断言</a>)、<a href="https://zh.wikipedia.org/wiki/虚函数" target="_blank" rel="noopener">虚函数</a>等功能，但增加了 切片(Slice) 型、并发、管道、<a href="https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學" target="_blank" rel="noopener">垃圾回收功能</a>)、<a href="https://zh.wikipedia.org/wiki/介面_(資訊科技" target="_blank" rel="noopener">接口</a>)等特性的语言级支持。Go 2.0版本将支持泛型<a href="https://zh.wikipedia.org/wiki/Go#cite_note-9" target="_blank" rel="noopener">[9]</a>，对于<a href="https://zh.wikipedia.org/wiki/斷言_(程式" target="_blank" rel="noopener">断言</a>)的存在，则持负面态度，同时也为自己不提供类型<a href="https://zh.wikipedia.org/wiki/繼承_(計算機科學" target="_blank" rel="noopener">继承</a>)来辩护。</p>
<p>不同于<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>，Go原生提供了<a href="https://zh.wikipedia.org/wiki/关联数组" target="_blank" rel="noopener">关联数组</a>（也称为<a href="https://zh.wikipedia.org/wiki/哈希表" target="_blank" rel="noopener">哈希表</a>（Hashes）或字典（Dictionaries）），就像字符串类型一样。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2>
<p>2007年，<a href="https://zh.wikipedia.org/wiki/Google" target="_blank" rel="noopener">Google</a>设计Go，目的在于提高在<a href="https://zh.wikipedia.org/wiki/多核心處理器" target="_blank" rel="noopener">多核</a>、网络机器（networked machines）、大型<a href="https://zh.wikipedia.org/wiki/代码库" target="_blank" rel="noopener">代码库</a>（codebases）的情况下的开发效率。当时在Google，设计师们想要解决其他语言使用中的缺点，但是仍保留他们的优点。</p>
<ul>
    <li>静态类型和<a href="https://zh.wikipedia.org/wiki/运行时" target="_blank" rel="noopener">运行时</a>效率。（如：<a href="https://zh.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++</a>）</li>
    <li>可读性和易用性。（如：<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a> 和 <a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a>）<a href="https://zh.wikipedia.org/wiki/Go#cite_note-12" target="_blank" rel="noopener">[12]</a></li>
    <li>高性能的网络和<a href="https://zh.wikipedia.org/wiki/多进程" target="_blank" rel="noopener">多进程</a>。</li>
</ul>
<p>设计师们主要受他们之间流传的“不要像C++”启发。</p>
<p>Go于2009年11月正式宣布推出，<a href="https://zh.wikipedia.org/wiki/Go#cite_note-16" target="_blank" rel="noopener">[16]</a>版本1.0在2012年3月发布。之后，Go广泛应用于Google的产品以及许多其他组织和开源项目。</p>
<p>在2016年11月，Go（一种<a href="https://zh.wikipedia.org/wiki/无衬线体" target="_blank" rel="noopener">无衬线体</a>）和Go Mono 字体（一种<a href="https://zh.wikipedia.org/wiki/等宽字体" target="_blank" rel="noopener">等宽字体</a>）分别由设计师 Charles Bigelow 和 Kris Holmes 发布。 两种字体均采用了 <a href="https://zh.wikipedia.org/w/index.php?title=WGL4&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">WGL4</a> ，并且依照着 DIN 1450 标准，可清晰地使用了 large x-height 和 letterforms 。</p>
<p>在2018年8月，本地的图标更换了 。待描述完整 然而，Gopher mascot 仍旧命相同的名字。</p>
<p>在2018年8月，Go的主要贡献者发布了两个关于语言新功能的“草稿设计——<a href="https://zh.wikipedia.org/wiki/泛型" target="_blank" rel="noopener">泛型</a> 和 <a href="https://zh.wikipedia.org/wiki/异常处理" target="_blank" rel="noopener">异常处理</a>，同时寻求Go用户的反馈。Go 由于在1.x时，缺少对 <a href="https://zh.wikipedia.org/wiki/泛型" target="_blank" rel="noopener">泛型</a>编程 的支持和冗长的 <a href="https://zh.wikipedia.org/wiki/异常处理" target="_blank" rel="noopener">异常处理</a> 而备受批评。</p>
<p><strong>以上来自<a href="https://zh.wikipedia.org/wiki/Go#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">wiki</a>,更多详情可查看</strong></p>
<h2 id="为什么需要学习Golang？"><a href="#为什么需要学习Golang？" class="headerlink" title="为什么需要学习Golang？"></a>为什么需要学习Golang？</h2>
<blockquote>
    <p>“<a href="https://link.juejin.im/?target=https%3A%2F%2Ftwitter.com%2Ftobi%2Fstatus%2F326086379207536640">Go will be the server language of the future.</a>” — Tobias Lütke, Shopify</p>
</blockquote>
<h2 id="硬件的局限性"><a href="#硬件的局限性" class="headerlink" title="硬件的局限性"></a>硬件的局限性</h2>
<p><strong><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.investopedia.com%2Fterms%2Fm%2Fmooreslaw.asp">摩尔定律</a>正在失效。</strong></p>
<p>英特尔公司在 <a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.informit.com%2Farticles%2Farticle.aspx%3Fp%3D339073">2004 年推出</a>了第一款具有 3.0 GHz时钟速度的奔腾 4 处理器。如今，我的 <a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.apple.com%2Fmacbook-pro%2Fspecs%2F">2016款 MacBook Pro</a> 的时钟速度为 2.9 GHz。因此，差不多十年，原始处理能力都没有太多的增加。你可以在下图中看到处理能力的增长与时间的关系。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkficnh9qrj30go0bkwkn.jpg" alt=""></p>
<p>从上面的图表可以看出，单线程的性能和处理器的频率在近十年几乎保持稳定。如果你认为添加更多的晶体管是一种解决问题的方法，那你就错了。这是因为在微观尺度上，量子特性开始显现（例如：量子隧道穿越），放更多的晶体管代价也会越多(<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.quora.com%2FWhat-is-Quantum-Tunneling-Limit-How-does-it-limit-the-size-of-a-transistor">为什么？</a>)，而且，每美元可以添加晶体管的数量也开始下降。</p>
<p>所以，针对上述问题的解决方案如下：</p>
<ul>
    <li>厂商开始向处理器添加越来越多的内核。如今，我们已经有四核和八核的 CPU 可用。</li>
    <li>我们还引入了超线程技术。</li>
    <li>为处理器添加更多的缓存以提升性能。</li>
</ul>
<p>但是，以上方案也有它们自身的限制。我们无法向处理器添加更多的缓存以提升性能，因为缓存具有物理限制：缓存越大，速度越慢。添加更多的内核到处理器也有它的成本。而且，这也无法无限扩展。这些多核处理器能同时运行多个线程，同时也能带来并发能力。我们稍后会讨论它。</p>
<p>因此，如果我们不能依赖于硬件的改进，唯一的出路就是找到一个高效的软件来提升性能，但遗憾的是，现代编程语言都不是那么高效。</p>
<blockquote>
    <p>“现代处理器就像一辆有氮氧加速系统的直线竞速赛车，它们在直线竞速赛中表现优异。不幸的是，现代编程语言却像蒙特卡罗赛道，它们有大量的弯道。” - <a href="https://link.juejin.im/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDavid_Ungar">David Ungar</a></p>
</blockquote>
<h2 id="Go-天生支持并发"><a href="#Go-天生支持并发" class="headerlink" title="Go 天生支持并发"></a>Go 天生支持并发</h2>
<p>如上所述，硬件提供商正在向处理器添加更多的内核以提升性能。所有的数据中心都在这些处理器上运行，我们应该期待在未来几年内核数量的增长。更重要的是，如今的应用程序都是使用多个微服务来维持数据库的连接、消息队列和缓存的维护。因此，我们开发的软件和编程语言可以更容易的支持并发，并且它们应该随着内核数量的增长而可扩展。</p>
<p>但是大多数现代编程语言（如 Java、Python 等）都来自于 90 年代的单线程环境。这些语言大多数都支持多线程。但真正的问题是并发执行，线程锁、竞争条件和死锁。这些问题都使得很难在这些语言上创建一个多线程的应用程序。</p>
<p>例如，在 Java 中创建新的线程会消耗大量内存。因为每一个线程都会消耗大约 1 MB 大小的堆内存，如果你运行上千个线程，他们会对堆造成巨大的压力，最终会由于内存不足而宕机。此外，你想要在两个或者多个线程之间通信也是非常困难的。</p>
<p>另一方面，Go 于 2009 年发布，那时多核处理器已经上市了。这也是为什么 Go 是在考虑并发的基础上构建的。Go 用 goroutine 来替代线程，它们从堆中消耗了大约 2 KB 的内存。因此你可以随时启动上百万个 goroutine。</p>
<h2 id="Go-直接在底层硬件上运行"><a href="#Go-直接在底层硬件上运行" class="headerlink" title="Go 直接在底层硬件上运行"></a>Go 直接在底层硬件上运行</h2>
<p>与其他现代高级语言（如 Java/Python）相比，使用 C、C++ 的最大好处就是它的性能，因为 C/C++ 是编译型语言而不是解释型语言。</p>
<p>处理器能理解二进制文件。通常来说，当你编译一个用 Java 或者其他基于 JVM 的语言构建的应用程序，它将人类可读的代码编译为字节代码，这可以被 JVM 或者在底层操作系统之上运行的其他虚拟机所理解。当执行的时候，虚拟机解释这些字节码并且将他们转化为处理器能理解的二进制文件。</p>
<h2 id="用-Go-编写的代码易于维护"><a href="#用-Go-编写的代码易于维护" class="headerlink" title="用 Go 编写的代码易于维护"></a>用 Go 编写的代码易于维护</h2>
<p>我告诉你一件事，Go 没有像其他语言一样疯狂于编程语法，它的语法非常整洁。</p>
<p>Go 的的设计者在谷歌创建这门语言的时候就考虑到了这一点，由于谷歌拥有非常强大的代码库，成千上万的开发者都工作在相同的代码库上，代码应该易于其他开发者理解，一段代码应该对另一段代码有最小的影响。这些都会使得代码易于维护，易于修改。</p>
<p>Go 有意的忽视了许多现代面向对象语言的一些特性。</p>
<ul>
    <li><strong>没有类。</strong> 所有代码都仅用 package 分开，Go 只有结构体而不是类。</li>
    <li><strong>不支持继承。</strong> 这将使得代码易于修改。在其他语言中，如： Java/Python，如果类 ABC 继承类 XYZ 并且你在类 XYZ 中做了一些改动，那么这可能会在继承类 XYZ 的其他类中产生一些副作用。通过移除继承，Go 也使得理解代码变得很容易 <strong>（因为当你在看一段代码时不需要同时查看父类）</strong>。</li>
    <li>没有构造方法。</li>
    <li>没有注解。</li>
    <li>没有泛型。</li>
    <li>没有异常。</li>
</ul>
<p>以上这些改变使得 Go 与其他语言截然不同，这使得用 Go 编程与其他语言很不一样。你可能不喜欢以上的一些观点。但是，并不是说没有上述这些特性，你就无法对你的应用程序编码。你要做的就是多写几行代码，但从积极的一面，它将使你的代码更加清晰，为代码添加更多的清晰度。</p>
<h2 id="Go-来势汹汹"><a href="#Go-来势汹汹" class="headerlink" title="Go 来势汹汹"></a>Go 来势汹汹</h2>
<ul>
    <li>我知道这不是一个直接的技术优势，但 Go 是由谷歌设计并支持的，谷歌拥有世界上最大的云基础设施之一，并且规模庞大。谷歌设计 Go 以解决可扩展性和有效性问题。这些是创建我们自己的服务器时都会遇到的问题。</li>
    <li>Go 更多的也是被一些大公司所使用，如 Adobe、BBC、IBM，因特尔甚至是 <a href="https://link.juejin.im/?target=https%3A%2F%2Fmedium.engineering%2Fhow-medium-goes-social-b7dbefa6d413%23.r8nqjxjpk">Medium</a>。</li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-自定义类型</title>
    <url>/41426.html</url>
    <content><![CDATA[<p>在Go语言中没有<code>类</code>，也没有相关于<code>类</code>的继承、多态的实现。却有一种”新的概念”—结构体</p>
<p>Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p>
<p>那么，接下来就让我们推开Go语言进阶部分内容的大门，Let’s Go</p>
<p>在学习<code>结构体</code>之前我们先预热一下，先了解Golang 的自定义类型</p>
<a id="more"></a>
<ul>
    <li>自定义类型: 当现有类型不足以满足需求的时候, 自己创建的类型</li>
    <li>类型别名: 仅存在于编写过程, 提高代码可读性 ( byte 是 uint8 的别名; rune 是 uint16 的别名 )</li>
</ul>
<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2>
<p><strong><em>类型别名</em></strong> 是 Go 1.9 版本添加的新功能。主要应用于代码升级、工程重构、迁移中类型的兼容性问题。C/C++ 语言中，代码的重构升级可以使用宏快速定义新的代码。Go 语言中并未选择通过宏，而是选择通过类型别名解决重构中最复杂的类型名变更问题</p>
<h2 id="区分类型别名与类型定义"><a href="#区分类型别名与类型定义" class="headerlink" title="区分类型别名与类型定义"></a>区分类型别名与类型定义</h2>
<p>类型别名规定：Type Alias只是Type 的别名，本质上Type Alias 与Type是同一个类型，即基本数据类型是一致的。好比如我们小时家里人给我们起的小名，上学后英语老师给起的英文名字，但是这个名字都是指的我们自己。</p>
<p>表面上看类型别名与类型定义只有一个等号的差异（”=”）</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 这个叫自定义类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个叫类型别名</span></span><br><span class="line"><span class="keyword">type</span> YourInt = <span class="keyword">int</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>我们继续深入探究他们二者究竟有什么不同。如下代码所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type 后面的是类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span>     <span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> YourInt = <span class="keyword">int</span> <span class="comment">// 类型别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> m MyInt</span><br><span class="line">	<span class="keyword">var</span> y YourInt</span><br><span class="line">	m = <span class="number">10</span></span><br><span class="line">	y = <span class="number">20</span></span><br><span class="line">	fmt.Printf(<span class="string">"m 的类型是：%T, \n"</span>, m)</span><br><span class="line">	fmt.Printf(<span class="string">"y 的类型是：%T, \n"</span>, y)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>m 的类型是：main.MyInt,<br>y 的类型是：int, </p>
</blockquote>
<p>如上述代码，我们可以知道<code>自定义类型</code>是定义了一种新的类型，而类型别名是基于原始的类型的昵称而已。</p>
<p>相信你这时会想自定义类型有什么用？</p>
<p>既然可以自定义类型，那么我们是可以定制我们的类型的，例如，int是单纯的数字类型，如果我们可以自定义类型，我们是不是可以基于int把字符串里面的数字也包含进去呢？答案当然是可以的。如果有感兴趣的同学，可以自己去尝试一下。</p>
<p>预热完毕，那么让我们进入真正的操作环节，Go，Go，Go～</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2>
<p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</p>
<p>Go语言中通过<code>struct</code>来实现<code>面向对象</code>的相关概念。</p>
<h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 使用type和struct关键字来定义结构体</span></span><br><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>结构体定义需注意</p>
<ul>
    <li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li>
    <li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li>
    <li>字段类型：表示结构体字段的具体类型</li>
</ul>
<p>具体定义如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age <span class="keyword">int</span></span><br><span class="line">	male <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当有相同类型的时候，我们还可以将相同类型的变量名使用“,”分割，写在一起。如下</span></span><br><span class="line"><span class="keyword">type</span> Person1 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name,male <span class="keyword">string</span></span><br><span class="line">	age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这样我们就拥有了一个的自定义类型<code>person</code>，它有<code>name</code>、<code>male</code>、<code>age</code>三个字段，分别表示姓名、性别和年龄。这样我们使用这个<code>person</code>结构体就能够很方便的在程序中表示和存储人信息了。</p>
<p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和性别等，本质上是一种聚合型的数据类型</p>
<p>将前面的融汇贯通，整点复合型的东东，搞起</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> MyString <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> MyInt=<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name MyString</span><br><span class="line">	age MyInt</span><br><span class="line">	male <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>结构体定义了之后，咱们还需要进行初始化，才能使用。</p>
<h3 id="结构体初始化与基本使用"><a href="#结构体初始化与基本使用" class="headerlink" title="结构体初始化与基本使用"></a>结构体初始化与基本使用</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyString <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> MyInt = <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name MyString</span><br><span class="line">	age  MyInt</span><br><span class="line">	sex  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person1 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name, sex <span class="keyword">string</span></span><br><span class="line">	age       <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p Person</span><br><span class="line">	<span class="keyword">var</span> p1 Person1</span><br><span class="line">	p.name = <span class="string">"Payne"</span></span><br><span class="line">	p.sex = <span class="string">"male"</span></span><br><span class="line">	p.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">	p1.name = <span class="string">"Tim"</span></span><br><span class="line">	p1.sex = <span class="string">"female"</span></span><br><span class="line">	p1.age = <span class="number">23</span></span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T,value:%v\n"</span>, p, p)</span><br><span class="line">	fmt.Printf(<span class="string">"%#v\n"</span>, p)</span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T,value:%v\n"</span>, p1, p1)</span><br><span class="line">	fmt.Printf(<span class="string">"%#v"</span>, p1)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>Type:main.Person,value:{Payne 20 male}<br>main.Person{name:”Payne”, age:20, sex:”male”}<br>Type:main.Person1,value:{Tim female 23}<br>main.Person1{name:”Tim”, sex:”female”, age:23}</p>
</blockquote>
<h3 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h3>
<p>在定义一些临时数据结构等场景下还可以使用匿名结构体。如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person2 <span class="keyword">struct</span> &#123;</span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">		age  <span class="keyword">int</span></span><br><span class="line">		sex  <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line">	person2.name = <span class="string">"Payne"</span></span><br><span class="line">	person2.age = <span class="number">20</span></span><br><span class="line">	person2.sex = <span class="string">"male"</span></span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T,value:%v\n"</span>, person2, person2)</span><br><span class="line">	fmt.Printf(<span class="string">"%#v\n"</span>, person2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type:struct &#123; name string; age int; sex string &#125;,value:&#123;Payne 20 male&#125;</span></span><br><span class="line"><span class="comment">// struct &#123; name string; age int; sex string &#125;&#123;name:"Payne", age:20, sex:"male"&#125;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang函数初探</title>
    <url>/15677.html</url>
    <content><![CDATA[<p>本节将探讨golang 的函数部分</p>
<ul>
    <li>函数的结构分析函数的定义</li>
    <li>函数的层次</li>
    <li>函数的作用域</li>
    <li>匿名函数</li>
    <li>立即执行函数</li>
    <li>闭包</li>
</ul>
<h2 id="函数存在的意义"><a href="#函数存在的意义" class="headerlink" title="函数存在的意义"></a>函数存在的意义</h2>
<ul>
    <li>函数是一段代码的封装</li>
    <li>使用函数可以使结构更加清晰与简洁</li>
</ul>
<a id="more"></a>
<h3 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h3>
<p>函数存在的一个非常明显的作用和意义就是代码重用。没有代码重用，编程人员会被活活累死，费尽千辛万苦写出来的代码只能使用一次，有类似的功能需要完成时，不得不重头开始写起。</p>
<h3 id="有助于我们思考"><a href="#有助于我们思考" class="headerlink" title="有助于我们思考"></a>有助于我们思考</h3>
<p>在函数设计上有一个原则，叫做单一职能原则，意思是说，一个函数只完成一个特定的功能。我以冒泡排序来向你解释什么叫做到单一职能原则，并向你展示函数是如何帮助我们思考问题的。</p>
<h2 id="初探Golang函数"><a href="#初探Golang函数" class="headerlink" title="初探Golang函数"></a>初探Golang函数</h2>
<p>不知道你是否还记得我们写的第一个代码<code>HelloWorld</code>，来我们对他进行分析一下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello，World"</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>它由以下几部分构成：</p>
<ul>
    <li>
        <p>任何一个函数的定义，都有一个 func 关键字，用于声明一个函数，就像使用 var 关键字声明一个变量一样。</p>
    </li>
    <li>
        <p>紧跟的 main 是函数的名字，命名符合 Go 语言的规范即可，不能以数字开头。</p>
    </li>
    <li>
        <p>main 函数名字后面的一对括号 () 是不能省略的，括号里可以定义函数使用的参数，这里的 main 函数没有参数，所以是空括号 () 。</p>
    </li>
    <li>
        <p>括号 () 后还可以有函数的返回值，因为 main 函数没有返回值，所以这里没有定义。</p>
    </li>
    <li>
        <p>{} 函数体，你可以在函数体里书写代码，写该函数自己的业务逻辑。</p>
    </li>
</ul>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main		<span class="comment">// 主函数入口，表面可执行文件。若不是main，则只能被调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>		<span class="comment">// 导包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func 关键字定义函数，与Python中的def效果一致</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;		 <span class="comment">// main函数名（主函数）入口，括号中为形参。没有可不写</span></span><br><span class="line"><span class="comment">// 业务代码</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>形参：即形式参数，只与内部调用有关。</p>
    <p>当调用函数的时候，为位置为准，对应对应</p>
</blockquote>
<h2 id="初探函数"><a href="#初探函数" class="headerlink" title="初探函数"></a>初探函数</h2>
<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数、无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">t1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"你好，我叫Payne"</span>) <span class="comment">// 你好，我叫Payne</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数，有返回值（有返回值必须在后面写上返回值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值，则需要多个类型参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">t2</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数，有返回值。同一类型可使用逗号隔开在最后写类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">t3</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数:最显著的特征是没有函数名，可以使用变量来接受它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 在main 中使用a()即可调用此韩素</span></span><br><span class="line"><span class="keyword">var</span> a  = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"a"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	t1() <span class="comment">// 调用函数</span></span><br><span class="line">	<span class="comment">// 返回值需要我们打印，才能显示出来</span></span><br><span class="line">	fmt.Println(t2()) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="函数结构分析"><a href="#函数结构分析" class="headerlink" title="函数结构分析"></a>函数结构分析</h3>
<p>由于main函数的定义并不利于理解golang的函数，那么我们自定义一个函数。如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// num(1,2) 调用函数</span></span><br><span class="line">	fmt.Println(num(<span class="number">1</span>, <span class="number">2</span>))		<span class="comment">// 调用函数，并打印 2，1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">num</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	j, i = i, j</span><br><span class="line">	<span class="keyword">return</span> i, j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义多个参数与返回值的函数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(params ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, i := <span class="keyword">range</span> params &#123;</span><br><span class="line">		sum += i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多个参数,多个参数的内部其实就是切片类型[...]int</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意，如果定义的函数需要传递的参数既有普通参数，也有可变参数，那么可变参数一定要放在参数列表的最后一个，比如 sum1(tip string,params …int) ，params 可变参数一定要放在最末尾。</p>
</blockquote>
<h3 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h3>
<p>全局与局部：（变量与常量）</p>
<blockquote>
    <p>全局：故名思义，全局均可访问的函数</p>
    <p>局部：故名思义，仅有局部才可访问的变量</p>
    <p>代码块作用域：仅在此代码块中</p>
    <p>二则的区分：全局变量常常直接在代码的函数部分的上面定义，而局部变量仅在函数中定义。且不可被函数外部的访问</p>
</blockquote>
<p>golang的寻找变量的方式体现可简单理解为<code>就近原则</code>；示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aA = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	aA := <span class="number">2</span></span><br><span class="line">	fmt.Println(aA)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(aA)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1()    <span class="comment">// 2</span></span><br><span class="line">	f2()    <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>在函数f1中对变量<code>aA</code>，进行修改。而不影响全局的<code>aA</code>.且调用时先从函数内寻找，没有则往上。</p>
    <p>不仅函数中有全局、局部的概念，例如循环中也有此概念</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Print(i)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	j := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> ; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">		fmt.Print(j)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f1() </span><br><span class="line">	f2() </span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>二者的区别为，变量<code>i</code>使用完成后会立马销毁，释放内存。而变量<code>j</code>，则会一直存在</p>
</blockquote>
<h3 id="函数类型与变量"><a href="#函数类型与变量" class="headerlink" title="函数类型与变量"></a>函数类型与变量</h3>
<h4 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h4>
<p>我们可以使用<code>type</code>关键字来定义一个函数类型，具体格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> calculation <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>上面语句定义了一个<code>calculation</code>类型，它是一种函数类型，这种函数接收两个int类型的参数并且返回一个int类型的返回值。</p>
<p>简单来说，凡是满足这个条件的函数都是calculation类型的函数，例如下面的add和sub是calculation类型。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>add和sub都能赋值给calculation类型的变量。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> c calculation</span><br><span class="line">c = add</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="函数类型变量"><a href="#函数类型变量" class="headerlink" title="函数类型变量"></a>函数类型变量</h4>
<p>我们可以声明函数类型的变量并且为该变量赋值：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> c calculation               <span class="comment">// 声明一个calculation类型的变量c</span></span><br><span class="line">	c = add                         <span class="comment">// 把add赋值给c</span></span><br><span class="line">	fmt.Printf(<span class="string">"type of c:%T\n"</span>, c) <span class="comment">// type of c:main.calculation</span></span><br><span class="line">	fmt.Println(c(<span class="number">1</span>, <span class="number">2</span>))            <span class="comment">// 像调用add一样调用c</span></span><br><span class="line"></span><br><span class="line">	f := add                        <span class="comment">// 将函数add赋值给变量f1</span></span><br><span class="line">	fmt.Printf(<span class="string">"type of f:%T\n"</span>, f) <span class="comment">// type of f:func(int, int) int</span></span><br><span class="line">	fmt.Println(f(<span class="number">10</span>, <span class="number">20</span>))          <span class="comment">// 像调用add一样调用f</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang内置包之time</title>
    <url>/11529.html</url>
    <content><![CDATA[<h2 id="GoLang内置包之time"><a href="#GoLang内置包之time" class="headerlink" title="GoLang内置包之time"></a>GoLang内置包之time</h2>
<p>一寸光阴一寸金，寸金难买寸光阴</p>
<p>时间离我们仅在咫尺，无论是在编程中时间还是日常生活中对于时间的<br>记述都是离我们最近的，那么让我们一起来学习一下GoLang中内置包time。</p>
<a id="more"></a>
<p>Let’s Go</p>
<h3 id="time包源码怎么说"><a href="#time包源码怎么说" class="headerlink" title="time包源码怎么说"></a>time包源码怎么说</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">	Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">	Millisecond          = <span class="number">1000</span> * Microsecond</span><br><span class="line">	Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">	Minute               = <span class="number">60</span> * Second</span><br><span class="line">	Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br><span class="line">time.Duration是time包定义的一个类型，</span><br><span class="line">它代表两个时间点之间经过的时间，以纳秒为单位。time.Duration表示一段时间间隔，可表示的最长时间段大约<span class="number">290</span>年。</span><br><span class="line"></span><br><span class="line">例如：time.Duration表示<span class="number">1</span>纳秒，time.Second表示<span class="number">1</span>秒。</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3>
<p>打印显示出现在的时间，基本示例如下。<br>其中now为<code>time.Time</code>类型,Month 为<code>time.Month</code>类型</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	now := time.Now() <span class="comment">//获取当前时间</span></span><br><span class="line">	<span class="comment">// current time:2020-12-01 22:24:30.85736 +0800 CST m=+0.000096031</span></span><br><span class="line">	fmt.Printf(<span class="string">"current time:%v\n"</span>, now)</span><br><span class="line"></span><br><span class="line">	year := now.Year()     <span class="comment">//年</span></span><br><span class="line">	month := now.Month()   <span class="comment">//月</span></span><br><span class="line">	day := now.Day()       <span class="comment">//日</span></span><br><span class="line">	hour := now.Hour()     <span class="comment">//小时</span></span><br><span class="line">	minute := now.Minute() <span class="comment">//分钟</span></span><br><span class="line">	second := now.Second() <span class="comment">//秒</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d-%02d-%02d %02d:%02d:%02d\n"</span>, year, month, day, hour, minute, second)</span><br><span class="line">	fmt.Printf(<span class="string">"%T,%T,%T,%T,%T,%T,%T\n"</span>, now, year, month, day, hour, minute, second)</span><br><span class="line">	<span class="comment">// time.Time,int,time.Month,int,int,int,int</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3>
<p>在编程中对于时间戳的应用也尤为广泛,例如在Web开发中做cookies有效期，接口加密，<br>Redis中的key有效期等等，大部分都是使用到了时间戳。</p>
<p>时间戳是自1970年1月1日（08:00:00GMT）至当前时间的总毫秒数。它也被称为Unix时间戳（UnixTimestamp）。<br>在GoLang中,获取时间戳的操作如下<br>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeStamp</span><span class="params">()</span></span> &#123;</span><br><span class="line">	now := time.Now()</span><br><span class="line">	<span class="comment">// 当前时间戳 TimeStamp type:int64, TimeStamp:1606832965</span></span><br><span class="line">	fmt.Printf(<span class="string">"TimeStamp type:%T, TimeStamp:%v"</span>, now.Unix(), now.Unix())</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure><br>除此之外还有纳秒时间戳，我们可以使用<code>time.Now().UnixNano()</code>来获取它<br>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeStamp</span><span class="params">()</span></span> &#123;</span><br><span class="line">	now := time.Now()</span><br><span class="line">	<span class="comment">// 纳秒级时间戳TimeStamp type:int64, TimeStamp:1606833059999670000</span></span><br><span class="line">	fmt.Printf(<span class="string">"TimeStamp type:%T, TimeStamp:%v\n"</span>, now.UnixNano(), now.UnixNano())</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure><br>那么基本的时间戳的先暂且为止了，那该如何由时间戳转化为普通的时间格式呢？</p>
<p>当然也是有方法滴，莫急莫急，请听我一一道来，嘴比较笨就直接用代码吧，嘻嘻</p>
<p>在<code>go</code>语言中可以<code>time.Unix</code>来直接将时间戳转化为当前时间格式，实现瞬间替换。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeStampToTime</span><span class="params">()</span></span> &#123;</span><br><span class="line">	timestamp := time.Now().Unix()</span><br><span class="line">	timeObj := time.Unix(timestamp, <span class="number">0</span>) <span class="comment">//将时间戳转为时间格式</span></span><br><span class="line">	fmt.Println(timeObj)</span><br><span class="line">	year := timeObj.Year()     <span class="comment">//年</span></span><br><span class="line">	month := timeObj.Month()   <span class="comment">//月</span></span><br><span class="line">	day := timeObj.Day()       <span class="comment">//日</span></span><br><span class="line">	hour := timeObj.Hour()     <span class="comment">//小时</span></span><br><span class="line">	minute := timeObj.Minute() <span class="comment">//分钟</span></span><br><span class="line">	second := timeObj.Second() <span class="comment">//秒</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d-%02d-%02d %02d:%02d:%02d\n"</span>, year, month, day, hour, minute, second)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这样我们就可以简单的将时间戳转化为时间格式，是不是很Nice</p>
<p>基本的定义查看就以及搞完了，那咱们整一下高级一点的东西，时间的操作</p>
<h3 id="操作时间"><a href="#操作时间" class="headerlink" title="操作时间"></a>操作时间</h3>
<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4>
<p>在原本的时间基础上在增加h时m分钟s秒，其增加的部分源码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// type Duration int64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Add</span><span class="params">(d Duration)</span> <span class="title">Time</span></span> &#123;</span><br><span class="line">	dsec := <span class="keyword">int64</span>(d / <span class="number">1e9</span>)</span><br><span class="line">	nsec := t.nsec() + <span class="keyword">int32</span>(d%<span class="number">1e9</span>)</span><br><span class="line">	<span class="keyword">if</span> nsec &gt;= <span class="number">1e9</span> &#123;</span><br><span class="line">		dsec++</span><br><span class="line">		nsec -= <span class="number">1e9</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> nsec &lt; <span class="number">0</span> &#123;</span><br><span class="line">		dsec--</span><br><span class="line">		nsec += <span class="number">1e9</span></span><br><span class="line">	&#125;</span><br><span class="line">	t.wall = t.wall&amp;^nsecMask | <span class="keyword">uint64</span>(nsec) <span class="comment">// update nsec</span></span><br><span class="line">	t.addSec(dsec)</span><br><span class="line">	<span class="keyword">if</span> t.wall&amp;hasMonotonic != <span class="number">0</span> &#123;</span><br><span class="line">		te := t.ext + <span class="keyword">int64</span>(d)</span><br><span class="line">		<span class="keyword">if</span> d &lt; <span class="number">0</span> &amp;&amp; te &gt; t.ext || d &gt; <span class="number">0</span> &amp;&amp; te &lt; t.ext &#123;</span><br><span class="line">			<span class="comment">// Monotonic clock reading now out of range; degrade to wall-only.</span></span><br><span class="line">			t.stripMono()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			t.ext = te</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>首先如果要增加的话那么数据的类型必须是一致的，这个在强类型语言go中这个是一定的。</p>
<p>从上面的源码中函数定义的这个变量名<code>Add(d Duration)</code>发现，其参数d为Duration类型，那么我们直接拿过来用即可，实现代码如下:</p>
<figure class="highlight verilog">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func operating(h, m, s, mls, msc, ns <span class="keyword">time</span><span class="variable">.Duration</span>) &#123;</span><br><span class="line">	now := <span class="keyword">time</span><span class="variable">.Now</span>()</span><br><span class="line">	fmt<span class="variable">.Println</span>(now<span class="variable">.Add</span>(<span class="keyword">time</span><span class="variable">.Hour</span>*h + <span class="keyword">time</span><span class="variable">.Minute</span>*m + <span class="keyword">time</span><span class="variable">.Second</span>*s + <span class="keyword">time</span><span class="variable">.Millisecond</span>*mls + <span class="keyword">time</span><span class="variable">.Microsecond</span>*msc + <span class="keyword">time</span><span class="variable">.Nanosecond</span>*ns))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	<span class="comment">//timeDemo()</span></span><br><span class="line">	<span class="comment">//timeStamp()</span></span><br><span class="line">	<span class="comment">//timeStampToTime()</span></span><br><span class="line">	operating(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>注意在这里并不能增加年\月\日，仅能增加时分秒,也就是以下的才被允许</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">	Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">	Millisecond          = <span class="number">1000</span> * Microsecond</span><br><span class="line">	Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">	Minute               = <span class="number">60</span> * Second</span><br><span class="line">	Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="Sub"><a href="#Sub" class="headerlink" title="Sub"></a>Sub</h4>
<figure class="highlight css">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">operating</span>() &#123;</span><br><span class="line">	<span class="attribute">now </span>:= time.<span class="built_in">Now</span>()</span><br><span class="line">	targetTime := now.<span class="built_in">Add</span>(time.Hour)</span><br><span class="line">	// 目标时间与此时相比相差<span class="number">1</span>h0m0s</span><br><span class="line">	fmt.<span class="built_in">Println</span>(targetTime.Sub(now))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>谁的sub谁为参照时间</p>
</blockquote>
<h4 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a>Equal</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Equal</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>判断两个时间是否相同，会考虑时区的影响，因此不同时区标准的时间也可以正确比较。本方法和用t==u不同，这种方法还会比较地点和时区信息。</p>
<h4 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Before</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果t代表的时间点在u之前，返回真；否则返回假。</p>
<h4 id="After"><a href="#After" class="headerlink" title="After"></a>After</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">After</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果t代表的时间点在u之后，返回真；否则返回假。</p>
<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4>
<p>使用<code>time.Tick(时间间隔)</code>来设置定时器，定时器的本质上是一个通道（channel）。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tickDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ticker := time.Tick(time.Second) <span class="comment">//定义一个1秒间隔的定时器</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> ticker &#123;</span><br><span class="line">		fmt.Println(i)<span class="comment">//每秒都会执行的任务</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3>
<p>时间类型有一个自带的方法<code>Format</code>进行格式化，需要注意的是Go语言中格式化时间模板不是常见的<code>Y-m-d H:M:S</code>而是使用Go的诞生时间2006年1月2号15点04分（记忆口诀为2006 1 2 3 4）</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formatDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	now := time.Now()</span><br><span class="line">	<span class="comment">// 格式化的模板为Go的出生时间2006年1月2号15点04分 Mon Jan</span></span><br><span class="line">	<span class="comment">// 24小时制</span></span><br><span class="line">	fmt.Println(now.Format(<span class="string">"2006-01-02 15:04:05.000 Mon Jan"</span>))</span><br><span class="line">	<span class="comment">// 12小时制</span></span><br><span class="line">	fmt.Println(now.Format(<span class="string">"2006-01-02 03:04:05.000 PM Mon Jan"</span>))</span><br><span class="line">	fmt.Println(now.Format(<span class="string">"2006/01/02 15:04"</span>))</span><br><span class="line">	fmt.Println(now.Format(<span class="string">"15:04 2006/01/02"</span>))</span><br><span class="line">	fmt.Println(now.Format(<span class="string">"2006/01/02"</span>))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>补充：如果想格式化为12小时方式，需指定<code>PM</code>。</p>
<h4 id="解析字符串格式的时间"><a href="#解析字符串格式的时间" class="headerlink" title="解析字符串格式的时间"></a>解析字符串格式的时间</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now)</span><br><span class="line"><span class="comment">// 加载时区</span></span><br><span class="line">loc, err := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照指定时区和指定格式解析字符串时间</span></span><br><span class="line">timeObj, err := time.ParseInLocation(<span class="string">"2006/01/02 15:04:05"</span>, <span class="string">"2019/08/04 14:15:20"</span>, loc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(timeObj)</span><br><span class="line">fmt.Println(timeObj.Sub(now))</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang切片-slice</title>
    <url>/46493.html</url>
    <content><![CDATA[<p>在上篇数据类型-Array中写到<strong>因为数组的长度是固定的并且数组长度属于类型的一部分</strong>,所以数组有很多的局限性</p>
<a id="more"></a>
<blockquote>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arraySum</span><span class="params">(x [5]<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line"> sum := <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> _, v := <span class="keyword">range</span> x&#123;</span><br><span class="line">     sum = sum + v</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>这个求和函数只能接受<code>[5]int</code>类型，其他的都不支持。 再比如，</p>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>数组a中已经有五个元素了，我们不能再继续往数组a中添加新元素了。</p>
</blockquote>
<h2 id="切片的本质"><a href="#切片的本质" class="headerlink" title="切片的本质"></a>切片的本质</h2>
<p>切片的本质就是对底层数组的封装，它包含了三个信息：</p>
<ul>
    <li>底层数组的指针</li>
    <li>切片的长度（len）</li>
    <li>切片的容量（cap)</li>
</ul>
<p>举个例子，现在有一个数组<code>a := [8]int{0, 1, 2, 3, 4, 5, 6, 7}</code>，切片<code>s1 := a[:5]</code>，相应示意图如下。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkl8xaagu0j318e0l2abf.jpg" alt=""></p>
<p>切片<code>s2 := a[3:6]</code>，相应示意图如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkl8xvn3bdj318e0l2q4b.jpg" alt=""></p>
<h2 id="切片的定义"><a href="#切片的定义" class="headerlink" title="切片的定义"></a>切片的定义</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 初始化定义</span></span><br><span class="line"><span class="comment">// 基于var，var定义的时仅会声明，不会申请内存！！！</span></span><br><span class="line"><span class="keyword">var</span> 变量名 []类型</span><br><span class="line"><span class="comment">// make([]T, size, cap) make初始化分配内存</span></span><br><span class="line"><span class="built_in">make</span>([]类型, 切片中元素的数量, 切片的容量)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line">变量名 := []类型&#123;值<span class="number">1</span>，值<span class="number">2</span>。。。&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// var</span></span><br><span class="line">	<span class="keyword">var</span> s1 []<span class="keyword">int</span>             <span class="comment">//var定义的时仅会声明，不会申请内存</span></span><br><span class="line">	fmt.Println(s1)          <span class="comment">// []</span></span><br><span class="line">	fmt.Println(s1 == <span class="literal">nil</span>)   <span class="comment">// true</span></span><br><span class="line">	s1 = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(s1[<span class="number">0</span>:<span class="number">2</span>])     <span class="comment">// [1 2]</span></span><br><span class="line">	<span class="comment">// make</span></span><br><span class="line">	s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">4</span>, <span class="number">6</span>)   <span class="comment">// make初始化分配内存</span></span><br><span class="line">	fmt.Println(s2)           <span class="comment">// [0 0 0 0]</span></span><br><span class="line">	fmt.Println(s2 == <span class="literal">nil</span>)    <span class="comment">// false</span></span><br><span class="line">	s2 = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(s2[<span class="number">0</span>:<span class="number">2</span>])       <span class="comment">// [1 2]</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="var-声明切片"><a href="#var-声明切片" class="headerlink" title="var 声明切片"></a>var 声明切片</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 声明切片类型</span></span><br><span class="line">	<span class="keyword">var</span> s1 []<span class="keyword">string</span>              <span class="comment">//声明一个字符串切片</span></span><br><span class="line">  <span class="keyword">var</span> s2 = []<span class="keyword">int</span>&#123;&#125;             <span class="comment">//声明一个整型切片并初始化(不规范写法，注意！！！)</span></span><br><span class="line">	<span class="keyword">var</span> s3 = []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125; <span class="comment">//声明一个布尔切片并初始化</span></span><br><span class="line">	<span class="keyword">var</span> s4 = []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125; <span class="comment">//声明一个布尔切片并初始化</span></span><br><span class="line">	fmt.Println(s1)              <span class="comment">//[]</span></span><br><span class="line">	fmt.Println(s2)              <span class="comment">//[]</span></span><br><span class="line">	fmt.Println(s3)              <span class="comment">//[false true]</span></span><br><span class="line">	fmt.Println(s4)              <span class="comment">//[false true]</span></span><br><span class="line">	fmt.Println(s1 == <span class="literal">nil</span>)       <span class="comment">//true</span></span><br><span class="line">	fmt.Println(s2 == <span class="literal">nil</span>)       <span class="comment">//false</span></span><br><span class="line">	fmt.Println(s3 == <span class="literal">nil</span>)       <span class="comment">//false</span></span><br><span class="line">	fmt.Println(s4 == <span class="literal">nil</span>)       <span class="comment">//false</span></span><br><span class="line">	<span class="comment">// fmt.Println(s3 == s4)       //切片是引用类型，不支持直接比较，只能和nil比较</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Make-初始化切片"><a href="#Make-初始化切片" class="headerlink" title="Make 初始化切片"></a>Make 初始化切片</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// make 初始化切片</span></span><br><span class="line">	s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">4</span>, <span class="number">6</span>)        </span><br><span class="line">	s2 := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">4</span>, <span class="number">6</span>)     </span><br><span class="line">	s3 := <span class="built_in">make</span>([]<span class="keyword">bool</span>,<span class="number">2</span>, <span class="number">4</span>)        </span><br><span class="line">	fmt.Println(s1)                <span class="comment">// [0 0 0 0]</span></span><br><span class="line">	fmt.Println(s2)                <span class="comment">// [       ]</span></span><br><span class="line">	fmt.Println(s3)                <span class="comment">// [false false]</span></span><br><span class="line">	fmt.Println(s1 == <span class="literal">nil</span>)         <span class="comment">// false</span></span><br><span class="line">	fmt.Println(s2 == <span class="literal">nil</span>)         <span class="comment">// false</span></span><br><span class="line">	fmt.Println(s3 == <span class="literal">nil</span>)         <span class="comment">// false</span></span><br><span class="line">	<span class="comment">//fmt.Println(s2 == s3)        // 切片是引用类型，不支持直接比较，只能和nil比较</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="判断切片是否为空"><a href="#判断切片是否为空" class="headerlink" title="判断切片是否为空"></a>判断切片是否为空</h2>
<p>要检查切片是否为空，请始终使用<code>len(s) == 0</code>来判断，而不应该使用<code>s == nil</code>来判断。</p>
<h3 id="切片不能直接比较"><a href="#切片不能直接比较" class="headerlink" title="切片不能直接比较"></a>切片不能直接比较</h3>
<p>切片之间是不能比较的，我们不能使用<code>==</code>操作符来判断两个切片是否含有全部相等元素。 切片唯一合法的比较操作是和<code>nil</code>比较。 一个<code>nil</code>值的切片并没有底层数组，一个<code>nil</code>值的切片的长度和容量都是0。但是我们不能说一个长度和容量都是0的切片一定是<code>nil</code>，例如下面的示例：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span>         <span class="comment">//len(s1)=0;cap(s1)=0;s1==nil</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;&#125;        <span class="comment">//len(s2)=0;cap(s2)=0;s2!=nil</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>) <span class="comment">//len(s3)=0;cap(s3)=0;s3!=nil</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>所以要判断一个切片是否是空的，要是用<code>len(s) == 0</code>来判断，不应该使用<code>s == nil</code>来判断。</p>
<h2 id="切片的赋值拷贝"><a href="#切片的赋值拷贝" class="headerlink" title="切片的赋值拷贝"></a>切片的赋值拷贝</h2>
<p>下面的代码中演示了拷贝前后两个变量共享底层数组，对一个切片的修改会影响另一个切片的内容，这点需要特别注意。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 切片的赋值拷贝</span></span><br><span class="line">	s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">	s2 := s1</span><br><span class="line">	s1[<span class="number">0</span>] = <span class="number">80</span></span><br><span class="line">	s2[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(s1)    <span class="comment">// [80 100]</span></span><br><span class="line">	fmt.Println(s2)    <span class="comment">// [80 100]</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="切片遍历"><a href="#切片遍历" class="headerlink" title="切片遍历"></a>切片遍历</h2>
<p>切片的遍历方式和数组(Array)是一致的，支持索引遍历和<code>for range</code>遍历。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">		fmt.Println(i, s[i])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Println(index, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="切片添加元素"><a href="#切片添加元素" class="headerlink" title="切片添加元素"></a>切片添加元素</h2>
<p>Go语言的内建函数<code>append()</code>可以为切片动态添加元素。 可以一次添加一个元素，可以添加多个元素，也可以添加另一个切片中的元素（后面加…）。</p>
<figure class="highlight isbl">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">目标变量 = <span class="function"><span class="title">append</span>(需被加入切片的变量名， 需追加的常量或者切片的变量名)</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line">  <span class="comment">// 添加单个元素</span></span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">1</span>)        <span class="comment">// [1]</span></span><br><span class="line">  <span class="comment">// 添加多个元素</span></span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment">// [1 2 3 4]</span></span><br><span class="line">	s2 := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;  </span><br><span class="line">  <span class="comment">// 添加切片</span></span><br><span class="line">	s = <span class="built_in">append</span>(s, s2...)    <span class="comment">// [1 2 3 4 5 6 7]</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>注意：</strong>通过var声明的零值切片，在<code>append()</code>函数中可直接使用，无需初始化。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 可以这样做，但没必要</span></span><br><span class="line">	s := []<span class="keyword">int</span>&#123;&#125; <span class="comment">// 没有必要初始化</span></span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">	fmt.Println(s)		<span class="comment">// 1,2,3,4,5,6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line">	<span class="keyword">var</span> s = <span class="built_in">make</span>([]<span class="keyword">int</span>) </span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="切片底层内存原理探究"><a href="#切片底层内存原理探究" class="headerlink" title="切片底层内存原理探究"></a>切片底层内存原理探究</h2>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3>
<blockquote>
    <p>每个切片会指向一个底层数组，这个数组的容量够用就添加新增元素。当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行“扩容”，此时该切片指向的底层数组就会更换。“扩容”操作往往发生在<code>append()</code>函数调用时，所以我们通常都需要用原变量接收append函数的返回值。</p>
    <p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gklp4pox1sj30t608875i.jpg" alt=""></p>
    <p>从上面的结果可以看出：</p>
    <ol>
        <li><code>append()</code>函数将元素追加到切片的最后并返回该切片。</li>
        <li>切片numSlice的容量按照1，2，4，8，16这样的规则自动进行扩容，每次扩容后都是扩容前的2倍。</li>
    </ol>
</blockquote>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3>
<p><code>$GOROOT/src/runtime/slice.go</code></p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style</span></span><br><span class="line"><span class="comment">// license that can be found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> runtime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"runtime/internal/math"</span></span><br><span class="line">	<span class="string">"runtime/internal/sys"</span></span><br><span class="line">	<span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 自定义类型定义了一个全新的类型。基于内置的基本类型定义，也可以通过struct定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice是一种新类型，同时也包含了struct所具有的特性</span></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123; <span class="comment">// 自定义类型名为slice，struct类型。</span></span><br><span class="line">	array unsafe.Pointer</span><br><span class="line">	<span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">	<span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A notInHeapSlice is a slice backed by go:notinheap memory.</span></span><br><span class="line"><span class="comment">// notInHeapSlice是go：notinheap内存支持的切片</span></span><br><span class="line"><span class="keyword">type</span> notInHeapSlice <span class="keyword">struct</span> &#123;</span><br><span class="line">	array *notInHeap</span><br><span class="line">	<span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">	<span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panicmakeslicelen</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(errorString(<span class="string">"makeslice: len out of range"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panicmakeslicecap</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(errorString(<span class="string">"makeslice: cap out of range"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// makeslicecopy allocates a slice of "tolen" elements of type "et",</span></span><br><span class="line"><span class="comment">// then copies "fromlen" elements of type "et" into that new allocation from "from".</span></span><br><span class="line"><span class="comment">// makeslicecopy会分配一片类型为“ et”的“ tolen”元素，然后将类型为“ et”的“ fromlen”元素复制到“ from”的新分配中。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeslicecopy</span><span class="params">(et *_type, tolen <span class="keyword">int</span>, fromlen <span class="keyword">int</span>, from unsafe.Pointer)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> tomem, copymem <span class="keyword">uintptr</span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">uintptr</span>(tolen) &gt; <span class="keyword">uintptr</span>(fromlen) &#123;</span><br><span class="line">		<span class="keyword">var</span> overflow <span class="keyword">bool</span></span><br><span class="line">		tomem, overflow = math.MulUintptr(et.size, <span class="keyword">uintptr</span>(tolen))</span><br><span class="line">		<span class="keyword">if</span> overflow || tomem &gt; maxAlloc || tolen &lt; <span class="number">0</span> &#123;</span><br><span class="line">			panicmakeslicelen()</span><br><span class="line">		&#125;</span><br><span class="line">		copymem = et.size * <span class="keyword">uintptr</span>(fromlen)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// fromlen is a known good length providing and equal or greater than tolen,</span></span><br><span class="line">		<span class="comment">// thereby making tolen a good slice length too as from and to slices have the</span></span><br><span class="line">		<span class="comment">// same element width.</span></span><br><span class="line">    <span class="comment">// fromlen是已知的良好长度，提供并等于或大于tolen，因此也使tolen具有良好的切片长度，因为from和to切片具有//相同的元素宽度。</span></span><br><span class="line">		tomem = et.size * <span class="keyword">uintptr</span>(tolen)</span><br><span class="line">		copymem = tomem</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> to unsafe.Pointer</span><br><span class="line">	<span class="keyword">if</span> et.ptrdata == <span class="number">0</span> &#123;</span><br><span class="line">		to = mallocgc(tomem, <span class="literal">nil</span>, <span class="literal">false</span>)</span><br><span class="line">		<span class="keyword">if</span> copymem &lt; tomem &#123;</span><br><span class="line">			memclrNoHeapPointers(add(to, copymem), tomem-copymem)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Note: can't use rawmem (which avoids zeroing of memory), because then GC can scan uninitialized memory.</span></span><br><span class="line">    <span class="comment">// 注意：不能使用rawmem（这样可以避免内存清零），因为GC可以扫描未初始化的内存。</span></span><br><span class="line">		to = mallocgc(tomem, et, <span class="literal">true</span>)</span><br><span class="line">		<span class="keyword">if</span> copymem &gt; <span class="number">0</span> &amp;&amp; writeBarrier.enabled &#123;</span><br><span class="line">			<span class="comment">// Only shade the pointers in old.array since we know the destination slice to</span></span><br><span class="line">			<span class="comment">// only contains nil pointers because it has been cleared during alloc.</span></span><br><span class="line">      <span class="comment">//因为我们知道到//的目标切片仅包含nil指针，所以仅在old.array中隐藏了指针，因为在分配过程中已将其清除。</span></span><br><span class="line">			bulkBarrierPreWriteSrcOnly(<span class="keyword">uintptr</span>(to), <span class="keyword">uintptr</span>(from), copymem)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">		callerpc := getcallerpc()</span><br><span class="line">		pc := funcPC(makeslicecopy)</span><br><span class="line">		racereadrangepc(from, copymem, callerpc, pc)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">		msanread(from, copymem)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	memmove(to, from, copymem)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeslice</span><span class="params">(et *_type, <span class="built_in">len</span>, <span class="built_in">cap</span> <span class="keyword">int</span>)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</span><br><span class="line">	mem, overflow := math.MulUintptr(et.size, <span class="keyword">uintptr</span>(<span class="built_in">cap</span>))</span><br><span class="line">	<span class="keyword">if</span> overflow || mem &gt; maxAlloc || <span class="built_in">len</span> &lt; <span class="number">0</span> || <span class="built_in">len</span> &gt; <span class="built_in">cap</span> &#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">NOTE:</span> Produce a 'len out of range' error instead of a</span></span><br><span class="line">		<span class="comment">// 'cap out of range' error when someone does make([]T, bignumber).</span></span><br><span class="line">		<span class="comment">// 'cap out of range' is true too, but since the cap is only being</span></span><br><span class="line">		<span class="comment">// supplied implicitly, saying len is clearer.</span></span><br><span class="line">		<span class="comment">// See golang.org/issue/4085.</span></span><br><span class="line">    <span class="comment">////注意：当有人进行make（[] T，bignumber）时，产生一个'len out of range'错误，而不是一个'cap cap out range'错误。 “上限超出范围”也是正确的，但是由于上限是隐式提供的，因此说len更清楚。 参见golang.org/issue/4085。</span></span><br><span class="line">		mem, overflow := math.MulUintptr(et.size, <span class="keyword">uintptr</span>(<span class="built_in">len</span>))</span><br><span class="line">		<span class="keyword">if</span> overflow || mem &gt; maxAlloc || <span class="built_in">len</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">			panicmakeslicelen()</span><br><span class="line">		&#125;</span><br><span class="line">		panicmakeslicecap()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> mallocgc(mem, et, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeslice64</span><span class="params">(et *_type, len64, cap64 <span class="keyword">int64</span>)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</span><br><span class="line">	<span class="built_in">len</span> := <span class="keyword">int</span>(len64)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">int64</span>(<span class="built_in">len</span>) != len64 &#123;</span><br><span class="line">		panicmakeslicelen()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cap</span> := <span class="keyword">int</span>(cap64)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">int64</span>(<span class="built_in">cap</span>) != cap64 &#123;</span><br><span class="line">		panicmakeslicecap()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> makeslice(et, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// growslice handles slice growth during append.</span></span><br><span class="line"><span class="comment">// It is passed the slice element type, the old slice, and the desired new minimum capacity,</span></span><br><span class="line"><span class="comment">// and it returns a new slice with at least that capacity, with the old data</span></span><br><span class="line"><span class="comment">// copied into it.</span></span><br><span class="line"><span class="comment">// The new slice's length is set to the old slice's length,</span></span><br><span class="line"><span class="comment">// NOT to the new requested capacity.</span></span><br><span class="line"><span class="comment">// This is for codegen convenience. The old slice's length is used immediately</span></span><br><span class="line"><span class="comment">// to calculate where to write new values during an append.</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> When the old backend is gone, reconsider this decision.</span></span><br><span class="line"><span class="comment">// The SSA backend might prefer the new length or to return only ptr/cap and save stack space.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type, old slice, <span class="built_in">cap</span> <span class="keyword">int</span>)</span> <span class="title">slice</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">		callerpc := getcallerpc()</span><br><span class="line">		racereadrangepc(old.array, <span class="keyword">uintptr</span>(old.<span class="built_in">len</span>*<span class="keyword">int</span>(et.size)), callerpc, funcPC(growslice))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">		msanread(old.array, <span class="keyword">uintptr</span>(old.<span class="built_in">len</span>*<span class="keyword">int</span>(et.size)))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">cap</span> &lt; old.<span class="built_in">cap</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(errorString(<span class="string">"growslice: cap out of range"</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> et.size == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="comment">// append should not create a slice with nil pointer but non-zero len.</span></span><br><span class="line">		<span class="comment">// We assume that append doesn't need to preserve old.array in this case.</span></span><br><span class="line">		<span class="keyword">return</span> slice&#123;unsafe.Pointer(&amp;zerobase), old.<span class="built_in">len</span>, <span class="built_in">cap</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	newcap := old.<span class="built_in">cap</span></span><br><span class="line">	doublecap := newcap + newcap</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">		newcap = <span class="built_in">cap</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> old.<span class="built_in">len</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">			newcap = doublecap</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line">			<span class="comment">// and prevent an infinite loop.</span></span><br><span class="line">			<span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">				newcap += newcap / <span class="number">4</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line">			<span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line">			<span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">				newcap = <span class="built_in">cap</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> overflow <span class="keyword">bool</span></span><br><span class="line">	<span class="keyword">var</span> lenmem, newlenmem, capmem <span class="keyword">uintptr</span></span><br><span class="line">	<span class="comment">// Specialize for common values of et.size.</span></span><br><span class="line">	<span class="comment">// For 1 we don't need any division/multiplication.</span></span><br><span class="line">	<span class="comment">// For sys.PtrSize, compiler will optimize division/multiplication into a shift by a constant.</span></span><br><span class="line">	<span class="comment">// For powers of 2, use a variable shift.</span></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> et.size == <span class="number">1</span>:</span><br><span class="line">		lenmem = <span class="keyword">uintptr</span>(old.<span class="built_in">len</span>)</span><br><span class="line">		newlenmem = <span class="keyword">uintptr</span>(<span class="built_in">cap</span>)</span><br><span class="line">		capmem = roundupsize(<span class="keyword">uintptr</span>(newcap))</span><br><span class="line">		overflow = <span class="keyword">uintptr</span>(newcap) &gt; maxAlloc</span><br><span class="line">		newcap = <span class="keyword">int</span>(capmem)</span><br><span class="line">	<span class="keyword">case</span> et.size == sys.PtrSize:</span><br><span class="line">		lenmem = <span class="keyword">uintptr</span>(old.<span class="built_in">len</span>) * sys.PtrSize</span><br><span class="line">		newlenmem = <span class="keyword">uintptr</span>(<span class="built_in">cap</span>) * sys.PtrSize</span><br><span class="line">		capmem = roundupsize(<span class="keyword">uintptr</span>(newcap) * sys.PtrSize)</span><br><span class="line">		overflow = <span class="keyword">uintptr</span>(newcap) &gt; maxAlloc/sys.PtrSize</span><br><span class="line">		newcap = <span class="keyword">int</span>(capmem / sys.PtrSize)</span><br><span class="line">	<span class="keyword">case</span> isPowerOfTwo(et.size):</span><br><span class="line">		<span class="keyword">var</span> shift <span class="keyword">uintptr</span></span><br><span class="line">		<span class="keyword">if</span> sys.PtrSize == <span class="number">8</span> &#123;</span><br><span class="line">			<span class="comment">// Mask shift for better code generation.</span></span><br><span class="line">			shift = <span class="keyword">uintptr</span>(sys.Ctz64(<span class="keyword">uint64</span>(et.size))) &amp; <span class="number">63</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			shift = <span class="keyword">uintptr</span>(sys.Ctz32(<span class="keyword">uint32</span>(et.size))) &amp; <span class="number">31</span></span><br><span class="line">		&#125;</span><br><span class="line">		lenmem = <span class="keyword">uintptr</span>(old.<span class="built_in">len</span>) &lt;&lt; shift</span><br><span class="line">		newlenmem = <span class="keyword">uintptr</span>(<span class="built_in">cap</span>) &lt;&lt; shift</span><br><span class="line">		capmem = roundupsize(<span class="keyword">uintptr</span>(newcap) &lt;&lt; shift)</span><br><span class="line">		overflow = <span class="keyword">uintptr</span>(newcap) &gt; (maxAlloc &gt;&gt; shift)</span><br><span class="line">		newcap = <span class="keyword">int</span>(capmem &gt;&gt; shift)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		lenmem = <span class="keyword">uintptr</span>(old.<span class="built_in">len</span>) * et.size</span><br><span class="line">		newlenmem = <span class="keyword">uintptr</span>(<span class="built_in">cap</span>) * et.size</span><br><span class="line">		capmem, overflow = math.MulUintptr(et.size, <span class="keyword">uintptr</span>(newcap))</span><br><span class="line">		capmem = roundupsize(capmem)</span><br><span class="line">		newcap = <span class="keyword">int</span>(capmem / et.size)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The check of overflow in addition to capmem &gt; maxAlloc is needed</span></span><br><span class="line">	<span class="comment">// to prevent an overflow which can be used to trigger a segfault</span></span><br><span class="line">	<span class="comment">// on 32bit architectures with this example program:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// type T [1&lt;&lt;27 + 1]int64</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// var d T</span></span><br><span class="line">	<span class="comment">// var s []T</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// func main() &#123;</span></span><br><span class="line">	<span class="comment">//   s = append(s, d, d, d, d)</span></span><br><span class="line">	<span class="comment">//   print(len(s), "\n")</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="keyword">if</span> overflow || capmem &gt; maxAlloc &#123;</span><br><span class="line">		<span class="built_in">panic</span>(errorString(<span class="string">"growslice: cap out of range"</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> p unsafe.Pointer</span><br><span class="line">	<span class="keyword">if</span> et.ptrdata == <span class="number">0</span> &#123;</span><br><span class="line">		p = mallocgc(capmem, <span class="literal">nil</span>, <span class="literal">false</span>)</span><br><span class="line">		<span class="comment">// The append() that calls growslice is going to overwrite from old.len to cap (which will be the new length).</span></span><br><span class="line">		<span class="comment">// Only clear the part that will not be overwritten.</span></span><br><span class="line">		memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Note: can't use rawmem (which avoids zeroing of memory), because then GC can scan uninitialized memory.</span></span><br><span class="line">		p = mallocgc(capmem, et, <span class="literal">true</span>)</span><br><span class="line">		<span class="keyword">if</span> lenmem &gt; <span class="number">0</span> &amp;&amp; writeBarrier.enabled &#123;</span><br><span class="line">			<span class="comment">// Only shade the pointers in old.array since we know the destination slice p</span></span><br><span class="line">			<span class="comment">// only contains nil pointers because it has been cleared during alloc.</span></span><br><span class="line">			bulkBarrierPreWriteSrcOnly(<span class="keyword">uintptr</span>(p), <span class="keyword">uintptr</span>(old.array), lenmem-et.size+et.ptrdata)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	memmove(p, old.array, lenmem)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> slice&#123;p, old.<span class="built_in">len</span>, newcap&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfTwo</span><span class="params">(x <span class="keyword">uintptr</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(x<span class="number">-1</span>) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slicecopy</span><span class="params">(toPtr unsafe.Pointer, toLen <span class="keyword">int</span>, fmPtr unsafe.Pointer, fmLen <span class="keyword">int</span>, width <span class="keyword">uintptr</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> fmLen == <span class="number">0</span> || toLen == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n := fmLen</span><br><span class="line">	<span class="keyword">if</span> toLen &lt; n &#123;</span><br><span class="line">		n = toLen</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> width == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">		callerpc := getcallerpc()</span><br><span class="line">		pc := funcPC(slicecopy)</span><br><span class="line">		racereadrangepc(fmPtr, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">		racewriterangepc(toPtr, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">		msanread(fmPtr, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)))</span><br><span class="line">		msanwrite(toPtr, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	size := <span class="keyword">uintptr</span>(n) * width</span><br><span class="line">	<span class="keyword">if</span> size == <span class="number">1</span> &#123; <span class="comment">// common case worth about 2x to do here</span></span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> is this still worth it with new memmove impl?</span></span><br><span class="line">		*(*<span class="keyword">byte</span>)(toPtr) = *(*<span class="keyword">byte</span>)(fmPtr) <span class="comment">// known to be a byte pointer</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		memmove(toPtr, fmPtr, size)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slicestringcopy</span><span class="params">(toPtr *<span class="keyword">byte</span>, toLen <span class="keyword">int</span>, fm <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(fm) == <span class="number">0</span> || toLen == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n := <span class="built_in">len</span>(fm)</span><br><span class="line">	<span class="keyword">if</span> toLen &lt; n &#123;</span><br><span class="line">		n = toLen</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">		callerpc := getcallerpc()</span><br><span class="line">		pc := funcPC(slicestringcopy)</span><br><span class="line">		racewriterangepc(unsafe.Pointer(toPtr), <span class="keyword">uintptr</span>(n), callerpc, pc)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">		msanwrite(unsafe.Pointer(toPtr), <span class="keyword">uintptr</span>(n))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	memmove(unsafe.Pointer(toPtr), stringStructOf(&amp;fm).str, <span class="keyword">uintptr</span>(n))</span><br><span class="line">	<span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>内存分配部分，重点部分</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">newcap := old.<span class="built_in">cap</span></span><br><span class="line">doublecap := newcap + newcap</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">	newcap = <span class="built_in">cap</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> old.<span class="built_in">len</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">		newcap = doublecap</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line">		<span class="comment">// and prevent an infinite loop.</span></span><br><span class="line">		<span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">			newcap += newcap / <span class="number">4</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line">		<span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line">		<span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">			newcap = <span class="built_in">cap</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ul>
        <li>首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）。</li>
        <li>否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap），</li>
        <li>否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1/4，即（newcap=old.cap,for {newcap += newcap/4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap &gt;= cap）</li>
        <li>如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）。</li>
    </ul>
    <p>需要注意的是，切片扩容还会根据切片中元素的类型不同而做不同的处理，比如<code>int</code>和<code>string</code>类型的处理方式就不一样。</p>
</blockquote>
<h2 id="复制切片"><a href="#复制切片" class="headerlink" title="复制切片"></a>复制切片</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 疑问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	b := a</span><br><span class="line">	fmt.Println(a) <span class="comment">//[1 2 3 4 5]</span></span><br><span class="line">	fmt.Println(b) <span class="comment">//[1 2 3 4 5]</span></span><br><span class="line">	b[<span class="number">0</span>] = <span class="number">1000</span></span><br><span class="line">	fmt.Println(a) <span class="comment">//[1000 2 3 4 5]</span></span><br><span class="line">	fmt.Println(b) <span class="comment">//[1000 2 3 4 5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缘由：由于切片是引用类型，所以a和b其实都指向了同一块内存地址。修改b的同时a的值也会发生变化。</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Go语言内建的<code>copy()</code>函数可以迅速地将一个切片的数据复制到另外一个切片空间中，<code>copy()</code>函数的使用格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="built_in">copy</span>(destSlice, srcSlice []T)</span><br><span class="line"><span class="comment">// 其中：</span></span><br><span class="line">- srcSlice: 数据来源切片</span><br><span class="line">- destSlice: 目标切片</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// copy()复制切片</span></span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="built_in">copy</span>(s2, s1)     <span class="comment">//使用copy()函数将切片a中的元素复制到切片s2</span></span><br><span class="line">	fmt.Println(s1) <span class="comment">//[1 2 3]</span></span><br><span class="line">	fmt.Println(s2) <span class="comment">// [1 2 3 0 0]</span></span><br><span class="line">	s2[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">	fmt.Println(s1) <span class="comment">//[1 2 3]</span></span><br><span class="line">	fmt.Println(s2) <span class="comment">//[10 2 3 0 0]</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2>
<p>Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。 代码如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 从切片中删除元素</span></span><br><span class="line">	a := []<span class="keyword">int</span>&#123;<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>&#125;</span><br><span class="line">	<span class="comment">// 要删除索引为2的元素</span></span><br><span class="line">	a = <span class="built_in">append</span>(a[:<span class="number">2</span>], a[<span class="number">3</span>:]...)</span><br><span class="line">	fmt.Println(a) <span class="comment">//[30 31 33 34 35 36 37]</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>总结：要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></p>
<h2 id="总结及注意点"><a href="#总结及注意点" class="headerlink" title="总结及注意点"></a>总结及注意点</h2>
<ul>
    <li>底层数组的指针、切片的长度（len）、切片的容量（cap)</li>
    <li><code>var</code>与<code>make</code>基于var，var定义的时仅会声明，不会申请内存。make初始化会分配内存。其内容为初始值。(string: 空、int：0、bool：false、Array：var时为nil\make时为”[]”的内部有Len-1个0)</li>
    <li>通过var声明的零值切片可以在<code>append()</code>函数直接使用，无需初始化。</li>
    <li>Append可以一次添加一个元素，可以添加多个元素，也可以添加另一个切片中的元素（后面需要加…）。</li>
    <li>当内存小于1024时，每次扩宽两倍。当1024每次增加原本的1/4倍</li>
    <li>要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang基础指令</title>
    <url>/18957.html</url>
    <content><![CDATA[<p>无论多么复杂的程序，多么复杂的逻辑。基本是由以下三种构成(当然除非其原本业务逻辑客观复杂)</p>
<p>大道至简、速归同途，找到这种感觉。come on～</p>
<h2 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h2>
<h3 id="if-条件分支语句"><a href="#if-条件分支语句" class="headerlink" title="if 条件分支语句"></a>if 条件分支语句</h3>
<p>Golang条件语句是通过一条或多条语句的执行结果（True或者False）来决定是否执行的代码块。</p>
<p>Golang程序语言指定任何非0和非空（null）值为true，0 或者 null为false。</p>
<p>Golang 编程中 if 语句用于控制程序的执行，基本形式为：</p>
<a id="more"></a>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i:= <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;<span class="number">3</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"i&gt;3"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"i&lt;=3"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i&lt;=3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">3</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="number">3</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"i &lt; 3"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"i == 3"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"i &gt; 3"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i == 3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>关于 if 条件语句的使用规则：</p>
    <ul>
        <li>
            <p>if 后面的条件表达式不需要使用 ()</p>
        </li>
        <li>
            <p>每个条件分支（if 或者 else）中的大括号是必需的，哪怕大括号里只有一行代码（</p>
        </li>
        <li>
            <p>if 紧跟的大括号 { 不能独占一行，else 前的大括号 } 也不能独占一行，否则会编译不通过。</p>
        </li>
        <li>
            <p>在 if……else 条件语句中还可以增加多个 else if，增加更多的条件分支</p>
        </li>
    </ul>
</blockquote>
<h3 id="switch-选择语句"><a href="#switch-选择语句" class="headerlink" title="switch 选择语句"></a>switch 选择语句</h3>
<p>if 条件语句比较适合分支较少的情况，如果有很多分支的话，选择 switch 会更方便，比如以上示例，使用 switch 改造后的代码如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> i:=<span class="number">7</span>;&#123;</span><br><span class="line">	<span class="keyword">case</span> i&gt;<span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"i&gt;10"</span>)</span><br><span class="line">	<span class="keyword">case</span> i&gt;<span class="number">5</span> &amp;&amp; i&lt;=<span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"5&lt;i&lt;=10"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"i&lt;=5"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5&lt;i&lt;=10</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>switch 语句同样也可以用一个简单的语句来做初始化，同样也是用分号 ; 分隔。每一个 case 就是一个分支，分支条件为 true 该分支才会执行，而且 case 分支后的条件表达式也不用小括号 () 包裹。</p>
    <p>在 Go 语言中，switch 的 case 从上到下逐一进行判断，一旦满足条件，立即执行对应的分支并返回，其余分支不再做判断。也就是说 Go 语言的 switch 在默认情况下，case 最后自带 break。这和其他编程语言不一样，比如 C 语言在 case 分支里必须要有明确的 break 才能退出一个 case。Go 语言的这种设计就是为了防止忘记写 break 时，下一个 case 被执行。</p>
</blockquote>
<p>那么如果你真的有需要，的确需要执行下一个紧跟的 case 怎么办呢？Go 语言也考虑到了，提供了 fallthrough 关键字。现在看个例子，如下面的代码所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> j := <span class="number">1</span>; j &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">fallthrough</span>	 <span class="comment">// 执行下一个case(即case2)</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"没有匹配"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">// 1</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h2>
<p>循环，顾名思义，就是遵循一定规则循环往复的执行，golang中语法循环如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">for</span> 初始值；运行范围；表达式 &#123;</span><br><span class="line">		执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// for循环示例1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i ++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"%d "</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 4 5 6 7 8 9</span></span><br><span class="line"> <span class="comment">// for循环示例2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> ;i &lt; <span class="number">10</span>; i ++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"%d "</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请思考两个示例有何不同？提示：作用域</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>下面是一个经典的 for 循环示例，从这个示例中，我们可以分析出 for 循环由三部分组成，其中，需要使用两个 ; 分隔，如下所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum:=<span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++ &#123;</span><br><span class="line">		sum+=i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"The sum is"</span>,sum)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// The sum is 5050</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="高级for循环"><a href="#高级for循环" class="headerlink" title="高级for循环"></a>高级for循环</h3>
<p>如果你以前学过其他编程语言，可能会见到 while 这样的循环语句，在 Go 语言中没有 while 循环，但是可以通过 for 达到 while 的效果，如以下代码所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">sum:=<span class="number">0</span></span><br><span class="line">i:=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i&lt;=<span class="number">100</span> &#123;</span><br><span class="line">    sum+=i</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"The sum is"</span>,sum)</span><br><span class="line"><span class="comment">// The sum is 5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> ;i &lt; <span class="number">10</span>; i ++ &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>在写循环时，一定需要先树立终止条件。避免写成死循环。他较于其他编程语言更能Kill掉你的电脑</p>
</blockquote>
<h2 id="continue-or-break"><a href="#continue-or-break" class="headerlink" title="continue or break"></a>continue or break</h2>
<blockquote>
    <p>break:用于终止</p>
    <p>continue:跳过</p>
    <p>二者仅且适用于if或者for</p>
    <p>场景一：打印1-9，当值为6点时打印并退出(这个可能会有点牵强，主要用于理解break)</p>
    <p>场景2: 打印1-9，其中不输出7</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 场景一：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i ++ &#123;</span><br><span class="line">      <span class="keyword">if</span> i == <span class="number">6</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Println(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 场景二：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i ++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">7</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="swith"><a href="#swith" class="headerlink" title="swith"></a>swith</h2>
<p>if 条件语句比较适合分支较少的情况，如果有很多分支的话，选择 switch 会更方便，比如以上示例，使用 switch 改造后的代码如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> i := <span class="number">20</span>; &#123;</span><br><span class="line">	<span class="keyword">case</span> i &gt; <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"i&gt;10"</span>)</span><br><span class="line">	<span class="keyword">case</span> i &gt; <span class="number">5</span> &amp;&amp; i &lt;= <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"5&lt;i&lt;=10"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"i&lt;=5"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i&gt;10</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>switch 语句同样也可以用一个简单的语句来做初始化，同样也用分号 ; 分隔。每一个 case 就是一个分支，分支条件为 true 该分支才会执行，而且 case 分支后的条件表达式也不用小括号 () 包裹。</p>
<p>在 Go 语言中，switch 的 case 从上到下逐一进行判断，一旦满足条件，立即执行对应的分支并返回，其余分支不再做判断。也就是说 Go 语言的 switch 在默认情况下，case 最后自带 break。这和其他编程语言不一样，比如 C 语言在 case 分支里必须要有明确的 break 才能退出一个 case。Go 语言的这种设计就是为了防止忘记写 break 时，下一个 case 被执行。那么如果你真的有需要，的确需要执行下一个紧跟的 case 怎么办呢？Go 语言也考虑到了，提供了 fallthrough 关键字。如下所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> i:=<span class="number">1</span>;i &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"没有匹配"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>以上示例运行会输出 1，如果省略 case 1: 后面的 fallthrough，则不会有任何输出。</p>
<p>不知道你是否可以发现，和上一个例子对比，这个例子的 switch 后面是有表达式的，也就是输入了 ;j，而上一个例子的 switch 后只有一个用于初始化的简单语句。</p>
<p>当 switch 之后有表达式时，case 后的值就要和这个表达式的结果类型相同，比如这里的 j 是 int 类型，那么 case 后就只能使用 int 类型，如示例中的 case 1、case 2。如果是其他类型，比如使用 case “a” ，会提示类型不匹配，无法编译通过。</p>
<p>而对于 switch 后省略表达式的情况，整个 switch 结构就和 if……else 条件语句等同了。</p>
<p>switch 后的表达式也没有太多限制，是一个合法的表达式即可，也不用一定要求是常量或者整数。你甚至可以像如下代码一样，直接把比较表达式放在 switch 之后：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> <span class="number">2</span> &lt; <span class="number">1</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">		fmt.Println(<span class="string">"2&gt;1"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">		fmt.Println(<span class="string">"2&lt;=1"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2&lt;=1</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang常量-变量-匿名变量</title>
    <url>/29980.html</url>
    <content><![CDATA[<blockquote>
    <p>常量：一旦声明即不可被改变</p>
    <p>变量：声明后可以发生改变。若初始化后未赋值则为初始值</p>
    <p>例如：</p>
    <p>int -&gt; 0</p>
    <p>Bool -&gt; false</p>
    <p>String -&gt; 空</p>
</blockquote>
<h2 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h2>
<p>关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。</p>
<a id="more"></a>
<p>关键字</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">break</span>        <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>         <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line">   <span class="keyword">case</span>         <span class="keyword">defer</span>        <span class="keyword">go</span>           <span class="keyword">map</span>          <span class="keyword">struct</span></span><br><span class="line">   <span class="keyword">chan</span>         <span class="keyword">else</span>         <span class="keyword">goto</span>         <span class="keyword">package</span>      <span class="keyword">switch</span></span><br><span class="line">   <span class="keyword">const</span>        <span class="keyword">fallthrough</span>  <span class="keyword">if</span>           <span class="keyword">range</span>        <span class="keyword">type</span></span><br><span class="line">   <span class="keyword">continue</span>     <span class="keyword">for</span>          <span class="keyword">import</span>       <span class="keyword">return</span>       <span class="keyword">var</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>保留字</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Constants:    <span class="literal">true</span>  <span class="literal">false</span>  <span class="literal">iota</span>  <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    Types:    <span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span>  </span><br><span class="line">              <span class="keyword">uint</span>  <span class="keyword">uint8</span>  <span class="keyword">uint16</span>  <span class="keyword">uint32</span>  <span class="keyword">uint64</span>  <span class="keyword">uintptr</span></span><br><span class="line">              <span class="keyword">float32</span>  <span class="keyword">float64</span>  <span class="keyword">complex128</span>  <span class="keyword">complex64</span></span><br><span class="line">              <span class="keyword">bool</span>  <span class="keyword">byte</span>  <span class="keyword">rune</span>  <span class="keyword">string</span>  error</span><br><span class="line"></span><br><span class="line">Functions:   <span class="built_in">make</span>  <span class="built_in">len</span>  <span class="built_in">cap</span>  <span class="built_in">new</span>  <span class="built_in">append</span>  <span class="built_in">copy</span>  <span class="built_in">close</span>  <span class="built_in">delete</span></span><br><span class="line">             <span class="built_in">complex</span>  <span class="built_in">real</span>  <span class="built_in">imag</span></span><br><span class="line">             <span class="built_in">panic</span>  <span class="built_in">recover</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2>
<h3 id="变量的来历"><a href="#变量的来历" class="headerlink" title="变量的来历"></a>变量的来历</h3>
<p>程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p>
<blockquote>
    <p>相当于开辟相对应的内存，并对此内存取了个别名。</p>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line"><span class="comment">// 申请一块内存，把字符串hello放进去</span></span><br><span class="line">并它的地址为指向变量名 a</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3>
<p>变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p>
<p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3>
<p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 标准声明</span></span><br><span class="line"><span class="keyword">var</span> 变量名 类型</span><br><span class="line"><span class="comment">// 类型推到声明，必须有初始值， 否则声明失败</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = 值</span><br><span class="line"><span class="comment">// 简短声明（必须在函数中）</span></span><br><span class="line">变量名 := 值</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量声明(多用于全局变量声明)，类型为必须</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"> 	变量名 类型</span><br><span class="line">  	变量名 类型</span><br><span class="line">  	变量名 类型</span><br><span class="line">  。。。</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 同类型批量声明</span></span><br><span class="line"><span class="keyword">var</span> 变量名<span class="number">1</span>，变量名<span class="number">2</span>，变量名<span class="number">3</span> 类型</span><br><span class="line">或</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	变量名<span class="number">1</span>,</span><br><span class="line">	变量名<span class="number">2</span>, </span><br><span class="line">	变量名<span class="number">3</span> <span class="keyword">string</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简短批量声明 注意必须在函数中</span></span><br><span class="line">变量名<span class="number">1</span>,变量名<span class="number">2</span>, 变量名<span class="number">3</span> := 值<span class="number">1</span>，值<span class="number">2</span>， 值<span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准声明</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">"Payne"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推到声明</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//批量声明</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x <span class="keyword">string</span></span><br><span class="line">	y <span class="keyword">string</span></span><br><span class="line">	j <span class="keyword">bool</span></span><br><span class="line">	k <span class="keyword">byte</span></span><br><span class="line">	z <span class="keyword">int</span></span><br><span class="line">	</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 同类型批量声明</span></span><br><span class="line"><span class="keyword">var</span> a, b, c, d <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 简短声明</span></span><br><span class="line">	hobby := <span class="string">"programming"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//测试输入</span></span><br><span class="line">	fmt.Println(<span class="string">"Name is :"</span>, name) <span class="comment">// Name is : Payne</span></span><br><span class="line">	fmt.Println(<span class="string">"Age is :"</span>, age)	<span class="comment">// Age is : 20</span></span><br><span class="line">	fmt.Println(<span class="string">"hobby "</span>, hobby)	<span class="comment">// hobby  programming</span></span><br><span class="line">	fmt.Print(a)	<span class="comment">// 0 声明未赋值采用初始值。int 类型初始值为0</span></span><br><span class="line">	<span class="comment">// 批量简短声明</span></span><br><span class="line">	a, b := <span class="number">1</span>, <span class="string">"string"</span></span><br><span class="line">	fmt.Print(a, b)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3>
<blockquote>
    <p>匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在<code>Lua</code>等编程语言里，匿名变量也被叫做哑元变量。)</p>
</blockquote>
<p>在使用多重赋值时，如果想要忽略某个值，可以使用<code>匿名变量（anonymous variable）</code>。 匿名变量用一个下划线<code>_</code>表示，例如：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 这里可能会有点绕，仅仅是为了使用“_”，而使用_</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span>  <span class="string">"payne"</span>, <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	name, _ := foo()</span><br><span class="line">	_, age := foo()</span><br><span class="line">	fmt.Println(<span class="string">"name="</span>, name) <span class="comment">//name= payne</span></span><br><span class="line">	fmt.Println(<span class="string">"age="</span>, age)	<span class="comment">//age= 20</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意事项：</p>
    <ol>
        <li>函数外的每个语句都必须以关键字开始（var、const、func等）</li>
        <li><code>_</code>多用于占位，表示忽略值。</li>
    </ol>
</blockquote>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2>
<p>常量与变量的声明基本一致，类型一致。若有声明变化的话那就是将关键字<code>var</code>， 替换成了<code>const</code>.增加了<code>iota</code>，减少了简短声明</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 常量声明声明时必须给值，否则则定义失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准声明</span></span><br><span class="line"><span class="keyword">const</span> 变量名 类型 = 值</span><br><span class="line"><span class="comment">// 类型推导</span></span><br><span class="line"><span class="keyword">const</span> 变量名  = 值</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(a) <span class="comment">// 1</span></span><br><span class="line">	fmt.Println(b) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Iota"><a href="#Iota" class="headerlink" title="Iota"></a>Iota</h3>
<p><code>iota</code>是go语言的常量计数器，只能在常量的表达式中使用。</p>
<p><code>iota</code>在const关键字出现时将被重置为0。const中每新增一行常量声明将使<code>iota</code>计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// `iota`在const关键字出现时将被重置为0,请牢记！！</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">		n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">		n2        <span class="comment">//1</span></span><br><span class="line">		n3        <span class="comment">//2</span></span><br><span class="line">		n4        <span class="comment">//3</span></span><br><span class="line">	)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 使用_跳过某些值</span></span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">		n2        <span class="comment">//1</span></span><br><span class="line">		_</span><br><span class="line">		n4        <span class="comment">//3</span></span><br><span class="line">	)</span><br><span class="line"><span class="comment">// iota声明中间插队</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">		n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">		n2 = <span class="number">100</span>  <span class="comment">//100</span></span><br><span class="line">		n3 = <span class="literal">iota</span> <span class="comment">//2</span></span><br><span class="line">		n4        <span class="comment">//3</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">const</span> n5 = <span class="literal">iota</span> <span class="comment">// 0</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2>
<h3 id="常量与变量的对比示例"><a href="#常量与变量的对比示例" class="headerlink" title="常量与变量的对比示例"></a>常量与变量的对比示例</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 主要体现为 变量可以被修改</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">	fmt.Println(a)	<span class="comment">// 1</span></span><br><span class="line">	a = <span class="number">2</span></span><br><span class="line">	fmt.Println(a)	<span class="comment">// 2</span></span><br><span class="line">	<span class="keyword">const</span> b = <span class="number">3</span></span><br><span class="line">	fmt.Println(b) <span class="comment">// 3</span></span><br><span class="line">	b = <span class="number">4</span></span><br><span class="line">	fmt.Print(b)	<span class="comment">// Error: cannot assign to b</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="函数的初探"><a href="#函数的初探" class="headerlink" title="函数的初探"></a>函数的初探</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">//  函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(形参)</span> <span class="params">(返回值类型)</span></span> &#123;</span><br><span class="line">	表达式</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(实参)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方式（匿名函数）</span></span><br><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">	表达式</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(实参)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名立即执行函数</span></span><br><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">	表达式</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 此时的函数为结果的值</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="函数的调用的顺序"><a href="#函数的调用的顺序" class="headerlink" title="函数的调用的顺序"></a>函数的调用的顺序</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="number">2</span></span><br><span class="line">	fmt.Print(a) <span class="comment">//  2</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>思考：</p>
    <p>为什么打印的是2？</p>
    <p>原因为<code>函数</code>参数的调用采用<code>就近的原则</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang基础数据类型</title>
    <url>/11541.html</url>
    <content><![CDATA[<p>Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。</p>
<a id="more"></a>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2>
<h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3>
<p>整型分为以下两个大类：</p>
<blockquote>
    <p>按长度分为：int8、int16、int32、int64<br>无符号整型：uint8、uint16、uint32、uint64</p>
    <ul>
        <li><code>uint8</code>就是我们熟知的<code>byte</code>型</li>
        <li><code>int16</code>对应C语言中的<code>short</code>型，</li>
        <li><code>int64</code>对应C语言中的<code>long</code>型。</li>
    </ul>
</blockquote>
<p>取值范围如下所示：</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">类型</th>
                <th style="text-align:center">取值范围</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">int</td>
                <td style="text-align:center">取值范围为您操作系统的位数字，如果是64位操作系统。为int64</td>
            </tr>
            <tr>
                <td style="text-align:center">int8</td>
                <td style="text-align:center">有符号 8位整型 ( 2^8 + 1 到 2^8 -1)[-255, 255]</td>
            </tr>
            <tr>
                <td style="text-align:center">int16</td>
                <td style="text-align:center">有符号 16位整型 ( 2^16 + 1 到 2^16 -1)[-65535, 6535]</td>
            </tr>
            <tr>
                <td style="text-align:center">int32</td>
                <td style="text-align:center">有符号 16位整型 ( 2^32 + 1 到 2^32 -1)[-4294967295, 4294967295]</td>
            </tr>
            <tr>
                <td style="text-align:center">int64</td>
                <td style="text-align:center">有符号 16位整型 ( 2^64 + 1 到 2^64 -1)[-18446744073709551615, 18446744073709551615]</td>
            </tr>
            <tr>
                <td style="text-align:center">uint</td>
                <td style="text-align:center">取值范围为您操作系统的位数字，如果是64位操作系统。为int64</td>
            </tr>
            <tr>
                <td style="text-align:center">uint8</td>
                <td style="text-align:center">无符号 8位整型 (0 到 255)</td>
            </tr>
            <tr>
                <td style="text-align:center">uint16</td>
                <td style="text-align:center">无符号 16位整型 (0 到 65535)</td>
            </tr>
            <tr>
                <td style="text-align:center">uint32</td>
                <td style="text-align:center">无符号 32位整型 (0 到 4294967295)</td>
            </tr>
            <tr>
                <td style="text-align:center">uint64</td>
                <td style="text-align:center">无符号 64位整型 (0 到 18446744073709551615)</td>
            </tr>
        </tbody>
    </table>
</div>
<p>特殊整形</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">uintptr	<span class="comment"># 无符号整型，用于存放一个指针</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><strong>注意：</strong> 在使用<code>int</code>和 <code>uint</code>类型时，不能假定它是32位或64位的整型，而是考虑<code>int</code>和<code>uint</code>可能在不同平台上的差异。</p>
    <p><strong>注意事项</strong> 获取对象的长度的内建<code>len()</code>函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用<code>int</code>来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用<code>int</code>和 <code>uint</code>。</p>
</blockquote>
<p>数字字面量语法（Number literals syntax</p>
<blockquote>
    <p>Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：</p>
    <ul>
        <li>
            <p><code>v := 0b00101101</code>， 代表二进制的 101101，相当于十进制的 45。 </p>
        </li>
        <li>
            <p><code>v := 0o377</code>，代表八进制的 377，相当于十进制的 255。 </p>
        </li>
        <li>
            <p><code>v := 0x1p-2</code>，代表十六进制的 1 除以 2²，也就是 0.25。</p>
        </li>
    </ul>
    <p>我们可以用 <code>_</code> 来分隔数字，比如说： <code>v := 123_456</code> 表示 v 的值等于 123456。</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 十进制</span></span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d \n"</span>, a)  <span class="comment">// 10</span></span><br><span class="line">	fmt.Printf(<span class="string">"%b \n"</span>, a)  <span class="comment">// 1010  占位符%b表示二进制</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 八进制  以0开头</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">077</span></span><br><span class="line">	fmt.Printf(<span class="string">"%o \n"</span>, b)  <span class="comment">// 77</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 十六进制  以0x开头</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">int</span> = <span class="number">0xff</span></span><br><span class="line">	fmt.Printf(<span class="string">"%x \n"</span>, c)  <span class="comment">// ff</span></span><br><span class="line">	fmt.Printf(<span class="string">"%X \n"</span>, c)  <span class="comment">// FF</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3>
<p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。</p>
<p>这两种浮点型数据格式遵循<code>IEEE 754</code>标准： </p>
<p><code>float32</code> 的浮点数的最大范围约为 <code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。</p>
<p> <code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"fmt"</span></span><br><span class="line">        <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"%f\n"</span>, math.Pi)	<span class="comment">// 3.141593</span></span><br><span class="line">	fmt.Printf(<span class="string">"%.2f\n"</span>, math.Pi)	<span class="comment">// 3.14</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3>
<p>complex64和complex128</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> c1 <span class="keyword">complex64</span></span><br><span class="line">	c1 = <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">	<span class="keyword">var</span> c2 <span class="keyword">complex128</span></span><br><span class="line">	c2 = <span class="number">2</span> + <span class="number">3i</span></span><br><span class="line">	fmt.Println(c1)</span><br><span class="line">	fmt.Println(c2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3>
<p>Go语言中以<code>bool</code>类型进行声明布尔型数据</p>
<p>布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>
<p><strong>注意：</strong></p>
<ul>
    <li>
        <p>布尔类型变量的默认值为<code>false</code>。</p>
    </li>
    <li>
        <p>Go 语言中不允许将整型强制转换为布尔型.</p>
    </li>
    <li>
        <p>布尔型无法参与数值运算，也无法与其他类型进行转换。</p>
    </li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3>
<blockquote>
    <p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。</p>
    <p> Go 语言里的字符串的内部实现使用<code>UTF-8</code>编码。 </p>
</blockquote>
<p>字符串的值为<code>双引号(&quot;&quot;)</code>中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"你好,nihao"</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">string</span> = <span class="string">"Hello，你好"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="byte和rune类型"><a href="#byte和rune类型" class="headerlink" title="byte和rune类型"></a>byte和rune类型</h3>
<p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’ ‘）包裹起来，如：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> a := <span class="string">'一'</span></span><br><span class="line"><span class="keyword">var</span> b := <span class="string">'x'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Go 语言的字符有以下两种：</p>
<ol>
    <li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符。</li>
    <li><code>rune</code>类型，代表一个 <code>UTF-8字符</code>。</li>
</ol>
<p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p>
<p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"hello,世界"</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123; <span class="comment">//byte</span></span><br><span class="line">		fmt.Printf(<span class="string">"%v(%c) "</span>, s[i], s[i])</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">	<span class="keyword">for</span> _, r := <span class="keyword">range</span> s &#123; <span class="comment">//rune</span></span><br><span class="line">		fmt.Printf(<span class="string">"%v(%c) "</span>, r, r)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//104(h) 101(e) 108(l) 108(l) 111(o) 44(,) 228(ä) 184(¸) 150() 231(ç) 149() 140() </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//104(h) 101(e) 108(l) 108(l) 111(o) 44(,) 19990(世) 30028(界)</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>
    <p>字符串底层是一个byte数组，所以可以和<code>[]byte</code>类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p>
</blockquote>
<h3 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h3>
<p>要修改字符串，需要先将其转换成<code>[]rune</code>或<code>[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeString</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := <span class="string">"big"</span></span><br><span class="line">	<span class="comment">// 强制类型转换</span></span><br><span class="line">	byteS1 := []<span class="keyword">byte</span>(s1)</span><br><span class="line">	byteS1[<span class="number">0</span>] = <span class="string">'p'</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(byteS1))</span><br><span class="line"></span><br><span class="line">	s2 := <span class="string">"白萝卜"</span></span><br><span class="line">	runeS2 := []<span class="keyword">rune</span>(s2)</span><br><span class="line">	runeS2[<span class="number">0</span>] = <span class="string">'红'</span></span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(runeS2))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="comment">// "math"</span></span><br><span class="line">	<span class="string">"reflect"</span>		<span class="comment">// 内建包，提供类型检查函数</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int64</span> = <span class="number">1</span></span><br><span class="line">	fmt.Println(reflect.TypeOf(a))	<span class="comment">// int64</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, a) <span class="comment">// int64</span></span><br><span class="line">	<span class="keyword">var</span> b = <span class="string">"a"</span></span><br><span class="line">	fmt.Println(reflect.TypeOf(b)) <span class="comment">// string</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, b)            <span class="comment">// string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reflect.TypeOf()	源码示例</span></span><br><span class="line"><span class="comment">// TypeOf returns the reflection Type that represents the dynamic type of i.</span></span><br><span class="line"><span class="comment">// If i is a nil interface value, TypeOf returns nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Type</span></span> &#123;</span><br><span class="line">	eface := *(*emptyInterface)(unsafe.Pointer(&amp;i))</span><br><span class="line">	<span class="keyword">return</span> toType(eface.typ)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2>
<p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p>
<p>强制类型转换的基本语法如下：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Type(表达式)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Type表示目标转换类型。表达式包括变量、复杂算子和函数返回值等.</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrtDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">int</span></span><br><span class="line">	<span class="comment">// math.Sqrt()接收的参数是float64类型，需要强制转换</span></span><br><span class="line">	c = <span class="keyword">int</span>(math.Sqrt(<span class="keyword">float64</span>(a*a + b*b)))</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>对于数字类型之间，可以通过强制转换的方式，如以下代码所示：</p>
<figure class="highlight css">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">main</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> "<span class="selector-tag">fmt</span>"</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">i </span>:= <span class="number">10</span></span><br><span class="line">	f64 := <span class="number">10.102</span></span><br><span class="line">	i2f:=<span class="built_in">float64</span>(i)</span><br><span class="line">	f2i:=<span class="built_in">int</span>(f64)</span><br><span class="line">	f3 := <span class="built_in">float64</span>(f2i)</span><br><span class="line">	fmt.<span class="built_in">Println</span>(i2f,f2i, f3) // <span class="number">10</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这种使用方式比简单，采用“类型（要转换的变量）”格式即可。采用强制转换的方式转换数字类型，可能会丢失一些精度，比如浮点型转为整型时，小数点部分会全部丢失.</p>
<p>把变量转换为相应的类型后，就可以对相同类型的变量进行各种表达式运算和赋值了。</p>
<h4 id="字符串和数字互转"><a href="#字符串和数字互转" class="headerlink" title="字符串和数字互转"></a>字符串和数字互转</h4>
<p>Go 语言是强类型的语言，也就是说不同类型的变量是无法相互使用和计算的，这也是为了保证Go 程序的健壮性，所以不同类型的变量在进行赋值或者计算前，需要先进行类型转换。涉及类型转换的知识点非常多，这里我先介绍这些基础类型之间的转换</p>
<p>以字符串和数字互转这种最常见的情况为例，如下面的代码所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	Age       <span class="keyword">int</span></span><br><span class="line">	Name, sex <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">10</span></span><br><span class="line">	<span class="comment">// 通过包 strconv 的 Itoa 函数可以把一个 int 类型转为 string，Atoi 函数则用来把 string 转为 int。</span></span><br><span class="line">	i2s:=strconv.Itoa(i)</span><br><span class="line"></span><br><span class="line">	s2i,err:=strconv.Atoi(i2s)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//fmt.Println(i2s,s2i,err)</span></span><br><span class="line">	fmt.Printf(<span class="string">"i2s: type:%T, value:%v\n"</span>, i2s, i2s)  <span class="comment">// i2s: type:string, value:10</span></span><br><span class="line">	fmt.Printf(<span class="string">"s2i: type:%T, value:%v, err:%v"</span>, s2i, s2i, err)  <span class="comment">// s2i: type:int, value:10, &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2>
<h3 id="占位的相关用法"><a href="#占位的相关用法" class="headerlink" title="占位的相关用法"></a>占位的相关用法</h3>
<p>golang 的fmt 包实现了格式化I/O函数，类似于C的 printf 和 scanf。Python中的print等</p>
<h4 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left">占位符</th>
                <th style="text-align:center">说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left">%v</td>
                <td style="text-align:center">相应值的默认格式。</td>
            </tr>
            <tr>
                <td style="text-align:left">%+v</td>
                <td style="text-align:center">打印结构体时，会添加字段名</td>
            </tr>
            <tr>
                <td style="text-align:left">%#v</td>
                <td style="text-align:center">相应值的Go语法表示</td>
            </tr>
            <tr>
                <td style="text-align:left">%T</td>
                <td style="text-align:center">相应值的类型的Go语法表示</td>
            </tr>
            <tr>
                <td style="text-align:left">%%</td>
                <td style="text-align:center">字面上的百分号，并非值的占位符</td>
            </tr>
            <tr>
                <td style="text-align:left">布尔占位符 (%t)</td>
                <td style="text-align:center">true 或 false</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	Age       <span class="keyword">int</span></span><br><span class="line">	Name, sex <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	people := Human&#123;Name: <span class="string">"Payne"</span>, Age: <span class="number">20</span>, sex: <span class="string">"male"</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"%v"</span>, people)  <span class="comment">// &#123;20 Payne male&#125;</span></span><br><span class="line">	fmt.Printf(<span class="string">"%+v"</span>, people) <span class="comment">// &#123;20 Payne male&#125;&#123;Age:20 Name:Payne sex:male&#125;</span></span><br><span class="line">	fmt.Printf(<span class="string">"%#v"</span>, people) <span class="comment">// &#123;20 Payne male&#125;&#123;Age:20 Name:Payne sex:male&#125;main.Human&#123;Age:20, Name:"Payne", sex:"male"&#125;</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, people)  <span class="comment">// main.Human</span></span><br><span class="line">	<span class="comment">//fmt.Printf("%%")  // main.Humanß</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">占位符</th>
                <th style="text-align:center">说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">%b</td>
                <td style="text-align:center">二进制表示</td>
            </tr>
            <tr>
                <td style="text-align:center">%o</td>
                <td style="text-align:center">八进制表示</td>
            </tr>
            <tr>
                <td style="text-align:center">%d</td>
                <td style="text-align:center">十进制表示</td>
            </tr>
            <tr>
                <td style="text-align:center">%x</td>
                <td style="text-align:center">十六进制表示(小写)</td>
            </tr>
            <tr>
                <td style="text-align:center">%X</td>
                <td style="text-align:center">十六进制表示(大写)</td>
            </tr>
            <tr>
                <td style="text-align:center">%f</td>
                <td style="text-align:center">有小数点而无指数，例如 123.456浮点数</td>
            </tr>
            <tr>
                <td style="text-align:center">%c</td>
                <td style="text-align:center">相应Unicode码点所表示的字符</td>
            </tr>
            <tr>
                <td style="text-align:center">%q</td>
                <td style="text-align:center">单引号围绕的字符字面值，由Go语法安全地转义</td>
            </tr>
            <tr>
                <td style="text-align:center">%U</td>
                <td style="text-align:center">Unicode格式：U+1234，等同于 “U+%04X”</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 定义十进制变量a</span></span><br><span class="line">	<span class="comment">//a := 542</span></span><br><span class="line">	<span class="comment">// 数字</span></span><br><span class="line">	<span class="comment">//fmt.Printf(" Binary: %d,\n Octal: %o,\n Decimal:%d,\n Hex: %x,\n Uppercase_hexadecimal:%X", a, a, a, a, a)</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 Binary: 542,</span></span><br><span class="line"><span class="comment">	 Octal: 1036,</span></span><br><span class="line"><span class="comment">	 Decimal:542,</span></span><br><span class="line"><span class="comment">	 Hex: 21e,</span></span><br><span class="line"><span class="comment">	 Uppercase_hexadecimal:21E</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	fmt.Printf(<span class="string">"%c"</span>, <span class="number">0x3E2E</span>) <span class="comment">// 㸮</span></span><br><span class="line">	fmt.Printf(<span class="string">"%q"</span>, <span class="number">0x3E2E</span>) <span class="comment">// '㸮'</span></span><br><span class="line">  fmt.Printf(<span class="string">"%f\n"</span>, <span class="number">100.1000201</span>)     <span class="comment">// 100.100020</span></span><br><span class="line">	fmt.Printf(<span class="string">"%.1f\n"</span>, <span class="number">100.1000201</span>)   <span class="comment">// 100.1</span></span><br><span class="line">	fmt.Printf(<span class="string">"%.2f\n"</span>, <span class="number">100.1000201</span>)   <span class="comment">// 100.10</span></span><br><span class="line">	fmt.Printf(<span class="string">"%.3f\n"</span>, <span class="number">100.1000201</span>)   <span class="comment">// 100.100</span></span><br><span class="line">	fmt.Printf(<span class="string">"%.4f\n"</span>, <span class="number">100.1000201</span>)   <span class="comment">// 100.1000</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="浮点数和复数的组成部分（实部和虚部）"><a href="#浮点数和复数的组成部分（实部和虚部）" class="headerlink" title="浮点数和复数的组成部分（实部和虚部）"></a>浮点数和复数的组成部分（实部和虚部）</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">占位符</th>
                <th style="text-align:center">说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">%e</td>
                <td style="text-align:center">科学计数法，例如 -1234.456e+78</td>
            </tr>
            <tr>
                <td style="text-align:center">%E</td>
                <td style="text-align:center">科学计数法，例如 -1234.456E+78</td>
            </tr>
            <tr>
                <td style="text-align:center">%g</td>
                <td style="text-align:center">根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td>
            </tr>
            <tr>
                <td style="text-align:center">%G</td>
                <td style="text-align:center">根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := math.Pow(<span class="number">20</span>, <span class="number">3</span>) <span class="comment">// 8000</span></span><br><span class="line">	fmt.Printf(<span class="string">"%e\n"</span>, a) <span class="comment">// 8.000000e+03</span></span><br><span class="line">	fmt.Printf(<span class="string">"%E\n"</span>, a) <span class="comment">// 8.000000E+03</span></span><br><span class="line">	fmt.Printf(<span class="string">"%g\n"</span>, <span class="number">10.20</span>)    <span class="comment">// 10.2</span></span><br><span class="line">	fmt.Printf(<span class="string">"%G\n"</span>, <span class="number">10.20</span>+<span class="number">2i</span>) <span class="comment">// (10.2+2i)</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="字符串与字节切片"><a href="#字符串与字节切片" class="headerlink" title="字符串与字节切片"></a>字符串与字节切片</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left">占位符</th>
                <th style="text-align:center">说明</th>
                <th style="text-align:center">举例</th>
                <th style="text-align:center">输出</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left">%s</td>
                <td style="text-align:center">输出字符串表示（string类型或[]byte)</td>
                <td style="text-align:center">Printf(“%s”, []byte(“Go语言”))</td>
                <td style="text-align:center">Go语言</td>
            </tr>
            <tr>
                <td style="text-align:left">%q</td>
                <td style="text-align:center">双引号围绕的字符串，由Go语法安全地转义</td>
                <td style="text-align:center">Printf(“%q”, “Go语言”)</td>
                <td style="text-align:center">“Go语言”</td>
            </tr>
            <tr>
                <td style="text-align:left">%x</td>
                <td style="text-align:center">十六进制，小写字母，每字节两个字符</td>
                <td style="text-align:center">Printf(“%x”, “golang”)</td>
                <td style="text-align:center">676f6c616e67</td>
            </tr>
            <tr>
                <td style="text-align:left">%X</td>
                <td style="text-align:center">十六进制，大写字母，每字节两个字符</td>
                <td style="text-align:center">Printf(“%X”, “golang”)</td>
                <td style="text-align:center">676F6C616E67</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight reasonml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">func main<span class="literal">()</span> &#123;</span><br><span class="line">	<span class="comment">//a := "golang编程语言"</span></span><br><span class="line">	fmt.<span class="constructor">Printf(<span class="string">"%s\n"</span>, []<span class="params">byte</span>(<span class="params">a</span>)</span>)     <span class="comment">// golang编程语言</span></span><br><span class="line">	fmt.<span class="constructor">Printf(<span class="string">"%q\n"</span>, []<span class="params">byte</span>(<span class="params">a</span>)</span>)     <span class="comment">// golang编程语言</span></span><br><span class="line">	fmt.<span class="constructor">Printf(<span class="string">"%x\n"</span>, []<span class="params">byte</span>(<span class="params">a</span>)</span>)     <span class="comment">// 676f6c616e67e7bc96e7a88be8afade8a880</span></span><br><span class="line">	fmt.<span class="constructor">Printf(<span class="string">"%X\n"</span>, []<span class="params">byte</span>(<span class="params">a</span>)</span>)     <span class="comment">// 676F6C616E67E7BC96E7A88BE8AFADE8A880</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="6-指针"><a href="#6-指针" class="headerlink" title="6)指针"></a>6)指针</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left">占位符</th>
                <th style="text-align:center">说明</th>
                <th style="text-align:center">举例</th>
                <th style="text-align:center">输出</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left">%p</td>
                <td style="text-align:center">十六进制表示，前缀 0x</td>
                <td style="text-align:center">Printf(“%p”, &amp;people)</td>
                <td style="text-align:center">0x4f57f0</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 地址值</span></span><br><span class="line">	a := <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> b []<span class="keyword">int</span></span><br><span class="line">	fmt.Printf(<span class="string">"%p\n"</span>, &amp;a)    <span class="comment">// 0xc000014080</span></span><br><span class="line">	fmt.Printf(<span class="string">"%p\n"</span>, &amp;b)    <span class="comment">// 0xc0000a6020</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3>
<p>Strings 包<br>讲到基础类型，尤其是字符串，不得不提 Go SDK 为我们提供的一个标准包 strings。它是用于处理字符串的工具包，里面有很多常用的函数，帮助我们对字符串进行操作，比如查找字符串、去除字符串的空格、拆分字符串、判断字符串是否有某个前缀或者后缀等。掌握好它，有利于我们的高效编程。</p>
<p>以下代码是我写的关于 strings 包的一些例子，你自己可以根据<a href="https://golang.google.cn/pkg/strings/" target="_blank" rel="noopener">strings 文档</a>或者$GOPATH/src/stringls.go.以及自己写一些示例，多练习熟悉它们。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := <span class="string">"Hello World"</span></span><br><span class="line">	<span class="comment">//判断s1的前缀是否是H</span></span><br><span class="line">	fmt.Println(strings.HasPrefix(s1,<span class="string">"H"</span>)) <span class="comment">// true</span></span><br><span class="line">	<span class="comment">//在s1中查找字符串o</span></span><br><span class="line">	fmt.Println(strings.Index(s1,<span class="string">"o"</span>))     <span class="comment">// 4</span></span><br><span class="line">	<span class="comment">//把s1全部转为大写</span></span><br><span class="line">	fmt.Println(strings.ToUpper(s1))              <span class="comment">// HELLO WORLD</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// s1 中是否包含某一个或一段字符串</span></span><br><span class="line">	fmt.Println(strings.Contains(s1, <span class="string">"ee "</span>)) <span class="comment">// false</span></span><br><span class="line">	fmt.Println(strings.Contins(s1, <span class="string">"e"</span>))   <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang并发编程</title>
    <url>/52507.html</url>
    <content><![CDATA[<h2 id="单个goroutine"><a href="#单个goroutine" class="headerlink" title="单个goroutine"></a>单个goroutine</h2>
<p>Go语言中使用<code>goroutine</code>非常简单，只需要在调用函数的时候在前面加上<code>go</code>关键字，就可以为一个函数创建一个<code>goroutine</code>。</p>
<a id="more"></a>
<p>一个<code>goroutine</code>必定对应一个函数，可以创建多个<code>goroutine</code>去执行相同的函数。开启一个goroutine，示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">go</span> funciton()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>是不是很简单呢？那我们在实际中使用一下，示例如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">"我是 demo goroutine"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> demo1()</span><br><span class="line">	fmt.Println(<span class="string">"我是 main goroutine"</span>)</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我是 demo goroutine</span></span><br><span class="line"><span class="comment">// 我是 main goroutine</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>细心的伙伴坑定发现了<code>time.Sleep(time.Second)</code>，在这里并不仅仅是为睡一秒，还有进类似于等待执行的作用。如果没有 time.Sleep(time.Second)，你会发现 <strong>我是 demo goroutine</strong>，将不会被打印。</p>
    <p>首先为什么会先打印<code>我是 main goroutine</code>，这是因为我们在创建新的goroutine的时候需要花费一些时间，而此时main函数所在的<code>goroutine</code>是继续执行的。</p>
</blockquote>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3>
<p>多个goroutine的时候该怎么办呢？难道是这样？</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">"我是 demo goroutine"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> demo1()</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"我是 main goroutine"</span>)</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>没错，这样确实可行的，但之间的相互通信，以及 time.Sleep(time.Second)该怎么去掉，不可能为了这个所为的并发而强制去睡一秒吧，这也并不现实。其实我们可以使用channel（通道）来解决这个问题</p>
<h3 id="channel的定义"><a href="#channel的定义" class="headerlink" title="channel的定义"></a>channel的定义</h3>
<p>在 Go 语言中，声明一个 channel 非常简单，使用内置的 make 函数即可，如下所示：</p>
<blockquote>
    <p>无缓冲 channel,使用 make 创建的 chan 就是一个无缓冲 channel，它的容量是 0，不能存储任何数据。所以无缓冲 channel 只起到传输数据的作用，数据并不会在 channel 中做任何停留。这也意味着，无缓冲 channel 的发送和接收操作是同时进行的，它也可以称为同步 channel。</p>
</blockquote>
<p>其中 chan 是一个关键字，表示是 channel 类型。后面的 string 表示 channel 里的数据是 string 类型。通过 channel 的声明也可以看到，chan 是一个集合类型。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">type</span>)</span><br><span class="line"><span class="comment">// type 为传递的类型，由传递值的类型决定</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>定义好 chan 后就可以使用了，一个 chan 的操作只有两种：发送和接收。</p>
<p>接收：获取 chan 中的值，操作符为 &lt;- chan。</p>
<p>发送：向 chan 发送值，把值放在 chan 中，操作符为 chan &lt;-。</p>
<h4 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		ch &lt;- <span class="string">"goroutine 执行完成"</span></span><br><span class="line">	&#125;()</span><br><span class="line">	v := &lt;-ch</span><br><span class="line">	fmt.Printf(<span class="string">"管道ch接受到的值为%v, 类型为%T"</span>, v, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道ch接受到的值为goroutine 执行完成, 类型为string</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>这里注意发送和接收的操作符，都是 &lt;- ，只不过位置不同。接收的 &lt;- 操作符在 chan 的左侧，发送的 &lt;- 操作符在 chan 的右侧。</p>
</blockquote>
<p>这样我就实现了最基本的协程</p>
<h4 id="有缓冲-channel"><a href="#有缓冲-channel" class="headerlink" title="有缓冲 channel"></a>有缓冲 channel</h4>
<p>有缓冲 channel 类似一个可阻塞的队列，内部的元素先进先出。通过 make 函数的第二个参数可以指定 channel 容量的大小，进而创建一个有缓冲 channel，如下面的代码所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ChCache:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">10</span>)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在这里我们创建了一个容量为 10 的 channel，内部的元素类型是 int，也就是说这个 channel 内部最多可以存放 10个类型为 int 的元素</p>
<p>有缓冲 channel 具备以下特点：</p>
<ul>
    <li>
        <p>有缓冲 channel 的内部有一个缓冲队列；</p>
    </li>
    <li>
        <p>发送操作是向队列的尾部插入元素，如果队列已满，则阻塞等待，直到另一个 goroutine 执行，接收操作释放队列的空间；</p>
    </li>
    <li>
        <p>接收操作是从队列的头部获取元素并把它从队列中删除，如果队列为空，则阻塞等待，直到另一个 goroutine 执行，发送操作插入新的元素。</p>
    </li>
</ul>
<p>我创建了一个容量为 5 的 channel，内部的元素类型是 int，也就是说这个 channel 内部最多可以存放 5 个类型为 int 的元素</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">			ch &lt;- i</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		value := &lt;-ch</span><br><span class="line">		fmt.Printf(<span class="string">"这次接受ch的值为:%v, 第%d接收\n"</span>, value, i+<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这次接受ch的值为:0, 第1接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:1, 第2接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:2, 第3接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:3, 第4接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:4, 第5接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:5, 第6接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:6, 第7接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:7, 第8接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:8, 第9接收</span></span><br><span class="line"><span class="comment">// 这次接受ch的值为:9, 第10接收</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>通过内置函数 cap 可以获取 channel 的容量，也就是最大能存放多少个元素，通过内置函数 len 可以获取 channel 中元素的个数</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">fmt.Println(<span class="string">"ch的容量:"</span>, <span class="built_in">cap</span>(ch), <span class="string">"ch长度为:"</span>, <span class="built_in">len</span>(ch))</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>以上我们都是定义的双向chan，可以取也可以存。那让我们继续深入学习</p>
<h4 id="单向channel"><a href="#单向channel" class="headerlink" title="单向channel"></a>单向channel</h4>
<p>单向 channel 的声明也很简单，只需要在声明的时候带上 &lt;- 操作符即可，如下面的代码所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 单向channel(只存)</span></span><br><span class="line">onlySendChan := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span><br><span class="line"><span class="comment">// 单向channel(只取)</span></span><br><span class="line">onlyReceiveChan:=<span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="关闭channel"><a href="#关闭channel" class="headerlink" title="关闭channel"></a>关闭channel</h4>
<p>当我们需要关闭channel的时候，我们可以使用内置的Close函数即可关闭</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Close(channel)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果一个 channel 被关闭了，就不能向里面发送数据了，如果发送的话，会引起 painc 异常。但是还可以接收 channel 里的数据，如果 channel 里没有数据的话，接收的数据是元素类型的零值。</p>
<p>不难看出channel的坑比较多，一不小心就会写出一个bug。常见情况总结如下</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glaz73x65uj31bs0iiqfn.jpg" alt=""></p>
<h3 id="多协程-worker-pool（goroutine池）"><a href="#多协程-worker-pool（goroutine池）" class="headerlink" title="多协程-worker pool（goroutine池）"></a>多协程-worker pool（goroutine池）</h3>
<p>在工作中我们通常会使用可以指定启动的goroutine数量–worker pool模式，控制goroutine的数量，防止goroutine泄漏和暴涨。</p>
<p>一个简易的work pool示例代码如下：<br>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="keyword">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, results <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"worker:%d start job:%d\n"</span>, id, j)</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">		fmt.Printf(<span class="string">"worker:%d end job:%d\n"</span>, id, j)</span><br><span class="line">		results &lt;- j * <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">	results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="comment">// 开启3个goroutine</span></span><br><span class="line">	<span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++ &#123;</span><br><span class="line">		<span class="keyword">go</span> worker(w, jobs, results)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 5个任务</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++ &#123;</span><br><span class="line">		jobs &lt;- j</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(jobs)</span><br><span class="line">	<span class="comment">// 输出结果</span></span><br><span class="line">	<span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++ &#123;</span><br><span class="line">		&lt;-results</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
</p>
<h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3>
<p>假设要从网上下载一个文件，启动 3 个 goroutine 进行下载，并把结果发送到 3 个 channel 中。哪个先下载好，就会使用哪个 channel 的结果。</p>
<p>在这种情况下，如果我们尝试获取第一个 channel 的结果，程序就会被阻塞，无法获取剩下两个 channel 的结果，也无法判断哪个先下载好。这个时候就需要用到多路复用操作了，在 Go 语言中，通过 select 语句可以实现多路复用，其语句格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> i1 = &lt;-c1:</span><br><span class="line">				<span class="comment">//todo  1</span></span><br><span class="line"><span class="keyword">case</span> i2 &lt;- c2:</span><br><span class="line">				<span class="comment">//todo	2</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">				<span class="comment">// default todo</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>整体结构和 switch 非常像，都有 case 和 default，只不过 select 的 case 是一个个可以操作的 channel。</p>
<blockquote>
    <p>多路复用可以简单地理解为，N 个 channel 中，任意一个 channel 有数据产生，select 都可以监听到，然后执行相应的分支，接收数据并处理。</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadFile</span><span class="params">(chanName <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="comment">//随机time.Sleep,模拟下载文件</span></span><br><span class="line">	time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">return</span> chanName + <span class="string">":filePath"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//声明三个存放结果的channel</span></span><br><span class="line">	<span class="comment">//firstCh := make(chan string)</span></span><br><span class="line">	<span class="comment">//secondCh := make(chan string)</span></span><br><span class="line">	<span class="comment">//threeCh := make(chan string)</span></span><br><span class="line">	firstCh, secondCh, threeCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>), <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>), <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="comment">//同时开启3个goroutine下载</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		firstCh &lt;- downloadFile(<span class="string">"firstCh"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		secondCh &lt;- downloadFile(<span class="string">"secondCh"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		threeCh &lt;- downloadFile(<span class="string">"threeCh"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">//开始select多路复用，哪个channel能获取到值，</span></span><br><span class="line">	<span class="comment">//就说明哪个最先下载好，就用哪个。</span></span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> filePath := &lt;-firstCh:</span><br><span class="line">		fmt.Println(filePath)</span><br><span class="line">	<span class="keyword">case</span> filePath := &lt;-secondCh:</span><br><span class="line">		fmt.Println(filePath)</span><br><span class="line">	<span class="keyword">case</span> filePath := &lt;-threeCh:</span><br><span class="line">		fmt.Println(filePath)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang并发深入了解</title>
    <url>/34063.html</url>
    <content><![CDATA[<h2 id="协程控制需要"><a href="#协程控制需要" class="headerlink" title="协程控制需要"></a>协程控制需要</h2>
<p>重学编程之Golang的plan中的上一篇文章我向大家介绍了，<code>并发编程基础</code>，<code>goroutine的创建</code>，<code>channel</code>，正由于go语言的简洁性,我们可以简易快速的创建任意个协程。同时也留下了许多隐患，如果没有更加深入的学习，其实很难直接将其运用到实际项目中，实际生活中。为什么呢？并发的场景许许多多，但一味的只知道其创建，是很难有效的解决问题。例如以下场景-资源竞争</p>
<a id="more"></a>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 公共资源</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启1000个协程让sum+1</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//防止提前退出</span></span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">	fmt.Println(<span class="string">"和为:"</span>, sum)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>也许你的期望值是1000,可惜结果总会差强人意，造成其终究原因是资源竞争，也就是当<code>goroutine1</code>与<code>goroutineN</code>多次执行了同一步骤</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gldr8ifn5pj31aa0ti7al.jpg" style="zoom:25%;" /><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gldr9uujd0j31dn0u0n4z.jpg" style="zoom:25%;" /></p>
<h2 id="协程控制原理与实现"><a href="#协程控制原理与实现" class="headerlink" title="协程控制原理与实现"></a>协程控制原理与实现</h2>
<p>协程的控制原理基本是就是加各种锁，防止<code>意外</code>发送，牺牲无序的高速，带来相对有序正确执行。例如<code>互斥锁、读写锁、等等</code></p>
<h3 id="同任务唯一执行-互斥锁"><a href="#同任务唯一执行-互斥锁" class="headerlink" title="同任务唯一执行-互斥锁"></a>同任务唯一执行-互斥锁</h3>
<p><strong>互斥锁</strong>（英语：Mutual exclusion，缩写 Mutex）是一种用于<a href="https://bk.tw.lvfukeji.com/baike-多线程" target="_blank" rel="noopener">多线程</a><a href="https://bk.tw.lvfukeji.com/baike-编程" target="_blank" rel="noopener">编程</a>中，防止两条<a href="https://bk.tw.lvfukeji.com/baike-线程" target="_blank" rel="noopener">线程</a>同时对同一公共资源（比如<a href="https://bk.tw.lvfukeji.com/baike-全域變數" target="_blank" rel="noopener">全局变量</a>）进行读写的机制。该目的通过将代码切片成一个一个的<a href="https://bk.tw.lvfukeji.com/baike-临界区域" target="_blank" rel="noopener">临界区域</a>（critical section）达成。临界区域指的是一块对公共资源进行访问的代码，并非一种机制或是算法。一个程序、进程、线程可以拥有多个临界区域，但是并不一定会应用互斥锁。</p>
<p>例如：一段代码（甲）正在分步修改一块数据。这时，另一条线程（乙）由于一些原因被唤醒。如果乙此时去读取甲正在修改的数据，而甲碰巧还没有完成整个修改过程，这个时候这块数据的状态就处在极大的不确定状态中，读取到的数据当然也是有问题的。更严重的情况是乙也往这块地方写数据，这样的一来，后果将变得不可收拾。因此，多个线程间共享的数据必须被保护。达到这个目的的方法，就是确保同一时间只有一个临界区域处于运行状态，而其他的临界区域，无论是读是写，都必须被挂起并且不能获得运行机会。</p>
<p>在golang里面实现互斥锁也非常的粗暴，简单可分为三步，声明互斥锁，加锁、执行业务代码、释放锁、下一次执行步骤。更深入理解可参考<a href="https://bk.tw.lvfukeji.com/wiki/%E4%BA%92%E6%96%A5%E9%94%81" target="_blank" rel="noopener">wiki互斥锁</a>，示例如下</p>
<p>示例一：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	sum <span class="keyword">int</span>		<span class="comment">// 全局资源sum</span></span><br><span class="line">	mutex sync.Mutex		<span class="comment">// 互斥锁</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	mutex.Lock()		<span class="comment">// 加锁</span></span><br><span class="line">	sum += i				<span class="comment">// 执行业务代码</span></span><br><span class="line">	mutex.Unlock()	<span class="comment">// 释放锁，进行下一步骤</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启1000个协程让sum+1</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//防止提前退出</span></span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">	fmt.Println(<span class="string">"和为:"</span>, sum)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>示例二：当我们的业务代码不再是如此简单，可能会忘记释放互斥锁，而造成BUG，我们可以借助<code>defer</code>关键字，以免忘记</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	sum <span class="keyword">int</span>		<span class="comment">// 全局资源sum</span></span><br><span class="line">	mutex sync.Mutex		<span class="comment">// 互斥锁</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	mutex.Lock()</span><br><span class="line">	<span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启1000个协程让sum+1</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//防止提前退出</span></span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">	fmt.Println(<span class="string">"和为:"</span>, sum)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>使用互斥锁能够保证同一时间有且只有一个<code>goroutine</code>进入临界区，其他的<code>goroutine</code>则在等待锁；当互斥锁释放后，等待的<code>goroutine</code>才可以获取锁进入临界区，多个<code>goroutine</code>同时等待一个锁时，<strong>唤醒的策略是随机的</strong>。</p>
<h3 id="读多写少、读少写多-读写锁"><a href="#读多写少、读少写多-读写锁" class="headerlink" title="读多写少、读少写多-读写锁"></a>读多写少、读少写多-读写锁</h3>
<p>现在我们解决了多个 goroutine 同时读写的资源竞争问题，但是又遇到另外一个问题——性能。因为每次读写共享资源都要加锁，所以性能低下。</p>
<p>这个特殊场景的出现，有以下几种情况：</p>
<ol>
    <li>写的时候不能同时读，因为这个时候读取的话可能读到脏数据（不正确的数据）；</li>
    <li>读的时候不能同时写，因为也可能产生不可预料的结果；</li>
    <li>读的时候可以同时读，因为数据不会改变，所以不管多少个 goroutine 读都是并发安全的。</li>
</ol>
<p>所以就可以通过读写锁 sync.RWMutex 来优化这段代码，提升性能。现在我将以上示例改为读写锁，来实现我们想要的结果，如下所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	sum <span class="keyword">int</span> <span class="comment">// 全局资源sum</span></span><br><span class="line">	mutex sync.Mutex		<span class="comment">// 互斥锁</span></span><br><span class="line">	mutexRW sync.RWMutex <span class="comment">// 读写锁</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处为写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 互斥锁</span></span><br><span class="line">	mutex.Lock()</span><br><span class="line">	<span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加了一个读取的函数，便于演示并发读业务场景</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readSum</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">//只获取读锁</span></span><br><span class="line">	mutexRW.RLock()</span><br><span class="line">	<span class="keyword">defer</span> mutexRW.RUnlock()</span><br><span class="line">	b := sum</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 开启 1000个</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> fmt.Println(<span class="string">"和为:"</span>, readSum())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 防止提前退出</span></span><br><span class="line">	time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="高效率决策完成时间-WaitGroup"><a href="#高效率决策完成时间-WaitGroup" class="headerlink" title="高效率决策完成时间-WaitGroup"></a>高效率决策完成时间-WaitGroup</h3>
<p>相信你注意到了这段 time.Sleep(2 * time.Second) 代码，这是为了防止主函数 main 返回使用，一旦 main 函数返回了，程序也就退出了。因为我们不知道 10000 个执行 add 的协程和 10 个执行 readSum 的协程什么时候完全执行完毕，所以设置了一个比较长的等待时间。</p>
<p>但在实际的项目，如果运行一个较大的业务，需要运行的时间，我们无法预估，且并不合理。那我们该如何解决它？其实我们可以使用<code>WaitGroup</code>来进行阻塞主程序，防止退出。在这里相当实现了一个<code>生产者</code>与<code>消费者</code>模型</p>
<p>示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	sum     <span class="keyword">int</span>          <span class="comment">// 全局资源sum</span></span><br><span class="line">	mutex   sync.Mutex   <span class="comment">// 互斥锁</span></span><br><span class="line">	mutexRW sync.RWMutex <span class="comment">// 读写锁</span></span><br><span class="line">	round =  <span class="keyword">int</span>(math.Pow(<span class="number">100</span>, <span class="number">2</span>)) + <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 互斥锁</span></span><br><span class="line">	mutex.Lock()</span><br><span class="line">	<span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readSum</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">//只获取读锁</span></span><br><span class="line">	mutexRW.RLock()</span><br><span class="line">	<span class="keyword">defer</span> mutexRW.RUnlock()</span><br><span class="line">	b := sum</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="comment">//因为要监控110个协程，所以设置计数器为110</span></span><br><span class="line">	<span class="comment">//round =  int(math.Pow(100, 2)) + 100</span></span><br><span class="line">	wg.Add(round)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="comment">//计数器值减1</span></span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			add(<span class="number">10</span>)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(math.Pow(<span class="number">100</span>, <span class="number">2</span>)); i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="comment">//计数器值减1</span></span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			fmt.Println(<span class="string">"和为:"</span>, readSum())</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//一直等待，直到计数器值为0</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	run()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意</p>
    <ul>
        <li>
            <p>在这里的生产者<code>round</code>与总消费者的和必须相等。</p>
        </li>
        <li>
            <p><code>sync.WaitGroup</code>是一个结构体，传递的时候要传递指针。</p>
        </li>
    </ul>
</blockquote>
<h3 id="执行且只执行一次协程单例-sync-Once"><a href="#执行且只执行一次协程单例-sync-Once" class="headerlink" title="执行且只执行一次协程单例-sync.Once"></a>执行且只执行一次协程单例-sync.Once</h3>
<p>在编程的很多场景下我们需要确保某些操作在高并发的场景下只执行一次，例如只加载一次配置文件、只关闭一次通道等。</p>
<p>Go语言中的<code>sync</code>包中提供了一个针对只执行一次场景的解决方案–<code>sync.Once</code>。</p>
<p><code>sync.Once</code>只有一个<code>Do</code>方法，其签名如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;&#125;</span><br><span class="line"><span class="comment">// *备注：如果要执行的函数`f`需要传递参数就需要搭配闭包来使用。*</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="加载配置文件示例"><a href="#加载配置文件示例" class="headerlink" title="加载配置文件示例"></a>加载配置文件示例</h4>
<p>延迟一个开销很大的初始化操作到真正用到它的时候再执行是一个很好的实践。因为预先初始化一个变量（比如在init函数中完成初始化）会增加程序的启动耗时，而且有可能实际执行过程中这个变量没有用上，那么这个初始化操作就不是必须要做的。我们来看一个例子：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> icons <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadIcons</span><span class="params">()</span></span> &#123;</span><br><span class="line">	icons = <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image&#123;</span><br><span class="line">		<span class="string">"left"</span>:  loadIcon(<span class="string">"left.png"</span>),</span><br><span class="line">		<span class="string">"up"</span>:    loadIcon(<span class="string">"up.png"</span>),</span><br><span class="line">		<span class="string">"right"</span>: loadIcon(<span class="string">"right.png"</span>),</span><br><span class="line">		<span class="string">"down"</span>:  loadIcon(<span class="string">"down.png"</span>),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Icon 被多个goroutine调用时不是并发安全的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Icon</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">image</span>.<span class="title">Image</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> icons == <span class="literal">nil</span> &#123;</span><br><span class="line">		loadIcons()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> icons[name]</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>多个<code>goroutine</code>并发调用Icon函数时不是并发安全的，现代的编译器和CPU可能会在保证每个<code>goroutine</code>都满足串行一致的基础上自由地重排访问内存的顺序。loadIcons函数可能会被重排为以下结果：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadIcons</span><span class="params">()</span></span> &#123;</span><br><span class="line">	icons = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]image.Image)</span><br><span class="line">	icons[<span class="string">"left"</span>] = loadIcon(<span class="string">"left.png"</span>)</span><br><span class="line">	icons[<span class="string">"up"</span>] = loadIcon(<span class="string">"up.png"</span>)</span><br><span class="line">	icons[<span class="string">"right"</span>] = loadIcon(<span class="string">"right.png"</span>)</span><br><span class="line">	icons[<span class="string">"down"</span>] = loadIcon(<span class="string">"down.png"</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在这种情况下就会出现即使判断了<code>icons</code>不是nil也不意味着变量初始化完成了。考虑到这种情况，我们能想到的办法就是添加互斥锁，保证初始化<code>icons</code>的时候不会被其他的<code>goroutine</code>操作，但是这样做又会引发性能问题。</p>
<p>使用<code>sync.Once</code>改造的示例代码如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> （</span><br><span class="line">	icons <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image </span><br><span class="line">	loadIconsOnce sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadIcons</span><span class="params">()</span></span> &#123;</span><br><span class="line">	icons = <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image&#123;</span><br><span class="line">		<span class="string">"left"</span>:  loadIcon(<span class="string">"left.png"</span>),</span><br><span class="line">		<span class="string">"up"</span>:    loadIcon(<span class="string">"up.png"</span>),</span><br><span class="line">		<span class="string">"right"</span>: loadIcon(<span class="string">"right.png"</span>),</span><br><span class="line">		<span class="string">"down"</span>:  loadIcon(<span class="string">"down.png"</span>),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Icon 是并发安全的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Icon</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">image</span>.<span class="title">Image</span></span> &#123;</span><br><span class="line">	loadIconsOnce.Do(loadIcons)</span><br><span class="line">	<span class="keyword">return</span> icons[name]</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="并发安全的单例"><a href="#并发安全的单例" class="headerlink" title="并发安全的单例"></a>并发安全的单例</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doOnce</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 声明协程单例</span></span><br><span class="line">	<span class="keyword">var</span> once sync.Once</span><br><span class="line">	onceBody := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Only Once Do"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 建立搞并发场景</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="comment">// 实现仅实现一次</span></span><br><span class="line">			once.Do(onceBody)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	doOnce()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="协控制随心所欲-sync-Cond"><a href="#协控制随心所欲-sync-Cond" class="headerlink" title="协控制随心所欲-sync.Cond"></a>协控制随心所欲-sync.Cond</h3>
<p>在 Go 语言中，sync.WaitGroup 用于最终完成的场景，关键点在于一定要等待所有协程都执行完毕。</p>
<p>而 sync.Cond 可以用于发号施令，一声令下所有协程都可以开始执行，关键点在于协程开始的时候是等待的，要等待 sync.Cond 唤醒才能执行。</p>
<p>sync.Cond 从字面意思看是条件变量，它具有阻塞协程和唤醒协程的功能，所以可以在满足一定条件的情况下唤醒协程，但条件变量只是它的一种使用场景。</p>
<p>sync.Cond 有三个方法，它们分别是：</p>
<ol>
    <li><strong>Wait</strong>，阻塞当前协程，直到被其他协程调用 Broadcast 或者 Signal 方法唤醒，使用的时候需要加锁，使用 sync.Cond 中的锁即可，也就是 L 字段。</li>
    <li><strong>Signal</strong>，唤醒一个等待时间最长的协程。</li>
    <li><strong>Broadcast</strong>，唤醒所有等待的协程。</li>
</ol>
<blockquote>
    <p>在调用 Signal 或者 Broadcast 之前，要确保目标协程处于 Wait 阻塞状态，不然会出现死锁问题。</p>
</blockquote>
<p>下面我们以 10 个人赛跑为例来演示 sync.Cond 的用法。在这个示例中有一个裁判，裁判要先等这 10 个人准备就绪，然后一声发令枪响，这 10 个人就可以开始跑了，如下所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//10个人赛跑，1个裁判发号施令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">race</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cond :=sync.NewCond(&amp;sync.Mutex&#123;&#125;)</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	wg.Add(<span class="number">11</span>)</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span>  wg.Done()</span><br><span class="line">			fmt.Println(num,<span class="string">"号已经就位"</span>)</span><br><span class="line">			cond.L.Lock()</span><br><span class="line">			cond.Wait()<span class="comment">//等待发令枪响</span></span><br><span class="line">			fmt.Println(num,<span class="string">"号开始跑……"</span>)</span><br><span class="line">			cond.L.Unlock()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//等待所有goroutine都进入wait状态</span></span><br><span class="line">	time.Sleep(<span class="number">2</span>*time.Second)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span>  wg.Done()</span><br><span class="line">		fmt.Println(<span class="string">"裁判已经就位，准备发令枪"</span>)</span><br><span class="line">		fmt.Println(<span class="string">"比赛开始～"</span>)</span><br><span class="line">		cond.Broadcast()<span class="comment">//发令枪响</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">//防止函数提前返回退出</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	race()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3>
<p>Go语言中内置的map不是并发安全的。请看下面的示例：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> m[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(key <span class="keyword">string</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	m[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			key := strconv.Itoa(n)</span><br><span class="line">			set(key, n)</span><br><span class="line">			fmt.Printf(<span class="string">"k=:%v,v:=%v\n"</span>, key, get(key))</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>上面的代码开启少量几个<code>goroutine</code>的时候可能没什么问题，当并发多了之后执行上面的代码就会报<code>fatal error: concurrent map writes</code>错误。</p>
<p>像这种场景下就需要为map加锁来保证并发的安全性了，Go语言的<code>sync</code>包中提供了一个开箱即用的并发安全版map–<code>sync.Map</code>。开箱即用表示不用像内置的map一样使用make函数初始化就能直接使用。同时<code>sync.Map</code>内置了诸如<code>Store</code>、<code>Load</code>、<code>LoadOrStore</code>、<code>Delete</code>、<code>Range</code>等操作方法。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> m = sync.Map&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			key := strconv.Itoa(n)</span><br><span class="line">			m.Store(key, n)</span><br><span class="line">			value, _ := m.Load(key)</span><br><span class="line">			fmt.Printf(<span class="string">"k=:%v,v:=%v\n"</span>, key, value)</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang并发编程初探</title>
    <url>/21490.html</url>
    <content><![CDATA[<h2 id="基本概念了解："><a href="#基本概念了解：" class="headerlink" title="基本概念了解："></a>基本概念了解：</h2>
<h3 id="并发与并行：-略偏向于多线-进程方面"><a href="#并发与并行：-略偏向于多线-进程方面" class="headerlink" title="并发与并行：(略偏向于多线 / 进程方面)"></a>并发与并行：(略偏向于多线 / 进程方面)</h3>
<ul>
    <li>并发： 指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行</li>
    <li>并行： 指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的</li>
</ul>
<a id="more"></a>
<h3 id="阻塞与非阻塞：（略偏向于协程-异步方向）"><a href="#阻塞与非阻塞：（略偏向于协程-异步方向）" class="headerlink" title="阻塞与非阻塞：（略偏向于协程 / 异步方向）"></a>阻塞与非阻塞：（略偏向于协程 / 异步方向）</h3>
<ul>
    <li>
        <p>阻塞：阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。</p>
    </li>
    <li>
        <p>非阻塞：程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的</p>
    </li>
</ul>
<h3 id="同步与异步："><a href="#同步与异步：" class="headerlink" title="同步与异步："></a>同步与异步：</h3>
<ul>
    <li>同步：不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。</li>
    <li>异步：为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。</li>
</ul>
<ul>
    <li><strong>多线程（英语：multithreading）</strong>：指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理（Chip-level multithreading）或同时多线程（Simultaneous multithreading）处理器。在一个程序中，这些独立运行的程序片段叫作 “线程”（Thread），利用它编程的概念就叫作 “多线程处理（Multithreading）”</li>
    <li><strong>多进程 (Multiprocessing):</strong> 每个正在系统上运行的程序都是一个进程。每个进程包含一到多个线程。进程也可能是整个程序或者是部分程序的动态执行。线程是一组指令的集合，或者是程序的特殊段，它可以在程序里独立执行。也可以把它理解为代码运行的上下文。所以线程基本上是轻量级的进程，它负责在单个程序里执行多任务。通常由操作系统负责多个线程的调度和执行。线程是程序中一个单一的顺序控制流程。在单个程序中同时运行多个线程完成不同的工作，称为多线程.</li>
    <li><strong>二者的区别：</strong>线程和进程的区别在于，子进程和父进程有不同的代码和数据空间，而多个线程则共享数据空间，每个线程有自己的执行堆栈和程序计数器为其执行上下文。多线程主要是为了节约 CPU 时间，发挥利用，根据具体<a href="https://baike.baidu.com/item/情况" target="_blank" rel="noopener">情况</a>而定。线程的运行中需要使用计算机的<a href="https://baike.baidu.com/item/内存" target="_blank" rel="noopener">内存</a>资源和 CPU。</li>
    <li><strong>协程 (Coroutine):</strong> 又称微线程、纤程，协程是一种用户态的轻量级线程。 协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</li>
</ul>
<h2 id="Go并发编程"><a href="#Go并发编程" class="headerlink" title="Go并发编程"></a>Go并发编程</h2>
<p>Go 语言中没有线程的概念，只有协程，也称为 goroutine。相比线程来说，协程更加轻量，一个程序可以随意启动成千上万个 goroutine。</p>
<p>Go语言中的<code>goroutine</code>就是这样一种机制，<code>goroutine</code>的概念类似于线程，但 <code>goroutine</code>是由Go的运行时（runtime）调度和管理的。Go程序会智能地将 goroutine 中的任务合理地分配给每个CPU。Go语言之所以被称为现代化的编程语言，就是因为它在语言层面已经内置了调度和上下文切换的机制。</p>
<p>在Go语言编程中你不需要去自己写进程、线程、协程，你的技能包里只有一个技能–<code>goroutine</code>，当你需要让某个任务并发执行的时候，你只需要把这个任务包装成一个函数，开启一个<code>goroutine</code>去执行这个函数就可以了，就是这么简单粗暴。</p>
<h3 id="goroutine与线程"><a href="#goroutine与线程" class="headerlink" title="goroutine与线程"></a>goroutine与线程</h3>
<h4 id="可增长的栈"><a href="#可增长的栈" class="headerlink" title="可增长的栈"></a>可增长的栈</h4>
<p>OS线程（操作系统线程）一般都有固定的栈内存（通常为2MB）,一个<code>goroutine</code>的栈在其生命周期开始时只有很小的栈（典型情况下2KB），<code>goroutine</code>的栈不是固定的，他可以按需增大和缩小，<code>goroutine</code>的栈大小限制可以达到1GB，虽然极少会用到这么大。所以在Go语言中一次创建十万左右的<code>goroutine</code>也是可以的。</p>
<h4 id="goroutine调度"><a href="#goroutine调度" class="headerlink" title="goroutine调度"></a>goroutine调度</h4>
<p><code>GPM</code>是Go语言运行时（runtime）层面的实现，是go语言自己实现的一套调度系统。区别于操作系统调度OS线程。</p>
<ul>
    <li><code>G</code>很好理解，就是个goroutine的，里面除了存放本goroutine信息外 还有与所在P的绑定等信息。</li>
    <li><code>P</code>管理着一组goroutine队列，P里面会存储当前goroutine运行的上下文环境（函数指针，堆栈地址及地址边界），P会对自己管理的goroutine队列做一些调度（比如把占用CPU时间较长的goroutine暂停、运行后续的goroutine等等）当自己的队列消费完了就去全局队列里取，如果全局队列里也消费完了会去其他P的队列里抢任务。</li>
    <li><code>M（machine）</code>是Go运行时（runtime）对操作系统内核线程的虚拟， M与内核线程一般是一一映射的关系， 一个groutine最终是要放到M上执行的；</li>
</ul>
<p>P与M一般也是一一对应的。他们关系是： P管理着一组G挂载在M上运行。当一个G长久阻塞在一个M上时，runtime会新建一个M，阻塞G所在的P会把其他的G 挂载在新建的M上。当旧的G阻塞完成或者认为其已经死掉时 回收旧的M。</p>
<p>P的个数是通过<code>runtime.GOMAXPROCS</code>设定（最大256），Go1.5版本之后默认为物理线程数。 在并发量大的时候会增加一些P和M，但不会太多，切换太频繁的话得不偿失。</p>
<p>单从线程调度讲，Go语言相比起其他语言的优势在于OS线程是由OS内核来调度的，<code>goroutine</code>则是由Go运行时（runtime）自己的调度器调度的，这个调度器使用一个称为m:n调度的技术（复用/调度m个goroutine到n个OS线程）。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变），成本比调度OS线程低很多。<br>另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，以上种种保证了go调度方面的性能。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang介绍</title>
    <url>/10520.html</url>
    <content><![CDATA[<blockquote>
    <p>Go 语言开发包</p>
    <p>国外：<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></p>
    <p>国内(推荐)： <a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></p>
    <p>编辑器</p>
    <ul>
        <li>Golang:<a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">https://www.jetbrains.com/go/</a> </li>
        <li>Visual Studio Code: <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a> </li>
    </ul>
</blockquote>
<p>搭建 Go 语言开发环境，需要先下载 Go 语言开发包。</p>
<a id="more"></a>
<h3 id="查看操作系统及版本"><a href="#查看操作系统及版本" class="headerlink" title="查看操作系统及版本"></a>查看操作系统及版本</h3>
<p>Windows：<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfvrumlwpj31fk0m70x2.jpg" alt=""></p>
<p>Mac:</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfvxbp6hmj317i0d21b8.jpg" alt=""></p>
<p>Linux:</p>
<p>终端输入<code>uname -a</code>,示例如下</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfw129kelj31qe03c0uw.jpg" alt=""><br>
    <!--more-->
</p>
<h3 id="Golang语言开发包"><a href="#Golang语言开发包" class="headerlink" title="Golang语言开发包"></a>Golang语言开发包</h3>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfvdmu9zsj31au0u0ap5.jpg" alt="Golang开发包"></p>
<p>MSI 安装的方式比较简单推荐使用</p>
<p>Windows 系统上推荐使用这种方式。现在的操作系统基本上都是 64 位的，所以选择 64 位的 go1.15.windows-amd64.msi 下载即可，如果操作系统是 32 位的，选择 go1.15.windows-386.msi 进行下载。</p>
<p>下载后双击该 MSI 安装文件，按照提示一步步地安装即可。在默认情况下，Go 语言开发工具包会被安装到 c:\Go 目录，你也可以在安装过程中选择自己想要安装的目录。</p>
<p>假设安装到 c:\Go 目录，安装程序会自动把 c:\Go\bin 添加到你的 PATH 环境变量中，如果没有的话，你可以通过系统 -&gt; 控制面板 -&gt; 高级 -&gt; 环境变量选项来手动添加。示例如下</p>
<ul>
    <li>进入</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfwha3s32j31fk0kw77n.jpg" alt=""></p>
<ul>
    <li>配置</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfwhx99dij30uu0huwfx.jpg" alt=""></p>
<h3 id="macOS-下安装"><a href="#macOS-下安装" class="headerlink" title="macOS 下安装"></a>macOS 下安装</h3>
<p>如果你的操作系统是 macOS，可以采用 PKG 安装包。下载 <code>go1.15.darwin-amd64.pkg</code> 后，双击按照提示安装即可。安装成功后，路径<code>/usr/local/go/bin</code> 应该已经被添加到了 PATH 环境变量中。</p>
<p>如果没有的话，你可以手动添加，把如下内容添加到 /etc/profile 或者 $HOME/.profile 文件保存即可。命令如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>BrewHome安装</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># brewHome安装</span></span><br><span class="line">brew install golang</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3>
<ul>
    <li>保护管理工具安装</li>
</ul>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># yum(Centos)</span></span><br><span class="line">sudo yum -y update <span class="comment"># 更新yum</span></span><br><span class="line">sudo yum install -y golang</span><br><span class="line"><span class="comment"># apt(ubantu)</span></span><br><span class="line">sudo apt -y update</span><br><span class="line">sudo apt install -y golang</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li>压缩包安装(安装前请查看操作系统版本)</li>
</ul>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># amd 版本</span></span><br><span class="line">wget https://golang.google.cn/dl/go1.15.4.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># arm版本</span></span><br><span class="line">https://golang.google.cn/dl/go1.15.4.linux-arm64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压(amd)</span></span><br><span class="line">sudo tar -C /usr/<span class="built_in">local</span>/ -xzvf go1.15.4.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo tar -C /usr/<span class="built_in">local</span>/ -xzvf go1.15.4.linux-arm64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量配置</span></span><br><span class="line"><span class="comment"># sudo vim /etc/profile</span></span><br><span class="line">sudo cat &gt;&gt; /etc/profile &lt;&lt; EOF</span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/bruce/go</span><br><span class="line"><span class="built_in">export</span> GOBIN=\<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><code>GOROOT</code>设置golang开发包的安装位置，我们解压到了<code>/usr/local/</code>目录，该目录下的<code>go/</code>文件夹一定是go的环境的根目录，就是打开<code>go</code>目录后别再有一个<code>go/</code>目录。</p>
    <p><code>GOBIN</code>目录是执行 <code>go install</code> 后生成可执行文件的目录</p>
    <p><code>GOPATH</code>是我们的工作目录，一般我们设置到用户目录下，这个要根据你电脑的实际情况去配置。在介绍一下go的工作目录结构。在我们设置的工作目录下有3个子目录</p>
</blockquote>
<h2 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 任意目录下输入go version</span></span><br><span class="line">go version go1.15.2 darwin/amd64</span><br><span class="line"><span class="comment"># 查看环境配置</span></span><br><span class="line">go env</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># go env</span></span><br><span class="line">GO111MODULE=<span class="string">"on"</span></span><br><span class="line">GOARCH=<span class="string">"amd64"</span></span><br><span class="line">GOBIN=<span class="string">""</span></span><br><span class="line">GOCACHE=<span class="string">"/Users/stringle-004/Library/Caches/go-build"</span></span><br><span class="line">GOENV=<span class="string">"/Users/stringle-004/Library/Application Support/go/env"</span></span><br><span class="line">GOEXE=<span class="string">""</span></span><br><span class="line">GOFLAGS=<span class="string">""</span></span><br><span class="line">GOHOSTARCH=<span class="string">"amd64"</span></span><br><span class="line">GOHOSTOS=<span class="string">"darwin"</span></span><br><span class="line">GOINSECURE=<span class="string">""</span></span><br><span class="line">GOMODCACHE=<span class="string">"/Users/stringle-004/go/pkg/mod"</span></span><br><span class="line">GONOPROXY=<span class="string">""</span></span><br><span class="line">GONOSUMDB=<span class="string">""</span></span><br><span class="line">GOOS=<span class="string">"darwin"</span></span><br><span class="line">GOPATH=<span class="string">"/Users/stringle-004/go"</span></span><br><span class="line">GOPRIVATE=<span class="string">""</span></span><br><span class="line">GOPROXY=<span class="string">"https://goproxy.cn,direct"</span></span><br><span class="line">GOROOT=<span class="string">"/usr/local/go"</span>		<span class="comment"># golang开发包的安装位置</span></span><br><span class="line">GOSUMDB=<span class="string">"sum.golang.org"</span></span><br><span class="line">GOTMPDIR=<span class="string">""</span></span><br><span class="line">GOTOOLDIR=<span class="string">"/usr/local/go/pkg/tool/darwin_amd64"</span></span><br><span class="line">GCCGO=<span class="string">"gccgo"</span></span><br><span class="line">AR=<span class="string">"ar"</span></span><br><span class="line">CC=<span class="string">"clang"</span></span><br><span class="line">CXX=<span class="string">"clang++"</span></span><br><span class="line">CGO_ENABLED=<span class="string">"1"</span></span><br><span class="line">GOMOD=<span class="string">"/Users/stringle-004/go/src/github.com/payne/awesomeProject/go.mod"</span></span><br><span class="line">CGO_CFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_CPPFLAGS=<span class="string">""</span></span><br><span class="line">CGO_CXXFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_FFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_LDFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">PKG_CONFIG=<span class="string">"pkg-config"</span></span><br><span class="line">GOGCCFLAGS=<span class="string">"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/sb/__n99hm13ms08lkk2lv5pxj40000gn/T/go-build659271527=/tmp/go-build -gno-record-gcc-switches -fno-common"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h3>
<p>Go1.14版本之后，都推荐使用<code>go mod</code>模式来管理依赖环境了，也不再强制我们把代码必须写在<code>GOPATH</code>下面的src目录了，你可以在你电脑的任意位置编写go代码。（网上有些教程适用于1.11版本之前。）</p>
<p>默认GoPROXY配置是：<code>GOPROXY=https://proxy.golang.org,direct</code>，由于国内访问不到<code>https://proxy.golang.org</code>，所以我们需要换一个PROXY，这里推荐使用<code>https://goproxy.io</code>或<code>https://goproxy.cn</code>。</p>
<p>可以执行下面的命令修改GOPROXY：</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h2>
<p>Go 语言开发工具包的另一强大功能就是可以跨平台编译。什么是跨平台编译呢？</p>
<p>就是在 macOS 开发，可以编译 Linux、Window 等平台上的可执行程序，这样你开发的程序，就可以在这些平台上运行。也就是说，你可以选择喜欢的操作系统做开发，并跨平台编译成需要发布平台的可执行程序即可。</p>
<p>Go 语言通过两个环境变量来控制跨平台编译，它们分别是 <code>GOOS</code> 和 <code>GOARCH</code> 。</p>
<ul>
    <li>
        <p>GOOS：代表要编译的目标操作系统，常见的有 Linux、Windows、Darwin 等。</p>
    </li>
    <li>
        <p>GOARCH：代表要编译的目标处理器架构，常见的有 386、AMD64、ARM64 等。</p>
    </li>
</ul>
<p>这样通过组合不同的 GOOS 和 GOARCH，就可以编译出不同的可执行程序。比如我现在的操作系统是 macOS AMD64 的，我想编译出 Linux AMD64 的可执行程序，只需要执行 go build 命令即可，如以下代码所示：</p>
<p>关于 GOOS 和 GOARCH 更多的组合，参考官方文档的 $GOOS and $GOARCH 这一节即可</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=amd64 go build /Users/stringle-004/go/main.go</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>关于 GOOS 和 GOARCH 更多的组合，参考<a href="https://golang.org/doc/install/source#environment" target="_blank" rel="noopener">官方文档</a>的 $GOOS and $GOARCH 这一节即可</p>
<h2 id="Go-编辑器"><a href="#Go-编辑器" class="headerlink" title="Go 编辑器"></a>Go 编辑器</h2>
<p>第一款是 Visual Studio Code + Go 扩展插件，可以让你非常高效地开发，通过<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官方网站</a>下载所对应操作系统版本的Visual Studio Code。</p>
<ul>
    <li>安装：略（进入官网，下载安装即可）</li>
    <li>Visual Studio Code + Go设置</li>
</ul>
<h4 id="安装中文简体插件"><a href="#安装中文简体插件" class="headerlink" title="安装中文简体插件"></a>安装中文简体插件</h4>
<p>点击左侧菜单栏最后一项<code>管理扩展</code>，在<code>搜索框</code>中输入<code>chinese</code> ，选中结果列表第一项，点击<code>install</code>安装。</p>
<p>安装完毕后右下角会提示<code>重启VS Code</code>，重启之后你的VS Code就显示中文啦！</p>
<p><code>VSCode</code>主界面介绍：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfxc8ujjej30y80lcgok.jpg" alt=""></p>
<h4 id="安装go扩展"><a href="#安装go扩展" class="headerlink" title="安装go扩展"></a>安装go扩展</h4>
<p>现在我们要为我们的VS Code编辑器安装<code>Go</code>扩展插件，让它支持Go语言开发。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfxc5nin1j30y80pw0xy.jpg" alt=""></p>
<h4 id="安装中文简体插件-1"><a href="#安装中文简体插件-1" class="headerlink" title="安装中文简体插件"></a>安装中文简体插件</h4>
<p>点击左侧菜单栏最后一项<code>管理扩展</code>，在<code>搜索框</code>中输入<code>chinese</code> ，选中结果列表第一项，点击<code>install</code>安装。</p>
<p>安装完毕后右下角会提示<code>重启VS Code</code>，重启之后你的VS Code就显示中文啦！</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkfxc0dxgxg30xq0ppngg.gif" alt=""></p>
<p>第二款是老牌 IDE 公司 JetBrains 推出的 Goland，所有插件已经全部集成，更容易上手，并且功能强大，新手老手都适合，你可以通过官方网站 <a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">https://www.jetbrains.com/go/</a> 下载使用。</p>
<h2 id="第一个Golang程序"><a href="#第一个Golang程序" class="headerlink" title="第一个Golang程序"></a>第一个Golang程序</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main			<span class="comment">//  可执行文件必须为package main开头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>			<span class="comment">// 导入“fmt”包，用于打印（fmt.Print（打印）、fmt.Println（换行打印）、fmt.Printf(格式化打印)等）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;			<span class="comment">// 主函数main</span></span><br><span class="line">	fmt.Print(<span class="string">"你好，我叫payne"</span>)		<span class="comment">// 输入</span></span><br><span class="line">&#125;</span><br><span class="line"># 你好，我叫payne</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang初识结构体</title>
    <url>/64552.html</url>
    <content><![CDATA[<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2>
<p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</p>
<p>Go语言中通过<code>struct</code>来实现<code>面向对象</code>的相关概念。</p>
<a id="more"></a>
<h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 使用type和struct关键字来定义结构体</span></span><br><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>结构体定义需注意</p>
<ul>
    <li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li>
    <li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li>
    <li>字段类型：表示结构体字段的具体类型</li>
</ul>
<p>具体定义如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age <span class="keyword">int</span></span><br><span class="line">	male <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当有相同类型的时候，我们还可以将相同类型的变量名使用“,”分割，写在一起。如下</span></span><br><span class="line"><span class="keyword">type</span> Person1 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name,male <span class="keyword">string</span></span><br><span class="line">	age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这样我们就拥有了一个的自定义类型<code>person</code>，它有<code>name</code>、<code>male</code>、<code>age</code>三个字段，分别表示姓名、性别和年龄。这样我们使用这个<code>person</code>结构体就能够很方便的在程序中表示和存储人信息了。</p>
<p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和性别等，本质上是一种聚合型的数据类型</p>
<p>将前面的融汇贯通，整点复合型的东东，搞起</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> MyString <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> MyInt=<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name MyString</span><br><span class="line">	age MyInt</span><br><span class="line">	male <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>结构体定义了之后，咱们还需要进行初始化，才能使用。</p>
<h3 id="结构体初始化与基本使用"><a href="#结构体初始化与基本使用" class="headerlink" title="结构体初始化与基本使用"></a>结构体初始化与基本使用</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyString <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> MyInt = <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name MyString</span><br><span class="line">	age  MyInt</span><br><span class="line">	sex  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person1 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name, sex <span class="keyword">string</span></span><br><span class="line">	age       <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p Person</span><br><span class="line">	<span class="keyword">var</span> p1 Person1</span><br><span class="line">	p.name = <span class="string">"Payne"</span></span><br><span class="line">	p.sex = <span class="string">"male"</span></span><br><span class="line">	p.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">	p1.name = <span class="string">"Tim"</span></span><br><span class="line">	p1.sex = <span class="string">"female"</span></span><br><span class="line">	p1.age = <span class="number">23</span></span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T,value:%v\n"</span>, p, p)</span><br><span class="line">	fmt.Printf(<span class="string">"%#v\n"</span>, p)</span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T,value:%v\n"</span>, p1, p1)</span><br><span class="line">	fmt.Printf(<span class="string">"%#v"</span>, p1)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>Type:main.Person,value:{Payne 20 male}<br>main.Person{name:”Payne”, age:20, sex:”male”}<br>Type:main.Person1,value:{Tim female 23}<br>main.Person1{name:”Tim”, sex:”female”, age:23}</p>
</blockquote>
<p>通过以上示例我们知道，它是通过<code>.</code>，来一个一个的进行赋值</p>
<p>当然我们也是可以通过键值对对形式，从而进行批量赋值的，如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">p1 := Person1&#123;</span><br><span class="line">	name: <span class="string">"a"</span>,</span><br><span class="line">	age:  <span class="number">20</span>,</span><br><span class="line">	sex:  <span class="string">"male"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"type: %T, value:%#v"</span>, p1, p1)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h4>
<p>在定义一些临时数据结构等场景下还可以使用匿名结构体。如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person2 <span class="keyword">struct</span> &#123;</span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">		age  <span class="keyword">int</span></span><br><span class="line">		sex  <span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line">	person2.name = <span class="string">"Payne"</span></span><br><span class="line">	person2.age = <span class="number">20</span></span><br><span class="line">	person2.sex = <span class="string">"male"</span></span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T,value:%v\n"</span>, person2, person2)</span><br><span class="line">	fmt.Printf(<span class="string">"%#v\n"</span>, person2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type:struct &#123; name string; age int; sex string &#125;,value:&#123;Payne 20 male&#125;</span></span><br><span class="line"><span class="comment">// struct &#123; name string; age int; sex string &#125;&#123;name:"Payne", age:20, sex:"male"&#125;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="指针类型结构体"><a href="#指针类型结构体" class="headerlink" title="指针类型结构体"></a>指针类型结构体</h3>
<p>通过使用<code>new</code>关键字堆结构体初始化，得到的是结构体的地址值</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person3 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="keyword">string</span></span><br><span class="line">	gender <span class="keyword">string</span></span><br><span class="line">	hobby  <span class="keyword">string</span></span><br><span class="line">	age    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p3 = <span class="built_in">new</span>(person3)</span><br><span class="line">	fmt.Printf(<span class="string">"Type:%T, Vlue:%v"</span>, p3, p3)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>既然是地址值，那么我们也是可以使用<code>&amp;</code>对他进行运算等操作的，相当于new</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person3 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="keyword">string</span></span><br><span class="line">	gender <span class="keyword">string</span></span><br><span class="line">	hobby  []<span class="keyword">string</span></span><br><span class="line">	age    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p3 := &amp;person3&#123;&#125;</span><br><span class="line">	p3.name = <span class="string">"payne"</span></span><br><span class="line">	p3.gender = <span class="string">"sex"</span></span><br><span class="line">	p3.hobby = []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;</span><br><span class="line">	p3.age = <span class="number">20</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><code>p3.name = &quot;payne&quot;</code>其实在底层是<code>(*p3).name = &quot;payne&quot;</code>，这是Go语言帮我们实现的语法糖。</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3>
<p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个<code>person</code>的构造函数。 因为<code>struct</code>是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型</p>
<p>借用结构体构造函数，实现<code>类</code>的概念，如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person5 <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newClass</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">person5</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;person5&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p5 := newClass(<span class="string">"payne"</span>, <span class="number">10</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"value:%#v"</span>, p5)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Go语言中的<code>方法（Method）</code>是一种作用于特定类型变量的函数。这种特定类型变量叫做<code>接收者（Receiver）</code>。接收者的概念就类似于其他语言中的<code>this</code>或者 <code>self</code>。</p>
<p>方法的定义格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(接收者变量 接收者类型)</span> 方法名<span class="params">(参数列表)</span> <span class="params">(返回参数)</span></span> &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(谁能调用我？-接收者)</span> 方法名<span class="params">(参数列表)</span> <span class="params">(返回类型)</span></span> &#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>其中，</p>
<ul>
    <li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li>
    <li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li>
    <li>方法名、参数列表、返回参数：具体格式与函数定义相同。</li>
</ul>
<p>举个例子：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">//Person 结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NewPerson 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int8</span>)</span> *<span class="title">Person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Person&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dream Person做梦的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">Dream</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"%s的梦想是学好Go语言！\n"</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := NewPerson(<span class="string">"Payne"</span>, <span class="number">25</span>)</span><br><span class="line">	p1.Dream()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>
<h3 id="值类型的接收者"><a href="#值类型的接收者" class="headerlink" title="值类型的接收者"></a>值类型的接收者</h3>
<p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// SetAge2 设置p的年龄</span></span><br><span class="line"><span class="comment">// 使用值接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">SetAge2</span><span class="params">(newAge <span class="keyword">int8</span>)</span></span> &#123;</span><br><span class="line">	p.age = newAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := NewPerson(<span class="string">"Payne"</span>, <span class="number">25</span>)</span><br><span class="line">	p1.Dream()</span><br><span class="line">	fmt.Println(p1.age) <span class="comment">// 25</span></span><br><span class="line">	p1.SetAge2(<span class="number">30</span>) <span class="comment">// (*p1).SetAge2(30)</span></span><br><span class="line">	fmt.Println(p1.age) <span class="comment">// 25</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="指针类型的接收者"><a href="#指针类型的接收者" class="headerlink" title="指针类型的接收者"></a>指针类型的接收者</h3>
<p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的<code>this</code>或者<code>self</code>。 例如我们为<code>Person</code>添加一个<code>SetAge</code>方法，来修改实例变量的年龄。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// SetAge 设置p的年龄</span></span><br><span class="line"><span class="comment">// 使用指针接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">SetAge</span><span class="params">(newAge <span class="keyword">int8</span>)</span></span> &#123;</span><br><span class="line">	p.age = newAge</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>调用该方法：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := NewPerson(<span class="string">"Payne"</span>, <span class="number">25</span>)</span><br><span class="line">	fmt.Println(p1.age) <span class="comment">// 25</span></span><br><span class="line">	p1.SetAge(<span class="number">30</span>)</span><br><span class="line">	fmt.Println(p1.age) <span class="comment">// 30</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="什么时候应该使用指针类型接收者"><a href="#什么时候应该使用指针类型接收者" class="headerlink" title="什么时候应该使用指针类型接收者"></a>什么时候应该使用指针类型接收者</h3>
<ol>
    <li>需要修改接收者中的值</li>
    <li>接收者是拷贝代价比较大的大对象</li>
    <li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</li>
</ol>
<h2 id="结构体的“继承”"><a href="#结构体的“继承”" class="headerlink" title="结构体的“继承”"></a>结构体的“继承”</h2>
<p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">//Animal 动物</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"%s会动！\n"</span>, a.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dog 狗</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Feet    <span class="keyword">int8</span></span><br><span class="line">	*Animal <span class="comment">//通过嵌套匿名结构体实现继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span> <span class="title">wang</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"%s会汪汪汪~\n"</span>, d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	d1 := &amp;Dog&#123;</span><br><span class="line">		Feet: <span class="number">4</span>,</span><br><span class="line">		Animal: &amp;Animal&#123; <span class="comment">//注意嵌套的是结构体指针</span></span><br><span class="line">			name: <span class="string">"aw"</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	d1.wang() <span class="comment">//aw会汪汪汪~</span></span><br><span class="line">	d1.move() <span class="comment">//aw会动！</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2>
<ol>
    <li>Golang传递参数，永远是拷贝。也就是说，在函数内部改变其值，仅仅在内部生效。若想在某一函数中改变其全局的值。需要使用指针</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang运算符</title>
    <url>/61463.html</url>
    <content><![CDATA[<blockquote>
    <p>本章目标：</p>
    <ul>
        <li>了解运算符、运算符的种类、各运算符的特征</li>
        <li>进制</li>
        <li>位运算符及位运算</li>
        <li>运算符优先级</li>
    </ul>
</blockquote>
<h2 id="什么是运算符"><a href="#什么是运算符" class="headerlink" title="什么是运算符"></a>什么是运算符</h2>
<p>运算符用于执行程序代码运算，会针对一个以上操作数项目来进行<a href="https://baike.baidu.com/item/运算/5866856" target="_blank" rel="noopener">运算</a>。例如：2+3，其<a href="https://baike.baidu.com/item/操作数/7658270" target="_blank" rel="noopener">操作数</a>是2和3，而运算符则是“+”。</p>
<p>在vb2005中运算符大致可以分为5种类型：<a href="https://baike.baidu.com/item/算术运算符/9324947" target="_blank" rel="noopener">算术运算符</a>、<a href="https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/2786163?fr=aladdin" target="_blank" rel="noopener">位运算符</a>、 <a href="https://baike.baidu.com/item/关系运算符/352774" target="_blank" rel="noopener">关系运算符</a>、<a href="https://baike.baidu.com/item/赋值运算符/2482721" target="_blank" rel="noopener">赋值运算符</a>、<a href="https://baike.baidu.com/item/逻辑运算符/4123505" target="_blank" rel="noopener">逻辑运算符</a>。</p>
<a id="more"></a>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">运算符</th>
                <th style="text-align:center">描述</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">+</td>
                <td style="text-align:center">相加</td>
            </tr>
            <tr>
                <td style="text-align:center">-</td>
                <td style="text-align:center">相减</td>
            </tr>
            <tr>
                <td style="text-align:center">*</td>
                <td style="text-align:center">相乘</td>
            </tr>
            <tr>
                <td style="text-align:center">/</td>
                <td style="text-align:center">相除</td>
            </tr>
            <tr>
                <td style="text-align:center">%</td>
                <td style="text-align:center">求余</td>
            </tr>
        </tbody>
    </table>
</div>
<blockquote>
    <p><strong>注意：</strong> <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">3</span>,<span class="number">4</span></span><br><span class="line">	fmt.Printf(<span class="string">"a 加 b = %d\n"</span>, a + b)</span><br><span class="line">	fmt.Printf(<span class="string">"a 减 b = %d\n"</span>, a - b)</span><br><span class="line">	fmt.Printf(<span class="string">"a 乘 b = %d\n"</span>, a * b)</span><br><span class="line">	fmt.Printf(<span class="string">"a 除 b = %d\n"</span>, a / b)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">运算符</th>
                <th style="text-align:center">描述</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">==</td>
                <td style="text-align:center">检查两个值是否相等，如果相等返回 True 否则返回 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">!=</td>
                <td style="text-align:center">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">&gt;</td>
                <td style="text-align:center">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">&gt;=</td>
                <td style="text-align:center">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">&lt;</td>
                <td style="text-align:center">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">&lt;=</td>
                <td style="text-align:center">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	<span class="comment">//fmt.Println("a == b?",  a == b)         // a == b? false</span></span><br><span class="line">	<span class="comment">//fmt.Println("a != b?",  a != b)         // a != b? true</span></span><br><span class="line">	<span class="comment">//fmt.Println("a &gt;  b?",  a &gt; b )         // a &gt;  b? true</span></span><br><span class="line">	<span class="comment">//fmt.Println("a &gt;= b?",  a &gt;= b)         // a &gt;= b? false</span></span><br><span class="line">	<span class="comment">//fmt.Println("a &lt;  b?",  a &lt; b )         // a &gt;= b? true</span></span><br><span class="line">	<span class="comment">//fmt.Println("a &lt;= b?",  a &lt;= b )        // a &lt;= b? true</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">运算符</th>
                <th style="text-align:center">描述</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">&amp;&amp;</td>
                <td style="text-align:center">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">\</td>
                <td style="text-align:center">\</td>
                <td></td>
                <td>逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td>
            </tr>
            <tr>
                <td style="text-align:center">!</td>
                <td style="text-align:center">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line">	fmt.Println(<span class="string">"a &amp;&amp; b ?"</span>, a &amp;&amp; b)      <span class="comment">// a &amp;&amp; b ? false</span></span><br><span class="line">	fmt.Println(<span class="string">"a || b ?"</span>, a || b)      <span class="comment">// a || b ? true</span></span><br><span class="line">	fmt.Println(<span class="string">"  !a ?"</span>, !a)            <span class="comment">//  !a ? false</span></span><br><span class="line">	fmt.Println(<span class="string">"  !b ?"</span>, !b)            <span class="comment">//  !b ? true</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2>
<h3 id="常见进制："><a href="#常见进制：" class="headerlink" title="常见进制："></a>常见进制：</h3>
<ul>
    <li>
        <p>二进制：只有 0 和 1，Go语言中不能直接使用二进制表示整数；</p>
    </li>
    <li>
        <p>八进制：0-7，以数字 0 开头；</p>
    </li>
    <li>
        <p>十进制：0-9；</p>
    </li>
    <li>
        <p>十六进制：0-9 以及 A-F，以 0X 开头，A-F 以及 X 不区分大小写。</p>
    </li>
</ul>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">10</span></span><br><span class="line">	<span class="comment">// 二进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%b\n"</span>,a)    <span class="comment">// 1010</span></span><br><span class="line">	<span class="comment">// 八进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%o\n"</span>,a)    <span class="comment">// 12</span></span><br><span class="line">	<span class="comment">// 十进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d\n"</span>,a)    <span class="comment">// 10</span></span><br><span class="line">	<span class="comment">// 十六进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%x\n"</span>,a)    <span class="comment">// a</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>任意进制转换为十进制</p>
<p>二进制转十进制：从最低位开始，每个位上数乘以 2 的位数减 1 次方然后求和。</p>
<p>1011 = 1<em>20 + 1</em>21 + 0<em>22 + 1</em>23 = 11</p>
<p>八进制转十进制：从最低位开始，每个位上数乘以 8 的位数减 1 次方然后求和。</p>
<p>0123 = 3<em>80 + 2</em>81 + 1<em>82 + 0</em>83 = 83</p>
<h3 id="其他进制互转："><a href="#其他进制互转：" class="headerlink" title="其他进制互转："></a>其他进制互转：</h3>
<ul>
    <li>二进制转换八进制：将二进制数从低位开始，每三位一组，转换成八进制数即可；</li>
    <li>二进制转十六进制：将二进制数从低位开始，每四位一组，转换成十六进制数即可；</li>
    <li>八进制转换二进制：将八进制数每 1 位转换成一个 3 位的二进制数（首位 0 除外）；</li>
    <li>十六进制转二进制：将十六进制每 1 位转换成对应的一个 4 位的二进制数即可。</li>
</ul>
<h3 id="反码补码"><a href="#反码补码" class="headerlink" title="反码补码"></a>反码补码</h3>
<p>对于有符号数而言，二进制的最高为是符号位：0 表示正数，1 表示负数。</p>
<p>短除法进行进制转变</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj31dvdq2j30no0f6wks.jpg" alt=""></p>
<p><code>十进制</code>的10-&gt; 二进制：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj392vw2zj30o00fi441.jpg" alt=""></p>
<p><code>二进制</code>的1011 -&gt; 十进制</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj3cnxtifj30o00ba786.jpg" alt=""></p>
<p>想要详细了解其原理的可以参考<a href="https://baike.baidu.com/item/%E7%9F%AD%E9%99%A4%E6%B3%95/3640958?fr=aladdin" target="_blank" rel="noopener">短除法</a>相关说明</p>
<p>位运算符对整数在内存中的二进制位进行操作。</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">运算符</th>
                <th style="text-align:center">描述</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">&amp;</td>
                <td style="text-align:center">参与运算的两数各对应的二进位相与。 （两位均为1才为1）</td>
            </tr>
            <tr>
                <td style="text-align:center">\</td>
                <td style="text-align:center"></td>
                <td>参与运算的两数各对应的二进位相或。 （两位有一个为1就为1）</td>
            </tr>
            <tr>
                <td style="text-align:center">^</td>
                <td style="text-align:center">参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 （两位不一样则为1）</td>
            </tr>
            <tr>
                <td style="text-align:center">&lt;&lt;</td>
                <td style="text-align:center">左移n位就是乘以2的n次方。 “a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td>
            </tr>
            <tr>
                <td style="text-align:center">&gt;&gt;</td>
                <td style="text-align:center">右移n位就是除以2的n次方。 “a&gt;&gt;b”是把a的各二进位全部右移b位。</td>
            </tr>
        </tbody>
    </table>
</div>
<p>XOR - 异或：相同为0，不同为1.也可用“进位加法”来理解</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">x ^ <span class="number">0</span> = X</span><br><span class="line">x ^ <span class="number">1</span>s = ~x  # <span class="number">1</span>s = ~ <span class="number">0</span></span><br><span class="line">x ^ (~x) = <span class="number">1</span>s </span><br><span class="line">x ^ x = <span class="number">0</span></span><br><span class="line">c = a ^ b  =&gt; a ^ c = b, b ^c = a # 交换两数</span><br><span class="line">a ^ b ^ c = a ^(b ^ c) = (a ^ b) ^c # associative</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定未知的位运算</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 将x最右边的n位请零： x &amp; (~<span class="number">0</span> &lt;&lt; n )</span><br><span class="line"><span class="number">2.</span> 获取x的第n位值（<span class="number">0</span> 或 <span class="number">1</span>）： （x &gt;&gt; n）&amp; <span class="number">1</span></span><br><span class="line"><span class="number">3.</span> 获取x的第n位的幂值：x &amp; （<span class="number">1</span> &lt;&lt; n）</span><br><span class="line"><span class="number">4.</span> 仅将第n位置为 <span class="number">1</span>： x | (<span class="number">1</span> &lt;&lt; n)</span><br><span class="line"><span class="number">5.</span> 仅将第n位置为<span class="number">0</span>：x &amp; （~<span class="number">1</span>（<span class="number">1</span> &lt;&lt; n））</span><br><span class="line"><span class="number">6.</span> 将x最高位至第n位(含)清零：x &amp; ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实战位运算要点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断奇偶性</span></span><br><span class="line">x % <span class="number">2</span> == <span class="number">1</span> - &gt; (x &amp; <span class="number">1</span>) == <span class="number">1</span>	</span><br><span class="line">x &amp; <span class="number">2</span> == <span class="number">0</span> -&gt; (x&amp;<span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"> <span class="comment">// 清零最低位的1</span></span><br><span class="line">x = x &amp; (x - <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 得到最低位的1</span></span><br><span class="line">x &amp; ~x </span><br><span class="line">x &amp; ~ x = &gt; <span class="number">0</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>为了更清晰的观察其变化，我们使用二进制来进行演示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">13</span>, <span class="number">21</span></span><br><span class="line">	fmt.Printf(<span class="string">"a:%b &amp; %b = %b\n"</span>, a, b, a &amp; b)</span><br><span class="line">	fmt.Printf(<span class="string">"a:%b | %b = %b\n"</span>, a, b, a | b)</span><br><span class="line">	fmt.Printf(<span class="string">"a:%b ^ %b = %b\n"</span>, a, b, a ^ b)</span><br><span class="line">	fmt.Printf(<span class="string">"a:%b ^ %b = %b\n"</span>, a, b, a ^ b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 左移</span></span><br><span class="line">		<span class="comment">// 二进制表示</span></span><br><span class="line">	fmt.Printf(<span class="string">"%b &lt;&lt; %b = %b\n"</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&lt;&lt;<span class="number">2</span>) <span class="comment">// 10 &lt;&lt; 10 = 1000</span></span><br><span class="line">		<span class="comment">// 十进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d &lt;&lt; %d = %d\n"</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&lt;&lt;<span class="number">2</span>) <span class="comment">// 2 &lt;&lt; 2 = 8</span></span><br><span class="line">	<span class="comment">// 右移</span></span><br><span class="line">		<span class="comment">// 二进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%b &gt;&gt; %b = %b\n"</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&gt;&gt;<span class="number">2</span>) <span class="comment">// 10 &gt;&gt; 10 = 0</span></span><br><span class="line">		<span class="comment">// 十进制</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d &gt;&gt; %d = %d\n"</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&gt;&gt;<span class="number">2</span>) <span class="comment">// 2 &gt;&gt; 2 = 0</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">运算符</th>
                <th style="text-align:center">描述</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">=</td>
                <td style="text-align:center">简单的赋值运算符，将一个表达式的值赋给一个左值</td>
            </tr>
            <tr>
                <td style="text-align:center">+=</td>
                <td style="text-align:center">相加后再赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">-=</td>
                <td style="text-align:center">相减后再赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">*=</td>
                <td style="text-align:center">相乘后再赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">/=</td>
                <td style="text-align:center">相除后再赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">%=</td>
                <td style="text-align:center">求余后再赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">&lt;&lt;=</td>
                <td style="text-align:center">左移后赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">&gt;&gt;=</td>
                <td style="text-align:center">右移后赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">&amp;=</td>
                <td style="text-align:center">按位与后赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">\</td>
                <td style="text-align:center">=</td>
                <td>按位或后赋值</td>
            </tr>
            <tr>
                <td style="text-align:center">^=</td>
                <td style="text-align:center">按位异或后赋值</td>
            </tr>
        </tbody>
    </table>
</div>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2>
<p>运算符优先级确定表达式中的分组。这会影响表达式的计算方式。某些运算符比其他运算符具有更高的优先级; 例如，乘法运算符比加法运算符有更高的优先级。</p>
<p>当同级别的运算符出现在同一个表达式中，从左到右的顺序计算，比如乘除一起，不管是乘在前面还是除在前面都是从左到右计算乘、除运算符。加减亦是如此。</p>
<p>例如：<code>x = 7 + 3 * 2</code>; 这里，计算结果<code>x</code>被分配<code>13</code>，而不是<code>20</code>，因为运算符 <code>*</code>具有比<code>+</code>有更的优先级，所以它首先乘以<code>3 * 2</code>，然后加上<code>7</code>。</p>
<p>这里，具有最高优先级的运算符放在表的顶部，具有最低优先级的运算符出现在底部。 在表达式中，将首先计算较高优先级运算符。</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">分类</th>
                <th style="text-align:center">描述</th>
                <th style="text-align:center">关联性</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">后缀</td>
                <td style="text-align:center">()[]-&gt;.++ —</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">一元</td>
                <td style="text-align:center">+ -!~++ —(type)*&amp;sizeof</td>
                <td style="text-align:center">右到左</td>
            </tr>
            <tr>
                <td style="text-align:center">乘法</td>
                <td style="text-align:center">*/ %</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">加法</td>
                <td style="text-align:center">+ -</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">移位</td>
                <td style="text-align:center">&lt;&lt;&gt;&gt;</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">关系</td>
                <td style="text-align:center">&lt;&lt;=&gt;&gt;=</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">相等</td>
                <td style="text-align:center">==!=</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">按位AND</td>
                <td style="text-align:center">&amp;</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">按位XOR</td>
                <td style="text-align:center">^</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">按位OR</td>
                <td style="text-align:center">\</td>
                <td style="text-align:center"></td>
                <td>左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">逻辑AND</td>
                <td style="text-align:center">&amp;&amp;</td>
                <td style="text-align:center">左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">逻辑OR</td>
                <td style="text-align:center">\</td>
                <td style="text-align:center">\</td>
                <td></td>
                <td>左到右</td>
            </tr>
            <tr>
                <td style="text-align:center">条件</td>
                <td style="text-align:center">?:</td>
                <td style="text-align:center">右到左</td>
            </tr>
            <tr>
                <td style="text-align:center">分配</td>
                <td style="text-align:center">=+=-=*=/= %=&gt;&gt;= &lt;&lt;= &amp;= ^= \</td>
                <td style="text-align:center">=</td>
                <td>右到左</td>
            </tr>
            <tr>
                <td style="text-align:center">逗号</td>
                <td style="text-align:center">,</td>
                <td style="text-align:center">左到右</td>
            </tr>
        </tbody>
    </table>
</div>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群搭建</title>
    <url>/18864.html</url>
    <content><![CDATA[<p>其实本节的文章我在很久之前就已经发过了一次，但不够详细，层次不轻。我今天部署的时候看的够呛(虽然也是部署成功了)，也算是对以前的坑，做个忏悔吧。本文可能会比较boring，但请相信这并不是我的本意。这一定是最精简的笔记之一，相信我这绝对不是混水。</p>
<p>本文主要分三大部分，他们分别是系统初始化、安装docker、安装Kubernetes，测试验证与删库跑路</p>
<a id="more"></a>
<h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3>
<blockquote>
    <p>请注意后面的单词all，代表所有(master、node)</p>
    <p>Master：仅在master上</p>
    <p>node: 仅在node上</p>
</blockquote>
<h4 id="关闭防火墙-all"><a href="#关闭防火墙-all" class="headerlink" title="关闭防火墙(all)"></a>关闭防火墙(<code>all</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">## 临时关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">## 永久关闭</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">## 验证防火墙是否关闭</span></span><br><span class="line">systemctl status firewalld</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>效果如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gne8fmrrrpj31cw0h6dl3.jpg" alt=""></p>
<h4 id="关闭selinux-all"><a href="#关闭selinux-all" class="headerlink" title="关闭selinux(all)"></a>关闭selinux(<code>all</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 永久</span></span><br><span class="line">sed -i <span class="string">'s/enforcing/disabled/'</span> /etc/selinux/config</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="关闭swap-all"><a href="#关闭swap-all" class="headerlink" title="关闭swap(all)"></a>关闭swap(<code>all</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 临时</span></span><br><span class="line">swapoff -a </span><br><span class="line"><span class="comment"># 永久</span></span><br><span class="line">sed  -ri <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一条命令完成所有</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; setenforce 0 &amp;&amp; swapoff -a &amp;&amp; systemctl status firewalld</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="设置主机名称-all"><a href="#设置主机名称-all" class="headerlink" title="设置主机名称(all)"></a>设置主机名称(<code>all</code>)</h4>
<figure class="highlight dsconfig">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 设置名称(k8s-m-1)忽略大写字母</span></span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">master</span></span><br><span class="line"><span class="string">#</span> 验证</span><br><span class="line"><span class="string">hostname</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="时间同步-All"><a href="#时间同步-All" class="headerlink" title="时间同步(All)"></a>时间同步(<code>All</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">yum install -y ntpdate  &amp;&amp; ntpdate time.windows.com</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="在Master添加Hostname-master"><a href="#在Master添加Hostname-master" class="headerlink" title="在Master添加Hostname(master)"></a>在<code>Master</code>添加Hostname(<code>master</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">masterIp master</span><br><span class="line">node1Ip node1</span><br><span class="line">node2Ip node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.50.182	 master</span><br><span class="line">192.168.50.252   node</span><br><span class="line">EOF</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>验证，此时<code>ping node</code>， 看是否能ping通</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gne92s7tj7j31800ge41c.jpg" alt=""></p>
<h4 id="将桥接的IPV4-流量传递到iptables的链-all"><a href="#将桥接的IPV4-流量传递到iptables的链-all" class="headerlink" title="将桥接的IPV4 流量传递到iptables的链(all)"></a>将桥接的IPV4 流量传递到iptables的链(<code>all</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line">sysctl --system</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3>
<h4 id="删除docker-可选"><a href="#删除docker-可选" class="headerlink" title="删除docker(可选)"></a>删除docker(可选)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># You can use scripts for one click installation，You may need to type enter at the end</span></span><br><span class="line"><span class="comment"># remove docker </span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="comment"># Set up repository</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">wget https:/mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum -y install docker-18.06.1.ce-3.e17</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Use Aliyun Docker</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># install docker from yum</span></span><br><span class="line">yum install  -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># cat version </span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像加速</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://etdea28s.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># reload</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 配置开启自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># start docker</span></span><br><span class="line">systemctl restart docker</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>验证docker镜像加速</strong></p>
<p>在终端上输入<code>docker info</code>,效果图如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gne9v1z6acj30ks03q3yn.jpg" alt=""></p>
<p>完成～</p>
<h3 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h3>
<h4 id="配置阿里镜像源-all"><a href="#配置阿里镜像源-all" class="headerlink" title="配置阿里镜像源(all)"></a>配置阿里镜像源(all)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="安装-kubectl-kubelet-kubeadm-all"><a href="#安装-kubectl-kubelet-kubeadm-all" class="headerlink" title="安装 kubectl kubelet kubeadm(all)"></a>安装 kubectl kubelet kubeadm(<code>all</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Ignore automatic updates</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"exclude=kube*"</span> &gt;&gt; /etc/yum.conf</span><br><span class="line"><span class="comment"># install kubectl kubelet kubeadm</span></span><br><span class="line">yum install -y kubectl kubelet kubeadm --disableexcludes=kubernetes</span><br><span class="line"><span class="comment">#--disableexcludes=kubernetes  禁掉除了这个之外的别的仓库</span></span><br><span class="line"><span class="comment"># set boot on opening computer</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="kubeadm初始化-Master"><a href="#kubeadm初始化-Master" class="headerlink" title="kubeadm初始化(Master)"></a>kubeadm初始化(<code>Master</code>)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=masterIp   \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--service-cidr=10.10.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.122.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment"># eg  </span></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.50.182   \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果没有Error，即kubeadm开始初始化成功</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnea5d1zctj31ek0b240h.jpg" alt=""></p>
<p>等上几分钟，初始化成功，如下图</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gneaijhntij31mw0l6jup.jpg" alt=""></p>
<p><strong>开启集群(master)</strong></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">kubectl get node</span><br><span class="line"><span class="comment"># 正常打印出信息即，成功</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>节点加入集群(node)</strong></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line">kubeadm join 192.168.50.182:6443 --token 7t70cl.hr22v89g7wkqojdf \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:d0541c10506744981838a7d4ce504eb69d28fdcfc8e1261373505c42047be33f</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这个是初始化完成后，系统给的。请以自己输出为准</p>
<figure class="highlight gauss">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta"># 默认token24hour后过期，获取新token命令如下：</span></span><br><span class="line">kubeadm <span class="built_in">token</span> <span class="keyword">create</span> --<span class="keyword">print</span>-join-command</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>部署CNI网络组件</strong></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 由于是国外的源，国内无法访问。我们需要添加镜像，若存在，则忽略</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"199.232.28.133 raw.githubusercontent.com"</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署CNI网络组件</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight clean">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 开启IPVS，修改ConfigMap的kube-<span class="keyword">system</span>/kube-proxy中的模式为ipvs</span><br><span class="line">kubectl edit cm kube-proxy -n kube-<span class="keyword">system</span> </span><br><span class="line"># 将空的data -&gt; ipvs -&gt; mode中替换如下</span><br><span class="line">mode: <span class="string">"ipvs"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk82xypglpj30rg0eo431.jpg" alt=""></p>
<p>此时已经全部就绪了，如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnebsqe1pwj310g03sq3g.jpg" alt=""></p>
<h3 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># kubectl create deployment NAME --image=image -- [COMMAND] [args...] [options]</span></span><br><span class="line"><span class="comment"># 简单部署nginx</span></span><br><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line"><span class="comment"># 对外暴露端口</span></span><br><span class="line">kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pod,svc</span><br><span class="line"><span class="comment"># 查看命名空间</span></span><br><span class="line">kubectl get all -n kube-system</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>部署成功示意图</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnebxc1qlfj3114032weu.jpg" alt=""></p>
<p>向外暴露随机端口</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnebyb224zj315q03i0t8.jpg" alt=""></p>
<p>访问集群中任意一个ip</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnec5gpwbij30ni0gogn2.jpg" alt=""></p>
<p>完成～</p>
<p>补充，删除部署的服务</p>
<figure class="highlight livecodeserver">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">kubectl <span class="built_in">get</span> deployment </span><br><span class="line"><span class="comment"># 我们只需要删除对应的deploy 即可</span></span><br><span class="line">kubectl <span class="built_in">delete</span> deployment nginx</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnec92m03hj30wm03q0sv.jpg" alt=""></p>
<p>删除成功后，已经找不到nginx的影子，完成</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnece8de4uj31w40bkgr2.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>本节我们对使用<code>kubeadm</code>工具快速搭建搭建了Kubernetes的集群，系统初始化，记得关闭防火墙、分区等哦。</p>
<p>如果对你有帮助，感觉不错。可以推荐给朋友哦，让他拿着笔记部署，怎一个香字了得，加油，冲冲冲～</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>docker</tag>
        <tag>容器编排</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL优化</title>
    <url>/507251385.html</url>
    <content><![CDATA[<p>mysql优化老生常谈了，但却也离不开业务。脱离业务来讲mysql可以从两个方面进行优化</p>
<ul>
    <li>
        <p>安全优化（业务持续性）</p>
    </li>
    <li>
        <p>性能优化（业务高效性）</p>
    </li>
</ul>
<p>所谓优化，个人认为有两大需要提前知道的<strong>稳定性和业务可持续性通常比性能更重要</strong>，<strong>优化是由业务需要驱使的</strong></p>
<p>通常优化也与操作系统、运行环境等息息相关，结合业务适合自己才是最好的。</p>
<h2 id="安全优化"><a href="#安全优化" class="headerlink" title="安全优化"></a>安全优化</h2>
<p>足够强度的安全是保证业务正常运行的基石，安全优化通常可以以系统安全，应用程序安全，与sql安全。</p>
<h3 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h3>
<blockquote>
    <p>具体详情请参考Linux系统安全</p>
</blockquote>
<p><strong>物理安全</strong></p>
<p>物理环境安全，小微企业一般使用云服务器，大型企业一般有多个机房，实现异地多活</p>
<p><strong>防火墙策略、关闭或切换不必要的端口</strong></p>
<blockquote>
    <ol>
        <li>修改常见应用默认端口，22、3306、27017、6379等</li>
    </ol>
</blockquote>
<p><strong>账户安全</strong></p>
<p>用户连接权限、用户权限</p>
<blockquote>
    <ol>
        <li>禁止root远程</li>
        <li>账号管理（密码强度、用户权限）</li>
    </ol>
</blockquote>
<p><strong>源代码文件目录权限管理</strong></p>
<p><strong>备份</strong>等</p>
<h3 id="MySQL安全"><a href="#MySQL安全" class="headerlink" title="MySQL安全"></a>MySQL安全</h3>
<blockquote>
    <p><a href="https://www.cnblogs.com/doublexi/p/9732274.html" target="_blank" rel="noopener">https://www.cnblogs.com/doublexi/p/9732274.html</a></p>
</blockquote>
<p>MySQL版本的选择</p>
<p>MySQL的命名机制使用由3个数字和一个后缀组成的版本号。例如，像mysql-5.0.9-beta的版本号这样解释：</p>
<p>数字(5)是主版本号，描述了文件格式。所有版本5的发行都有相同的文件格式。</p>
<p>数字(0)是发行级别。主版本号和发行级别组合到一起便构成了发行序列号。</p>
<p>数字(9)是在此发行系列的版本号，随每个新分发版递增。通常你需要已经选择的发行(release)的最新版本(版本)。</p>
<p>每次更新后，版本字符串的最后一个数字递增。如果相对于前一个版本增加了新功能或有微小的不兼容性，字符串的第二个数字递增。如果文件格式改变，第一个数字递增。</p>
<p>后缀显示发行的稳定性级别。通过一系列后缀显示如何改进稳定性。可能的后缀有：</p>
<p><strong>·alpha表明发行包含大量未被彻底测试的新代码</strong>。已知的缺陷应该在新闻小节被记录。请参见附录D：MySQL变更史。在大多数alpha版本中也有新的命令和扩展。alpha版本也可能有主要代码更改等开发。但我们在发布前一定对其进行测试。</p>
<p><strong>·beta意味着该版本功能是完整的</strong>，并且所有的新代码被测试了，没有增加重要的新特征，应该没有已知的缺陷。当alpha版本至少一个月没有出现报导的致命漏洞，并且没有计划增加导致已经实施的功能不稳定的新功能时，版本则从alpha版变为beta版。</p>
<p>在以后的beta版、发布版或产品发布中，所有API、外部可视结构和SQL命令列均不再更改。</p>
<p><strong>·rc是发布代表</strong>；是一个发行了一段时间的beta版本，看起来应该运行正常。只增加了很小的修复。(发布代表即以前所称的gamma版)</p>
<p>·如果没有后缀，这意味着该版本已经在很多地方运行一段时间了，而且没有非平台特定的缺陷报告。只增加了关键漏洞修复修复。这就是我们称为一个产品(稳定)或“通用”版本的东西。</p>
<p>MySQL的命名机制于其它产品稍有不同。一般情况，我们可以很放心地使用已经投放市场两周而没有被相同发布系列的新版本所代替的版本。</p>
<ul>
    <li>稳定不要最新：最新GA版超过10个月或比最新GA版晚3、4个版本的GA版。</li>
    <li>前后无大BUG：要选择前后几个月没有<strong>大的BUG修复的版本</strong>，而不是大量<strong>修复BUG的集中版本</strong>。</li>
    <li>向后少更新：最好向后较长时间没有更新发布的版本，<strong>若目标版本修复的BUG巨多，向前推进一个版本号。</strong></li>
    <li>兼容开发：验证功能瓶颈、性能瓶颈，要考虑开发人员开发程序使用的版本是否兼容你选的版本</li>
    <li>测试先行：作为内部开发测试数据库环境，跑大概3-6个月的时间。</li>
    <li>非核心先行：优先企业非核心业务采用新版本的数据库GA版本软件。</li>
</ul>
<h4 id="用户安全"><a href="#用户安全" class="headerlink" title="用户安全"></a>用户安全</h4>
<p><strong>禁止root账户远程访问</strong></p>
<p>root权限太高，拥有安全隐患，root只允许本地登陆</p>
<p><strong>mysql用户登录shell为nologin</strong></p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">usermod -s /sbin/nologin mysql</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>对MySQL运行用户降权，以普通用户身份运行MySQL</strong></p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>删除匿名账号和空口令账号</strong></p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 删除空密码用户</span></span><br><span class="line">delete from mysql.user <span class="built_in">where</span> user is NULL or Password IS NULL;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>用户与权限管理</strong></p>
<p>遵循权限最小化原则。</p>
<h4 id="连接安全"><a href="#连接安全" class="headerlink" title="连接安全"></a>连接安全</h4>
<p>修改默认端口</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">port=8912</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="容灾"><a href="#容灾" class="headerlink" title="容灾"></a>容灾</h4>
<p>在误删除数据的情况下，可以通过二进制日志恢复到某个时间点</p>
<h4 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h4>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 查看bin log（sql）</span><br><span class="line">show variables like &#39;%log_bin%&#39;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu5zib6numj60p40ag75902.jpg" alt="image-20210905193857001"></p>
<p>修改MySQL配置文件my.cnf，加入如下两行</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">server-id = 1</span><br><span class="line">log_bin = /data/mysql/mysql-bin</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>重启服务</p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">效果 sql与索引优化&gt;Schema设计&gt;数据库实例优化&gt;文件系统&gt;操作系统&gt;硬件优化</span><br><span class="line">成本 硬件优化&gt;操作系统&gt;文件系统&gt;数据库实例优化&gt;Schema设计&gt;sql与索引优化</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h3>
<h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">真实的硬件（PC Server）: DELL  R系列 ，华为，浪潮，HP，联想</span><br><span class="line">云产品：ECS、数据库RDS、DRDS</span><br><span class="line">IBM 小型机 P6  570  595   P7 720  750 780     P8</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4>
<blockquote>
    <p>根据业务场景选择</p>
</blockquote>
<p>OLTP \ OLAP<br>IO密集型：线上系统，OLTP主要是IO密集型的业务，高并发<br>CPU密集型：数据分析数据处理，OLAP，cpu密集型的，需要CPU高计算能力（i系列，IBM power系列）<br>CPU密集型： I 系列的，主频很高，核心少<br>IO密集型： E系列（至强），主频相对低，核心数量多</p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4>
<p>建议2-3倍cpu核心数量 （ECC）</p>
<h4 id="磁盘选择"><a href="#磁盘选择" class="headerlink" title="磁盘选择"></a>磁盘选择</h4>
<p>SATA-III SAS Fc SSD（sata） pci-e ssd Flash<br>主机 RAID卡的BBU(Battery Backup Unit)关闭</p>
<h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4>
<p>根据存储数据种类的不同，选择不同的存储设备<br>配置合理的RAID级别(raid5、raid10、热备盘)<br>r0 :条带化 ,性能高<br>r1 :镜像，安全<br>r5 :校验+条带化，安全较高+性能较高（读），写性能较低 （适合于读多写少）<br>r10：安全+性能都很高，最少四块盘，浪费一半的空间（高IO要求）</p>
<h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4>
<p>1、硬件买好的（单卡单口）<br>2、网卡绑定（bonding），交换机堆叠<br>以上问题，提前规避掉。</p>
<h3 id="操作系统优化"><a href="#操作系统优化" class="headerlink" title="操作系统优化"></a>操作系统优化</h3>
<h4 id="Swap调整"><a href="#Swap调整" class="headerlink" title="Swap调整"></a>Swap调整</h4>
<figure class="highlight vim">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">echo</span> <span class="number">0</span> &gt;/proc/sys/<span class="keyword">vm</span>/swappiness的内容改成<span class="number">0</span>（临时），</span><br><span class="line">/etc/sysctl.<span class="keyword">conf</span></span><br><span class="line">上添加<span class="keyword">vm</span>.swappiness=<span class="number">0</span>（永久）</span><br><span class="line">sysctl -<span class="keyword">p</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。<br>当然，这个参数只能减少使用swap的概率，并不能避免Linux使用swap。</p>
<p>修改MySQL的配置参数innodb_flush_method，开启O_DIRECT模式<br>这种情况下，InnoDB的buffer pool会直接绕过文件系统cache来访问磁盘，但是redo log依旧会使用文件系统cache。值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多</p>
<h4 id="IO调度策略"><a href="#IO调度策略" class="headerlink" title="IO调度策略"></a>IO调度策略</h4>
<p>raid、no lvm、ext4或xfs、ssd、IO调度策略</p>
<h3 id="数据库实例优化"><a href="#数据库实例优化" class="headerlink" title="数据库实例优化"></a>数据库实例优化</h3>
<p>查看系统配置</p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">show variables like “xxx”</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>查看状态</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4>
<h5 id="max-connect-errors"><a href="#max-connect-errors" class="headerlink" title="max_connect_errors"></a><strong>max_connect_errors</strong></h5>
<p> max_connect_errors是一个mysql中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码等情况，当超过指定次数，mysql服务器将禁连接请求，</p>
<p>直到mysql服务器重启或通过flush hosts命令清空此host的相关信息 max_connect_errors的值与性能并无太大关系。</p>
<figure class="highlight jboss-cli">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">修改<span class="string">/etc/my.cnf</span>文件，在[mysqld]下面添加如下内容</span><br><span class="line">max_<span class="keyword">connect</span>_errors=1000</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="Max-connections"><a href="#Max-connections" class="headerlink" title="Max_connections"></a><strong>Max_connections</strong></h5>
<blockquote>
    <p>Mysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值</p>
</blockquote>
<p>开启数据库时,临时设置一个比较大的测试值, 观察show status like ‘Max_used_connections’;变化<br>如果max_used_connections跟max_connections相同,那么就是max_connections设置过低或者超过服务器的负载上限了，低于10%则设置过大. </p>
<h5 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a><strong>back_log</strong></h5>
<blockquote>
    <p> mysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。<br>back_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它</p>
</blockquote>
<p><u><em>判断依据</em></u></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">show full processlist</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>发现大量的待连接进程时，就需要加大back_log或者加大max_connections的值</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># vim /etc/my.cnf </span></span><br><span class="line">back_log=xxx</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="wait-timeout"><a href="#wait-timeout" class="headerlink" title="wait_timeout"></a><strong>wait_timeout</strong></h5>
<blockquote>
    <p>wait_timeout：指的是mysql在关闭一个非交互的连接之前所要等待的秒数，如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用。长连接的应用，为了不去反复的回收和分配资源，降低额外的开销。</p>
</blockquote>
<p>如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低</p>
<p><strong>interactive_timeout</strong></p>
<blockquote>
    <p> 如果设置太大，容易造成连接打开时间过长造成资源损耗，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低</p>
</blockquote>
<p>关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为7200</p>
<h5 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h5>
<p>key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度</p>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">临时表的创建有关（多表链接、子查询中、union）</span><br><span class="line">     在有以上查询语句出现的时候，需要创建临时表，用完之后会被丢弃</span><br><span class="line">     临时表有两种创建方式：</span><br><span class="line">                        内存中-------&gt;key_buffer_size</span><br><span class="line">                        磁盘上-------&gt;ibdata1(<span class="number">5.6</span>)</span><br><span class="line">                                      ibtmp1 (<span class="number">5.7</span>）</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4>
<h5 id="sort-buffer-size"><a href="#sort-buffer-size" class="headerlink" title="sort_buffer_size"></a>sort_buffer_size</h5>
<blockquote>
    <p>每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速</p>
</blockquote>
<figure class="highlight crystal">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ORDER BY </span><br><span class="line">GROUP BY</span><br><span class="line">distinct</span><br><span class="line"><span class="class"><span class="keyword">union</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Sort_Buffer_Size并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。<br>列如：500个连接将会消耗500*sort_buffer_size（2M）=1G内存</p>
<p><strong>配置方法</strong><br>修改/etc/my.cnf文件，在[mysqld]下面添加如下：<br>sort_buffer_size=1M</p>
<h5 id="max-allowed-packet"><a href="#max-allowed-packet" class="headerlink" title="max_allowed_packet"></a>max_allowed_packet</h5>
<blockquote>
    <p>mysql根据配置文件会限制，server接受的数据包大小</p>
</blockquote>
<p>有时候大的插入和更新会受max_allowed_packet参数限制，导致写入或者更新失败，更大值是1GB，必须设置1024的倍数</p>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">32</span>M</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="join-buffer-size"><a href="#join-buffer-size" class="headerlink" title="join_buffer_size"></a>join_buffer_size</h5>
<p>用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。<br>尽量在SQL与方面进行优化，效果较为明显。<br>优化的方法：在on条件列加索引，至少应当是有MUL索引</p>
<h5 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h5>
<blockquote>
    <p>服务器线程缓存，这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时,那么客户端的线程将被放到缓存中以响应下一个客户而不是销毁(前提是缓存数未达上限),如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能</p>
</blockquote>
<p>通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。<br>设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。<br>服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left">Variable_name</th>
                <th style="text-align:left">Value</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left">Threads_cached</td>
                <td style="text-align:left">178</td>
                <td>当前此时此刻线程缓存中有多少空闲线程</td>
            </tr>
            <tr>
                <td style="text-align:left">Threads_connected</td>
                <td style="text-align:left">78</td>
                <td>当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数</td>
            </tr>
            <tr>
                <td style="text-align:left">Threads_created</td>
                <td style="text-align:left">479</td>
                <td>从最近一次服务启动，已创建线程的数量，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗cpu SYS资源，可以适当增加配置文件中thread_cache_size值</td>
            </tr>
            <tr>
                <td style="text-align:left">Threads_running</td>
                <td style="text-align:left">2</td>
                <td>当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态</td>
            </tr>
        </tbody>
    </table>
</div>
<p>Threads_created ：一般在架构设计阶段，会设置一个测试值，做压力测试。<br>结合zabbix监控，看一段时间内此状态的变化。<br>如果在一段时间内，Threads_created趋于平稳，说明对应参数设定是OK。<br>如果一直陡峭的增长，或者出现大量峰值，那么继续增加此值的大小，在系统资源够用的情况下（内存）</p>
<h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h5>
<blockquote>
    <p>对于InnoDB表来说，innodb_buffer_pool_size的作用就相当于key_buffer_size对于MyISAM表的作用一样。</p>
</blockquote>
<p><em><u>配置依据</u></em></p>
<p>InnoDB使用该参数指定大小的内存来缓冲数据和索引。</p>
<p>对于单独的MySQL数据库服务器，最大可以把该值设置成物理内存的80%,一般我们建议不要超过物理内存的70%。</p>
<p><u><em>配置方法</em></u></p>
<p>innodb_buffer_pool_size=2048M</p>
<h5 id="innodb-flush-log-at-trx-commit"><a href="#innodb-flush-log-at-trx-commit" class="headerlink" title="innodb_flush_log_at_trx_commit"></a><strong>innodb_flush_log_at_trx_commit</strong></h5>
<p>主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。<br>0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；<br>1，每次事务的提交都会引起redo日志文件写入、flush磁盘的操作，确保了事务的ACID；<br>2，每次事务提交引起写入日志文件的动作,但每秒钟完成一次flush磁盘操作。</p>
<p><strong><em>配置依据</em></strong><br>实际测试发现，该值对插入数据的速度影响非常大，设置为2时插入10000条记录只需要2秒，设置为0时只需要1秒，而设置为1时则需要229秒。因此，MySQL手册也建议尽量将插入操作合并成一个事务，这样可以大幅提高速度。<br>根据MySQL官方文档，在允许丢失最近部分事务的危险的前提下，可以把该值设为0或2。</p>
<p><u><em>配置方法</em></u></p>
<p>innodb_flush_log_at_trx_commit=1<br>双1标准中的一个1</p>
<h5 id="innodb-thread-concurrency"><a href="#innodb-thread-concurrency" class="headerlink" title="innodb_thread_concurrency"></a><strong>innodb_thread_concurrency</strong></h5>
<blockquote>
    <p>此参数用来设置innodb线程的并发数量，默认值为0表示不限制。</p>
</blockquote>
<p>在官方文档上，对于innodb_thread_concurrency的使用，也给出了一些建议，如下：</p>
<ul>
    <li>如果一个工作负载中，并发用户线程的数量小于64，建议设置innodb_thread_concurrency=0；</li>
    <li>如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置innodb_thread_concurrency=128，<br>并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，</li>
</ul>
<p>假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，<br>性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，<br>建议设置innodb_thread_concurrency参数为80，以避免影响性能。</p>
<p>如果你不希望InnoDB使用的虚拟CPU数量比用户线程使用的虚拟CPU更多（比如20个虚拟CPU），<br>建议通过设置innodb_thread_concurrency 参数为这个值（也可能更低，这取决于性能体现），</p>
<p>如果你的目标是将MySQL与其他应用隔离，你可以l考虑绑定mysqld进程到专有的虚拟CPU。<br>但是需 要注意的是，这种绑定，在myslqd进程一直不是很忙的情况下，可能会导致非最优的硬件使用率。在这种情况下，<br>你可能会设置mysqld进程绑定的虚拟 CPU，允许其他应用程序使用虚拟CPU的一部分或全部。<br>在某些情况下，最佳的innodb_thread_concurrency参数设置可以比虚拟CPU的数量小。<br>定期检测和分析系统，负载量、用户数或者工作环境的改变可能都需要对innodb_thread_concurrency参数的设置进行调整</p>
<p>128 ——-&gt; top cpu<br><u><em>设置标准</em></u><br>1、当前系统cpu使用情况，均不均匀<br>top</p>
<p>2、当前的连接数，有没有达到顶峰<br>show status like ‘threads_%’;<br>show processlist;<br>（3）配置方法：<br>innodb_thread_concurrency=8<br>方法:</p>
<pre><code>   1. 看top ,观察每个cpu的各自的负载情况
2. 发现不平均,先设置参数为cpu个数,然后不断增加(一倍)这个数值
3. 一直观察top状态,直到达到比较均匀时,说明已经到位了.
</code></pre>
<h5 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a><strong>innodb_log_buffer_size</strong></h5>
<figure class="highlight objectivec">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，对于较大的事务，可以增大缓存大小。</span><br><span class="line">innodb_log_buffer_size=<span class="number">128</span>M</span><br><span class="line">设定依据：</span><br><span class="line"><span class="number">1</span>、大事务： 存储过程调用 <span class="built_in">CALL</span></span><br><span class="line"><span class="number">2</span>、多事务</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="innodb-log-file-size-100M"><a href="#innodb-log-file-size-100M" class="headerlink" title="innodb_log_file_size = 100M"></a><strong><em>innodb_log_file_size = 100M</em></strong></h5>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">设置 ib_logfile0  ib_logfile1 </span><br><span class="line">此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能.</span><br><span class="line">innodb_log_file_size &#x3D; 100M</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="innodb-log-files-in-group-3"><a href="#innodb-log-files-in-group-3" class="headerlink" title="innodb_log_files_in_group = 3"></a><strong>innodb_log_files_in_group = 3</strong></h5>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="read-buffer-size-1M"><a href="#read-buffer-size-1M" class="headerlink" title="read_buffer_size = 1M"></a><strong>read_buffer_size = 1M</strong></h5>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和 sort_buffer_size一样，该参数对应的分配内存也是每个连接独享</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="read-rnd-buffer-size-1M"><a href="#read-rnd-buffer-size-1M" class="headerlink" title="read_rnd_buffer_size = 1M"></a><strong>read_rnd_buffer_size = 1M</strong></h5>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</span><br><span class="line">注：顺序读是指根据索引的叶节点数据就能顺序地读取所需要的行数据。随机读是指一般需要根据辅助索引叶节点中的主键寻找实际行数据，而辅助索引和主键所在的数据段不同，因此访问方式是随机的。</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="bulk-insert-buffer-size-8M"><a href="#bulk-insert-buffer-size-8M" class="headerlink" title="bulk_insert_buffer_size = 8M"></a><strong>bulk_insert_buffer_size = 8M</strong></h5>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">批量插入数据缓存大小，可以有效提高插入效率，默认为8M</span><br><span class="line">tokuDB    percona</span><br><span class="line">myrocks   </span><br><span class="line">RocksDB</span><br><span class="line">TiDB</span><br><span class="line">MongoDB</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h5 id="binary-log"><a href="#binary-log" class="headerlink" title="binary log"></a><strong>binary log</strong></h5>
<figure class="highlight kotlin">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">log-bin=/<span class="keyword">data</span>/mysql-bin</span><br><span class="line">binlog_cache_size = <span class="number">2</span>M <span class="comment">//为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存, 提高记录bin-log的效率。没有什么大事务，dml也不是很频繁的情况下可以设置小一点，如果事务大而且多，dml操作也频繁，则可以适当的调大一点。前者建议是--1M，后者建议是：即 2--4M</span></span><br><span class="line">max_binlog_cache_size = <span class="number">8</span>M <span class="comment">//表示的是binlog 能够使用的最大cache 内存大小</span></span><br><span class="line">max_binlog_size= <span class="number">512</span>M <span class="comment">//指定binlog日志文件的大小，如果当前的日志大小达到max_binlog_size，还会自动创建新的二进制日志。你不能将该变量设置为大于1GB或小于4096字节。默认值是1GB。在导入大容量的sql文件时，建议关闭sql_log_bin，否则硬盘扛不住，而且建议定期做删除。</span></span><br><span class="line">expire_logs_days = <span class="number">7</span> <span class="comment">//定义了mysql清除过期日志的时间。</span></span><br><span class="line">二进制日志自动删除的天数。默认值为<span class="number">0</span>,表示“没有自动删除”。</span><br><span class="line">log-bin=/mysql-bin</span><br><span class="line">binlog_format=row </span><br><span class="line">sync_binlog=<span class="number">1</span></span><br><span class="line">双<span class="number">1</span>标准(基于安全的控制)：</span><br><span class="line">sync_binlog=<span class="number">1</span>   <span class="comment">// 什么时候刷新binlog到磁盘，每次事务commit</span></span><br><span class="line">innodb_flush_log_at_trx_commit=<span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> sql_log_bin=<span class="number">0</span>;</span><br><span class="line">show status like <span class="string">'com_%'</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">basedir</span>=/data/mysql</span><br><span class="line"><span class="attribute">datadir</span>=/data/mysql/data</span><br><span class="line"><span class="attribute">socket</span>=/tmp/mysql.sock</span><br><span class="line"><span class="attribute">log-error</span>=/var/log/mysql.log</span><br><span class="line"><span class="attribute">log_bin</span>=/data/binlog/mysql-bin</span><br><span class="line"><span class="attribute">binlog_format</span>=row</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="attribute">server-id</span>=52</span><br><span class="line"><span class="attribute">gtid-mode</span>=on</span><br><span class="line"><span class="attribute">enforce-gtid-consistency</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">log-slave-updates</span>=1</span><br><span class="line"><span class="attribute">relay_log_purge</span>=0</span><br><span class="line"><span class="attribute">max_connections</span>=1024</span><br><span class="line"><span class="attribute">back_log</span>=128</span><br><span class="line"><span class="attribute">wait_timeout</span>=60</span><br><span class="line"><span class="attribute">interactive_timeout</span>=7200</span><br><span class="line"><span class="attribute">key_buffer_size</span>=16M</span><br><span class="line"><span class="attribute">query_cache_size</span>=64M</span><br><span class="line"><span class="attribute">query_cache_type</span>=1</span><br><span class="line"><span class="attribute">query_cache_limit</span>=50M</span><br><span class="line"><span class="attribute">max_connect_errors</span>=20</span><br><span class="line"><span class="attribute">sort_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">max_allowed_packet</span>=32M</span><br><span class="line"><span class="attribute">join_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">thread_cache_size</span>=200</span><br><span class="line"><span class="attribute">innodb_buffer_pool_size</span>=1024M</span><br><span class="line"><span class="attribute">innodb_flush_log_at_trx_commit</span>=1</span><br><span class="line"><span class="attribute">innodb_log_buffer_size</span>=32M</span><br><span class="line"><span class="attribute">innodb_log_file_size</span>=128M</span><br><span class="line"><span class="attribute">innodb_log_files_in_group</span>=3</span><br><span class="line"><span class="attribute">binlog_cache_size</span>=2M</span><br><span class="line"><span class="attribute">max_binlog_cache_size</span>=8M</span><br><span class="line"><span class="attribute">max_binlog_size</span>=512M</span><br><span class="line"><span class="attribute">expire_logs_days</span>=7</span><br><span class="line"><span class="attribute">read_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">read_rnd_buffer_size</span>=2M</span><br><span class="line"><span class="attribute">bulk_insert_buffer_size</span>=8M</span><br><span class="line">[client]</span><br><span class="line"><span class="attribute">socket</span>=/tmp/mysql.sock</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="sql与索引优化"><a href="#sql与索引优化" class="headerlink" title="sql与索引优化"></a>sql与索引优化</h2>
<h3 id="sql使用建议"><a href="#sql使用建议" class="headerlink" title="sql使用建议"></a>sql使用建议</h3>
<p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
<p>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： </p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line">可以在<span class="keyword">num</span>上设置默认值<span class="number">0</span>，确保表中<span class="keyword">num</span>列没有<span class="literal">null</span>值，然后这样查询：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">0</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>3.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>
<p>4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： </p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span>=<span class="number">20</span>   </span><br><span class="line">可以这样查询：   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span>   </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>5.in 和 not in 也要慎用，否则会导致全表扫描，如： </p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   </span><br><span class="line">对于连续的数值，能用 <span class="keyword">between</span> 就不要用 <span class="keyword">in</span> 了：   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>6.下面的查询也将导致全表扫描：</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%abc%'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>/<span class="number">2</span>=<span class="number">100</span>   </span><br><span class="line">应改为:   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">100</span>*<span class="number">2</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">1</span>,<span class="number">3</span>)=<span class="string">'abc'</span><span class="comment">--name以abc开头的id   </span></span><br><span class="line">应改为:   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'abc%'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>9.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 </p>
<p>10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 </p>
<p>11.不要写一些没有意义的查询，如需要生成一个空表结构</p>
<p>12.很多时候用 exists 代替 in 是一个好的选择： </p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> b)   </span><br><span class="line">用下面的语句替换：   </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> <span class="keyword">num</span>=a.num)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>13.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。 </p>
<p>14.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，<br>因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 </p>
<p>15.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 </p>
<p>16.尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，<br>其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 </p>
<p>17.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。 </p>
<p>18.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
<p>19.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>
<p>20.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，<br>以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
<p>21.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。 </p>
<p>22.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 </p>
<p>23.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>
<p>24.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。</p>
<p>在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>
<p>25.尽量避免大事务操作，提高系统并发能力。</p>
<p>26.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
<h3 id="sql调优思路"><a href="#sql调优思路" class="headerlink" title="sql调优思路"></a>sql调优思路</h3>
<ol>
    <li>slow_query_log 收集慢日志 结合explain分析索引命中与进行索引优化</li>
    <li>减少索引扫描行数，对于慢sql进行优化</li>
    <li>建立联合索引，由于联合索引的每个叶子节点都包含检索字段信息，按最左原则匹配，按照其他条件过滤，减少回表的数据量</li>
    <li>使用虚拟列和联合索引来提升复杂查询执行效率</li>
</ol>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3>
<ol>
    <li>没有查询条件，或者查询条件没有建立索引</li>
    <li>查询结果集是原表中的大部分数据</li>
    <li>索引本身失效，统计数据不真实</li>
    <li>查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)</li>
    <li>隐式转换导致索引失效</li>
    <li>&lt;&gt; ，not in 不走索引（辅助索引）</li>
    <li>ike “%_” 百分号在最前面不走</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储引擎</title>
    <url>/1336292242.html</url>
    <content><![CDATA[<blockquote>
    <p>Server version: 8.0.20 Source distribution</p>
</blockquote>
<p><code>SHOW ENGINES</code></p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left">Engine</th>
                <th style="text-align:left">Support</th>
                <th style="text-align:left">Comment</th>
                <th style="text-align:left">Transactions</th>
                <th style="text-align:left">XA</th>
                <th style="text-align:left">Savepoints</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left">FEDERATED</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">Federated MySQL storage engine</td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">MEMORY</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">Hash based, stored in memory, useful for temporary…</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">InnoDB</td>
                <td style="text-align:left">DEFAULT</td>
                <td style="text-align:left">Supports transactions, row-level locking, and fore…</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">YES</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">PERFORMANCE_SCHEMA</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">Performance Schema</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">MyISAM</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">MyISAM storage engine</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">MRG_MYISAM</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">Collection of identical MyISAM tables</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">BLACKHOLE</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">/dev/null storage engine (anything you write to it…</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">CSV</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">CSV storage engine</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">ARCHIVE</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left">Archive storage engine</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">NO</td>
            </tr>
        </tbody>
    </table>
</div>
<p>MySQL中常用的存储引擎有InnoDB、MyISAM、MEMORY、ARCHIVE和CSV</p>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2>
<h3 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h3>
<p>支持事务<br>锁级别为行锁，比MyISAM存储引擎支持更高的并发<br>能够通过二进制日志恢复数据<br>支持外键操作<br>在索引存储上，索引和数据存储在同一个文件中，默认按照B+Tree组织索引的结构。同时，主键索引的叶子节点存储完整的数据记录，非主键索引的叶子节点存储主键的值。</p>
<p><strong>在MySQL 5.6版本之后，默认使用InnoDB存储引擎。</strong></p>
<p><strong>在MySQL 5.6版本之后，InnoDB存储引擎支持全文索引。</strong></p>
<h3 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h3>
<p>不支持事务。</p>
<p>锁级别为表锁，在要求高并发的场景下不太适用。</p>
<p>如果数据文件损坏，难以恢复数据。</p>
<p>不支持外键。</p>
<p>在索引存储上，索引文件与数据文件分离。</p>
<p>支持全文索引。</p>
<h3 id="MEMORY存储引擎"><a href="#MEMORY存储引擎" class="headerlink" title="MEMORY存储引擎"></a>MEMORY存储引擎</h3>
<p>不支持TEXT和BLOB数据类型，只支持固定长度的字符串类型。例如，在MEMORY存储引擎中，会将VARCHAR类型自动转化成CHAR类型。</p>
<p>锁级别为表锁，在高并发场景下会成为瓶颈。</p>
<p>通常会被作为临时表使用，存储查询数据时产生中间结果。</p>
<p>数据存储在内存中，重启服务器后数据会丢失。如果是需要持久化的数据，不适合存储在MEMORY存储引擎的数据表中。</p>
<h3 id="ARCHIVE存储引擎"><a href="#ARCHIVE存储引擎" class="headerlink" title="ARCHIVE存储引擎"></a>ARCHIVE存储引擎</h3>
<p>支持数据压缩，在存储数据前会对数据进行压缩处理，适合存储归档的数据。</p>
<p>只支持数据的插入和查询，插入数据后，不能对数据进行更改和删除，而只能查询。</p>
<p>只支持在整数自增类型的字段上添加索引。</p>
<h3 id="CSV存储引擎"><a href="#CSV存储引擎" class="headerlink" title="CSV存储引擎"></a>CSV存储引擎</h3>
<p>主要存储的是csv格式的文本数据，可以直接打开存储的文件进行编辑。</p>
<p>可以将MySQL中某个数据表中的数据直接导出为csv文件，也可以将.csv文件导入数据表中。</p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html</a></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang指针-pointer</title>
    <url>/10091.html</url>
    <content><![CDATA[<p>区别于C/C++中的指针，Go语言中的指针不能进行偏移和运算，是安全指针。</p>
<p>要搞明白Go语言中的指针需要先知道3个概念：指针地址、指针类型和指针取值。</p>
<a id="more"></a>
<h2 id="Go语言中的指针"><a href="#Go语言中的指针" class="headerlink" title="Go语言中的指针"></a>Go语言中的指针</h2>
<blockquote>
    <p>任何程序数据载入内存后，在内存都有他们的地址，这就是指针。而为了保存一个数据在内存中的地址，我们就需要指针变量。</p>
    <p>比如，“永远不要高估自己”这句话，我想把它写入程序中，程序一启动这句话是要加载到内存（假设内存地址0x123456），我在程序中把这段话赋值给变量<code>A</code>，把内存地址赋值给变量<code>B</code>。这时候变量<code>B</code>就是一个指针变量。通过变量<code>A</code>和变量<code>B</code>都能找到我的座右铭。</p>
    <p>Go语言中的指针不能进行偏移和运算，因此Go语言中的指针操作非常简单，我们只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值）。</p>
    <p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用<code>&amp;</code>字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：<code>*int</code>、<code>*int64</code>、<code>*string</code>等。</p>
</blockquote>
<p>取变量指针的语法如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ptr := &amp;v    <span class="comment">// v的类型为T</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ul>
        <li>v:代表被取地址的变量，类型为<code>T</code></li>
        <li>ptr:用于接收地址的变量，ptr的类型就为<code>*T</code>，称做T的指针类型。*代表指针。</li>
    </ul>
</blockquote>
<p>注意：<code>&amp;</code>仅对基本类型适用基本类型(包含int\bool\string，不包含数组、切片等),<code>fmt.printf(%p)</code>使用于所有类型。</p>
<p>示例如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">10</span></span><br><span class="line">	b := &amp;a     <span class="comment">// &amp; 取地址值操作</span></span><br><span class="line">	c := *b     <span class="comment">// * 根据地址值取值操作</span></span><br><span class="line">	fmt.Println(a, reflect.TypeOf(a))  <span class="comment">// 10 int</span></span><br><span class="line">	<span class="comment">// 每次的地址值不一定，若打印出0x开头的即成功获取到该变量地址值</span></span><br><span class="line">	fmt.Println(b, reflect.TypeOf(b))  <span class="comment">// 0xc000014080 *int</span></span><br><span class="line">	fmt.Println(c, reflect.TypeOf(c))  <span class="comment">// 10 int</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><strong>总结：</strong> 取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p>
    <p>变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：</p>
    <ul>
        <li>对变量进行取地址（&amp;）操作，可以获得这个变量的指针变量。</li>
        <li>指针变量的值是指针地址。</li>
        <li>对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。</li>
    </ul>
</blockquote>
<h2 id="Make-or-New"><a href="#Make-or-New" class="headerlink" title="Make or New"></a>Make or New</h2>
<p>导入</p>
<blockquote>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">*a = <span class="number">10</span></span><br><span class="line">fmt.Println(*a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">b[<span class="string">"Payne"</span>] = <span class="number">10</span></span><br><span class="line">fmt.Println(b)</span><br><span class="line"><span class="comment">// runtime error: invalid memory address or nil pointer dereference</span></span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>执行上面的代码会引发panic，为什么呢？ </p>
    <p>在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。</p>
    <p>而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存。</p>
</blockquote>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3>
<p>new是一个内置的函数，它的函数签名如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">new</span><span class="params">(Type)</span> *<span class="title">Type</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type表示类型，new函数只接受一个参数，这个参数是一个类型</span></span><br><span class="line"><span class="comment">// *Type表示类型指针，new函数返回一个指向该类型内存地址的指针。</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">	b := <span class="built_in">new</span>(<span class="keyword">bool</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"%T\n"</span>, a) <span class="comment">// *int</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T\n"</span>, b) <span class="comment">// *bool</span></span><br><span class="line">	fmt.Println(*a)       <span class="comment">// 0</span></span><br><span class="line">	fmt.Println(*b)       <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>示例代码中<code>var a *int</code>只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的new函数对a进行初始化之后就可以正常对其赋值了</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">		a = <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">		*a = <span class="number">10</span></span><br><span class="line">		fmt.Println(*a)  <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3>
<p>make也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(t Type, size ...IntegerType)</span> <span class="title">Type</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>make函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。</p>
</blockquote>
<h3 id="new与make的同与异"><a href="#new与make的同与异" class="headerlink" title="new与make的同与异"></a>new与make的同与异</h3>
<ol>
    <li>二者都是用来做内存分配的。</li>
    <li>make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</li>
    <li>而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库一些概念</title>
    <url>/1376532068.html</url>
    <content><![CDATA[<h1 id="MySQL数据库一些概念"><a href="#MySQL数据库一些概念" class="headerlink" title="MySQL数据库一些概念"></a>MySQL数据库一些概念</h1>
<h2 id="数据库的定义"><a href="#数据库的定义" class="headerlink" title="数据库的定义"></a>数据库的定义</h2>
<p>​ 数据库的定义在某种程度上，数据库代表着一种存储技术，并不局限于某种存储形式。一个简单的数据库可以将数据只存储在某台特定的计算机上，供某个特定的用户使用，而一个复杂的数据库可以将数据分散存储到多台计算机上，能够供成千上万的用户同时使用。从存储容量上来说，一个数据库的存储容量可以小到只能够存储几KB的数据，也可以大到存储TB甚至是PB级别的数据。</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3>
<p>​ 数据库（DataBase，DB）从本质上讲就是一个文件系统，它能够将数据有组织地集合在一起，按照一定的规则长期存储到计算机的磁盘中，并且能够供多个用户共享和使用，同时，用户能够对数据库中的数据进行插入、删除、修改和查询操作。数据库将数据进行集中存储和管理，有效地分离了应用程序和业务数据，降低了应用程序和业务数据之间的耦合性，大大简化了数据的存储和管理工作。同时，数据库提供了对存储数据的统一控制功能。数据除了能够被存储在计算机的磁盘中，还能够被存储在计算机的内存中，所以在某种程度上，可以将数据库分为永久型数据库和内存型数据库。</p>
<h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3>
<p>​ 对于关系型数据库来说，数据表是以一个二维数组的形式来存储和管理数据的，它能够存储和管理数据并操作数据的逻辑结构。通常，一个数据表由行和列组成，一行数据能够表示一条完整的基础信息，所以行在关系型数据库中是组织数据的基本单位；列也被称为字段，它能够表示行的一个属性，同时，每一列都有相应的数据类型和数据长度的定义。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>
<p>​ 关系型数据库中的数据类型表示数据在数据库中的存储格式，其反映了数据在计算机中的存储格式。计算机根据不同的数据类型来组织和存储数据，并为不同数据类型的数据分配不同的存储空间。数据类型在大的分类上可以分为数值类型、日期和时间类型、字符串类型。在关系型数据库中，表中的每个字段都会被指定一种数据类型。例如，表1-1中，将商品编号、商品名称和商品类型定义为字符串类型，将商品价格定义为数值类型（定点数类型），将上架时间定义为日期和时间类型。</p>
<a id="more"></a>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3>
<p>​ 数据库中内置了一些函数，能够很方便地对数据进行数学计算、字符串处理、加密/解密及聚合处理等。相应地，函数可以分为数学函数、字符串函数、日期和时间函数、流程处理函数、加密与解密函数、数据聚合函数、获取数据库信息函数以及数据库中的其他函数等</p>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3>
<p>​ 在关系型数据库中，主键（Primary Key）又称为主码，能够唯一标识数据表中的一行记录。主键可以包含数据表中的一列或者多列，主键不能为空。同时，在同一个数据表中，主键列上不能有两行甚至多行相同的值，也就是说，在同一个数据表中，每行数据对应的主键列的值必须唯一。</p>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3>
<p>​ 外键从本质上讲就是一个引用，它引用的是另外一张表中的一列或者多列数据，被引用的表中的列需要具备主键约束或者唯一性约束。也就是说，被引用的列在其对应的数据表中能够唯一标识一行数据。外键反映的是两个表之间的连接关系。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3>
<p>​ 索引从本质上来讲是一种单独的数据库结构，它能够单独地存储在计算机的磁盘上，包含着对相关数据表中所有数据的引用指针。通过索引能够快速定位并查询出数据表中的一行或者多行数据，而不必进行全表扫描。在某种程度上，数据库的索引和书籍的目录有些类似。当查找书籍中的内容时，往往不会直接翻阅书籍的内容，这样查找起来相当烦琐；如果先根据书籍的目录定位到要查找的内容在书籍中的大概章节，然后再到相关的章节中去查找内容就比较简单了。索引使查询能够快速到达计算机中的某个位置去搜寻数据文件，而不必对所有的数据进行扫描。索引的建立，可以大大提高数据查询的效率</p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3>
<p>​ 视图从本质上来讲是数据库的一种虚表，它是由SELECT查询语句从一张表或者多张表中导出的一种虚表。不能向视图中插入、更新和删除数据，即视图不负责数据的实际存储。当通过视图修改数据时，实际上修改的是构成视图的基本表中的数据，当修改了构成视图的基本表中的数据时，视图中的数据也会随之改变。使用视图能够大大简化数据库中表与表之间复杂的关联查询。</p>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3>
<p>​ 存储过程是一种SQL语句集，经过编译后存储在数据库中，通过指定存储过程的名称和参数信息来调用存储过程，使其完成特定的功能。在创建存储过程的时候，可以自定义变量来存储一些中间结果的数据，也可以在存储过程中定义一些执行逻辑和执行流程。存储过程经过一次编译后可以永久使用（只要不删除存储过程）。将一些复杂的查询逻辑封装在存储过程中重复使用，应用程序只需要调用存储过程的名称并传入相应的参数即可，大大简化了开发和数据查询的复杂度。另外，使用存储过程也可以防止用户直接访问数据表，只需要赋予用户对存储过程的访问权限即可。</p>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3>
<p>​ 触发器从本质上来讲是一种特殊的存储过程。触发器的执行不是由应用程序调用，也不是由手动执行的，而是由数据库中的事件执行的。当对某个表中的数据进行插入、更新和删除操作时，系统会自动执行相应的触发器。在某种程度上，触发器和钩子函数有些类似。应用程序在执行某项操作时，会自动调用相应的钩子函数，执行钩子函数的逻辑。而触发器是对数据表进行操作时自动执行的。当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3>
<p>MySQL中最常用到的存储引擎是InnoDB和MyISAM</p>
<h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2>
<p>​ 在关系型数据库领域中，通常认为数据库系统涉及的软件主要由操作系统、数据库、数据库管理系统、以数据库管理系统为核心的应用开发工具和应用程序等几部分组成。</p>
<ul>
    <li>操作系统（Operating System，OS）：直接运行于计算机硬件上的系统，为计算机中运行的各种软件提供基础环境支持。主流的操作系统包括Windows、UNIX/Linux和Mac OS等。</li>
    <li>通常由某种或某几种高级编程语言编写，描述用户应用需求的应用程序、软件或某种管理系统。</li>
    <li>数据库（DataBase，DB）：主要负责数据的存放，并在一定程度上保证数据的安全性、完整性和可靠性</li>
    <li>数据库管理系统（DataBase Management System，DBMS）：主要用来对数据库进行管理，是数据库系统的核心组成部分。在实际工作中，人们往往不会直接面对数据库，而是通过数据库管理系统对数据库中的数据进行管理和维护。</li>
</ul>
<p>​ 数据库管理员（DataBase Administrator，DBA）：控制数据库整体结构的人，需要承担创建、管理、监控和维护整个数据库的责任，并保证数据库的安全、完整、高可用性与高可靠性。</p>
<h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2>
<p>关系型数据库中专门提供了一种对数据库进行操作和查询的语言，叫作结构化查询语言，英文为Structured Query Language，简称SQL。</p>
<h3 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h3>
<ul>
    <li>
        <p>DDL（Data Definition Language，数据定义语言）：用于定义数据库、数据表和列，可以用来创建、删除、修改数据库和数据表的结构，包含CREATE、DROP和ALTER等语句。</p>
    </li>
    <li>
        <p>DML（Data Manipulation Language，数据操作语言）：用于操作数据记录，可以对数据库中数据表的数据记录进行增加、删除和修改等操作，包含INSERT、DELETE和UPDATE等语句。</p>
    </li>
    <li>
        <p>DCL（Data Control Language，数据控制语言）：用于定义数据库的访问权限和安全级别，主要包含GRANT、REVOKE、COMMIT和ROLLBACK等语句。</p>
    </li>
    <li>
        <p>DQL（Data Query Language，数据查询语言）：用于查询数据表中的数据记录，主要包含SELECT语句。</p>
    </li>
</ul>
<p>​ 关系型数据库提供了SQL语言，使应用程序开发人员与数据库管理和维护人员能够与数据库进行交互。但是在创建数据库和数据表之前，需要对数据库中的数据表进行设计，并能够正确设计出各数据表之间的关联关系。通常使用ER图（Entity Relationship Diagram），也就是实体-关系模型，来进行数据表的设计。ER图是用来描述现实世界的概念模型，在这个模型中有3个基本要素，分别为实体、属性和关系。</p>
<h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3>
<p>​ 关系型数据库提供了SQL语言，使应用程序开发人员与数据库管理和维护人员能够与数据库进行交互。但是在创建数据库和数据表之前，需要对数据库中的数据表进行设计，并能够正确设计出各数据表之间的关联关系。通常使用ER图（Entity Relationship Diagram），也就是实体-关系模型，来进行数据表的设计。ER图是用来描述现实世界的概念模型，在这个模型中有3个基本要素，分别为实体、属性和关系。</p>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2>
<p>​ MySQL的三大范式能够规范开发人员对数据表的设计，使得开发人员能够设计出简洁、优雅的数据表结构。</p>
<h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3>
<p>​ 主要是确保数据表中每个字段的值必须具有原子性，也就是说数据表中每个字段的值为<strong>不可再次拆分</strong>的<strong>最小数据单元</strong>。</p>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3>
<p>指在第一范式的基础上，确保数据表中除了<strong>主键之外的每个字段</strong>都必须<strong>依赖主键</strong>。</p>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3>
<p>在第二范式的基础上，确保数据表中的每一列都和主键字段直接相关</p>
<blockquote>
    <p>也就是说要求数据表中的所有非主键字段不能依赖于其他非主键字段</p>
</blockquote>
<h3 id="反范式"><a href="#反范式" class="headerlink" title="反范式"></a>反范式</h3>
<p>​ 当数据库中的数据量比较大且系统的UV和PV访问频次比较高，若完全按照MySQL的三大范式设计数据表，读数据时会产生大量的关联查询，在一定程度上会影响数据库的读性能。此时，可以通过在数据表中增加冗余字段减少关联来提高数据库的读性能。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>
<p>MySQL技术大全 — 冰河</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains编辑器清理(mac)</title>
    <url>/3686442481.html</url>
    <content><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2>
<p>由于不可描述的原因，我需要将<code>JetBrains</code>的所有已安装的编辑器进行清理。但我们知道MAC上单纯将应用软件中的软件拖入废纸篓是无法进行彻底删除的。</p>
<blockquote>
    <p>Tip: 有<code>Cleaner One Pro</code>或者<code>clean my mac</code> 专业版的（也就是付费版）的朋友可以直接在该软件中进行软件的卸载与清理，具体操作便不再此过多赘述</p>
</blockquote>
<h2 id="关键目录"><a href="#关键目录" class="headerlink" title="关键目录"></a>关键目录</h2>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">~/Library/Application\ Support/JetBrains</span><br><span class="line">~/Library/Logs/JetBrains</span><br><span class="line">~/Library/Preferences/JetBrains.*</span><br><span class="line">~/Library/Caches/JetBrains</span><br><span class="line">/Applications</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3>
<blockquote>
    <p>Tip：建议先将<code>/Applications</code> 中的内容先进行删除</p>
</blockquote>
<figure class="highlight groovy">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">rm -rf <span class="regexp">~/Library/</span>Application\ Support<span class="regexp">/JetBrains/</span>*</span><br><span class="line">rm -rf <span class="regexp">~/Library/</span>Logs<span class="regexp">/JetBrains/</span>*</span><br><span class="line">rm -rf <span class="regexp">~/Library/</span>Preferences/JetBrains.*</span><br><span class="line">rm -rf <span class="regexp">~/Library/</span>Caches<span class="regexp">/JetBrains/</span>*</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="Evalreset-Cleanr-Script"><a href="#Evalreset-Cleanr-Script" class="headerlink" title="Evalreset Cleanr Script"></a>Evalreset Cleanr Script</h2>
<h3 id="Mac-Linux"><a href="#Mac-Linux" class="headerlink" title="Mac/Linux"></a>Mac/Linux</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"><span class="comment"># reset jetbrains ide evals</span></span><br><span class="line"></span><br><span class="line">OS_NAME=$(uname -s)</span><br><span class="line">JB_PRODUCTS=<span class="string">"IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$OS_NAME</span> == <span class="string">"Darwin"</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'macOS:'</span></span><br><span class="line">	</span><br><span class="line">	rm -rf ~/Library/Logs/JetBrains/*</span><br><span class="line">	rm -rf ~/Library/Caches/JetBrains/*</span><br><span class="line">	rm -rf ~/Library/Preferences/JetBrains.*</span><br><span class="line">	<span class="keyword">for</span> PRD <span class="keyword">in</span> <span class="variable">$JB_PRODUCTS</span>; <span class="keyword">do</span></span><br><span class="line">    	rm -rf ~/Library/Preferences/<span class="variable">$&#123;PRD&#125;</span>*/*</span><br><span class="line">    	rm -rf ~/Library/Application\ Support/JetBrains/<span class="variable">$&#123;PRD&#125;</span>*/<span class="built_in">eval</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$OS_NAME</span> == <span class="string">"Linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'Linux:'</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> PRD <span class="keyword">in</span> <span class="variable">$JB_PRODUCTS</span>; <span class="keyword">do</span></span><br><span class="line">    	rm -rf ~/.<span class="variable">$&#123;PRD&#125;</span>*/config/<span class="built_in">eval</span></span><br><span class="line">    	rm -rf ~/.config/<span class="variable">$&#123;PRD&#125;</span>*/<span class="built_in">eval</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">'unsupport'</span></span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'done.'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3>
<figure class="highlight vbscript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">Set</span> oShell = <span class="built_in">CreateObject</span>(<span class="string">"WScript.Shell"</span>)</span><br><span class="line"><span class="keyword">Set</span> oFS = <span class="built_in">CreateObject</span>(<span class="string">"Scripting.FileSystemObject"</span>)</span><br><span class="line">sHomeFolder = oShell.ExpandEnvironmentStrings(<span class="string">"%USERPROFILE%"</span>)</span><br><span class="line">sJBDataFolder = oShell.ExpandEnvironmentStrings(<span class="string">"%APPDATA%"</span>) + <span class="string">"\JetBrains"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> re = <span class="keyword">New</span> <span class="built_in">RegExp</span></span><br><span class="line">re.Global     = <span class="literal">True</span></span><br><span class="line">re.IgnoreCase = <span class="literal">True</span></span><br><span class="line">re.Pattern    = <span class="string">"\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> removeEval(<span class="keyword">ByVal</span> file, <span class="keyword">ByVal</span> sEvalPath)</span><br><span class="line">	bMatch = re.Test(file.Name)</span><br><span class="line">    <span class="keyword">If</span> <span class="keyword">Not</span> bMatch <span class="keyword">Then</span></span><br><span class="line">		<span class="keyword">Exit</span> <span class="keyword">Sub</span></span><br><span class="line">	<span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">If</span> oFS.FolderExists(sEvalPath) <span class="keyword">Then</span></span><br><span class="line">		oFS.DeleteFolder sEvalPath, <span class="literal">True</span> </span><br><span class="line">	<span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> oFS.FolderExists(sHomeFolder) <span class="keyword">Then</span></span><br><span class="line">	<span class="keyword">For</span> <span class="keyword">Each</span> oFile <span class="keyword">In</span> oFS.GetFolder(sHomeFolder).SubFolders</span><br><span class="line">    	removeEval oFile, sHomeFolder + <span class="string">"\"</span> + oFile.Name + <span class="string">"\config\eval"</span></span><br><span class="line">	<span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> oFS.FolderExists(sJBDataFolder) <span class="keyword">Then</span></span><br><span class="line">	<span class="keyword">For</span> <span class="keyword">Each</span> oFile <span class="keyword">In</span> oFS.GetFolder(sJBDataFolder).SubFolders</span><br><span class="line">	    removeEval oFile, sJBDataFolder + <span class="string">"\"</span> + oFile.Name + <span class="string">"\eval"</span></span><br><span class="line">	<span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">MsgBox</span> <span class="string">"done"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><a href="https://shimo.im/docs/qXHrKqdrtjJX6xtX/read" target="_blank" rel="noopener">qXHrKqdrtjJX6xtX</a></p>
<p><a href="http://vrg123.com/" target="_blank" rel="noopener">vrg123</a> : 4565</p>
<p><a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html" target="_blank" rel="noopener">zhile</a></p>
<p><a href="https://plugins.zhile.io" target="_blank" rel="noopener">Zhile-plug</a>: <a href="https://plugins.zhile.io" target="_blank" rel="noopener">https://plugins.zhile.io</a></p>
]]></content>
      <categories>
        <category>JetBrains</category>
      </categories>
      <tags>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库体系结构</title>
    <url>/1647551827.html</url>
    <content><![CDATA[<h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2>
<h3 id="C-S-Client-Server-模型"><a href="#C-S-Client-Server-模型" class="headerlink" title="C/S(Client/Server)模型"></a>C/S(Client/Server)模型</h3>
<p>​ C/S结构是一种软件系统体系结构，</p>
<p>​ C是英文单词“Client”的首字母，即客户端的意思，C/S就是“Client/Server”的缩写，即“客户端/服务器”模式。MySQL C/S 可如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gto7tgqgp1j60js0a8jrl02.jpg" alt=""></p>
<h4 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h4>
<p>实现MySQL连接的方式主要有两种，</p>
<ul>
    <li>基于TCP/IP的连接，适用于远程、本地</li>
    <li>基于Socket方式连接，仅限于本地连接</li>
</ul>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># TCP/IP方式（远程、本地）</span></span><br><span class="line">mysql -h 192.168.0.51 -P 3306 -u root -p paynepasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Socket方式(仅本地)</span></span><br><span class="line">mysql -S /tmp/mysql.sock -u root -p paynepasswd</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<a id="more"></a>
<p>在Linux中<code>/etc/my.cnf</code>文件中显示（已完成MySQL的安装）</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/my.cnf    示例如下                                                                                    </span></span><br><span class="line">[client]</span><br><span class="line"><span class="comment">#password       = your_password</span></span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/mysql.sock</span><br><span class="line">datadir = /www/server/data</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">performance_schema_max_table_instances = 400</span><br><span class="line">table_definition_cache = 400</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size = 1024M</span><br><span class="line"></span><br><span class="line">---略</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="服务器端-实例"><a href="#服务器端-实例" class="headerlink" title="服务器端(实例):"></a>服务器端(实例):</h2>
<p>实例：My sqld + 工作线程 + 预分配内存 </p>
<p>功能：管理数据(增删改查等)</p>
<h3 id="mysqld逻辑结构"><a href="#mysqld逻辑结构" class="headerlink" title="mysqld逻辑结构"></a>mysqld逻辑结构</h3>
<p>mysqld的工作模型可分为两块，<code>server</code>层，<code>引擎层</code>，server层可细分为<code>连接层</code>、<code>SQL层</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtoa5gogpej60fv0dhjs202.jpg" alt=""></p>
<h4 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h4>
<ul>
    <li>提供连接协议（socket、TCP/IP）</li>
    <li>验证用户（账号名、密码、权限）</li>
    <li>提供用户专用线程</li>
</ul>
<h4 id="SQL层"><a href="#SQL层" class="headerlink" title="SQL层"></a>SQL层</h4>
<ul>
    <li>接收上层传送的SQL语句</li>
    <li>语法验证模块：验证语句语法,是否满足SQL_MODE</li>
    <li>语义检查：判断SQL语句的类型(DDL、DCL、DML、DQL)</li>
    <li>执行权限检查：对语句执行前,进行预处理，生成解析树(执行计划)</li>
    <li>优化器：根据解析器得出的多种执行计划，进行判断，选择最优的执行计划
        <pre><code>    代价模型：资源（CPU IO MEM）的耗损评估性能好坏
</code></pre>
    </li>
    <li>执行器：根据最优执行计划，执行SQL语句，产生执行结果</li>
    <li>提供查询缓存（默认是没开启的）常使用redis、tair替代查询缓存功能</li>
    <li>提供日志记录（日志管理章节）：binlog，默认是没开启的。</li>
</ul>
<h4 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h4>
<blockquote>
    <p>类似于Linux中的文件系统</p>
</blockquote>
<ul>
    <li>负责根据SQL层执行的结果，从磁盘上拿数据</li>
    <li>将16进制的磁盘数据，交由SQL结构化化成表</li>
    <li>连接层的专用线程返回给用户</li>
</ul>
<h2 id="数据库逻辑结构"><a href="#数据库逻辑结构" class="headerlink" title="数据库逻辑结构"></a>数据库逻辑结构</h2>
<p><img src="https://upload-images.jianshu.io/upload_images/16956686-127fff46fdb7fea9.png" alt=""></p>
<ul>
    <li>库：库名，库属性</li>
    <li>表：表名、属性、<ul>
            <li>列:列名(字段),列属性(数据类型,约束等)</li>
            <li>数据行(记录)</li>
        </ul>
    </li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/16956686-bfd40838aef7971b.png" alt="物理结构"></p>
<p>库的物理存储结构</p>
<ul>
    <li>用文件系统的目录来存储</li>
</ul>
<p>表的物理存储结构</p>
<figure class="highlight angelscript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">MyISAM（一种引擎）的表：</span><br><span class="line">-rw-r----- <span class="number">1</span> mysql mysql   <span class="number">10816</span> Apr <span class="number">18</span> <span class="number">8</span>:<span class="number">37</span> user.frm</span><br><span class="line">-rw-r----- <span class="number">1</span> mysql mysql     <span class="number">396</span> Apr <span class="number">18</span> <span class="number">11</span>:<span class="number">20</span>  user.MYD</span><br><span class="line">-rw-r----- <span class="number">1</span> mysql mysql    <span class="number">4096</span> Apr <span class="number">18</span> <span class="number">17</span>:<span class="number">48</span> user.MYI</span><br><span class="line"></span><br><span class="line">InnoDB(默认的存储引擎)的表：</span><br><span class="line">-rw-r----- <span class="number">1</span> mysql mysql    <span class="number">8636</span> Apr <span class="number">18</span> <span class="number">9</span>:<span class="number">37</span> time_zone.frm</span><br><span class="line">-rw-r----- <span class="number">1</span> mysql mysql   <span class="number">98304</span> Apr <span class="number">18</span> <span class="number">1</span>:<span class="number">37</span> time_zone.ibd</span><br><span class="line">time_zone.frm：存储列相关信息</span><br><span class="line">time_zone.ibd：数据行+索引</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>表的段、区、页（16k）</p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">页：最小的存储单元，默认16k</span><br><span class="line">区：64个连续的页，共1M</span><br><span class="line">段：一个表就是一个段，包含一个或多个区</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="执行SQL流程"><a href="#执行SQL流程" class="headerlink" title="执行SQL流程"></a>执行SQL流程</h2>
<blockquote>
    <p>假设忽略权限验证、表操作验证</p>
</blockquote>
<ol>
    <li>
        <p>客户端发送一条SQL语句给MySQL服务器。</p>
    </li>
    <li>
        <p>MySQL服务器先检查查询缓存，如果查询缓存中存在待查询的结果数据，则会立刻返回查询缓存中的结果数据，否则执行下一阶段的处理。</p>
    </li>
    <li>
        <p>MySQL服务器通过解析器和预处理器对SQL语句进行解析和预处理，并将生成的SQL语句解析树传递给查询优化器。</p>
    </li>
    <li>
        <p>查询优化器将SQL解析树进行进一步处理，生成对应的执行计划。</p>
    </li>
    <li>
        <p>MySQL服务器根据查询优化器生成的执行计划，通过查询执行引擎调用存储引擎的API来执行查询操作。</p>
    </li>
    <li>
        <p>存储引擎查询数据库中的数据，并将结果返回给查询执行引擎。</p>
    </li>
    <li>
        <p>查询执行引擎将结果保存在查询缓存中，并通过数据库连接/线程处理返回给客户端。</p>
    </li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtoc99udhyj60bw0ma0tu02.jpg" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的SQL使用之上</title>
    <url>/3376299280.html</url>
    <content><![CDATA[<h2 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h2>
<p>结构化查询语言,5.7 以后符合SQL92严格模式,通过sql_mode参数来控制</p>
<p>DDL（Data Definition Language，数据定义语言）：用于定义数据库、数据表和列，可以用来创建、删除、修改数据库和数据表的结构，包含CREATE、DROP和ALTER等语句。</p>
<p>DML（Data Manipulation Language，数据操作语言）：用于操作数据记录，可以对数据库中数据表的数据记录进行增加、删除和修改等操作，包含INSERT、DELETE和UPDATE等语句。</p>
<p>DCL（Data Control Language，数据控制语言）：用于定义数据库的访问权限和安全级别，主要包含GRANT、REVOKE、COMMIT和ROLLBACK等语句。</p>
<p>DQL（Data Query Language，数据查询语言）：用于查询数据表中的数据记录，主要包含SELECT语句。</p>
<a id="more"></a>
<h2 id="DDL的应用"><a href="#DDL的应用" class="headerlink" title="DDL的应用"></a>DDL的应用</h2>
<h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3>
<h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4>
<p>建库规范：</p>
<ol>
    <li>库名要和业务相关</li>
    <li>库名不能有<strong>大写字母</strong>、<strong>数字</strong>开头</li>
    <li>建库要加字符集</li>
</ol>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">create database [<span class="keyword">if</span> not exists] 数据库名 [charset 字符编码名称(utf8mb4)] [collate 排序规则(utf8mb4_general_ci)];</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4>
<blockquote>
    <p>生产中禁止使用</p>
</blockquote>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">drop database 数据库名</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4>
<blockquote>
    <p>先查在改</p>
</blockquote>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SHOW CREATE DATABASE 数据库名;</span><br><span class="line">ALTER DATABASE 数据库名 [charset 字符编码名称] [collate 排序规则];</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意：修改字符集，修改后的字符集一定是原字符集的严格超集</p>
</blockquote>
<h4 id="查（DQL）"><a href="#查（DQL）" class="headerlink" title="查（DQL）"></a>查（DQL）</h4>
<p>显示所有数据库 形式:show databases;</p>
<p>显示一个数据库的创建语句: show create database 数据库名;</p>
<p>其他:show charset; show collation;</p>
<p>当前选择的数据库:\s、select database();</p>
<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3>
<p><strong>创建表规范</strong></p>
<ol>
    <li>库名需与业务相关，且小写与非数字开头，表、列均需有注释</li>
    <li>注意字符集和存储引擎</li>
    <li>选择<strong>合适</strong>的<strong>数据类型</strong></li>
    <li>每个列设置为非空，若无法保证非空，用0来填充。</li>
</ol>
<h4 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h4>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(</span><br><span class="line"> 字段<span class="number">1</span> 数据类型 [约束条件] [默认值],</span><br><span class="line"> 字段<span class="number">2</span> 数据类型 [约束条件] [默认值],</span><br><span class="line">  [表约束条件]</span><br><span class="line">) [表选项<span class="number">1</span>,表选项<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`ch_people_msg`</span> ( </span><br><span class="line">  <span class="string">`p_id`</span>  <span class="built_in">SERIAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span> , </span><br><span class="line">  <span class="string">`p_uic`</span> <span class="built_in">CHAR</span>(<span class="number">18</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户身份证'</span>,</span><br><span class="line">  <span class="string">`p_nickname`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>, </span><br><span class="line">  <span class="string">`p_gender`</span> ENUM(<span class="string">'m'</span>,<span class="string">'f'</span>, <span class="string">'n'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'n'</span> <span class="keyword">COMMENT</span> <span class="string">'用户性别'</span>, </span><br><span class="line">  <span class="string">`p_age`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户年龄'</span>, </span><br><span class="line">  <span class="string">`p_pnum`</span> <span class="built_in">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户电话'</span>, </span><br><span class="line">  <span class="string">`p_address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户地址'</span>, </span><br><span class="line">  <span class="string">`p_email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>, </span><br><span class="line">  <span class="string">`p_add_time`</span> <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NOW</span>() <span class="keyword">COMMENT</span> <span class="string">'统计用户时间'</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="string">`p_id`</span>),</span><br><span class="line">   <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`p_uic`</span>(<span class="string">`p_uic`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">COMMENT</span> = <span class="string">'中国成员信息表'</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意：字段结束为<code>,</code>分隔， 整体结束为<code>)</code>分隔</p>
</blockquote>
<h4 id="删除-生产中禁用命令"><a href="#删除-生产中禁用命令" class="headerlink" title="删除(生产中禁用命令)"></a>删除(生产中禁用命令)</h4>
<p>DROP TABLE table_name</p>
<h3 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h3>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">ADD</span>、<span class="keyword">DROP</span>、<span class="keyword">MODIFY</span>]</span><br><span class="line"><span class="comment"># 增加字段'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在表首列加入p_num列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`ch_people_msg`</span> <span class="keyword">ADD</span> p_num <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数字'</span> <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在列p_nickname 后增加 p_wechat列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`ch_people_msg`</span> <span class="keyword">ADD</span> p_wechat <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>  <span class="keyword">COMMENT</span> <span class="string">'微信号'</span> <span class="keyword">AFTER</span> <span class="string">`p_nickname`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在表中(最后)增加p_qq列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`ch_people_msg`</span> <span class="keyword">ADD</span> p_qq <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'用户qq号'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> 字段名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">MODIFY</span> 字段名 约束条件 默认值</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="表属性查询（DQL）"><a href="#表属性查询（DQL）" class="headerlink" title="表属性查询（DQL）"></a>表属性查询（DQL）</h4>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 罗列所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>；</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表状态</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> [<span class="keyword">from</span> db_name] [<span class="keyword">like</span> table_name];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表结构</span></span><br><span class="line">desc `table_name`;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`table_name`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建相同类型的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db_name_2`</span> <span class="keyword">LIKE</span> <span class="string">`db_name_1`</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的SQL使用之下</title>
    <url>/3191410054.html</url>
    <content><![CDATA[<h2 id="mysql用户管理"><a href="#mysql用户管理" class="headerlink" title="mysql用户管理"></a>mysql用户管理</h2>
<blockquote>
    <p> DCL（Data Control Language，数据控制语言）：用于定义数据库的访问权限和安全级别，主要包含GRANT、REVOKE、COMMIT和ROLLBACK等语句。</p>
</blockquote>
<p><strong>mysql用户管理主要涉及到用户的增删改查与权限管理</strong></p>
<p>mysql中存在4个控制权限的表，分别为user表，db表，tables_priv表，columns_priv表</p>
<p><strong>权限表的验证过程</strong></p>
<ol>
    <li>先从user表中的Host,User,Password这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</li>
    <li>通过身份认证后，进行权限分配，按照user，db，tables_priv，columns_priv的顺序进行验证。即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将不再检查db, tables_priv,columns_priv；如果为N，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限；如果db中为N，则检查tables_priv中此数据库对应的具体表，取得表中的权限Y，以此类推。</li>
</ol>
<p><strong>MySQL 权限级别</strong><br>全局性的管理权限： 作用于整个MySQL实例级别<br>数据库级别的权限： 作用于某个指定的数据库上或者所有的数据库上<br>数据库对象级别的权限：作用于指定的数据库对象上（表、视图等）或者所有的数据库对象上</p>
<h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 创建用户</span><br><span class="line">create user user_name@&#39;host&#39; identified by &#39;password&#39;;</span><br><span class="line"># example: </span><br><span class="line"># create user acs@&#39;10.0.0.%&#39; identified by &#39;123123&#39;;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 删除用户</span><br><span class="line">drop user user_name@&#39;host&#39;;</span><br><span class="line"># example:</span><br><span class="line"># drop user acs@&#39;10.0.0.%&#39;</span><br><span class="line"># DELETE FROM &#96;user&#96; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;10.0.0.%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 修改用户</span><br><span class="line">alter user user_name@&#39;host&#39; identified by &#39;password&#39;;</span><br><span class="line"># example</span><br><span class="line">## 修改密码</span><br><span class="line">alter user acs@&#39;10.0.0.%&#39; identified by &#39;321312312123&#39;;</span><br><span class="line">## 修改 host</span><br><span class="line">UPDATE &#96;user&#96; SET &#96;Host&#96; &#x3D; &#39;%&#39; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;10.0.0.%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br><span class="line">## 修改权限</span><br><span class="line">UPDATE &#96;user&#96; SET &#96;Select_priv&#96; &#x3D; &#39;Y&#39; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br><span class="line">UPDATE &#96;user&#96; SET &#96;Select_priv&#96; &#x3D; &#39;Y&#39;, &#96;Delete_priv&#96; &#x3D; &#39;Y&#39; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 删除用户</span><br><span class="line">drop user user_name@&#39;host&#39;;</span><br><span class="line"># example</span><br><span class="line">drop user acs@&#39;%&#39;</span><br><span class="line">DELETE FROM &#96;user&#96; WHERE &#96;user&#96;.&#96;Host&#96; &#x3D; &#39;10.0.0.%&#39; AND &#96;user&#96;.&#96;User&#96; &#x3D; &#39;acs&#39;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>user_name：用户名</p>
    <p>host ：可允许连接ip(Localhost代表本机， 127.0.0.1代表ipv4本机地址， ::1代表ipv6的本机地址,)</p>
    <p>password：用户密码</p>
</blockquote>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2>
<p>权限可细分为操作权限与操作范围</p>
<p>常用权限介绍</p>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ALL:	SELECT,INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br><span class="line">ALL : 所有权限，一般是普通管理员拥有的</span><br><span class="line"><span class="keyword">with</span> grant option：给别的用户授权的功能</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>权限作用范围</p>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">*.*               ----&gt;所有：管理员用户</span><br><span class="line">dbname.*          ----&gt;指定库下所有：开发和应用用户</span><br><span class="line">dbname.t1			----&gt;指定表</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>开发人员用户授权流程</strong></p>
<ol>
    <li>你从哪来</li>
    <li>对谁操作</li>
    <li>权限</li>
    <li>密码要求</li>
</ol>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3>
<p>可以使用GRANT给用户添加权限，权限会自动叠加，不会覆盖之前授予的权限，比如你先给用户添加一个SELECT权限，后来又给用户添加了一个INSERT权限，那么该用户就同时拥有了SELECT和INSERT权限</p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 查看MYSQL有哪些用户</span><br><span class="line">select user,host from mysql.user;</span><br><span class="line"># 查看权限</span><br><span class="line">show grants for user_name@&#39;host&#39;;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 授权</span><br><span class="line">grant 权限 on 权限范围 to 用户 identified by 密码 with grant option;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p> <strong>all privileges：</strong>表示将所有权限授予给用户。也可指定具体的权限，如：SELECT、CREATE、DROP等。<br> <strong>on：</strong>表示这些权限对哪些数据库和表生效，格式：数据库名.表名，这里写“<em>”表示所有数据库，所有表。如果我要指定将权限应用到test库的user表中，可以这么写：test.user<br> <strong>to：</strong>将权限授予哪个用户。格式：”用户名”@”登录IP或域名”。%表示没有限制，在任何主机都可以登录。比如：”payne”@”192.168.0%”，表示yangxin这个用户只能在192.168.0IP段登录<br> <strong>•identified by：</strong>指定用户的登录密码<br> <em>*•with grant option：</em></em>表示允许用户将自己的权限授权给其它用户 </p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 收回权限</span><br><span class="line">revoke delete on 权限范围 from 用户@‘host’</span><br><span class="line">revoke delete on app.*  from app@&#39;10.0.0.%&#39;；</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="如何授权"><a href="#如何授权" class="headerlink" title="如何授权"></a>如何授权</h3>
<p>用户的权限一定是与业务分离不开的，但通常普通用户会</p>
<ul>
    <li>禁用删除权限</li>
    <li>规定范围</li>
</ul>
<h2 id="如何做好用户管理"><a href="#如何做好用户管理" class="headerlink" title="如何做好用户管理"></a>如何做好用户管理</h2>
<ul>
    <li>密码系数足够高</li>
    <li>root禁用远程登录</li>
    <li>分级别，类似于公司管理。</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">8.0在grant命令添加新特性</span><br><span class="line">建用户和授权分开了</span><br><span class="line">grant 不再支持自动创建用户了，不支持改密码</span><br><span class="line">授权之前，必须要提前创建用户。</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li>执行Grant,revoke,set password,rename user命令修改权限之后， MySQL会自动将修改后的权限信息同步加载到系统内存中</li>
    <li>如果执行insert/update/delete操作上述的系统权限表之后，则必须再执行刷新权限命令才能同步到系统内存中，刷新权限命令包括： <code>flush privileges</code>/mysqladmin flush-privileges / mysqladmin reload</li>
    <li>如果是修改tables和columns级别的权限，则客户端的下次操作新权限就会生效</li>
    <li>如果是修改database级别的权限，则新权限在客户端执行use database命令后生效</li>
    <li>如果是修改global级别的权限，则需要重新创建连接新权限才能生效</li>
    <li>如果是修改global级别的权限，则需要重新创建连接新权限才能生效 (例如修改密码)</li>
</ul>
<p>mysql user表</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left"><strong>名字</strong></th>
                <th style="text-align:left"><strong>类型</strong></th>
                <th style="text-align:left">Null</th>
                <th style="text-align:left">主键</th>
                <th style="text-align:left">默认</th>
                <th style="text-align:left"></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left">Host</td>
                <td style="text-align:left">char(255)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">PRI</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">User</td>
                <td style="text-align:left">char(32)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left">PRI</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Select_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Insert_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Update_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Delete_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Drop_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Reload_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Shutdown_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Process_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">File_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Grant_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">References_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Index_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Alter_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Show_db_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Super_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_tmp_table_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Lock_tables_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Execute_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Repl_slave_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Repl_client_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_view_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Show_view_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_routine_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Alter_routine_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_user_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Event_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Trigger_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_tablespace_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">ssl_type</td>
                <td style="text-align:left">enum(‘’,’ANY’,’X509’,’SPECIFIED’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">ssl_cipher</td>
                <td style="text-align:left">blob</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">x509_issuer</td>
                <td style="text-align:left">blob</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">x509_subject</td>
                <td style="text-align:left">blob</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">max_questions</td>
                <td style="text-align:left">int unsigned</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">0</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">max_updates</td>
                <td style="text-align:left">int unsigned</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">0</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">max_connections</td>
                <td style="text-align:left">int unsigned</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">0</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">max_user_connections</td>
                <td style="text-align:left">int unsigned</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">0</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">plugin</td>
                <td style="text-align:left">char(64)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">caching_sha2_password</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">authentication_string</td>
                <td style="text-align:left">text</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">password_expired</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">password_last_changed</td>
                <td style="text-align:left">timestamp</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">password_lifetime</td>
                <td style="text-align:left">smallint unsigned</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">account_locked</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Create_role_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Drop_role_priv</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">NO</td>
                <td style="text-align:left"></td>
                <td style="text-align:left">N</td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Password_reuse_history</td>
                <td style="text-align:left">smallint unsigned</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Password_reuse_time</td>
                <td style="text-align:left">smallint unsigned</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">Password_require_current</td>
                <td style="text-align:left">enum(‘N’,’Y’)</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:left">User_attributes</td>
                <td style="text-align:left">json</td>
                <td style="text-align:left">YES</td>
                <td style="text-align:left"></td>
                <td style="text-align:left"><em>NULL</em></td>
                <td style="text-align:left"></td>
            </tr>
        </tbody>
    </table>
</div>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的SQL使用之中</title>
    <url>/1815382139.html</url>
    <content><![CDATA[<h2 id="DML的使用"><a href="#DML的使用" class="headerlink" title="DML的使用"></a>DML的使用</h2>
<p>对表中的数据行进行增、删、改</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3>
<blockquote>
    <p>向数据表内插入数据</p>
</blockquote>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># INSERT语法</span><br><span class="line">INSERT [INTO] table_name[(field_name_1, field_name_2...)] VALUES(value1, value2...),[(value1, value2...)...]</span><br><span class="line"># 常见示例</span><br><span class="line">## 插入</span><br><span class="line">INSERT INTO ch_people_msg(&#96;p_uic&#96;, &#96;p_nickname&#96;, &#96;p_gender&#96;, &#96;p_age&#96;, &#96;p_pnum&#96;, &#96;p_address&#96;, &#96;p_email&#96;) VALUES</span><br><span class="line">(&quot;431122200008868162&quot;, &quot;payne&quot;, &quot;m&quot;, 22, 17672655132, &quot;湖南省xx市xx区雨花a世界&quot;, &quot;127xxxx261&quot;),</span><br><span class="line">(&quot;431122200002148162&quot;, &quot;tom&quot;, &quot;m&quot;, 25, 17672655132, &quot;湖南省xx市xx区雨花a世界&quot;, &quot;127xxxx221&quot;),</span><br><span class="line">(&quot;431122200002168163&quot;, &quot;tom&quot;, &quot;m&quot;, 25, 17672655132, &quot;湖南省xx市xx区雨花a世界&quot;, &quot;127xxxx221&quot;)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <figure class="highlight plain">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;ch_people_msg&#96; ( </span><br><span class="line">  &#96;p_id&#96;  SERIAL NOT NULL AUTO_INCREMENT COMMENT &#39;用户id&#39; , </span><br><span class="line">  &#96;p_uic&#96; CHAR(18) NOT NULL COMMENT &#39;用户身份证&#39;,</span><br><span class="line">  &#96;p_nickname&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户昵称&#39;, </span><br><span class="line">  &#96;p_gender&#96; ENUM(&#39;m&#39;,&#39;f&#39;, &#39;n&#39;) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;用户性别&#39;, </span><br><span class="line">  &#96;p_age&#96; TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#39;用户年龄&#39;, </span><br><span class="line">  &#96;p_pnum&#96; CHAR(11) NOT NULL COMMENT &#39;用户电话&#39;, </span><br><span class="line">  &#96;p_address&#96; VARCHAR(100) NOT NULL COMMENT &#39;用户地址&#39;, </span><br><span class="line">  &#96;p_email&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户邮箱&#39;, </span><br><span class="line">  &#96;p_add_time&#96; TIMESTAMP NOT NULL DEFAULT NOW() COMMENT &#39;统计用户时间&#39;,</span><br><span class="line">   PRIMARY KEY (&#96;p_id&#96;),</span><br><span class="line">   UNIQUE KEY &#96;p_uic&#96;(&#96;p_uic&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARSET&#x3D;utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#x3D; &#39;中国成员信息表&#39;;</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3>
<figure class="highlight pgsql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="built_in">table_name</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="built_in">table_name</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">table</span> <span class="built_in">table_name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>: DML操作, 是逻辑性质删除,逐行进行删除,速度慢.</span><br><span class="line"><span class="keyword">truncate</span>: DDL操作,对与表段中的数据页进行清空,速度快.</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p> 当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，</p>
    <p> DELETE操作不会减少表或索引所占用的空间。</p>
    <p> drop语句将表所占用的空间全释放掉。</p>
    <p>释放空间与速度：drop &gt; truncate &gt; delete</p>
</blockquote>
<p><strong>delete</strong></p>
<ul>
    <li>delete是DML，执行delete操作时，每次从表中删除一行，并且同时将该行的的删除操作记录在redo和undo表空间中以便进行回滚（rollback）和重做操作，但要注意表空间要足够大，需要手动提交（commit）操作才能生效，可以通过rollback撤消操作。</li>
    <li>
        <p>delete可根据条件删除表中满足条件的数据，如果不指定where子句，那么删除表中所有记录。</p>
    </li>
    <li>
        <p>delete语句不影响表所占用的extent，高水线(high watermark)保持原位置不变。</p>
    </li>
</ul>
<p><strong>truncate</strong></p>
<ul>
    <li>truncate是DDL，会隐式提交，所以，不能回滚，不会触发触发器。</li>
    <li>
        <p>truncate会删除表中所有记录，并且将重新设置高水线和所有的索引，缺省情况下将空间释放到minextents个extent，除非使用reuse storage，。不会记录日志，所以执行速度很快，但不能通过rollback撤消操作（如果一不小心把一个表truncate掉，也是可以恢复的，只是不能通过rollback来恢复）。</p>
    </li>
    <li>
        <p>对于外键（foreignkey ）约束引用的表，不能使用 truncate table，而应使用不带 where 子句的 delete 语句。</p>
    </li>
    <li>
        <p>truncatetable不能用于参与了索引视图的表。</p>
    </li>
</ul>
<p><strong>drop</strong></p>
<ul>
    <li>drop是DDL，会隐式提交，所以，不能回滚，不会触发触发器。</li>
    <li>
        <p>drop语句删除表结构及所有数据，并将表所占用的空间全部释放。</p>
    </li>
    <li>
        <p>drop语句将删除表的结构所依赖的约束，触发器，索引，依赖于该表的存储过程/函数将保留,但是变为invalid状态。</p>
    </li>
</ul>
<blockquote>
    <ul>
        <li>
            <p>如果想删除表，当然用drop； </p>
        </li>
        <li>
            <p>如果想保留表而将所有数据删除，如果和事务无关，用truncate即可；</p>
        </li>
        <li>
            <p>如果和事务有关，或者想触发trigger，还是用delete；</p>
        </li>
        <li>
            <p>如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。</p>
        </li>
    </ul>
</blockquote>
<p>伪删除：用update来替代delete，最终保证业务中查不到（select）即可</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">1.添加状态列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ch_people_msg <span class="keyword">ADD</span> state <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ch_people_msg;</span><br><span class="line">2. <span class="keyword">UPDATE</span> 替代 <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">UPDATE</span> ch_people_msg <span class="keyword">SET</span> state=<span class="number">0</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">6</span>;</span><br><span class="line">3. 业务语句查询</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ch_people_msg <span class="keyword">WHERE</span> state=<span class="number">1</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">UPDATE ch_people_msg <span class="builtin-name">SET</span> <span class="attribute">p_nickname</span>=<span class="string">'zero'</span> WHERE <span class="attribute">id</span>=2;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 基本语法</span><br><span class="line">select--from--[where]--[group by]--[having]--[order by]</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>FROM：对FROM子句中的前两个表执行笛卡尔积（Cartesian product)(交叉联接），生成虚拟表VT1 ON：对VT1应用ON筛选器。只有那些使<join_condition>为真的行才被插入VT2<br>OUTER(JOIN)：如果指定了OUTER JOIN（相对于CROSS JOIN 或(INNER JOIN),保留表（preserved table：左外部联接把左表标记为保留表，右外部联接把右表标记为保留表，完全外部联接把两个表都标记为保留表）中未找到匹配的行将作为外部行添加到 VT2,生成VT3.如果FROM子句包含两个以上的表，则对上一个联接生成的结果表和下一个表重复执行步骤1到步骤3，直到处理完所有的表为止。<br>WHERE：对VT3应用WHERE筛选器。只有使<where_condition>为true的行才被插入VT4.<br>GROUP BY：按GROUP BY子句中的列列表对VT4中的行分组，生成VT5.<br>CUBE|ROLLUP：把超组(Suppergroups)插入VT5,生成VT6.<br>HAVING：对VT6应用HAVING筛选器。只有使<having_condition>为true的组才会被插入VT7.<br>SELECT：处理SELECT列表，产生VT8.<br>DISTINCT：将重复的行从VT8中移除，产生VT9.<br>ORDER BY：将VT9中的行按ORDER BY 子句中的列列表排序，生成游标（VC10).<br>TOP：从VC10的开始处选择指定数量或比例的行，生成表VT11,并返回调用者。</p>
</blockquote>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 单表子句-from</span><br><span class="line">SELECT 列<span class="number">1</span>,列<span class="number">2</span> FROM 表</span><br><span class="line">SELECT  *  FROM 表</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4>
<figure class="highlight dart">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 等值查询</span><br><span class="line">	SELECT  *  FROM 表 where 列 = 值</span><br><span class="line">	SELECT 列<span class="number">1</span>,列<span class="number">2</span> FROM 表 where 列 = 值</span><br><span class="line">  </span><br><span class="line"># 比较运算符</span><br><span class="line">&gt;、&lt;、&gt;=、&lt;=、!=、=</span><br><span class="line">	SELECT * FROM 表 where 列 &gt;= 值</span><br><span class="line">	SELECT 列,... FROM 表 where 列 &lt;= 值</span><br><span class="line">  </span><br><span class="line"># 模糊查询</span><br><span class="line">	%代表任何个数的任何字符 _:它代表一个任何字符</span><br><span class="line">	注意：%不能放在前面,因为不走索引,要找%或_,转义就行了\%和\_</span><br><span class="line">  </span><br><span class="line"># or、and</span><br><span class="line">  	SELECT * FROM 表 where 列 &gt;= 值 or 列 &lt; 值</span><br><span class="line">  </span><br><span class="line"># where配合<span class="keyword">in</span>语句</span><br><span class="line">  SELECT * FROM 表 WHERE 列 IN (VALUES, VALUES);</span><br><span class="line"></span><br><span class="line"># where配合between and</span><br><span class="line">  SELECT * FROM city  WHERE population &gt;<span class="number">1000000</span> AND population &lt;<span class="number">2000000</span>;</span><br><span class="line">	SELECT * FROM city  WHERE population BETWEEN <span class="number">1000000</span> AND <span class="number">2000000</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4>
<p>根据 by后面的条件进行<strong>分组</strong>，方便统计，by后面跟一个列或多个列</p>
<blockquote>
    <p><strong>max()</strong> ：最大值<br><strong>min()</strong> ：最小值<br><strong>avg()</strong> ：平均值<br><strong>sum()</strong> ：总和<br><strong>count()</strong> ：个数<br><strong>group_concat()</strong> : 列转行</p>
</blockquote>
<p><strong>having</strong></p>
<p>​ having语句是分组后过滤的条件，在group by之后使用，也就是如果要用having语句，必须要先有group by语句。</p>
<h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4>
<p>实现先排序，by后添加条件列</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># distinct：去重复查询</span></span><br><span class="line"><span class="keyword">SELECT</span> 列 <span class="keyword">FROM</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(列) <span class="keyword">FROM</span> city  ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合查询- union all</span></span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> city </span><br><span class="line"><span class="keyword">WHERE</span> countrycode <span class="keyword">IN</span> (<span class="string">'CHN'</span> ,<span class="string">'USA'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> countrycode=<span class="string">'CHN'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> countrycode=<span class="string">'USA'</span></span><br><span class="line"></span><br><span class="line">说明:一般情况下,我们会将 <span class="keyword">IN</span> 或者 <span class="keyword">OR</span> 语句 改写成 <span class="keyword">UNION</span> <span class="keyword">ALL</span>,来提高性能</span><br><span class="line"><span class="keyword">UNION</span>     去重复</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> 不去重复</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的安装与配置</title>
    <url>/1439700985.html</url>
    <content><![CDATA[<h2 id="Linux平台下MySQL的安装"><a href="#Linux平台下MySQL的安装" class="headerlink" title="Linux平台下MySQL的安装"></a>Linux平台下MySQL的安装</h2>
<p>LSB Version: :core-4.1-amd64:core-4.1-noarch</p>
<p>Distributor ID: CentOS</p>
<p>Description: CentOS Linux release 7.9.2009 (Core)</p>
<p>Release: 7.9.2009</p>
<p>Codename: Core</p>
<p>ldd (GNU libc) :2.17</p>
<h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3>
<h4 id="删除mariadb"><a href="#删除mariadb" class="headerlink" title="删除mariadb"></a>删除mariadb</h4>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">yum <span class="builtin-name">remove</span> -y mariadb-libs.x86_64</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3>
<h4 id="安装rpm"><a href="#安装rpm" class="headerlink" title="安装rpm"></a>安装rpm</h4>
<p>进入MySQL的<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">yum仓库</a>，如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu50sz34orj616r0u079a02.jpg" alt="image-20210904233814767"></p>
<p>官方rpm包: <a href="https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</a></p>
<p>清华镜像rpm包: <a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql80-community-el7/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql80-community-el7/mysql80-community-release-el7-3.noarch.rpm</a></p>
<figure class="highlight llvm">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">wget -<span class="keyword">c</span> rpm地址</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="安装yum仓库文件"><a href="#安装yum仓库文件" class="headerlink" title="安装yum仓库文件"></a>安装yum仓库文件</h4>
<blockquote>
    <p>可使用rpm -ivh或是yum localinstall 去安装，两者实质是一样的</p>
</blockquote>
<figure class="highlight css">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">mysql80-community-release-el7-3</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">yum install -y  mysql-community-server</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3>
<p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu5lm5v8toj61aq06wdik02.jpg" alt="image-20210905113818649"></p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 下</span></span><br><span class="line">wget -c https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line">tar zf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="建立用户与授权"><a href="#建立用户与授权" class="headerlink" title="建立用户与授权"></a>建立用户与授权</h4>
<figure class="highlight awk">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">useradd mysql &amp;&amp; usermod -s <span class="regexp">/sbin/</span>nologin mysql</span><br><span class="line">mkdir -p <span class="regexp">/opt/</span>databases<span class="regexp">/mysql &amp;&amp; chown -R mysql. /</span>opt<span class="regexp">/databases/my</span>sql</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="line"><span class="comment"># changes to the binary log between backups.</span></span><br><span class="line"><span class="comment"># log_bin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span><br><span class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></span><br><span class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="comment"># join_buffer_size = 128M</span></span><br><span class="line"><span class="comment"># sort_buffer_size = 2M</span></span><br><span class="line"><span class="comment"># read_rnd_buffer_size = 2M</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_general_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">secure_file_priv=<span class="string">''</span></span><br><span class="line">user = mysql</span><br><span class="line">port=8916</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="获取初始root密码"><a href="#获取初始root密码" class="headerlink" title="获取初始root密码"></a>获取初始root密码</h3>
<figure class="highlight lasso">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">grep <span class="string">'temporary password'</span> /<span class="built_in">var</span>/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="创建用户与授权"><a href="#创建用户与授权" class="headerlink" title="创建用户与授权"></a>创建用户与授权</h3>
<p>根据业务、公司情况创建管理员，若公司成员较少，管理员管全局。反之管单库</p>
<blockquote>
    <ol>
        <li>root不允许远程连接</li>
        <li>修改root密码</li>
    </ol>
</blockquote>
<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3>
<p>授权</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">远程登录还需要授权远程登录Mysql默认不允许远程登录，我们需要设置关闭selinux或者防火墙，不关防火墙就开放3306端口；</span><br><span class="line"><span class="comment">#放开3306端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/1135024868.html</url>
    <content><![CDATA[<h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2>
<blockquote>
    <p>索引：可简单理解为一本书的目录的集合</p>
</blockquote>
<p>​ 索引（在MySQL中也叫<strong>键（key）</strong>）是存储引擎用于快速查找记录的一种数据结构。索引对于性能拥有至关重要的地位。尤其是当表中的数据量越来越大，索引对于性能的影响愈发重要。反之不恰当的索引对于性能也会急剧下降。</p>
<p><strong>索引是一把双刃剑</strong></p>
<h2 id="索引的优与劣"><a href="#索引的优与劣" class="headerlink" title="索引的优与劣"></a>索引的优与劣</h2>
<h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3>
<ul>
    <li>大大减少扫描数据量</li>
    <li>帮助服务器避免排序和临时表</li>
    <li>将随机I/O变为顺序I/O</li>
    <li>可以大大加快数据的检索速度，这也是创建索引的最主要的用途。</li>
    <li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li>
</ul>
<h3 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h3>
<p><strong>时间方面</strong></p>
<p>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</p>
<p><strong>空间方面</strong></p>
<p>索引需要占物理空间，如果要建立聚簇索引，那么需要的空间就会更大</p>
<p>当对表中的数据进行增加、删除、修改的时索引也要动态的维护，这样就降低了数据的维护速度。</p>
<p><strong>应用方面</strong></p>
<p>锁竞争</p>
<h2 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h2>
<p>索引有很多种类，可以为不同场景提供更好的性能。索引在存储引擎层实现的，故并没有<strong>统一的</strong>索引标准</p>
<blockquote>
    <p>不同的存储引擎的索引工作方式也不尽相同</p>
</blockquote>
<h3 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h3>
<h4 id="物理顺序与键值的索引逻辑顺序关系"><a href="#物理顺序与键值的索引逻辑顺序关系" class="headerlink" title="物理顺序与键值的索引逻辑顺序关系"></a>物理顺序与键值的索引逻辑顺序关系</h4>
<p>聚集索引：数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有<strong>一个聚集索引</strong>。</p>
<p>非聚集索引：逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有<strong>多个非聚集索引</strong>。</p>
<p><strong>聚簇索引与非聚簇索引异同</strong></p>
<p>在 InnoDB 里，索引B+ Tree的叶子节点存储了整行数据的是主键索引，也被称之为聚簇索引，即将数据存储与索引放到了一块，找到索引也就找到了数据。</p>
<p>而索引B+ Tree的叶子节点存储了主键的值的是非主键索引，也被称之为非聚簇索引、二级索引。</p>
<p>聚簇索引与非聚簇索引的区别：</p>
<ul>
    <li>非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键（行号）</li>
    <li>对于InnoDB来说，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为<strong>回表</strong>。第一次索引一般是顺序IO，回表的操作属于随机IO。需要回表的次数越多，即随机IO次数越多，我们就越倾向于使用全表扫描 。</li>
    <li>通常情况下， 主键索引（聚簇索引）查询只会查一次，而非主键索引（非聚簇索引）需要回表查询多次。当然，如果是覆盖索引的话，查一次即可</li>
</ul>
<p>注意：MyISAM无论主键索引还是二级索引都是非聚簇索引，而InnoDB的主键索引是聚簇索引，二级索引是非聚簇索引。我们自己建的索引基本都是非聚簇索引。</p>
<h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4>
<blockquote>
    <p>这里所描述的是索引存储时保存的形式</p>
</blockquote>
<ul>
    <li>
        <p>B Tree索引（B-Tree或B+Tree索引）BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中（二叉树），每次查询都是从树的入口root开始，依次遍历node，获取leaf。这是<strong>MySQL里默认和最常用的索引类型。</strong></p>
    </li>
    <li>
        <p>Hash索引，HASH索引可以一次定位，不需要像树形索引那样逐层查找,因此具有极高的效率。但是，这种高效是有条件的，即只在“=”和“in”条件下高效，对于范围查询、排序及组合索引仍然效率不高</p>
    </li>
    <li>
        <p>full index 全文索引，其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引</p>
    </li>
    <li>
        <p>R-Tree索引。RTREE在MySQL很少使用，<strong>仅支持geometry数据类型</strong>，相对于BTREE，RTREE的优势在于范围查找。</p>
    </li>
</ul>
<h5 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B Tree 索引"></a>B Tree 索引</h5>
<p>通常意味着所有的值都是顺序存储的，并且每个叶子页到根的距离相同</p>
<p><strong>适用范围</strong></p>
<p>全键值、键值范围、前缀查找</p>
<p><strong>应用场景</strong></p>
<p>全值匹配、匹配最左前缀、匹配列前缀、匹配范围值、精确匹配某一列并范围匹配另一列、值访问索引的查询</p>
<p><strong>限制</strong></p>
<ul>
    <li>必须为最左开始，否则不使用索引</li>
    <li>无法跳跃查询索引中的列</li>
    <li>范围查询影响，右边的无法使用索引</li>
</ul>
<h5 id="Hash-索引"><a href="#Hash-索引" class="headerlink" title="Hash 索引"></a>Hash 索引</h5>
<p>基于Hash表实现，只有<strong>精确匹配</strong>索引<strong>所有列</strong>的查询<strong>才有效</strong></p>
<p>对于每一行数据存储引擎都会对所有的索引计算一个hash code。hash code 较小的值，并且不同键值的行计算出来的hash code页不一样。hash索引将所有的hash code存储在索引中，同时在hash table中保存指向每个数据的指针</p>
<p><strong>hash索引查询步骤</strong></p>
<ol>
    <li>先计算数据的hashcode，并使用该值查找对应的记录指针</li>
    <li>查找在hash table中的指向</li>
    <li>值比较确认</li>
</ol>
<p><strong>特点</strong></p>
<p>因为索引自身只需要存储对应的hash code，所有索引结构<strong>非常紧凑</strong>，这也让hash索引查找速度非常快</p>
<p><strong>限制</strong></p>
<ul>
    <li>
        <p>hash index 只包含hash值和行指针，而不存储字段值，所以不能使用hash index来避免读取行。同时访问内存中的数据速度非常快，所以对于大部分情况下这一点对于性能影响并不明显</p>
    </li>
    <li>
        <p>hash index数据并不是按照索引顺序存储的，所以无法用于排序</p>
    </li>
    <li>hash index 也不支持部分索引列匹配查找</li>
    <li>hash index 只支持<strong>等值比较</strong>查询，包括=、IN、&lt;=、=&gt;。也不支持任何范围查询</li>
    <li>hash index访问数据非常快，除非有很多hash冲突。同时hash冲突很多，索引维护代价较高昂</li>
</ul>
<h5 id="R-Tree索引"><a href="#R-Tree索引" class="headerlink" title="R Tree索引"></a>R Tree索引</h5>
<blockquote>
    <p>空间数据索引</p>
</blockquote>
<p>这类索引无需前缀查询，空间索引将会从所有的维度来进行索引数据</p>
<h5 id="full-index"><a href="#full-index" class="headerlink" title="full index"></a>full index</h5>
<blockquote>
    <p>全文索引</p>
</blockquote>
<p>全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而非比较索引中的值</p>
<p>全文搜索和其他几种类型的索引的匹配方式完全不同，如停用词、词干、复数、布尔搜索等</p>
<p>全文索引更类似于搜索引擎所做的事情，而不是简单的where条件匹配，而是MATCH AGAINST操作。支持Char、VARCHAR、TEXT类型、自然语言搜索、bool搜索</p>
<h4 id="应用层次"><a href="#应用层次" class="headerlink" title="应用层次"></a>应用层次</h4>
<ul>
    <li>主键索引： 加速查询 + 列值唯一（不可以有null）+ 表中只有一个</li>
    <li>
        <p>普通索引： 仅加速查询</p>
    </li>
    <li>
        <p>唯一索引: 加速查询 + 列值唯一（可以有null）</p>
    </li>
    <li>
        <p>复合索引: 多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</p>
    </li>
    <li>全文索引： 对文本的内容进行分词，进行搜索</li>
    <li>覆盖索引: select的数据列只用从索引中就能够取得，不必读取数据行，换句话说查询列要被所建的索引覆盖</li>
</ul>
<blockquote>
    <p>索引合并，使用多个单列索引组合搜索</p>
</blockquote>
<h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2>
<p>正确的创建索引是实现高性能查询的基础</p>
<h3 id="建索引的原则"><a href="#建索引的原则" class="headerlink" title="建索引的原则"></a>建索引的原则</h3>
<blockquote>
    <p>为了使索引的使用效率更高，在创建索引时，必须考虑</p>
    <ul>
        <li>
            <p><strong>在哪些字段上创建索引</strong></p>
        </li>
        <li>
            <p><strong>创建什么类型的索引</strong>。</p>
        </li>
        <li>
            <p><strong>索引设计原则</strong></p>
        </li>
    </ul>
</blockquote>
<ol>
    <li>必须要有主键,如果没有可以做为主键条件的列,创建无关列</li>
    <li>经常做为where条件列 order by group by join on, distinct 的条件(业务:产品功能+用户行为)</li>
    <li>最好使用唯一值多的列作为索引,如果索引列重复值较多,可以考虑使用联合索引</li>
    <li>列值长度较长的索引列,建议使用前缀索引.</li>
    <li>降低索引条目,一方面不要创建没用索引,不常使用的索引清理,percona toolkit(xxxxx)</li>
    <li>索引维护要避开业务繁忙期</li>
</ol>
<p><strong>CREATE TABLE创建索引</strong></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;ch_people_msg&#96; ( </span><br><span class="line">  &#96;p_id&#96;  SERIAL NOT NULL AUTO_INCREMENT COMMENT &#39;用户id&#39; , </span><br><span class="line">  &#96;p_uic&#96; CHAR(18) NOT NULL COMMENT &#39;用户身份证&#39;,</span><br><span class="line">  &#96;p_nickname&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户昵称&#39;, </span><br><span class="line">  &#96;p_gender&#96; ENUM(&#39;m&#39;,&#39;f&#39;, &#39;n&#39;) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;用户性别&#39;, </span><br><span class="line">  &#96;p_age&#96; TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#39;用户年龄&#39;, </span><br><span class="line">  &#96;p_pnum&#96; CHAR(11) NOT NULL COMMENT &#39;用户电话&#39;, </span><br><span class="line">  &#96;p_address&#96; VARCHAR(100) NOT NULL COMMENT &#39;用户地址&#39;, </span><br><span class="line">  &#96;p_email&#96; VARCHAR(50) NOT NULL COMMENT &#39;用户邮箱&#39;, </span><br><span class="line">  &#96;p_add_time&#96; TIMESTAMP NOT NULL DEFAULT NOW() COMMENT &#39;统计用户时间&#39;,</span><br><span class="line">   PRIMARY KEY (&#96;p_id&#96;),</span><br><span class="line">   UNIQUE KEY &#96;p_uic&#96;(&#96;p_uic&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARSET&#x3D;utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#x3D; &#39;中国成员信息表&#39;;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>ALTER TABLE命令去增加索引</strong></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="创建索引时注意点"><a href="#创建索引时注意点" class="headerlink" title="创建索引时注意点"></a>创建索引时注意点</h3>
<ul>
    <li>非空字段：应该指定列为NOT NULL，除非你想存储NULL。在mysql中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值；</li>
    <li>取值离散大的字段：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；</li>
    <li>索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。</li>
</ul>
<h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2>
<p><strong>函数导致的索引失效</strong></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SELECT * FROM &#96;user&#96; WHERE DATE(create_time) &#x3D; &#39;2012-11-03&#39;;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>运算符导致的索引失效</strong></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 如果对列进行了（+，-，*，&#x2F;，!）运算, 那么都将不会走索引。</span><br><span class="line">select p_id from xxx where p_id + 10 &#x3D; 12</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>OR引起的索引失效</strong></p>
<blockquote>
    <p>OR导致索引是在特定情况下的，并不是所有的OR都是使索引失效</p>
    <p>如果OR连接的是同一个字段，那么索引不会失效，反之索引失效。</p>
</blockquote>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SELECT * FROM &#96;xxx&#96; WHERE &#96;name&#96; &#x3D; &#39;xxx&#39; OR age &#x3D; 20;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>模糊搜索导致的索引失效</strong></p>
<blockquote>
    <p>当模糊查询<code>%</code>在匹配字段前缀不走索引，放在后面才会走索引。</p>
</blockquote>
<p><strong>使用!= 或者 &lt;&gt; 导致索引失效</strong></p>
<p><strong>类型不一致导致的索引失效</strong></p>
<p><strong>NOT IN、NOT EXISTS导致索引失效</strong></p>
<p><strong>避免索引失效总结</strong></p>
<ol>
    <li>尽量采用确认的、顺序的、逐步的</li>
    <li>模糊查询<code>%</code>不在前</li>
    <li>索引列不运算</li>
</ol>
<h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2>
<p>自5.6引入了索引下推优化。默认开启</p>
<blockquote>
    <p>可使用<code>SET optimizer_switch = ‘index_condition_pushdown=off;</code>将其关闭。</p>
</blockquote>
<ul>
    <li>有了索引下推优化，可以在<strong>减少回表次数</strong></li>
    <li>在InnoDB中只针对二级索引有效</li>
</ul>
<p>官方文档中给的例子和解释如下：</p>
<p>在 people_table中有一个二级索引(zipcode，lastname，firstname)，查询是SELECT * FROM people WHERE zipcode=’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’;</p>
<ul>
    <li>如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件</li>
    <li>如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。</li>
</ul>
<h2 id="默认使用B-Tree的优势"><a href="#默认使用B-Tree的优势" class="headerlink" title="默认使用B+Tree的优势"></a>默认使用B+Tree的优势</h2>
<blockquote>
    <p>为什么索引结构默认使用B+Tree，而不是B-Tree，Hash，二叉树，红黑树？</p>
</blockquote>
<p>B-tree：</p>
<ul>
    <li>B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B(B-)树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对<code>IO读写次数就降低</code>了。</li>
    <li>由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在<code>区间查询</code>的情况，所以通常B+树用于数据库索引。</li>
</ul>
<p>Hash：</p>
<ul>
    <li>
        <p>虽然可以快速定位，但是没有顺序，IO复杂度高；</p>
    </li>
    <li>
        <p>基于Hash表实现，只有Memory存储引擎显式支持哈希索引 ；</p>
    </li>
    <li>适合<strong>等值查询</strong>，如=、in()、&lt;=&gt;，不支持范围查询 ；</li>
    <li>因为不是按照索引值顺序存储的，就不能像B+Tree索引一样利用索引完成排序 ；</li>
    <li>Hash索引在查询等值时非常快 ；</li>
    <li>因为Hash索引始终索引的<strong>所有列的全部内容</strong>，所以不支持部分索引列的匹配查找 ；</li>
    <li>如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题 。</li>
</ul>
<p>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且IO代价高。</p>
<p>红黑树：树的高度随着数据量增加而增加，IO代价高。</p>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2>
<p>《高性能MySQL》</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis服务与连接那些事儿</title>
    <url>/51496.html</url>
    <content><![CDATA[<h2 id="启动示例"><a href="#启动示例" class="headerlink" title="启动示例"></a>启动示例</h2>
<p>当我们需要使用Redis的时候需要把redis的服务开启。如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server</span><br><span class="line"><span class="comment"># 守护进程方式启动</span></span><br><span class="line">redis-server &amp;</span><br><span class="line"><span class="comment"># 使用自定义redis.conf启动</span></span><br><span class="line">redis-server path</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<a id="more"></a>
<p><code>redis-server</code>如图</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmoqnuejzfj31so0mitc6.jpg" alt=""></p>
<p>这样虽然是启动了，但是这个终端却用不了了，我个人并不是很喜欢。那么有没有可以让他既可以运行，而且保证不会占用我们的终端呢</p>
<p>这里有两种方法</p>
<ul>
    <li>
        <p>使用<code>redis-server &amp;</code>明显启动示例即可</p>
    </li>
    <li>
        <p>redis-server ——daemonize yes (以守护进程的方式运行redis)</p>
        <p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmpopzvxl4j30s40cq0u4.jpg" alt=""></p>
    </li>
</ul>
<blockquote>
    <p>小技巧：</p>
    <p>redis-server —配置名 配置的值</p>
    <p>例如：redis-server —port 8765 此时你就可以在你的8765端口上运行redis</p>
    <p>这样就可以无需修改redis.conf,就可以定制化的运行redis</p>
</blockquote>
<h3 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h3>
<p>既然看过redis的配置文档，不自己亲手试一试怎么能行。话不多说直接开干。以下为给出最基本的的redis.conf，当然如果有需要也按需添加一些。</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">mkdir /database/6379</span><br><span class="line">cat &gt; /database/6379/redis.conf&lt;&lt;EOF</span><br><span class="line">daemonize <span class="literal">yes</span></span><br><span class="line">port 6379</span><br><span class="line">logfile /database/6379/redis.log</span><br><span class="line">dir /database/6379</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">EOF</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>守护进程(后台)运行:daemonize yes<br>配置端口号 port 6379<br>配置日志 logfile /database/6379/redis.log<br>持久化文件存储位置 dir /database/6379<br>RDB持久化数据文件 dbfilename dump.rdb</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmppbthbjgj31c80kktbr.jpg" alt=""></p>
<p>以上就已经完成了redis服务启动的部分，那么我们接下来看看redis的连接部分</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 本地连接</span></span><br><span class="line">redis-cli	<span class="comment"># 相当于 redis-cli -h 127.0.0.1 -p 6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程连接</span></span><br><span class="line">redis-cli -h host -p port -a passwd</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmq0bbke7zj30e0044745.jpg" alt=""></p>
<p>如图：出现此“unicode”编码显示问题，改如何解决？</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmq0dsx7o1j30zw06adft.jpg" alt=""></p>
<p>本地连接直接使用<code>redis-cli</code>，直接在本地连接即可。此过不多赘述</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmq0glrkj0j31pc07udgu.jpg" alt=""></p>
<blockquote>
    <p>DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions:<br>1) Just disable protected mode sending the command ‘CONFIG SET protected-mode no’ from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent.<br>2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to ‘no’, and then restarting the server.<br>3) If you started the server manually just for testing, restart it with the ‘—protected-mode no’ option.<br>4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</p>
    <p>译文：DENIED Redis正在保护模式下运行，因为已启用保护模式、未指定绑定地址、未向客户端请求身份验证密码。在这种模式下，只接受来自环回接口的连接。如果您想从外部计算机连接到Redis</p>
    <p>只需通过从服务器运行的同一主机连接到Redis，从环回接口发送命令’CONFIG SET protected mode no’来禁用保护模式，但是如果这样做，请确保Redis不能从internet公开访问。使用CONFIG REWRITE将此更改永久化</p>
    <p>您可以通过编辑Redis配置文件，将protectedmode选项设置为no，然后重新启动服务器来禁用protectedmode。</p>
    <p>如果只是为了测试而手动启动服务器，请使用“-protected mode no”选项重新启动服务器</p>
    <p>设置绑定地址或身份验证密码。</p>
    <p>服务器就可以开始接受来自外部的连接。</p>
</blockquote>
<p>那么从以上得知，redis是默认关闭远程连接以及开启保护模式。开启远程连接的方式有以下几种</p>
<ol>
    <li>在本地(打开redis服务)的机器，采用回环地址连接(即是127.0.0.1)，连接redis，后使用<code>CONFIG SET protected mode no</code>就可以允许远程连接(推荐)，使用CONFIG REWRITE将此更改永久化</li>
    <li>在配置文件中关闭保护模式<code>protected mode no</code>,重启redis服务(不推荐)</li>
    <li>关闭redis服务，使用<code>redis-server -protected mode no</code>，启动服务</li>
    <li>配置ip访问或密码(最推荐)</li>
</ol>
<p>综上，我们来配置一下我们的<code>redis.conf</code>，如下</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">daemonize <span class="literal">yes</span></span><br><span class="line">port 6379</span><br><span class="line">logfile /database/6379/redis.log</span><br><span class="line">dir /database/6379</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">requirepass 123321</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2>
<p>说到性能与测试这两个都是，大家一直关心的问题。那么redis的性能测试该怎么做呢。咋这里我们了解一下<code>redis-brnchmark</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmq49jlh69j31ao0nmjw9.jpg" alt=""></p>
<p>具体参数如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Usage: redis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests&gt;] [-k &lt;boolean&gt;]</span><br><span class="line"></span><br><span class="line"> -h &lt;hostname&gt;      Server hostname (default 127.0.0.1)</span><br><span class="line"> -p &lt;port&gt;          Server port (default 6379)</span><br><span class="line"> -s &lt;socket&gt;        Server socket (overrides host and port)</span><br><span class="line"> -a &lt;password&gt;      Password <span class="keyword">for</span> Redis Auth</span><br><span class="line"> --user &lt;username&gt;  Used to send ACL style <span class="string">'AUTH username pass'</span>. Needs -a.</span><br><span class="line"> -c &lt;clients&gt;       Number of parallel connections (default 50)</span><br><span class="line"> -n &lt;requests&gt;      Total number of requests (default 100000)</span><br><span class="line"> -d &lt;size&gt;          Data size of SET/GET value <span class="keyword">in</span> bytes (default 3)</span><br><span class="line"> --dbnum &lt;db&gt;       SELECT the specified db number (default 0)</span><br><span class="line"> --threads &lt;num&gt;    Enable multi-thread mode.</span><br><span class="line"> --cluster          Enable cluster mode.</span><br><span class="line"> --<span class="built_in">enable</span>-tracking  Send CLIENT TRACKING on before starting benchmark.</span><br><span class="line"> -k &lt;boolean&gt;       1=keep alive 0=reconnect (default 1)</span><br><span class="line"> -r &lt;keyspacelen&gt;   Use random keys <span class="keyword">for</span> SET/GET/INCR, random values <span class="keyword">for</span> SADD,</span><br><span class="line">                    random members and scores <span class="keyword">for</span> ZADD.</span><br><span class="line">  Using this option the benchmark will expand the string __rand_int__</span><br><span class="line">  inside an argument with a 12 digits number <span class="keyword">in</span> the specified range</span><br><span class="line">  from 0 to keyspacelen-1. The substitution changes every time a <span class="built_in">command</span></span><br><span class="line">  is executed. Default tests use this to hit random keys <span class="keyword">in</span> the</span><br><span class="line">  specified range.</span><br><span class="line"> -P &lt;numreq&gt;        Pipeline &lt;numreq&gt; requests. Default 1 (no pipeline).</span><br><span class="line"> -e                 If server replies with errors, show them on stdout.</span><br><span class="line">                    (no more than 1 error per second is displayed)</span><br><span class="line"> -q                 Quiet. Just show query/sec values</span><br><span class="line"> --precision        Number of decimal places to display <span class="keyword">in</span> latency output (default 0)</span><br><span class="line"> --csv              Output <span class="keyword">in</span> CSV format</span><br><span class="line"> -l                 Loop. Run the tests forever</span><br><span class="line"> -t &lt;tests&gt;         Only run the comma separated list of tests. The <span class="built_in">test</span></span><br><span class="line">                    names are the same as the ones produced as output.</span><br><span class="line"> -I                 Idle mode. Just open N idle connections and <span class="built_in">wait</span>.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line"> Run the benchmark with the default configuration against 127.0.0.1:6379:</span><br><span class="line">   $ redis-benchmark</span><br><span class="line"></span><br><span class="line"> Use 20 parallel clients, <span class="keyword">for</span> a total of 100k requests, against 192.168.1.1:</span><br><span class="line">   $ redis-benchmark -h 192.168.1.1 -p 6379 -n 100000 -c 20</span><br><span class="line"></span><br><span class="line"> Fill 127.0.0.1:6379 with about 1 million keys only using the SET <span class="built_in">test</span>:</span><br><span class="line">   $ redis-benchmark -t <span class="built_in">set</span> -n 1000000 -r 100000000</span><br><span class="line"></span><br><span class="line"> Benchmark 127.0.0.1:6379 <span class="keyword">for</span> a few commands producing CSV output:</span><br><span class="line">   $ redis-benchmark -t ping,<span class="built_in">set</span>,get -n 100000 --csv</span><br><span class="line"></span><br><span class="line"> Benchmark a specific <span class="built_in">command</span> line:</span><br><span class="line">   $ redis-benchmark -r 10000 -n 10000 <span class="built_in">eval</span> <span class="string">'return redis.call("ping")'</span> 0</span><br><span class="line"></span><br><span class="line"> Fill a list with 10000 random elements:</span><br><span class="line">   $ redis-benchmark -r 10000 -n 10000 lpush mylist __rand_int__</span><br><span class="line"></span><br><span class="line"> On user specified <span class="built_in">command</span> lines __rand_int__ is replaced with a random <span class="built_in">integer</span></span><br><span class="line"> with a range of values selected by the -r option.</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="在线修改配置"><a href="#在线修改配置" class="headerlink" title="在线修改配置"></a>在线修改配置</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">CONFIG GET	*(配置名，例如daemonize，protected-mode等)				<span class="comment"># 查看配置</span></span><br><span class="line">CONFIG RESETSTAT	<span class="comment"># 命令用于重置 INFO 命令中的某些统计数据</span></span><br><span class="line">CONFIG REWRITE		<span class="comment"># 将修改的设置回写配置文件</span></span><br><span class="line">CONFIG SET			  <span class="comment"># 设置参数</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">CONFIG GET	*</span><br><span class="line"><span class="comment"># 输出结果如下</span></span><br><span class="line">  1) <span class="string">"rdbchecksum"</span>                                                                                                           </span><br><span class="line">  2) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line">  3) <span class="string">"daemonize"</span>                                                                                                             </span><br><span class="line">  4) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line">  5) <span class="string">"io-threads-do-reads"</span>                                                                                                   </span><br><span class="line">  6) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line">  7) <span class="string">"lua-replicate-commands"</span>                                                                                                </span><br><span class="line">  8) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line">  9) <span class="string">"always-show-logo"</span>                                                                                                      </span><br><span class="line"> 10) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 11) <span class="string">"protected-mode"</span>                                                                                                        </span><br><span class="line"> 12) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line"> 13) <span class="string">"rdbcompression"</span>                                                                                                        </span><br><span class="line"> 14) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line"> 15) <span class="string">"rdb-del-sync-files"</span>                                                                                                    </span><br><span class="line"> 16) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 17) <span class="string">"activerehashing"</span>                                                                                                       </span><br><span class="line"> 18) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line"> 19) <span class="string">"stop-writes-on-bgsave-error"</span>                                                                                           </span><br><span class="line"> 20) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line"> 21) <span class="string">"dynamic-hz"</span>                                                                                                            </span><br><span class="line"> 22) <span class="string">"yes"</span>                                                                                                                   </span><br><span class="line"> 23) <span class="string">"lazyfree-lazy-eviction"</span>                                                                                                </span><br><span class="line"> 24) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 25) <span class="string">"lazyfree-lazy-expire"</span>                                                                                                  </span><br><span class="line"> 26) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 27) <span class="string">"lazyfree-lazy-server-del"</span>                                                                                              </span><br><span class="line"> 28) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 29) <span class="string">"lazyfree-lazy-user-del"</span>                                                                                                </span><br><span class="line"> 30) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 31) <span class="string">"repl-disable-tcp-nodelay"</span>                                                                                              </span><br><span class="line"> 32) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 33) <span class="string">"repl-diskless-sync"</span>                                                                                                    </span><br><span class="line"> 34) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 35) <span class="string">"gopher-enabled"</span>                                                                                                        </span><br><span class="line"> 36) <span class="string">"no"</span>                                                                                                                    </span><br><span class="line"> 37) <span class="string">"aof-rewrite-incremental-fsync"</span></span><br><span class="line"> 38) <span class="string">"yes"</span></span><br><span class="line"> 39) <span class="string">"no-appendfsync-on-rewrite"</span></span><br><span class="line"> 40) <span class="string">"no"</span></span><br><span class="line"> 41) <span class="string">"cluster-require-full-coverage"</span></span><br><span class="line"> 42) <span class="string">"yes"</span></span><br><span class="line"> 43) <span class="string">"rdb-save-incremental-fsync"</span></span><br><span class="line"> 44) <span class="string">"yes"</span></span><br><span class="line"> 45) <span class="string">"aof-load-truncated"</span></span><br><span class="line"> 46) <span class="string">"yes"</span></span><br><span class="line"> 47) <span class="string">"aof-use-rdb-preamble"</span></span><br><span class="line"> 48) <span class="string">"yes"</span></span><br><span class="line"> 49) <span class="string">"cluster-replica-no-failover"</span></span><br><span class="line"> 50) <span class="string">"no"</span></span><br><span class="line"> 51) <span class="string">"cluster-slave-no-failover"</span></span><br><span class="line"> 52) <span class="string">"no"</span></span><br><span class="line"> 53) <span class="string">"replica-lazy-flush"</span></span><br><span class="line"> 54) <span class="string">"no"</span></span><br><span class="line"> 55) <span class="string">"slave-lazy-flush"</span></span><br><span class="line"> 56) <span class="string">"no"</span></span><br><span class="line"> 57) <span class="string">"replica-serve-stale-data"</span></span><br><span class="line"> 58) <span class="string">"yes"</span></span><br><span class="line"> 59) <span class="string">"slave-serve-stale-data"</span></span><br><span class="line"> 60) <span class="string">"yes"</span></span><br><span class="line"> 61) <span class="string">"replica-read-only"</span></span><br><span class="line"> 62) <span class="string">"yes"</span></span><br><span class="line"> 63) <span class="string">"slave-read-only"</span></span><br><span class="line"> 64) <span class="string">"yes"</span></span><br><span class="line"> 65) <span class="string">"replica-ignore-maxmemory"</span></span><br><span class="line"> 66) <span class="string">"yes"</span></span><br><span class="line"> 67) <span class="string">"slave-ignore-maxmemory"</span></span><br><span class="line"> 68) <span class="string">"yes"</span></span><br><span class="line"> 69) <span class="string">"jemalloc-bg-thread"</span></span><br><span class="line"> 70) <span class="string">"yes"</span></span><br><span class="line"> 71) <span class="string">"activedefrag"</span></span><br><span class="line"> 72) <span class="string">"no"</span></span><br><span class="line"> 73) <span class="string">"syslog-enabled"</span></span><br><span class="line"> 74) <span class="string">"no"</span></span><br><span class="line"> 75) <span class="string">"cluster-enabled"</span></span><br><span class="line"> 76) <span class="string">"no"</span></span><br><span class="line"> 77) <span class="string">"appendonly"</span></span><br><span class="line"> 78) <span class="string">"no"</span></span><br><span class="line"> 79) <span class="string">"cluster-allow-reads-when-down"</span></span><br><span class="line"> 80) <span class="string">"no"</span></span><br><span class="line"> 81) <span class="string">"aclfile"</span></span><br><span class="line"> 82) <span class="string">""</span></span><br><span class="line"> 83) <span class="string">"unixsocket"</span></span><br><span class="line"> 84) <span class="string">""</span></span><br><span class="line"> 85) <span class="string">"pidfile"</span></span><br><span class="line"> 86) <span class="string">"/var/run/redis.pid"</span></span><br><span class="line"> 87) <span class="string">"replica-announce-ip"</span></span><br><span class="line"> 88) <span class="string">""</span></span><br><span class="line"> 89) <span class="string">"slave-announce-ip"</span></span><br><span class="line"> 90) <span class="string">""</span></span><br><span class="line"> 91) <span class="string">"masteruser"</span></span><br><span class="line"> 92) <span class="string">""</span></span><br><span class="line"> 93) <span class="string">"masterauth"</span></span><br><span class="line"> 94) <span class="string">""</span></span><br><span class="line"> 95) <span class="string">"cluster-announce-ip"</span></span><br><span class="line"> 96) <span class="string">""</span></span><br><span class="line"> 97) <span class="string">"syslog-ident"</span></span><br><span class="line"> 98) <span class="string">"redis"</span></span><br><span class="line"> 99) <span class="string">"dbfilename"</span></span><br><span class="line">100) <span class="string">"dump.rdb"</span></span><br><span class="line">101) <span class="string">"appendfilename"</span></span><br><span class="line">102) <span class="string">"appendonly.aof"</span></span><br><span class="line">103) <span class="string">"server_cpulist"</span></span><br><span class="line">104) <span class="string">""</span></span><br><span class="line">105) <span class="string">"bio_cpulist"</span></span><br><span class="line">106) <span class="string">""</span></span><br><span class="line">107) <span class="string">"aof_rewrite_cpulist"</span></span><br><span class="line">108) <span class="string">""</span></span><br><span class="line">109) <span class="string">"bgsave_cpulist"</span></span><br><span class="line">110) <span class="string">""</span></span><br><span class="line">111) <span class="string">"ignore-warnings"</span></span><br><span class="line">112) <span class="string">"ARM64-COW-BUG"</span></span><br><span class="line">113) <span class="string">"supervised"</span></span><br><span class="line">114) <span class="string">"no"</span></span><br><span class="line">115) <span class="string">"syslog-facility"</span></span><br><span class="line">116) <span class="string">"local0"</span></span><br><span class="line">117) <span class="string">"repl-diskless-load"</span></span><br><span class="line">118) <span class="string">"disabled"</span></span><br><span class="line">119) <span class="string">"loglevel"</span></span><br><span class="line">120) <span class="string">"notice"</span></span><br><span class="line">121) <span class="string">"maxmemory-policy"</span></span><br><span class="line">122) <span class="string">"noeviction"</span></span><br><span class="line">123) <span class="string">"appendfsync"</span></span><br><span class="line">124) <span class="string">"everysec"</span></span><br><span class="line">125) <span class="string">"oom-score-adj"</span></span><br><span class="line">126) <span class="string">"no"</span></span><br><span class="line">127) <span class="string">"databases"</span></span><br><span class="line">128) <span class="string">"16"</span></span><br><span class="line">129) <span class="string">"port"</span></span><br><span class="line">130) <span class="string">"6379"</span></span><br><span class="line">131) <span class="string">"io-threads"</span></span><br><span class="line">132) <span class="string">"1"</span></span><br><span class="line">133) <span class="string">"auto-aof-rewrite-percentage"</span></span><br><span class="line">134) <span class="string">"100"</span></span><br><span class="line">135) <span class="string">"cluster-replica-validity-factor"</span></span><br><span class="line">136) <span class="string">"10"</span></span><br><span class="line">137) <span class="string">"cluster-slave-validity-factor"</span></span><br><span class="line">138) <span class="string">"10"</span></span><br><span class="line">139) <span class="string">"list-max-ziplist-size"</span></span><br><span class="line">140) <span class="string">"-2"</span></span><br><span class="line">141) <span class="string">"tcp-keepalive"</span></span><br><span class="line">142) <span class="string">"300"</span></span><br><span class="line">143) <span class="string">"cluster-migration-barrier"</span></span><br><span class="line">144) <span class="string">"1"</span></span><br><span class="line">145) <span class="string">"active-defrag-cycle-min"</span></span><br><span class="line">146) <span class="string">"1"</span></span><br><span class="line">147) <span class="string">"active-defrag-cycle-max"</span></span><br><span class="line">148) <span class="string">"25"</span></span><br><span class="line">149) <span class="string">"active-defrag-threshold-lower"</span></span><br><span class="line">150) <span class="string">"10"</span></span><br><span class="line">151) <span class="string">"active-defrag-threshold-upper"</span></span><br><span class="line">152) <span class="string">"100"</span></span><br><span class="line">153) <span class="string">"lfu-log-factor"</span></span><br><span class="line">154) <span class="string">"10"</span></span><br><span class="line">155) <span class="string">"lfu-decay-time"</span></span><br><span class="line">156) <span class="string">"1"</span></span><br><span class="line">157) <span class="string">"replica-priority"</span></span><br><span class="line">158) <span class="string">"100"</span></span><br><span class="line">159) <span class="string">"slave-priority"</span></span><br><span class="line">160) <span class="string">"100"</span></span><br><span class="line">161) <span class="string">"repl-diskless-sync-delay"</span></span><br><span class="line">162) <span class="string">"5"</span></span><br><span class="line">163) <span class="string">"maxmemory-samples"</span></span><br><span class="line">164) <span class="string">"5"</span></span><br><span class="line">165) <span class="string">"timeout"</span></span><br><span class="line">166) <span class="string">"0"</span></span><br><span class="line">167) <span class="string">"replica-announce-port"</span></span><br><span class="line">168) <span class="string">"0"</span></span><br><span class="line">169) <span class="string">"slave-announce-port"</span></span><br><span class="line">170) <span class="string">"0"</span></span><br><span class="line">171) <span class="string">"tcp-backlog"</span></span><br><span class="line">172) <span class="string">"511"</span></span><br><span class="line">173) <span class="string">"cluster-announce-bus-port"</span></span><br><span class="line">174) <span class="string">"0"</span></span><br><span class="line">175) <span class="string">"cluster-announce-port"</span></span><br><span class="line">176) <span class="string">"0"</span></span><br><span class="line">177) <span class="string">"repl-timeout"</span></span><br><span class="line">178) <span class="string">"60"</span></span><br><span class="line">179) <span class="string">"repl-ping-replica-period"</span></span><br><span class="line">180) <span class="string">"10"</span></span><br><span class="line">181) <span class="string">"repl-ping-slave-period"</span></span><br><span class="line">182) <span class="string">"10"</span></span><br><span class="line">183) <span class="string">"list-compress-depth"</span></span><br><span class="line">184) <span class="string">"0"</span></span><br><span class="line">185) <span class="string">"rdb-key-save-delay"</span></span><br><span class="line">186) <span class="string">"0"</span></span><br><span class="line">187) <span class="string">"key-load-delay"</span></span><br><span class="line">188) <span class="string">"0"</span></span><br><span class="line">189) <span class="string">"active-expire-effort"</span></span><br><span class="line">190) <span class="string">"1"</span></span><br><span class="line">191) <span class="string">"hz"</span></span><br><span class="line">192) <span class="string">"10"</span></span><br><span class="line">193) <span class="string">"min-replicas-to-write"</span></span><br><span class="line">194) <span class="string">"0"</span></span><br><span class="line">195) <span class="string">"min-slaves-to-write"</span></span><br><span class="line">196) <span class="string">"0"</span></span><br><span class="line">197) <span class="string">"min-replicas-max-lag"</span></span><br><span class="line">198) <span class="string">"10"</span></span><br><span class="line">199) <span class="string">"min-slaves-max-lag"</span></span><br><span class="line">200) <span class="string">"10"</span></span><br><span class="line">201) <span class="string">"maxclients"</span></span><br><span class="line">202) <span class="string">"10000"</span></span><br><span class="line">203) <span class="string">"active-defrag-max-scan-fields"</span></span><br><span class="line">204) <span class="string">"1000"</span></span><br><span class="line">205) <span class="string">"slowlog-max-len"</span></span><br><span class="line">206) <span class="string">"128"</span></span><br><span class="line">207) <span class="string">"acllog-max-len"</span></span><br><span class="line">208) <span class="string">"128"</span></span><br><span class="line">209) <span class="string">"lua-time-limit"</span></span><br><span class="line">210) <span class="string">"5000"</span></span><br><span class="line">211) <span class="string">"cluster-node-timeout"</span></span><br><span class="line">212) <span class="string">"15000"</span></span><br><span class="line">213) <span class="string">"slowlog-log-slower-than"</span></span><br><span class="line">214) <span class="string">"10000"</span></span><br><span class="line">215) <span class="string">"latency-monitor-threshold"</span></span><br><span class="line">216) <span class="string">"0"</span></span><br><span class="line">217) <span class="string">"proto-max-bulk-len"</span></span><br><span class="line">218) <span class="string">"536870912"</span></span><br><span class="line">219) <span class="string">"stream-node-max-entries"</span></span><br><span class="line">220) <span class="string">"100"</span></span><br><span class="line">221) <span class="string">"repl-backlog-size"</span></span><br><span class="line">222) <span class="string">"1048576"</span></span><br><span class="line">223) <span class="string">"maxmemory"</span></span><br><span class="line">224) <span class="string">"0"</span></span><br><span class="line">225) <span class="string">"hash-max-ziplist-entries"</span></span><br><span class="line">226) <span class="string">"512"</span></span><br><span class="line">227) <span class="string">"set-max-intset-entries"</span></span><br><span class="line">228) <span class="string">"512"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>小技巧：</p>
    <p>config get 支持模糊匹配，例如包含所有re开头的配置名，<code>config get re*</code>,</p>
    <p>所有配置名包含<code>re</code>的配置，可以使用<code>config get *re*</code></p>
</blockquote>
<h3 id="在线修改密码"><a href="#在线修改密码" class="headerlink" title="在线修改密码"></a>在线修改密码</h3>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmqn2c3zruj31e00943zd.jpg" alt=""></p>
<p>原本的密码是<code>123321</code>,这里我们将它修改为<code>123123123</code>,再一次去连接它。发现此时的密码已经修改</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmqn3y1i0ej30wy0agdgx.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>NoSQL</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis概览与安装</title>
    <url>/16021.html</url>
    <content><![CDATA[<h2 id="Redis概览"><a href="#Redis概览" class="headerlink" title="Redis概览"></a>Redis概览</h2>
<p>Redis是一个开源（BSD许可）的内存数据结构存储，用作数据库、缓存和消息代理。Redis提供诸如字符串、哈希、列表、集合、带范围查询的排序集合、位图、超日志、地理空间索引和流等数据结构。Redis具有内置的复制、Lua脚本、LRU逐出、事务和不同级别的磁盘持久性，并通过Redis Sentinel和Redis Cluster的自动分区提供高可用性</p>
<a id="more"></a>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">数据类型丰富    								（笔试、面试）*****</span><br><span class="line">支持持久化      								 （笔试、面试）*****</span><br><span class="line">多种内存分配及回收策略</span><br><span class="line">支持事务            						（面试） ****</span><br><span class="line">消息队列、消息订阅 </span><br><span class="line">支持高可用                             ****</span><br><span class="line">支持分布式分片集群 							（面试）*****</span><br><span class="line">缓存穿透\雪崩（笔试、面试）   					  *****</span><br><span class="line">Redis API                  					 **</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="Redis使用场景介绍"><a href="#Redis使用场景介绍" class="headerlink" title="Redis使用场景介绍"></a>Redis使用场景介绍</h2>
<p>Memcached：多核的缓存服务，更加适合于多用户并发访问次数较少的应用场景<br>Redis：单核的缓存服务，单节点情况下，更加适合于少量用户，多次访问的应用场景。Redis一般是单机多实例架构，配合redis集群出现。</p>
<h2 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h2>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 官方示例</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"><span class="comment"># 安装源码包</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.0.10.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf redis-6.0.10.tar.gz</span><br><span class="line"><span class="comment"># 进入文件</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.0.10</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定制</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir /database &amp;&amp; <span class="built_in">cd</span> /database</span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.0.10.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf redis-6.0.10.tar.gz</span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.0.10</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=/databases/redis-6.0.10/src:<span class="variable">$PATH</span>"</span> &gt;&gt; /etc/profile  &amp;&amp; <span class="built_in">source</span> /etc/profile</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>安装成功，如下图</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmmgwgimywj30tu050jrs.jpg" alt=""></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># src/redis-server &amp; </span></span><br><span class="line">src/redis-cli</span><br><span class="line">redis&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmmhgt73evj30ji07gq3a.jpg" alt=""></p>
<blockquote>
    <p>温馨提示：</p>
    <p>若编译失败，请检查<code>gcc</code>版本(可使用<code>gcc -v</code>)查看</p>
    <p>我这里的是9.0.1</p>
</blockquote>
<h3 id="包管理工具安装"><a href="#包管理工具安装" class="headerlink" title="包管理工具安装"></a>包管理工具安装</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">apt-get -y update &amp;&amp; apt-get -y upgrade &amp;&amp; apt-get -y dist-upgrade </span><br><span class="line">apt install -y  software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:redislabs/redis</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Referer</p>
<p><a href="https://redis.io/" target="_blank" rel="noopener">Redis官网</a></p>
<p><a href="http://www.redis.cn/" target="_blank" rel="noopener">Redis中文文档</a></p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>NoSQL</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据类型</title>
    <url>/1196530272.html</url>
    <content><![CDATA[<h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2>
<p>MySQL支持丰富的数据类型，总体上可以分为数值类型、日期和时间类型、字符串类型。</p>
<p>数值类型包括整数类型、浮点数类型和定点数类型；字符串类型包括文本字符串类型和二进制字符串类型;</p>
<p>具体入下所示</p>
<p>主要包括以下几大类：<br>数值类型：</p>
<ul>
    <li>
        <p>BIT、BOOL、TINYINT、SMALLINT、MEDIUM INT、 INT、 BIG INT、</p>
    </li>
    <li>
        <p>FLOAT、DOUBLE、DECIMAL(浮点数类型)</p>
    </li>
</ul>
<p>字符串类型：CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB、ENUM、SET</p>
<p>日期类型：Date、DateTime、TimeStamp、Time、Year</p>
<p>空间类型：Geometry、Point、LineString、MultiPoint、MultiLineString、MultiPolyGon、Polygon、GeometryCollection</p>
<p>其他类型：JSON</p>
<a id="more"></a>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3>
<blockquote>
    <p>一个字节是8位</p>
    <p>无符号（UNSIGNED）为翻倍</p>
</blockquote>
<h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4>
<p>MySQL中的整数类型包括TINYINT、SMALLINT、MEDIUMINT、INT(INTEGER)和BIGINT。不同的整数类型，其所需要的存储空间和数值范围不尽相同</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">数值类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">存储空间</th>
                <th style="text-align:center">取值范围</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">TINY INT</td>
                <td style="text-align:center">非常小的整数</td>
                <td style="text-align:center">1个字节</td>
                <td style="text-align:center">- 2 ^ 7 ~ 2 ^ 7 -1</td>
            </tr>
            <tr>
                <td style="text-align:center">SMALL INT</td>
                <td style="text-align:center">小整数</td>
                <td style="text-align:center">2个字节</td>
                <td style="text-align:center">- 2 ^ 15 ~ 2 ^ 15 -1</td>
            </tr>
            <tr>
                <td style="text-align:center">MEDIUM INT</td>
                <td style="text-align:center">中型的整数</td>
                <td style="text-align:center">3个字节</td>
                <td style="text-align:center">- 2 ^ 23 ~ 2 ^ 23 -1</td>
            </tr>
            <tr>
                <td style="text-align:center">INT</td>
                <td style="text-align:center">整数</td>
                <td style="text-align:center">4个字节</td>
                <td style="text-align:center">- 2 ^ 31 ~ 2 ^ 31 -1</td>
            </tr>
            <tr>
                <td style="text-align:center">BIG INT</td>
                <td style="text-align:center">大整数</td>
                <td style="text-align:center">8个字节</td>
                <td style="text-align:center">- 2 ^ 63 ~ 2 ^ 63 - 1</td>
            </tr>
        </tbody>
    </table>
</div>
<blockquote>
    <p>整数类型的显示宽度与数据类型的取值范围无关。</p>
    <p>显示宽度只是指定最大显示的数字个数，如果在数据表中插入了大于显示宽度，但是并没有超过整数类型的数值范围的数据，依然可以正确地插入数据，并且能够正确地显示</p>
</blockquote>
<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">数值类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">存储空间</th>
                <th style="text-align:center">取值范围</th>
                <th>说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">DECIMAL(M,D)</td>
                <td style="text-align:center">定点数类型</td>
                <td style="text-align:center">M + 1 <br />或 <br />M + 2</td>
                <td style="text-align:center">~</td>
                <td>未打包的浮点数，用法类似于FLOAT与DOUBLE<br />浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。</td>
            </tr>
            <tr>
                <td style="text-align:center">FLOAT</td>
                <td style="text-align:center">单精度浮点类型</td>
                <td style="text-align:center">4 个字节</td>
                <td style="text-align:center">2 ^ 31 ~2 ^ 31 - 1</td>
                <td>~</td>
            </tr>
            <tr>
                <td style="text-align:center">DOUBLE</td>
                <td style="text-align:center">双精度浮点类型</td>
                <td style="text-align:center">8 个字节</td>
                <td style="text-align:center">2 ^61 ~2 ^ 61 - 1</td>
                <td>~</td>
            </tr>
        </tbody>
    </table>
</div>
<blockquote>
    <p>浮点数类型中的FLOAT和DOUBLE类型在不指定数据精度时，默认会按照实际的计算机硬件和操作系统决定的数据精度进行显示。如果用户指定的精度超出了浮点数类型的数据精度，则MySQL会自动进行四舍五入操作。</p>
</blockquote>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">数值类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">存储空间</th>
                <th style="text-align:center">说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">BOOL</td>
                <td style="text-align:center">布尔类型</td>
                <td style="text-align:center">1字节</td>
                <td style="text-align:center">TINY INT(1)的别名</td>
            </tr>
            <tr>
                <td style="text-align:center">BIT</td>
                <td style="text-align:center">位类型</td>
                <td style="text-align:center"></td>
                <td style="text-align:center">位类型(M), 每个值存储M位，默认为1，最大64</td>
            </tr>
            <tr>
                <td style="text-align:center">SERIAL</td>
                <td style="text-align:center">无符号大整数</td>
                <td style="text-align:center">8 个字节</td>
                <td style="text-align:center">BIG INT UNSIGNED NOT NULL AUTO_INCREMEINT UNIQUE</td>
            </tr>
        </tbody>
    </table>
</div>
<p>浮点数类型中的FLOAT类型和DOUBLE类型在不指定精度时，默认会按照计算机硬件和操作系统决定的精度进行表示；而定点数类型中的DECIMAL类型不指定精度时，默认为DECIMAL(10,0)。</p>
<p>当数据类型的长度一定时，浮点数能够表示的数据范围更大，但是浮点数会引起精度问题，不适合存储高精度类型的数据。</p>
<h3 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h3>
<h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">字符类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">存储空间</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">CHAR</td>
                <td style="text-align:center">字符类型</td>
                <td style="text-align:center">固定长度字符串，最多为255字符</td>
            </tr>
            <tr>
                <td style="text-align:center">VARCHAR</td>
                <td style="text-align:center">可变字符类型</td>
                <td style="text-align:center">可变长字符串，最多为65,535字符</td>
            </tr>
            <tr>
                <td style="text-align:center">TINYTEXT</td>
                <td style="text-align:center">短文本类型</td>
                <td style="text-align:center">可变长度字符串，最多为255字符</td>
            </tr>
            <tr>
                <td style="text-align:center">TEXT</td>
                <td style="text-align:center">文本类型</td>
                <td style="text-align:center">可变长度字符串，最多为65,535字符</td>
            </tr>
            <tr>
                <td style="text-align:center">MEDIUMTEXT</td>
                <td style="text-align:center">中等文本类型</td>
                <td style="text-align:center">可变长度，最多为16,777,215 字符</td>
            </tr>
            <tr>
                <td style="text-align:center">LONGTEXT</td>
                <td style="text-align:center">长文本类型</td>
                <td style="text-align:center">可变长度，最多为4,294,967,295字符</td>
            </tr>
        </tbody>
    </table>
</div>
<p><strong>char和varchar</strong></p>
<ol>
    <li>
        <p>char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，varchar不限于此。 </p>
    </li>
    <li>
        <p>char(n) 固定长度，char(4)不管是存入几个字符，都将占用4个字节，varchar是存入的实际字符数+1个字节（n&lt;=255）或2个字节(n&gt;255)，所以varchar(4),存入3个字符将占用4个字节。 </p>
    </li>
    <li>char类型的字符串检索速度要比varchar类型的快。</li>
</ol>
<p><strong>varchar和text</strong></p>
<ol>
    <li>
        <p>varchar可指定n，text不能指定，内部存储varchar是存入的实际字符数+1个字节（n&lt;=255）或2个字节(n&gt;255)，text是实际字符数+2个字节。 </p>
    </li>
    <li>
        <p>text类型不能有默认值。 </p>
    </li>
    <li>varchar可直接创建索引，text创建索引要指定前多少个字符。varchar查询速度快于text,在都创建索引的情况下，text的索引似乎不起作用。</li>
</ol>
<h4 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">占位</th>
                <th style="text-align:center">说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">BINARY</td>
                <td style="text-align:center">二进制字符</td>
                <td style="text-align:center"></td>
                <td style="text-align:center">类似于CHAR（固定长度）类型，但存储的是<strong>二进制字节字符串</strong></td>
            </tr>
            <tr>
                <td style="text-align:center">VARBINARY</td>
                <td style="text-align:center">可变二进制字符</td>
                <td style="text-align:center"></td>
                <td style="text-align:center">类似于VARCHAR（可变长度）类型，但存储的是<strong>二进制字节字符串</strong></td>
            </tr>
            <tr>
                <td style="text-align:center">TINYBLOB</td>
                <td style="text-align:center">较小的大二进制对象</td>
                <td style="text-align:center">1</td>
                <td style="text-align:center">最大长度255的字节的BLOB序列<br />存储时在内容前将使用1个字节表示内容的大小</td>
            </tr>
            <tr>
                <td style="text-align:center">BLOB</td>
                <td style="text-align:center">大二进制对象</td>
                <td style="text-align:center">2</td>
                <td style="text-align:center">最大长度63535的字节的BLOB序列<br />存储时在内容前将使用2个字节表示内容的大小</td>
            </tr>
            <tr>
                <td style="text-align:center">MEDIUM BLOB</td>
                <td style="text-align:center">中等大的大二进制对象</td>
                <td style="text-align:center">3</td>
                <td style="text-align:center">最大长度1677215的字节的BLOB序列<br />存储时在内容前将使用3个字节表示内容的大小</td>
            </tr>
            <tr>
                <td style="text-align:center">LONG BLOB</td>
                <td style="text-align:center">大的大二进制对象</td>
                <td style="text-align:center">4</td>
                <td style="text-align:center">最大长度4294967296的字节的BLOB序列<br />存储时在内容前将使用4个字节表示内容的大小</td>
            </tr>
        </tbody>
    </table>
</div>
<p>二进制数据(Blob)</p>
<p>1._BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。</p>
<p>2._BLOB存储的数据只能整体读出。 </p>
<p>3._TEXT可以指定字符集，_BLO不用指定字符集。</p>
<h4 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">说明</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">ENUM</td>
                <td style="text-align:center">枚举类型</td>
                <td style="text-align:center">由一组固定的合法值组成的枚举</td>
            </tr>
            <tr>
                <td style="text-align:center">SET</td>
                <td style="text-align:center">集合类型</td>
                <td style="text-align:center">由一组固定的合法值组成的集合</td>
            </tr>
        </tbody>
    </table>
</div>
<h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3>
<p>MySQL提供了表示日期和时间的数据类型，主要有YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</p>
<ul>
    <li>
        <p>DATE类型通常用来表示年月日；</p>
    </li>
    <li>
        <p>DATETIME类型通常用来表示年、月、日、时、分、秒；</p>
    </li>
    <li>
        <p>TIME类型通常用来表示时、分、秒。</p>
    </li>
</ul>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">时间/日期类型</th>
                <th style="text-align:center">类型名称</th>
                <th style="text-align:center">占位</th>
                <th style="text-align:center">日期格式</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">YEAR</td>
                <td style="text-align:center">年</td>
                <td style="text-align:center">1个字节</td>
                <td style="text-align:center">YYYY</td>
            </tr>
            <tr>
                <td style="text-align:center">TIME</td>
                <td style="text-align:center">时间</td>
                <td style="text-align:center">3个字节</td>
                <td style="text-align:center">HH:MM:SS</td>
            </tr>
            <tr>
                <td style="text-align:center">DATE</td>
                <td style="text-align:center">日期</td>
                <td style="text-align:center">3个字节</td>
                <td style="text-align:center">YYYY—MM-DD</td>
            </tr>
            <tr>
                <td style="text-align:center">TIMESTEAMP</td>
                <td style="text-align:center">日期时间</td>
                <td style="text-align:center">4个字节</td>
                <td style="text-align:center">YYYY—MM-DD HH:MM:SS</td>
            </tr>
            <tr>
                <td style="text-align:center">DATETIME</td>
                <td style="text-align:center">日期时间</td>
                <td style="text-align:center">8个字节</td>
                <td style="text-align:center">YYYY—MM-DD HH:MM:SS</td>
            </tr>
        </tbody>
    </table>
</div>
<blockquote>
    <p>若定义一个字段为timestamp，这个字段里的时间数据会随其他字段修改的时候自动刷新，所以这个数据类型的字段可以存放这条记录最后被修改的时间</p>
    <p>每种日期和时间类型都有一个有效值范围，如果超出这个有效值范围，则会以0进行存储</p>
</blockquote>
<h3 id="空间类型"><a href="#空间类型" class="headerlink" title="空间类型"></a>空间类型</h3>
<p>Geometry：存储任意几何体类型<br>Point：存储二维中的点类型<br>LineString：存储点之间的线型插值曲线类型<br>MultiPoint：存储点的集合类型<br>MultiLineString：存储点之间的线型插值曲线集合类型<br>MultiPolyGon：存储多边形集合类型<br>Polygon：存储多边形类型<br>GeometryCollection：存储任意类型集合体的集合类型</p>
<h3 id="数据类型的属性"><a href="#数据类型的属性" class="headerlink" title="数据类型的属性"></a>数据类型的属性</h3>
<h4 id="MySQL关键字-含义"><a href="#MySQL关键字-含义" class="headerlink" title="MySQL关键字 含义"></a>MySQL关键字 含义</h4>
<p>NULL 数据列可包含NULL值<br>NOT NULL 数据列不允许包含NULL值<br>DEFAULT 默认值<br>PRIMARY KEY 主键<br>AUTO_INCREMENT 自动递增，适用于整数类型<br>UNSIGNED 无符号<br>CHARACTER SET name 指定一个字符集</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Tampermonkey安装与使用</title>
    <url>/7658.html</url>
    <content><![CDATA[<h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2>
<p><strong>Tampermonkey</strong> 是一款免费的浏览器扩展和最为流行的用户脚本管理器，虽然有些受支持的浏览器拥有原生的用户脚本支持，但 Tampermonkey 将在您的用户脚本管理方面提供更多的便利。<br>它提供了诸如便捷脚本安装、自动更新检查、标签中的脚本运行状况速览、内置的编辑器等众多功能， 同时Tampermonkey还有可能正常运行原本并不兼容的脚本。</p>
<a id="more"></a>
<h3 id="Tampermonkey的安装"><a href="#Tampermonkey的安装" class="headerlink" title="Tampermonkey的安装"></a>Tampermonkey的安装</h3>
<h4 id="方式一-Chrome商店直接下载"><a href="#方式一-Chrome商店直接下载" class="headerlink" title="方式一 Chrome商店直接下载"></a>方式一 Chrome商店直接下载</h4>
<p>Chrome商店 -&gt; 搜索 Tampermonkey -&gt; Tampermonkey 安装即可</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr4arkuzzmj30yd08jdge.jpg" alt=""></p>
<p>一般情况下是无法下载的，除非你能。。。</p>
<h4 id="方式二：第三方网站进行插件文件下载"><a href="#方式二：第三方网站进行插件文件下载" class="headerlink" title="方式二：第三方网站进行插件文件下载"></a>方式二：第三方网站进行插件文件下载</h4>
<p>进入<a href="https://www.crx4chrome.com/crx/755/进行安装文件的下载，下载完成后。打开拓展程序(Chrome用户选项框" target="_blank" rel="noopener">https://www.crx4chrome.com/crx/755/进行安装文件的下载，下载完成后。打开拓展程序(Chrome用户选项框</a> -&gt; 更多工具 -&gt; 拓展程序)</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr4ay74m2aj30kd0fkt95.jpg" alt=""></p>
<p>进入如下图所示的界面</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr4ayxb6y3j31fo0mgwgp.jpg" alt=""></p>
<p>打开右上角的 <strong>开发者模式</strong>，将已经下载的文件拖拽至上图所示的界面。即可完成安装。</p>
<h3 id="使用第三方脚本"><a href="#使用第三方脚本" class="headerlink" title="使用第三方脚本"></a>使用第三方脚本</h3>
<p>进入greasyfork <a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts</a> 获取需要的插件脚本即可</p>
<h3 id="自定义开发脚本"><a href="#自定义开发脚本" class="headerlink" title="自定义开发脚本"></a>自定义开发脚本</h3>
<p>鼠标点击<strong>Tampermonkey</strong>图标呼出其选项卡，点击添加脚本。即可进入新建脚本界面。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr4baf3mybj31fj0i3gmi.jpg" alt=""></p>
<h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4>
<figure class="highlight javascript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @key value</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="字段释意："><a href="#字段释意：" class="headerlink" title="字段释意："></a>字段释意：</h4>
<h5 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h5>
<p>@name：脚本的名字(自定义)</p>
<p>@author 作者。该脚本的作者。可使用默认的you，或者你的名字</p>
<p>@description 脚本描述（类似于编程中的注释，阐述该脚本的作用等）</p>
<h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5>
<p>@namespace 脚本的命名空间(通常使用默认<a href="http://tampermonkey.net/，也可指定" target="_blank" rel="noopener">http://tampermonkey.net/，也可指定</a>)</p>
<p>@homepage, @homepageURL, @website and @source 在选项页面使用的作者主页，用于从脚本名称链接到给定页面。如果@namespace 标记以“<a href="http://”开头，则其内容也将用于此目的。" target="_blank" rel="noopener">http://”开头，则其内容也将用于此目的。</a></p>
<h5 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h5>
<p>@version 脚本版本号</p>
<p>@updateURL：用户脚本的更新 URL。 注意：需要一个@version 标签才能使更新检查工作</p>
<p>@downloadURL：URL定义检测到更新时下载脚本的 URL。如果使用值 none，则不会进行更新检查。</p>
<p>@supportURL 定义用户可以报告问题并获得个人支持的 URL。</p>
<h5 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h5>
<p>@include</p>
<p>脚本允许运行的页面，可以是多个标签实例。 支持正则语句</p>
<blockquote>
    <p>注意：</p>
    <p>@include 不支持 URL 哈希参数，必须匹配没有哈希参数的路径并使用</p>
</blockquote>
<p>示例：</p>
<figure class="highlight javascript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @include      https://www.tampermonkey.net/documentation.php?ext=dhdg</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?domain=tampermonkey.net</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">    alert(<span class="string">'HEllo'</span>)</span><br><span class="line">&#125;)();</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>保存后，当我们访问<a href="https://www.tampermonkey.net/documentation.php?ext=dhdg的时候将会弹出Hello。如下图所示" target="_blank" rel="noopener">https://www.tampermonkey.net/documentation.php?ext=dhdg的时候将会弹出Hello。如下图所示</a></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr4c8ojzwij30x204njre.jpg" alt=""></p>
<p>当@match 为 <strong>*</strong> 时，当访问任何一个页面都会alter出对应的内容来。如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr4c9uenmkj30wy04nglk.jpg" alt=""></p>
<p>@match</p>
<p>@match 与 @include 非常相似，然而@match更安全。它对 * 字符的含义设置了更严格的规则。</p>
<p>@match 与 @include他们都是匹配基于一组由匹配模式定义的 URL。匹配模式本质上是以允许的方案开头的 URL。匹配模式本质上是以允许的方案（http、https、file 或 ftp，并且可以包含“*”字符）开头的<br>URL。特殊模式匹配以允许的方案开头的任何 URL。</p>
<p>‘<em>‘ 的含义取决于它是在方案、主机还是路径部分。如果方案是 </em>，则它匹配 http 或 https，而不匹配 file、ftp 或 urn。如果主机只是 <em>，那么它匹配任何主机。如果主机是 </em>.<em>hostname</em><br>，则它匹配指定的主机或其任何子域。在路径部分，每个 ‘*’ 匹配 0 个或多个字符。</p>
<blockquote>
    <p>@match 与 @include区别请参考</p>
    <p><a href="https://wiki.greasespot.net/Metadata_Block#.40match" target="_blank" rel="noopener">https://wiki.greasespot.net/Metadata_Block#.40match</a></p>
    <p>匹配规则</p>
    <p><a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/" target="_blank" rel="noopener">https://developer.chrome.com/docs/extensions/mv3/match_patterns/</a></p>
</blockquote>
<p><strong>简单来说推荐使用@match</strong></p>
<p>@exclude</p>
<p>不匹配，相当于访问黑名单。如果访问了@exclude中与之匹配的内容则不执行自定义的JavaScript代码</p>
<p>@exclude优先权大于match和@include。如果二者都匹配了，那么默认执行@exclude规则。也就是说即是’白名单‘也是’黑名单‘那么默认为’黑名单‘</p>
<h5 id="第三方链接"><a href="#第三方链接" class="headerlink" title="第三方链接"></a>第三方链接</h5>
<p>@require</p>
<p>指向在脚本本身开始运行之前加载和执行的 JavaScript 文件。</p>
<blockquote>
    <p>脚本中可以有任意数量的@require 键。每个 @require 在安装脚本时下载一次，并与脚本一起存储在用户的硬盘驱动器上。指定的 URL 可能与安装脚本的 URL 相关。</p>
</blockquote>
<p>@resource</p>
<p>预加载可由脚本通过 GM_getResourceURL 和 GM_getResourceText 访问的资源。</p>
<blockquote>
    <p>虽然 resourceName 是非语义的，但它应该符合 JavaScript 标识符限制。每个@resource 必须有一个唯一的名称。</p>
    <p>每个@resource 在安装脚本时下载一次，并与脚本一起存储在用户的硬盘驱动器上。指定的 URL 可能与安装脚本的 URL 相关。</p>
    <p>这些命名资源可以分别通过<a href="https://wiki.greasespot.net/GM_getResourceText" target="_blank" rel="noopener">GM_getResourceText</a>和<a href="https://wiki.greasespot.net/GM_getResourceURL" target="_blank" rel="noopener">GM_getResourceURL</a>访问。</p>
</blockquote>
<p>@connect</p>
<p>此标签定义域（无顶级域），包括允许通过 GM_xmlhttpRequest 检索的子域</p>
<blockquote>
    <p>可以简单的理解为发送请求。GET、POST、HEAD</p>
</blockquote>
<p>@run-at</p>
<p>定义脚本被注入的时刻，与其他脚本处理程序相反， <strong>@run-at</strong> 定义了脚本想要运行的第一个可能时刻。这意味着可能会发生，使用 <strong>@require</strong><br>标签的脚本可能会在文档加载后执行，导致获取所需脚本需要很长时间。无论如何，在给定注入时刻之后发生的所有 DOMNodeInserted 和 DOMContentLoaded 事件都被缓存并在注入时传递给脚本。</p>
<p>@run-at document-start 脚本将尽快注入。 @run-at document-body 如果 body 元素存在，脚本将被注入 @run-at document-end 该脚本将在调度 DOMContentLoaded<br>事件时或之后注入。 @run-at document-idle 脚本将在 DOMContentLoaded 事件被调度后注入。如果没有给出@run-at 标签，这是默认值。 @run-at context-menu<br>如果在浏览器上下文菜单中单击该脚本（仅限基于 Chrome 的桌面浏览器），则会注入该脚本。</p>
<blockquote>
    <p>建议使用@run-at document-start</p>
</blockquote>
<p>@grant</p>
<p>@grant 用于将 GM_* 函数、unsafeWindow 对象和一些强大的窗口函数列入白名单。如果没有给出@grant 标签，TM 猜测脚本需要。</p>
<figure class="highlight pgsql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">// @<span class="keyword">grant</span> GM_setValue// @<span class="keyword">grant</span> GM_getValue// @<span class="keyword">grant</span> GM_setClipboard// @<span class="keyword">grant</span> unsafeWindow// @<span class="keyword">grant</span> <span class="keyword">window</span>.<span class="keyword">close</span>// @<span class="keyword">grant</span> <span class="keyword">window</span>.focus// @<span class="keyword">grant</span> <span class="keyword">window</span>.onurlchange</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>由于关闭和聚焦选项卡是一项强大的功能，因此也需要将其添加到 @grant 语句中。</p>
<p>如果脚本在单页应用程序上运行，那么它可以使用 window.onurlchange 来监听 URL 更改：</p>
<figure class="highlight coffeescript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="regexp">//</span> ==UserScript==...<span class="regexp">//</span> @grant <span class="built_in">window</span>.onurlchange<span class="regexp">//</span> ==<span class="regexp">/UserScript==if (window.onurlchange === null) &#123;  /</span>/ feature <span class="keyword">is</span> supported  <span class="built_in">window</span>.addEventListener(<span class="string">'urlchange'</span>, <span class="function"><span class="params">(info)</span> =&gt;</span> ...);&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果@grant 后跟“none”，则沙箱将被禁用，脚本将直接在页面上下文中运行。在此模式下，没有 GM_* 功能，但 GM_info 属性将可用。</p>
<figure class="highlight pgsql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">// @<span class="keyword">grant</span> <span class="keyword">none</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>推荐使用@grant none</p>
</blockquote>
<p>@noframes</p>
<p>此标记使脚本在主页上运行，但不在 iframe 上运行。</p>
<div align="center">
    <font color=red size=5px style="font-family: cursive"> Reference </font>
</div>
<ul>
    <li>Tampermonkey官方地址：<a href="https://www.tampermonkey.net/" target="_blank" rel="noopener">https://www.tampermonkey.net/</a></li>
    <li>
        <p>Tampermonkey官方文档：<a href="https://www.tampermonkey.net/documentation.php?ext=dhdg" target="_blank" rel="noopener">https://www.tampermonkey.net/documentation.php?ext=dhdg</a></p>
    </li>
    <li>
        <p><a href="https://wiki.greasespot.net/Metadata_Block#.40match" target="_blank" rel="noopener">https://wiki.greasespot.net/Metadata_Block#.40match</a></p>
    </li>
</ul>
]]></content>
      <categories>
        <category>Tampermonkey</category>
      </categories>
      <tags>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS 相关镜像源设置</title>
    <url>/286144973.html</url>
    <content><![CDATA[<h2 id="查看镜像源"><a href="#查看镜像源" class="headerlink" title="查看镜像源"></a>查看镜像源</h2>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># npm</span></span><br><span class="line"><span class="comment"># npm config (set | get | delete | list | edit)</span></span><br><span class="line">npm config get (registry|sass_binary_site)</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line"><span class="comment"># yarn config (set | get | delete | list | current)</span></span><br><span class="line">yarn config get（registry｜sass_binary_site)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>
<h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3>
<blockquote>
    <p>命令中指定</p>
</blockquote>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">npm install --registry=https://registry.npmmirror.com pkg_name -g cnpm</span><br><span class="line">yarn add --registry=https://registry.npm.taobao.org</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>别名</p>
    <p>创建一个别名进行试验镜像源</p>
</blockquote>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="built_in">alias</span> npmc=<span class="string">"npm --registry=https://registry.npmmirror.com"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config <span class="built_in">set</span> sass_binary_site=https://npm.taobao.org/mirrors/node-sass/phantomjs_cdn</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config <span class="built_in">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>nodejs</category>
        <category>npm</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis:在集合中复制键</title>
    <url>/38075.html</url>
    <content><![CDATA[<p><strong>问题描述: 由于某种原因，我必须需要将某个集合的键（Key）复制一份副本。并移动到目标库</strong></p>
<p>拿到这个问题，脑海里一共有两种方式</p>
<ul>
    <li>将所有的此集合中的所有的值从redis里面读取出来，然后再存进去。</li>
    <li>使用集合的思想进行取差集或并集。如果二者有一个且仅有一个为空那么他们返回的结果为有值的集合</li>
</ul>
<a id="more"></a>
<h2 id="Redis-在集合中复制键"><a href="#Redis-在集合中复制键" class="headerlink" title="Redis:在集合中复制键"></a>Redis:在集合中复制键</h2>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3>
<p>将所有的此集合中的所有的值从redis里面读取出来，然后再存到目标库中。</p>
<blockquote>
    <p>思路清晰，不再过多赘述。</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr5bko8fz0j309m02k744.jpg" alt=""></p>
<blockquote>
    <p>如果数据较少可以使用SMEMBERS</p>
</blockquote>
<p>类型为set,其中有26781027个</p>
<p>由于直接使用redis命令不是那么方便，故Python代码入下</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_redis</span><span class="params">(db)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    link redis</span></span><br><span class="line"><span class="string">    :param db:</span></span><br><span class="line"><span class="string">    :return: Redis Link object</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    REDIS_URL = <span class="string">f'redis://:<span class="subst">&#123;RedisPASSWD&#125;</span>@<span class="subst">&#123;RedisHOST&#125;</span>:<span class="subst">&#123;RedisPORT&#125;</span>/<span class="subst">&#123;db&#125;</span>'</span></span><br><span class="line">    redis_client = redis.from_url(REDIS_URL)</span><br><span class="line">    <span class="comment"># 验证是否连接</span></span><br><span class="line">    <span class="comment"># print(redis_client.info())</span></span><br><span class="line">    <span class="keyword">return</span> redis_client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_val</span><span class="params">(key: str, step)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get values</span></span><br><span class="line"><span class="string">    :param step:</span></span><br><span class="line"><span class="string">    :param key:str</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        redis_client = conn_redis(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#  获取键的大小</span></span><br><span class="line">        key_size = redis_client.scard(key)</span><br><span class="line">        key_type = redis_client.type(key)</span><br><span class="line">        logger.info(<span class="string">f'Key Name: <span class="subst">&#123;key&#125;</span>, key Type: <span class="subst">&#123;key_type&#125;</span> Key Size: <span class="subst">&#123;key_size&#125;</span>'</span>)</span><br><span class="line">        page = int(key_size // step) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page + <span class="number">1</span>):</span><br><span class="line">            result = redis_client.sscan(key, i, <span class="string">'*'</span>, step)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">yield</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_newVal</span><span class="params">(db)</span>:</span></span><br><span class="line">    redis_client = conn_redis(db)</span><br><span class="line">    redis_client.sadd(<span class="string">"NewKey"</span>,result)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>方案一优化</strong></p>
<blockquote>
    <p>sadd(“NewKey”,result)还是比较慢。使用pipeline</p>
</blockquote>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3>
<p>由于是集合，可以使用集合的操作。</p>
<blockquote>
    <p>任何集合的本身的补、并、差都是本身</p>
    <p>1.集合的交集&amp; ,set.intersection()</p>
    <p>2.集合的并集 | ,set. union()</p>
    <p>3.集合的差集 set.difference(s2) 将集合s1里去掉和s2交集的部分</p>
    <p>4.集合的交叉补集 set.symmetric_difference() 并集里去掉交集的部分</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr5exvf9xmj30q30aywej.jpg" alt=""></p>
<p>创建集合 1，2，3</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr5f96nq49j30fs055mx0.jpg" alt=""></p>
<p>取给定集合的并集存储在目标集合中</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr5fbdbwbsj30ct06gt8m.jpg" alt=""></p>
<p>取给差集合的并集存储在目标集合中</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr5fe8xoj1j30dz043mx0.jpg" alt=""></p>
<p>这样就可以实现类似于copy的效果</p>
<p>所使用到的Redis命令</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">help</span> SMEMBERS</span></span><br><span class="line">SMEMBERS key</span><br><span class="line">summary: Get all the members in a set</span><br><span class="line">since: 1.0.0</span><br><span class="line">group: set</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">help</span> SSCAN</span></span><br><span class="line">SSCAN key cursor [MATCH pattern] [COUNT count]</span><br><span class="line">summary: Incrementally iterate Set elements 增量迭代集合元素</span><br><span class="line">since: 2.8.0</span><br><span class="line">group: set</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">help</span> SUNIONSTORE</span></span><br><span class="line">SUNIONSTORE destination key [key ...]</span><br><span class="line">summary: Add multiple sets and store the resulting set in a key 添加多个集合并将生成的集合存储在一个键中</span><br><span class="line">since: 1.0.0</span><br><span class="line">group: set</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">help</span> SDIFFSTORE</span></span><br><span class="line">SDIFFSTORE destination key [key ...]</span><br><span class="line">summary: Subtract multiple sets and store the resulting set in a key 减去多个集合并将得到的集合存储在一个键中</span><br><span class="line">since: 1.0.0</span><br><span class="line">group: set</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>采用先取后存，以及集合的本身是本身的特性对于集合实现复制操作</p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>redis</category>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>redis</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>VsCode初始化配置</title>
    <url>/2104691580.html</url>
    <content><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2>
<figure class="highlight json">
    <figcaption><span>lines</span></figcaption>
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Solarized Light"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"editor.suggest.snippetsPreventQuickSuggestions"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">  <span class="attr">"redhat.telemetry.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"editor.suggestSelection"</span>: <span class="string">"first"</span>,</span><br><span class="line">  <span class="attr">"vsintellicode.modify.editor.suggestSelection"</span>: <span class="string">"automaticallyOverrodeDefaultValue"</span>,</span><br><span class="line">  <span class="attr">"terminal.integrated.inheritEnv"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"git.enableSmartCommit"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"git.confirmSync"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"[html]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"editor.linkedEditing"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"[jsonc]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"vscode.json-language-features"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"search.exclude"</span>: &#123;</span><br><span class="line">    <span class="attr">"**/node_modules"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/bower_components"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/target"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/logs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.git"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.svn"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.hg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/CVS"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.DS_Store"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/*.js"</span>: &#123;</span><br><span class="line">      <span class="attr">"when"</span>: <span class="string">"$(basename).ts"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"**/.idea"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files.exclude"</span>: &#123;</span><br><span class="line">    <span class="attr">"**/node_modules"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/bower_components"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/target"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/logs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.git"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.svn"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.hg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/CVS"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/.DS_Store"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"**/*.js"</span>: &#123;</span><br><span class="line">      <span class="attr">"when"</span>: <span class="string">"$(basename).ts"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"**/.idea"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"vs-kubernetes"</span>: &#123;</span><br><span class="line">    <span class="attr">"vscode-kubernetes.minikube-path.mac"</span>: <span class="string">"/Users/wu.zhipeng/.vs-kubernetes/tools/minikube/darwin-amd64/minikube"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"[go]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"golang.go-nightly"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>代码提示：</p>
<p>settings -搜索-&gt; prevent -&gt; none</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2>
<h3 id="Program-Language"><a href="#Program-Language" class="headerlink" title="Program Language"></a>Program Language</h3>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4>
<p>python-extension-pack</p>
<p>Jupyter</p>
<h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4>
<p>php-extension-pack</p>
<h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4>
<p>Go Nightly </p>
<blockquote>
    <p>command + shift + p <code>&gt;go:install/Update Tools</code></p>
</blockquote>
<h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4>
<p>vue pack</p>
<h4 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h4>
<p>Docker</p>
<p>Kubernetes</p>
<p>Bridge to Kubernetes</p>
<p>Cloud code</p>
<h4 id="Reception"><a href="#Reception" class="headerlink" title="Reception"></a>Reception</h4>
<p>open in browser</p>
<p>Braun Extension Pack</p>
<p>auto complete Tag</p>
<h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4>
<p>vscode-icons</p>
<p>YAML</p>
<p>vsc-essentials</p>
<p>stylelint</p>
<p>Import Cost</p>
<p>Prettier - Code formatter</p>
<p>beautify</p>
<p>Better Comments</p>
<p>Bracket Pair Colorizer</p>
<p>gitlens <code>git config pull.rebase false</code></p>
<p>code studio pack</p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2>
<blockquote>
    <p>Mac</p>
</blockquote>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>ctrl + -</code>：代码返回上一级</td>
                <td><code>ctrl + shift + -</code>： 代码前进下一级</td>
            </tr>
            <tr>
                <td><code>command + k + 0</code>: 收缩所有代码(0是代码折叠级别，同理可以换用1，2，3等)</td>
                <td><code>command + k + j</code> 取消收缩所有代码</td>
            </tr>
            <tr>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>
<p><code>comand + k + s</code>：快捷键文档</p>
<p><code>opt + shift + f</code> ：代码格式化</p>
<p><code>command + shift + P</code> 显示所有命令</p>
<p><code>command + p</code> 打开最近文件</p>
]]></content>
      <categories>
        <category>Mac</category>
        <category>Visual Studio Code</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor-程序管理更加得心应手</title>
    <url>/9129.html</url>
    <content><![CDATA[<h2 id="Supervisor初探篇"><a href="#Supervisor初探篇" class="headerlink" title="Supervisor初探篇"></a>Supervisor初探篇</h2>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3>
<p>Supervisor是一个客户机/服务器系统(也就是非常经典的C/S结构)，它允许用户在类UNIX操作系统上<code>控制</code>许多进程。</p>
<a id="more"></a>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3>
<ul>
    <li>
        <p><strong>简单便捷</strong></p>
        <blockquote>
            <p>通过简单易懂的配置文件配置Supervisor，即可对任务的管理与监控，它提供了重新启动失败的进程和自动日志轮换等功能。</p>
        </blockquote>
    </li>
    <li>
        <p><strong>集中</strong></p>
        <blockquote>
            <p>提供了一个开始，停止和监视的地方。可以单独或成组控制过程。配置Supervisor以提供本地或远程命令行和Web界面。</p>
        </blockquote>
    </li>
    <li>
        <p><strong>高效</strong></p>
        <blockquote>
            <p>通过fork / exec启动其子进程，并且子进程不守护。进程终止时，操作系统会立即向Supervisor发送信号</p>
        </blockquote>
    </li>
    <li>
        <p>可扩展</p>
        <blockquote>
            <p>Supervisor具有一个简单的事件通知协议，该协议可以使用任何语言编写的程序对其进行监视，并且具有用于控制的XML-RPC接口</p>
        </blockquote>
    </li>
    <li>
        <p>兼容强</p>
        <blockquote>
            <p>除Windows之外，Supervisor几乎适用于所有事物。它已在Linux，Mac OS X，Solaris和FreeBSD上经过测试和支持。它完全用Python编写</p>
        </blockquote>
    </li>
    <li>
        <p>久经考验</p>
        <blockquote>
            <p>尽管Supervisor如今非常活跃，但它不是新软件。Supervisor已经存在了很多年，并且已经在许多服务器上使用</p>
        </blockquote>
    </li>
</ul>
<p>听我说了这么多，相信你也和我一样迫不及待想了解它。嘿呀，不要着急。在学习使用它之前，我们对它的基础组成有个了解，以便于稍后更加得心应手的使用</p>
<h3 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h3>
<ul>
    <li>supervisord</li>
    <li>supervisorctl</li>
    <li>Web Server</li>
    <li>XML-RPC Interface</li>
</ul>
<p>在简介中提到<code>Supervisor是一个客户机/服务器系统(也就是非常经典的C/S结构)</code>,那么也在此介绍一下各个组件</p>
<p><strong>Supervisord:</strong> 服务端的主管被称为<strong>supervisord</strong>。它负责自行调用启动子程序，响应来自客户端的命令，重新启动崩溃或退出的子进程，记录其子进程<code>stdout</code>和<code>stderr</code> 输出以及生成和处理与子进程生存期中的点相对应的“事件”。</p>
<blockquote>
    <p>服务器进程使用的配置文件位于<code>/etc/supervisord.conf中</code>，通过适当的文件系统权限确保此文件的安全(它包含未加密的用户名和密码,它可能是我们服务器的root密码)</p>
</blockquote>
<p><strong>Supervisorctl</strong>:客户端的主管被称为 <strong>supervisorctl</strong>, 它提供了类似于shell的界面,以便于我们使用命令对服务端的主管进行管理与控制。从supervisorctl我们可以连接到不同的supervisord进程（一次一个），获取受其控制的子进程的状态，停止和启动子进程，以及获取正在运行的supervisord进程的列表</p>
<blockquote>
    <p>命令行客户机通过UNIX域套接字或internet（TCP）套接字与服务器通信。服务器可以断言客户端的用户应该在允许他执行命令之前提供身份验证凭据。客户机进程通常使用与服务器相同的配置文件，但是任何带有[supervisorctl]节的配置文件都可以工作。</p>
</blockquote>
<p>如果在internet套接字上启动supervisord，则可以通过浏览器访问功能类似于supervisorctl web用户界面。访问服务器URL（例如。<a href="http://ip：prot）激活配置文件的[inet">http://ip：prot）激活配置文件的[inet</a> http server]部分后，通过web界面查看和控制进程状态。</p>
<p><strong>XML-RPC接口</strong>：服务于Web UI的同一HTTP服务器提供XML-RPC接口，该接口可用于询问和控制管理程序及其运行的程序。<a href="http://supervisord.org/api.html#xml-rpc" target="_blank" rel="noopener"><em>XML-RPC API文档</em></a>。</p>
<hr>
<h2 id="Supervisor使用技巧篇"><a href="#Supervisor使用技巧篇" class="headerlink" title="Supervisor使用技巧篇"></a>Supervisor使用技巧篇</h2>
<h3 id="Supervisor的安装"><a href="#Supervisor的安装" class="headerlink" title="Supervisor的安装"></a>Supervisor的安装</h3>
<p>supervisor支持了大多包管理工具进行安装</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># pip(推荐)</span></span><br><span class="line">pip install supervisor</span><br><span class="line"><span class="comment"># mac </span></span><br><span class="line">brew install supervisor</span><br><span class="line"><span class="comment"># ubantu</span></span><br><span class="line">apt install supervisor</span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install supervisor</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Supervisor的使用"><a href="#Supervisor的使用" class="headerlink" title="Supervisor的使用"></a>Supervisor的使用</h3>
<p>这里我们建立一个测试用的py文件，如下</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">	i = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		logger.info(i)</span><br><span class="line">		randomTime = uniform(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">		logger.info(<span class="string">f'Sleep <span class="subst">&#123;randomTime&#125;</span>s'</span>)</span><br><span class="line">		time.sleep(randomTime)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">			sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	test()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此时可以正常运行</p>
<blockquote>
    <p>温馨提示：这样的死循环记得一定要给休眠或者退出条件，要不将会有快乐的事情发生哦</p>
</blockquote>
<p>运行如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gml27kbhxdj30z20u0tbj.jpg" alt=""></p>
<p><strong>对接Supervisor</strong></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># supervisord.conf</span></span><br><span class="line">[supervisord]</span><br><span class="line">nodaemon=<span class="literal">true</span>								 ;守护进程，默认fales</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=debug               ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[program:demo]</span><br><span class="line">process_name=tester</span><br><span class="line"><span class="built_in">command</span>=python3 demo.py</span><br><span class="line">autostart=<span class="literal">true</span>       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>使用<code>supervisord -c supervisord.conf</code>，运行程序。</p>
<p>输出日志入下</p>
<figure class="highlight angelscript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">21</span>,<span class="number">705</span> INFO supervisord started with pid <span class="number">1257</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">22</span>,<span class="number">712</span> INFO spawned: <span class="string">'tester'</span> with pid <span class="number">1260</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">22</span>,<span class="number">856</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">22.855</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">0</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">22.856</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.681474110840254</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23</span>,<span class="number">542</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23.541</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23</span>,<span class="number">542</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23.541</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.34284895238537105</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23</span>,<span class="number">887</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23.886</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23</span>,<span class="number">887</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23.887</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.08220508414530214</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23</span>,<span class="number">970</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23.969</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23</span>,<span class="number">971</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">23.970</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.39740491822333646</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">24</span>,<span class="number">372</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">24.371</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">24</span>,<span class="number">372</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">24.371</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.9054854146830564</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25</span>,<span class="number">280</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25.279</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25</span>,<span class="number">281</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25.280</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.4563320839294708</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25</span>,<span class="number">742</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25.741</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25</span>,<span class="number">742</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25.741</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.19482948337371853</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25</span>,<span class="number">939</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25.938</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25</span>,<span class="number">940</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">25.939</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.7755167696398192</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26</span>,<span class="number">719</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26.718</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26</span>,<span class="number">719</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26.718</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.24748008436152524</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26</span>,<span class="number">972</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26.971</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26</span>,<span class="number">973</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">26.972</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.6178291278890581</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">27</span>,<span class="number">607</span> DEBG fd <span class="number">13</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266690064</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stderr)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">27</span>,<span class="number">607</span> DEBG fd <span class="number">11</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266190928</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stdout)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">27</span>,<span class="number">608</span> INFO exited: tester (exit status <span class="number">0</span>; <span class="keyword">not</span> expected)</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">27</span>,<span class="number">608</span> DEBG received SIGCHLD indicating a child quit</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">28</span>,<span class="number">613</span> INFO spawned: <span class="string">'tester'</span> with pid <span class="number">1263</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">28</span>,<span class="number">720</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">28.719</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">0</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">28.720</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.8226218737496696</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">29</span>,<span class="number">543</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">29.542</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">29</span>,<span class="number">544</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">29.543</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.6507710747677439</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30</span>,<span class="number">195</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30.195</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30</span>,<span class="number">196</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30.195</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.3645783421505362</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30</span>,<span class="number">565</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30.564</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30</span>,<span class="number">565</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30.565</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.47083797385643844</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31</span>,<span class="number">037</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31.036</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31</span>,<span class="number">037</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31.037</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.4875197581833751</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31</span>,<span class="number">531</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31.530</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31</span>,<span class="number">531</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">31.530</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.9094546698090918</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32</span>,<span class="number">444</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32.443</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32</span>,<span class="number">445</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32.444</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.47064821128443857</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32</span>,<span class="number">921</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32.920</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32</span>,<span class="number">922</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">32.921</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.7673175029063347</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">33</span>,<span class="number">691</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">33.690</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">33</span>,<span class="number">692</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">33.691</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.9317641783846109</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34</span>,<span class="number">625</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34.624</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34</span>,<span class="number">625</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34.625</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.2558276039626808</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34</span>,<span class="number">899</span> DEBG fd <span class="number">13</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266690000</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stderr)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34</span>,<span class="number">899</span> DEBG fd <span class="number">11</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266689872</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stdout)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34</span>,<span class="number">899</span> INFO exited: tester (exit status <span class="number">0</span>; <span class="keyword">not</span> expected)</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">34</span>,<span class="number">900</span> DEBG received SIGCHLD indicating a child quit</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">36</span>,<span class="number">912</span> INFO spawned: <span class="string">'tester'</span> with pid <span class="number">1264</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37</span>,<span class="number">022</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37.021</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">0</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37.021</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.5475564566091946</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37</span>,<span class="number">572</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37.571</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37</span>,<span class="number">573</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37.572</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.6326087978849619</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38</span>,<span class="number">207</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38.206</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38</span>,<span class="number">207</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38.207</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.3225720045649825</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38</span>,<span class="number">531</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38.530</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38</span>,<span class="number">531</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">38.530</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.5121026075892807</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39</span>,<span class="number">044</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39.043</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39</span>,<span class="number">045</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39.044</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.6613469797067474</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39</span>,<span class="number">710</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39.709</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39</span>,<span class="number">710</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">39.709</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.5058071583137449</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40</span>,<span class="number">220</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40.219</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40</span>,<span class="number">220</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40.219</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.2779679640725812</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40</span>,<span class="number">502</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40.502</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40</span>,<span class="number">503</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">40.502</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.7282026322383534</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">231</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41.231</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">232</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41.231</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.37634579152866654</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">610</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41.610</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">610</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41.610</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.02539488384007338</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">660</span> DEBG fd <span class="number">13</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266690256</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stderr)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">660</span> DEBG fd <span class="number">11</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266689872</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stdout)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">660</span> INFO exited: tester (exit status <span class="number">0</span>; <span class="keyword">not</span> expected)</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">41</span>,<span class="number">660</span> DEBG received SIGCHLD indicating a child quit</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">44</span>,<span class="number">666</span> INFO spawned: <span class="string">'tester'</span> with pid <span class="number">1265</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">44</span>,<span class="number">775</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">44.774</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">0</span></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">44.774</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.540035521075991</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45</span>,<span class="number">315</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45.315</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45</span>,<span class="number">316</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45.315</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.6011099895313317</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45</span>,<span class="number">922</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45.921</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45</span>,<span class="number">923</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">45.922</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.5954410741418728</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46</span>,<span class="number">521</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46.520</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46</span>,<span class="number">521</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46.521</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.10471143983800468</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46</span>,<span class="number">631</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46.630</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46</span>,<span class="number">632</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46.631</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.12704017263351186</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46</span>,<span class="number">759</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46.758</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46</span>,<span class="number">760</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">46.759</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.26222866859817395</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47</span>,<span class="number">025</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47.025</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47</span>,<span class="number">026</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47.025</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.31215837276333647</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47</span>,<span class="number">343</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47.343</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47</span>,<span class="number">344</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">47.343</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.8863919731268238</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48</span>,<span class="number">230</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48.230</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48</span>,<span class="number">230</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48.230</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.6220607701794121</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48</span>,<span class="number">858</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48.857</span> | INFO     | __main__:test:<span class="number">10</span> - <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48</span>,<span class="number">858</span> DEBG <span class="string">'tester'</span> stderr output:</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">48.858</span> | INFO     | __main__:test:<span class="number">12</span> - Sleep <span class="number">0.9545468958914863</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">49</span>,<span class="number">835</span> DEBG fd <span class="number">13</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266690128</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stderr)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">49</span>,<span class="number">835</span> DEBG fd <span class="number">11</span> closed, stopped monitoring &lt;POutputDispatcher at <span class="number">140666266689872</span> <span class="keyword">for</span> &lt;Subprocess at <span class="number">140666266191824</span> with name tester <span class="keyword">in</span> state STARTING&gt; (stdout)&gt;</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">49</span>,<span class="number">835</span> INFO exited: tester (exit status <span class="number">0</span>; <span class="keyword">not</span> expected)</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">49</span>,<span class="number">835</span> DEBG received SIGCHLD indicating a child quit</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">50</span>,<span class="number">836</span> INFO gave up: tester entered FATAL state, too many start retries too quickly</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gml2i44gvnj327y0icwg0.jpg" alt=""></p>
<h2 id="Supervisor番外篇"><a href="#Supervisor番外篇" class="headerlink" title="Supervisor番外篇"></a>Supervisor番外篇</h2>
<h3 id="Supervisorctl常用命令"><a href="#Supervisorctl常用命令" class="headerlink" title="Supervisorctl常用命令"></a><strong>Supervisorctl常用命令</strong></h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># supervisorctl status：查看进程的状态</span></span><br><span class="line">supervisorctl status</span><br><span class="line">status &lt;name&gt;           Get status <span class="keyword">for</span> a single process</span><br><span class="line">status &lt;gname&gt;:*        Get status <span class="keyword">for</span> all processes <span class="keyword">in</span> a group</span><br><span class="line">status &lt;name&gt; &lt;name&gt;    Get status <span class="keyword">for</span> multiple named processes</span><br><span class="line">status                  Get all process status info</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisorctl start 启动进程</span></span><br><span class="line">start &lt;name&gt;            Start a process</span><br><span class="line">start &lt;gname&gt;:*         Start all processes <span class="keyword">in</span> a group</span><br><span class="line">start &lt;name&gt; &lt;name&gt;     Start multiple processes or groups</span><br><span class="line">start all               Start all processes</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisorctl stop 停止进程</span></span><br><span class="line">stop &lt;name&gt;             Stop a process</span><br><span class="line">stop &lt;gname&gt;:*          Stop all processes <span class="keyword">in</span> a group</span><br><span class="line">stop &lt;name&gt; &lt;name&gt;      Stop multiple processes or groups</span><br><span class="line">stop all                Stop all processes</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisorctl restart 重启进程</span></span><br><span class="line">restart &lt;name&gt;          Restart a process</span><br><span class="line">restart &lt;gname&gt;:*       Restart all processes <span class="keyword">in</span> a group</span><br><span class="line">restart &lt;name&gt; &lt;name&gt;   Restart multiple processes or groups</span><br><span class="line">restart all             Restart all processes</span><br><span class="line">Note: restart does not reread config files. For that, see reread and update.</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisorctl update 配置文件修改后可以使用该命令加载新的配置</span></span><br><span class="line">update                  Reload config and add/remove as necessary, and will restart affected programs</span><br><span class="line">update all              Reload config and add/remove as necessary, and will restart affected programs</span><br><span class="line">update &lt;gname&gt; [...]    Update specific groups</span><br><span class="line"></span><br><span class="line">supervisorctl reload: 重新启动配置中的所有程序</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多命令可 supervisorctl 进入终端。输入help(?)进行查看</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Supervisorctl-参数列表"><a href="#Supervisorctl-参数列表" class="headerlink" title="Supervisorctl 参数列表"></a>Supervisorctl 参数列表</h3>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">supervisorctl -- control applications <span class="builtin-name">run</span> by supervisord <span class="keyword">from</span> the cmd line.</span><br><span class="line"></span><br><span class="line">Usage: /Users/stringle-004/opt/miniconda3/envs/Proxypool/bin/supervisorctl [options] [action [arguments]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-c/--configuration FILENAME -- configuration file path (searches <span class="keyword">if</span> <span class="keyword">not</span> given)</span><br><span class="line">-h/--help -- <span class="builtin-name">print</span> usage message <span class="keyword">and</span> exit</span><br><span class="line">-i/--interactive -- start an interactive shell after executing commands</span><br><span class="line">-s/--serverurl URL -- URL on which supervisord<span class="built_in"> server </span>is listening</span><br><span class="line">     (default <span class="string">"http://localhost:9001"</span>).</span><br><span class="line">-u/--username USERNAME -- username <span class="keyword">to</span> use <span class="keyword">for</span> authentication with server</span><br><span class="line">-p/--password PASSWORD -- password <span class="keyword">to</span> use <span class="keyword">for</span> authentication with server</span><br><span class="line">-r/--history-file -- keep a readline history (<span class="keyword">if</span> readline is available)</span><br><span class="line"></span><br><span class="line">action [arguments] -- see below</span><br><span class="line"></span><br><span class="line">Actions are commands like <span class="string">"tail"</span> <span class="keyword">or</span> <span class="string">"stop"</span>.  <span class="keyword">If</span> -i is specified <span class="keyword">or</span> <span class="literal">no</span> action is</span><br><span class="line">specified on the command line, a <span class="string">"shell"</span> interpreting actions typed</span><br><span class="line">interactively is started.  Use the action <span class="string">"help"</span> <span class="keyword">to</span> <span class="builtin-name">find</span> out about available</span><br><span class="line">actions.</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="supervisord-conf配置文件示例"><a href="#supervisord-conf配置文件示例" class="headerlink" title="supervisord.conf配置文件示例"></a>supervisord.conf配置文件示例</h3>
<p>使命令用<code>sudo echo_supervisord_conf &gt; supervisord.conf</code> 进行创建</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">; Sample supervisor config file.</span><br><span class="line">;</span><br><span class="line">; For more information on the config file, please see:</span><br><span class="line">; http://supervisord.org/configuration.html</span><br><span class="line">;</span><br><span class="line">; Notes:</span><br><span class="line">;  - Shell expansion (<span class="string">"~"</span> or <span class="string">"<span class="variable">$HOME</span>"</span>) is not supported.  Environment</span><br><span class="line">;    variables can be expanded using this syntax: <span class="string">"%(ENV_HOME)s"</span>.</span><br><span class="line">;  - Quotes around values are not supported, except <span class="keyword">in</span> the <span class="keyword">case</span> of</span><br><span class="line">;    the environment= options as shown below.</span><br><span class="line">;  - Comments must have a leading space: <span class="string">"a=b ;comment"</span> not <span class="string">"a=b;comment"</span>.</span><br><span class="line">;  - Command will be truncated <span class="keyword">if</span> it looks like a config file comment, e.g.</span><br><span class="line">;    <span class="string">"command=bash -c 'foo ; bar'"</span> will truncate to <span class="string">"command=bash -c 'foo "</span>.</span><br><span class="line">;</span><br><span class="line">; Warning:</span><br><span class="line">;  Paths throughout this example file use /tmp because it is available on most</span><br><span class="line">;  systems.  You will likely need to change these to locations more appropriate</span><br><span class="line">;  <span class="keyword">for</span> your system.  Some systems periodically delete older files <span class="keyword">in</span> /tmp.</span><br><span class="line">;  Notably, <span class="keyword">if</span> the socket file defined <span class="keyword">in</span> the [unix_http_server] section below</span><br><span class="line">;  is deleted, supervisorctl will be unable to connect to supervisord.</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ; the path to the socket file</span><br><span class="line">;chmod=0700                 ; socket file mode (default 0700)</span><br><span class="line">;chown=nobody:nogroup       ; socket file uid:gid owner</span><br><span class="line">;username=user              ; default is no username (open server)</span><br><span class="line">;password=123               ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">; Security Warning:</span><br><span class="line">;  The inet HTTP server is not enabled by default.  The inet HTTP server is</span><br><span class="line">;  enabled by uncommenting the [inet_http_server] section below.  The inet</span><br><span class="line">;  HTTP server is intended <span class="keyword">for</span> use within a trusted environment only.  It</span><br><span class="line">;  should only be bound to localhost or only accessible from within an</span><br><span class="line">;  isolated, trusted network.  The inet HTTP server does not support any</span><br><span class="line">;  form of encryption.  The inet HTTP server does not use authentication</span><br><span class="line">;  by default (see the username= and password= options to add authentication).</span><br><span class="line">;  Never expose the inet HTTP server to the public internet.</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">;port=9001        ; ip_address:port specifier, *:port <span class="keyword">for</span> all iface</span><br><span class="line">;username=user              ; default is no username (open server)</span><br><span class="line">;password=123               ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ; main <span class="built_in">log</span> file; default <span class="variable">$CWD</span>/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB</span><br><span class="line">logfile_backups=10           ; of main logfile backups; 0 means none, default 10</span><br><span class="line">loglevel=info                ; <span class="built_in">log</span> level; default info; others: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid</span><br><span class="line">nodaemon=<span class="literal">false</span>               ; start <span class="keyword">in</span> foreground <span class="keyword">if</span> <span class="literal">true</span>; default <span class="literal">false</span></span><br><span class="line">minfds=1024                  ; min. avail startup file descriptors; default 1024</span><br><span class="line">minprocs=200                 ; min. avail process descriptors;default 200</span><br><span class="line">;<span class="built_in">umask</span>=022                   ; process file creation <span class="built_in">umask</span>; default 022</span><br><span class="line">;user=supervisord            ; setuid to this UNIX account at startup; recommended <span class="keyword">if</span> root</span><br><span class="line">;identifier=supervisor       ; supervisord identifier, default is <span class="string">'supervisor'</span></span><br><span class="line">;directory=/tmp              ; default is not to <span class="built_in">cd</span> during start</span><br><span class="line">;nocleanup=<span class="literal">true</span>              ; don<span class="string">'t clean up tempfiles at start; default false</span></span><br><span class="line"><span class="string">;childlogdir=/tmp            ; '</span>AUTO<span class="string">' child log dir, default $TEMP</span></span><br><span class="line"><span class="string">;environment=KEY="value"     ; key value pairs to add to environment</span></span><br><span class="line"><span class="string">;strip_ansi=false            ; strip ansi escape codes in logs; def. false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; The rpcinterface:supervisor section must remain in the config file for</span></span><br><span class="line"><span class="string">; RPC (supervisorctl/web interface) to work.  Additional interfaces may be</span></span><br><span class="line"><span class="string">; added by defining them in separate [rpcinterface:x] sections.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[rpcinterface:supervisor]</span></span><br><span class="line"><span class="string">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; The supervisorctl section configures how supervisorctl will connect to</span></span><br><span class="line"><span class="string">; supervisord.  configure it match the settings in either the unix_http_server</span></span><br><span class="line"><span class="string">; or inet_http_server section.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[supervisorctl]</span></span><br><span class="line"><span class="string">serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket</span></span><br><span class="line"><span class="string">;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</span></span><br><span class="line"><span class="string">;username=chris              ; should be same as in [*_http_server] if set</span></span><br><span class="line"><span class="string">;password=123                ; should be same as in [*_http_server] if set</span></span><br><span class="line"><span class="string">;prompt=mysupervisor         ; cmd line prompt (default "supervisor")</span></span><br><span class="line"><span class="string">;history_file=~/.sc_history  ; use readline history if available</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; The sample program section below shows all possible program subsection values.</span></span><br><span class="line"><span class="string">; Create one or more '</span>real<span class="string">' program: sections to be able to control them under</span></span><br><span class="line"><span class="string">; supervisor.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;[program:theprogramname]</span></span><br><span class="line"><span class="string">;command=/bin/cat              ; the program (relative uses PATH, can take args)</span></span><br><span class="line"><span class="string">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span></span><br><span class="line"><span class="string">;numprocs=1                    ; number of processes copies to start (def 1)</span></span><br><span class="line"><span class="string">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</span></span><br><span class="line"><span class="string">;umask=022                     ; umask for process (default None)</span></span><br><span class="line"><span class="string">;priority=999                  ; the relative start priority (default 999)</span></span><br><span class="line"><span class="string">;autostart=true                ; start at supervisord start (default: true)</span></span><br><span class="line"><span class="string">;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)</span></span><br><span class="line"><span class="string">;startretries=3                ; max # of serial start failures when starting (default 3)</span></span><br><span class="line"><span class="string">;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)</span></span><br><span class="line"><span class="string">;exitcodes=0                   ; '</span>expected<span class="string">' exit codes used with autorestart (default 0)</span></span><br><span class="line"><span class="string">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span></span><br><span class="line"><span class="string">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span></span><br><span class="line"><span class="string">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span></span><br><span class="line"><span class="string">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span></span><br><span class="line"><span class="string">;user=chrism                   ; setuid to this UNIX account to run the program</span></span><br><span class="line"><span class="string">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</span></span><br><span class="line"><span class="string">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</span></span><br><span class="line"><span class="string">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="string">;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="string">;stdout_capture_maxbytes=1MB   ; number of bytes in '</span>capturemode<span class="string">' (default 0)</span></span><br><span class="line"><span class="string">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span></span><br><span class="line"><span class="string">;stdout_syslog=false           ; send stdout to syslog with process name (default false)</span></span><br><span class="line"><span class="string">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</span></span><br><span class="line"><span class="string">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="string">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="string">;stderr_capture_maxbytes=1MB   ; number of bytes in '</span>capturemode<span class="string">' (default 0)</span></span><br><span class="line"><span class="string">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></span><br><span class="line"><span class="string">;stderr_syslog=false           ; send stderr to syslog with process name (default false)</span></span><br><span class="line"><span class="string">;environment=A="1",B="2"       ; process environment additions (def no adds)</span></span><br><span class="line"><span class="string">;serverurl=AUTO                ; override serverurl computation (childutils)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; The sample eventlistener section below shows all possible eventlistener</span></span><br><span class="line"><span class="string">; subsection values.  Create one or more '</span>real<span class="string">' eventlistener: sections to be</span></span><br><span class="line"><span class="string">; able to handle event notifications sent by supervisord.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;[eventlistener:theeventlistenername]</span></span><br><span class="line"><span class="string">;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)</span></span><br><span class="line"><span class="string">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span></span><br><span class="line"><span class="string">;numprocs=1                    ; number of processes copies to start (def 1)</span></span><br><span class="line"><span class="string">;events=EVENT                  ; event notif. types to subscribe to (req'</span>d)</span><br><span class="line">;buffer_size=10                ; event buffer queue size (default 10)</span><br><span class="line">;directory=/tmp                ; directory to cwd to before <span class="built_in">exec</span> (def no cwd)</span><br><span class="line">;<span class="built_in">umask</span>=022                     ; <span class="built_in">umask</span> <span class="keyword">for</span> process (default None)</span><br><span class="line">;priority=-1                   ; the relative start priority (default -1)</span><br><span class="line">;autostart=<span class="literal">true</span>                ; start at supervisord start (default: <span class="literal">true</span>)</span><br><span class="line">;startsecs=1                   ; <span class="comment"># of secs prog must stay up to be running (def. 1)</span></span><br><span class="line">;startretries=3                ; max <span class="comment"># of serial start failures when starting (default 3)</span></span><br><span class="line">;autorestart=unexpected        ; autorestart <span class="keyword">if</span> exited after running (def: unexpected)</span><br><span class="line">;exitcodes=0                   ; <span class="string">'expected'</span> <span class="built_in">exit</span> codes used with autorestart (default 0)</span><br><span class="line">;stopsignal=QUIT               ; signal used to <span class="built_in">kill</span> process (default TERM)</span><br><span class="line">;stopwaitsecs=10               ; max num secs to <span class="built_in">wait</span> b4 SIGKILL (default 10)</span><br><span class="line">;stopasgroup=<span class="literal">false</span>             ; send stop signal to the UNIX process group (default <span class="literal">false</span>)</span><br><span class="line">;killasgroup=<span class="literal">false</span>             ; SIGKILL the UNIX process group (def <span class="literal">false</span>)</span><br><span class="line">;user=chrism                   ; setuid to this UNIX account to run the program</span><br><span class="line">;redirect_stderr=<span class="literal">false</span>         ; redirect_stderr=<span class="literal">true</span> is not allowed <span class="keyword">for</span> eventlisteners</span><br><span class="line">;stdout_logfile=/a/path        ; stdout <span class="built_in">log</span> path, NONE <span class="keyword">for</span> none; default AUTO</span><br><span class="line">;stdout_logfile_maxbytes=1MB   ; max <span class="comment"># logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line">;stdout_logfile_backups=10     ; <span class="comment"># of stdout logfile backups (0 means none, default 10)</span></span><br><span class="line">;stdout_events_enabled=<span class="literal">false</span>   ; emit events on stdout writes (default <span class="literal">false</span>)</span><br><span class="line">;stdout_syslog=<span class="literal">false</span>           ; send stdout to syslog with process name (default <span class="literal">false</span>)</span><br><span class="line">;stderr_logfile=/a/path        ; stderr <span class="built_in">log</span> path, NONE <span class="keyword">for</span> none; default AUTO</span><br><span class="line">;stderr_logfile_maxbytes=1MB   ; max <span class="comment"># logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line">;stderr_logfile_backups=10     ; <span class="comment"># of stderr logfile backups (0 means none, default 10)</span></span><br><span class="line">;stderr_events_enabled=<span class="literal">false</span>   ; emit events on stderr writes (default <span class="literal">false</span>)</span><br><span class="line">;stderr_syslog=<span class="literal">false</span>           ; send stderr to syslog with process name (default <span class="literal">false</span>)</span><br><span class="line">;environment=A=<span class="string">"1"</span>,B=<span class="string">"2"</span>       ; process environment additions</span><br><span class="line">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br><span class="line"></span><br><span class="line">; The sample group section below shows all possible group values.  Create one</span><br><span class="line">; or more <span class="string">'real'</span> group: sections to create <span class="string">"heterogeneous"</span> process groups.</span><br><span class="line"></span><br><span class="line">;[group:thegroupname]</span><br><span class="line">;programs=progname1,progname2  ; each refers to <span class="string">'x'</span> <span class="keyword">in</span> [program:x] definitions</span><br><span class="line">;priority=999                  ; the relative start priority (default 999)</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the <span class="string">"files"</span> setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">;[include]</span><br><span class="line">;files = relative/directory/*.ini</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>常用配置</p>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="section">[unix_http_server]</span></span><br><span class="line"><span class="attr">file</span>=/tmp/supervisor.sock   <span class="comment">;UNIX socket 文件，supervisorctl 会使用</span></span><br><span class="line"><span class="comment">;chmod=0700                 ;socket文件的mode，默认是0700</span></span><br><span class="line"><span class="comment">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span></span><br><span class="line"><span class="comment">;port=9001        					;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span></span><br><span class="line"><span class="comment">;username=user              ;登录管理后台的用户名</span></span><br><span class="line"><span class="comment">;password=123               ;登录管理后台的密码</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[supervisord]</span></span><br><span class="line"><span class="attr">logfile</span>=/tmp/supervisord.log <span class="comment">;日志文件，默认是 $CWD/supervisord.log</span></span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">50</span>MB        <span class="comment">;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span></span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span>           <span class="comment">;日志文件保留备份数量默认10，设为0表示不备份</span></span><br><span class="line"><span class="attr">loglevel</span>=info                <span class="comment">;日志级别，默认info，其它: debug,warn,trace</span></span><br><span class="line"><span class="attr">pidfile</span>=/tmp/supervisord.pid <span class="comment">;pid 文件</span></span><br><span class="line"><span class="attr">nodaemon</span>=<span class="literal">false</span>               <span class="comment">;是否在前台启动，默认是false，即以 daemon 的方式启动</span></span><br><span class="line"><span class="attr">minfds</span>=<span class="number">1024</span>                  <span class="comment">;可以打开的文件描述符的最小值，默认 1024</span></span><br><span class="line"><span class="attr">minprocs</span>=<span class="number">200</span>                 <span class="comment">;可以打开的进程数的最小值，默认 200</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[supervisorctl]</span></span><br><span class="line"><span class="attr">serverurl</span>=unix:///tmp/supervisor.sock <span class="comment">;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span></span><br><span class="line"><span class="comment">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span></span><br><span class="line"><span class="section">[program:xx]</span></span><br><span class="line"><span class="attr">command</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/bin/catalina.sh run  <span class="comment">; 程序启动命令</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span>       <span class="comment">; 在supervisord启动的时候也自动启动</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">10</span>         <span class="comment">; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span>     <span class="comment">; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span></span><br><span class="line"><span class="attr">startretries</span>=<span class="number">3</span>       <span class="comment">; 启动失败自动重试次数，默认是3</span></span><br><span class="line"><span class="attr">user</span>=tomcat          <span class="comment">; 用哪个用户启动进程，默认是root</span></span><br><span class="line"><span class="attr">priority</span>=<span class="number">999</span>         <span class="comment">; 进程启动优先级，默认999，值小的优先启动</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span> <span class="comment">; 把stderr重定向到stdout，默认false</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">20</span>MB  <span class="comment">; stdout 日志文件大小，默认50MB</span></span><br><span class="line"><span class="attr">stdout_logfile_backups</span> = <span class="number">20</span>   <span class="comment">; stdout 日志文件备份数，默认是10</span></span><br><span class="line"><span class="comment">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/logs/catalina.out</span><br><span class="line"><span class="attr">stopasgroup</span>=<span class="literal">false</span>     <span class="comment">;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span></span><br><span class="line"><span class="attr">killasgroup</span>=<span class="literal">false</span>     <span class="comment">;默认为false，向进程组发送kill信号，包括子进程</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;包含其它配置文件</span></span><br><span class="line"><span class="section">[include]</span></span><br><span class="line"><span class="attr">files</span> = relative/directory/*.ini    <span class="comment">;可以指定一个或多个以.ini结束的配置文件</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<ul>
    <li>我们从<code>supervisor</code>基础模型，组成、再到到使用进行了介绍</li>
    <li>验证了<code>supervisor</code>确实可以监控我们的任务，且给予了简单的控制面板，更加便于我们控制、监控</li>
    <li><code>supervisor</code>的配置文件十分重要，是熟练使用的前提与基石</li>
</ul>
<p>自从又了它，相信你对于任务的管理再也不会迷路了，冲冲冲～</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmjvtjiqtdj31c20mggp8.jpg" alt=""></p>
]]></content>
      <categories>
        <category>技术杂谈</category>
      </categories>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Reset VsCode config</title>
    <url>/1614406133.html</url>
    <content><![CDATA[<h2 id="重置-Visual-Studio-Code所有配置"><a href="#重置-Visual-Studio-Code所有配置" class="headerlink" title="重置 Visual Studio Code所有配置"></a>重置 Visual Studio Code所有配置</h2>
<p>随着使用期限的增长，各种问题便逐渐出现啦。当我们对于Visual Studio Code因为配置问题而造成使用不适，此处有一剂良药——初始化配置<br>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">rm -rf ~/.vscode</span><br><span class="line">rm -rf ~/Library/Application\ Support/Code</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
</p>
]]></content>
      <categories>
        <category>Mac</category>
        <category>Visual Studio Code</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>conda增加镜像源</title>
    <url>/3280426682.html</url>
    <content><![CDATA[<p>不得不说<code>Anconda</code>是个非常不错的科学计算包管理工具（当然不限与Python，而笔者主要用conda来管理虚拟环境等），使用conda来管理的时候难免会遇到国外网络的各种意外。对于此最简单的方法就是使用咱们国内的镜像源。使用方式如下</p>
<blockquote>
    <p>个人配置</p>
</blockquote>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 增加 镜像地址</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">conda config --show-sources</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx43066thhj30i503qwes.jpg" alt="image-20211206140953931"></p>
<p>当然也可以通过配置文件<code>.condarc</code>来修改，但笔者并不建议。在此遍不再过多赘述。</p>
<p>瑞思拜～</p>
]]></content>
      <categories>
        <category>conda</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 底层原理探究</title>
    <url>/54288.html</url>
    <content><![CDATA[<p>Docker is written in the <a href="https://golang.org/" target="_blank" rel="noopener">Go programming language</a> and takes advantage of several features of the Linux kernel to deliver its functionality.</p>
<a id="more"></a>
<p>Docker用<code>Go编程语言</code>编写，并利用Linux内核的多个功能来实现其功能。</p>
<h2 id="Namespaces-命名空间"><a href="#Namespaces-命名空间" class="headerlink" title="Namespaces(命名空间)"></a>Namespaces(命名空间)</h2>
<p>Docker uses a technology called <code>namespaces</code> to provide the isolated workspace called the <em>container</em>. When you run a container, Docker creates a set of <em>namespaces</em> for that container.</p>
<blockquote>
    <p>Docker使用<code>命名空间</code>的技术实现容器(虚拟)独立的工作区</p>
</blockquote>
<p><strong>理解<code>Namespaces</code></strong></p>
<p><strong>Namespaces</strong>,可以理解为虚拟化隔离</p>
<p>当我们在系统上运行程序时，系统会为我们分配<code>pid</code>,<code>net</code>,<code>ipc</code>,<code>mnt</code>,<code>uts</code>等资源，当我们在Linux中运行时这些都是全局的。</p>
<p>当我们使用命名空间即可实现隔离的机制，每个分配<code>pid</code>,<code>net</code>,<code>ipc</code>,<code>mnt</code>,<code>uts</code>都是独立的，这样我们就可以实现权限管理等</p>
<p>These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.</p>
<p>Docker Engine uses namespaces such as the following on Linux:</p>
<ul>
    <li><strong>The <code>pid</code> namespace:</strong> Process isolation (PID: Process ID).</li>
    <li><strong>The <code>net</code> namespace:</strong> Managing network interfaces (NET: Networking).</li>
    <li><strong>The <code>ipc</code> namespace:</strong> Managing access to IPC resources (IPC: InterProcess Communication).</li>
    <li><strong>The <code>mnt</code> namespace:</strong> Managing filesystem mount points (MNT: Mount).</li>
    <li><strong>The <code>uts</code> namespace:</strong> Isolating kernel and version identifiers. (UTS: Unix Timesharing System).</li>
</ul>
<p><strong>进程ID（pid）</strong></p>
<p>进程的<code>PID</code>命名空间提供与一组独立的从其他命名空间进程ID（PID）的处理。PID名称空间是嵌套的，这意味着在创建新进程时，它将为每个名称空间从当前名称空间到初始PID名称空间都有一个PID。因此，初始PID名称空间能够查看所有进程，尽管与其他名称空间看到的PID不同。</p>
<p>在PID名称空间中创建的第一个进程被分配了编号为1的进程，并获得与常规进程相同的大多数特殊处理，最值得注意的是，名称空间内的<code>孤立进程</code>。这也意味着此PID 1进程的终止将立即终止其PID名称空间中的所有进程以及所有后代。</p>
<p><strong>网络（网络）</strong></p>
<p>网络名称空间可虚拟化<code>网络堆栈</code>。创建时，网络名称空间仅包含<code>回送</code>接口。</p>
<p>每个<code>网络接口</code>（物理或虚拟）都存在于1个名称空间中，并且可以在名称空间之间移动。</p>
<p>每个名称空间都有一组专用的<code>P地址</code>，自己的<code>路由表</code>，<code>套接字</code>列表，连接跟踪表，防火墙和其他与网络相关的资源。</p>
<p>销毁网络名称空间会破坏其中的任何虚拟接口，并将其中的任何物理接口移回到初始网络名称空间。</p>
<p><strong>进程间通信（ipc）</strong></p>
<p>IPC名称空间将进程与<code>SysV</code>样式的进程间通信隔离开。这样可以防止不同IPC名称空间中的进程使用例如SHM系列功能在两个进程之间建立一定范围的共享内存。相反，每个进程将能够对共享内存区域使用相同的标识符，并产生两个这样的不同区域。</p>
<p><strong>挂载（mnt）</strong></p>
<p>安装名称空间控制安装点。创建后，会将当前安装名称空间中的安装复制到新的名称空间，但是之后创建的安装点不会在名称空间之间传播（使用共享子树，可以在名称空间之间传播安装点。</p>
<p>用于创建这种类型的新名称空间的克隆标志是CLONE_NEWNS-“ NEW NameSpace”的缩写。该术语不是描述性的（因为它没有告诉您要创建哪种类型的名称空间），因为挂载名称空间是第一类名称空间，设计人员并不预期会有其他名称空间。</p>
<p><strong>UTS (UNIX <a href="https://en.wikipedia.org/wiki/Time-sharing" target="_blank" rel="noopener">Time-Sharing</a>)</strong> </p>
<p>命名空间允许单个系统对不同的进程使用不同的主机名和域名。</p>
<h2 id="Control-groups"><a href="#Control-groups" class="headerlink" title="Control groups"></a>Control groups</h2>
<p>Docker Engine on Linux also relies on another technology called <em>control groups</em> (<code>cgroups</code>). A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints. For example, you can limit the memory available to a specific container.</p>
<blockquote>
    <p>Linux上的Docker引擎还依赖另一种称为<em>控制组</em>（<code>cgroups</code>）的技术。cgroup将应用程序限制为一组特定的资源。控制组允许Docker引擎将可用的硬件资源共享给容器，并可以选择性地实施限制和约束。例如，可以限制特定容器的可用内存。</p>
</blockquote>
<h2 id="Union-file-systems"><a href="#Union-file-systems" class="headerlink" title="Union file systems"></a>Union file systems</h2>
<p>Union file systems, or UnionFS, are file systems that operate by creating layers, making them very lightweight and fast. Docker Engine uses UnionFS to provide the building blocks for containers. Docker Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs, and DeviceMapper.</p>
<blockquote>
    <p>Union文件系统（UnionFS）是通过<code>创建层</code>来操作的文件系统，使它们非常轻量级和快速。Docker引擎使用UnionFS为容器提供构建块。Docker引擎可以使用多种UnionFS变体，包括AUFS、btrfs、vfs和DeviceMapper。</p>
</blockquote>
<h2 id="Container-format"><a href="#Container-format" class="headerlink" title="Container format"></a>Container format</h2>
<p>Docker Engine combines the namespaces, control groups, and UnionFS into a wrapper called a container format. The default container format is <code>libcontainer</code>. In the future, Docker may support other container formats by integrating with technologies such as BSD Jails or Solaris Zones.</p>
<blockquote>
    <p>Docker引擎将名称空间、控制组和UnionFS组合成一个称为容器格式的包装器。默认容器格式为“libcontainer”。将来，Docker可以通过集成BSD监狱或Solaris区域等技术来支持其他容器格式。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>docker使用go语言编写，基于<strong>Namespaces</strong>进行虚拟化隔离，Control groups进行对资源的限制，联合文件Union file systems来快速构建（可复用的镜像层），</p>
]]></content>
      <categories>
        <category>容器编排</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL,何必在忆之一(索引与执行计划篇)</title>
    <url>/18675.html</url>
    <content><![CDATA[<h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B Tree"></a>B Tree</h2>
<h3 id="B树的种类"><a href="#B树的种类" class="headerlink" title="B树的种类"></a>B树的种类</h3>
<ul>
    <li>B Tree</li>
    <li>B+ Tree</li>
    <li>B* Tree</li>
</ul>
<h3 id="B-树的定义"><a href="#B-树的定义" class="headerlink" title="B 树的定义"></a>B 树的定义</h3>
<a id="more"></a>
<p><strong>B树</strong>（英语：B-tree）是一种自平衡的树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在<a href="https://zh.wikipedia.org/wiki/时间复杂度#对数时间" target="_blank" rel="noopener">对数时间</a>内完成。B树，概括来说是一个一般化的<a href="https://zh.wikipedia.org/wiki/二元搜尋樹" target="_blank" rel="noopener">二叉查找树</a>（binary search tree）一个节点可以拥有2个以上的子节点。与<a href="https://zh.wikipedia.org/wiki/自平衡二叉查找树" target="_blank" rel="noopener">自平衡二叉查找树</a>不同，B树适用于读写相对大的数据块的存储系统，例如磁盘。B树减少定位记录时所经历的中间过程，从而加快存取速度。B树这种数据结构可以用来描述外部存储。这种数据结构常被应用在<a href="https://zh.wikipedia.org/wiki/数据库" target="_blank" rel="noopener">数据库</a>和<a href="https://zh.wikipedia.org/wiki/文件系统" target="_blank" rel="noopener">文件系统</a>的实现上。</p>
<p>三阶B树如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmk5199byij313u0g6mzl.jpg" alt=""></p>
<p>采用树形状结构，采用链表进行划分，这样就可以大量减少查询IO(且平均)，以上图为例子，等值的查询，需要三次IO，且仅要三次。</p>
<p>增加、删除、插入、搜索其之间的关系如下表所示</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">算法</th>
                <th style="text-align:center"><strong>平均</strong></th>
                <th style="text-align:center"><strong>最差</strong></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">空间</td>
                <td style="text-align:center">O(<em>n</em>)</td>
                <td style="text-align:center">O(<em>n</em>)</td>
            </tr>
            <tr>
                <td style="text-align:center">搜索</td>
                <td style="text-align:center">O(log <em>n</em>)</td>
                <td style="text-align:center">O(log <em>n</em>)</td>
            </tr>
            <tr>
                <td style="text-align:center">插入</td>
                <td style="text-align:center">O(log <em>n</em>)</td>
                <td style="text-align:center">O(log <em>n</em>)</td>
            </tr>
            <tr>
                <td style="text-align:center">删除</td>
                <td style="text-align:center">O(log <em>n</em>)</td>
                <td style="text-align:center">O(log <em>n</em>)</td>
            </tr>
        </tbody>
    </table>
</div>
<p><strong>B树运用的理念</strong></p>
<ul>
    <li>保持键值有序，以顺序遍历</li>
    <li>使用层次化的索引来最小化磁盘读取</li>
    <li>使用不完全填充的块来加速插入和删除</li>
    <li>通过优雅的遍历算法来保持索引平衡</li>
</ul>
<p>另外，B树通过保证内部节点至少半满来最小化空间浪费。一棵B树可以处理任意数目的插入和删除。</p>
<p><strong>B树的弊端</strong></p>
<ul>
    <li>除非完全重建数据库，否则无法改变键值的最大长度。这使得许多数据库系统将人名截断到70字符之内。</li>
</ul>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3>
<p>B+树是B树的一种变形，比B树具有更广泛的应用，m阶 B+树有如下特征: </p>
<ol>
    <li>每个结点的关键字个数与孩子个数相等，所有非最下层的内层结点的关键字是对应子树上的最大关键字，最下层内部结点包含了全部关键字.</li>
    <li>除根结点以外，每个内部结点有<code>M/2</code> 到m个孩子.</li>
    <li>所有叶结点在树结构的同一层，并且不含任何信息(可看成是外部结点或查找失败的结点)，因此，树结构总是树高平衡的。</li>
</ol>
<p>在B+树，这些键值的拷贝被存储在内部节点；键值和记录存储在叶子节点；另外，一个叶子节点可以包含一个指针，指向另一个叶子节点以加速顺序存取。</p>
<p>如图</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmk5zbc02dj30ta0cmaa0.jpg" alt=""></p>
<p>一颗m阶的B+树和m阶的B_树的差异在于：</p>
<p>1.有n棵子树的结点中含有n个关键字； (而B树是n棵子树有n-1个关键字)</p>
<p>2.所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接。(而B树的叶子节点并没有包括全部需要查找的信息)</p>
<p>3.<strong><em>\</em>所有的非终端结点可以看成是索引部分**</strong>，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B 树的非终节点也包含需要查找的有效信息)</p>
<blockquote>
    <p>B＋树的主要优点：非终端结点仅仅起高层索引作用，而B树非终端结点的关键字除作子树分界外，本身还是实际记录的有效关键字（含记录指针），因此相同的结点空间，B＋树可以设计的阶树比B树大，相同的索引，B＋树的索引层数比B树少，因此检索速度比B树快。此外，B＋树叶子结点包含完整的索引信息，可以较方便地表示文件的稀疏索引。最后，B＋树的检索、插入和删除都在叶子结点进行，比B树相对简单</p>
</blockquote>
<h3 id="B-树比B树更适合数据库索引？"><a href="#B-树比B树更适合数据库索引？" class="headerlink" title="B+树比B树更适合数据库索引？"></a>B+树比B树更适合数据库索引？</h3>
<p>1、B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。</p>
<p>2、B+树的查询效率更加稳定：由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p>
<p>3、由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。</p>
<h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h3>
<p><img src="http://static.oschina.net/uploads/space/2011/0509/171056_sAnR_135650.jpg" alt=""></p>
<p>B<em>树是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；B</em>树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）。</p>
<blockquote>
    <p>B+树的分裂：当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</p>
    <p>B*树的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3>
<p>​ B树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；</p>
<p>​ B-树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</p>
<p>​ B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</p>
<p>​ B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3</p>
<blockquote>
    <p>这里更加具体的有待探究，欢迎大佬批评与指点</p>
</blockquote>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2>
<h3 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h3>
<p>为了更快与查询，例如寻找书中的一页内容，我们可以先从目录进行塞选、从而加快查找的效率</p>
<h3 id="索引的种类-算法"><a href="#索引的种类-算法" class="headerlink" title="索引的种类(算法)"></a>索引的种类(算法)</h3>
<ul>
    <li>B树索引 —&gt; B+Tree —&gt; B* Tree </li>
    <li>Hash索引</li>
    <li>R树</li>
    <li>Full text</li>
    <li>GIS </li>
</ul>
<h3 id="聚簇索引B树结构"><a href="#聚簇索引B树结构" class="headerlink" title="聚簇索引B树结构"></a>聚簇索引B树结构</h3>
<p>区 extend =&gt; 簇 =&gt; 64 pages -&gt; 1MB</p>
<p><strong>构建前提</strong></p>
<ul>
    <li>建表时，指定了主键列，MySQL InnoDB会将主键作为聚簇索引列，比如 ID NOT NULL Primary Key</li>
    <li>如果没有主键,会选择唯一(unique)的列，作为聚集索引.</li>
    <li>以上均没有会生成隐藏的聚簇索引</li>
</ul>
<p><strong>作用</strong></p>
<ul>
    <li>有了聚簇索引后，将插入的数据行，都会按照Id值的顺序，<code>有序</code>在磁盘存储数据</li>
</ul>
<h3 id="辅助索引B树结构"><a href="#辅助索引B树结构" class="headerlink" title="辅助索引B树结构"></a>辅助索引B树结构</h3>
<blockquote>
    <p>使用普通的列作为条件构建的索引，需要认为创建</p>
</blockquote>
<p><strong>种类</strong></p>
<ul>
    <li>
        <p>普通的单列辅助索引</p>
    </li>
    <li>
        <p>联合索引（多个列作为索引条件,生成索引树,理论上设计的好的,可以减少大量的回表查询)</p>
        <ul>
            <li>注意最左原则</li>
            <li>建立联合索引时，选择重复值少的列。作为最左列</li>
        </ul>
    </li>
    <li>
        <p>唯一索引（索引列的值都是唯一的.）</p>
    </li>
</ul>
<p><strong>作用</strong></p>
<p>优化非聚簇索引列之外的查询优化</p>
<p><strong>构建过程</strong></p>
<ol>
    <li>索引是基于表中,列(索引键)的值生成的B树结构</li>
    <li>首先提取此列所有的值,进行自动排序</li>
    <li>将排好序的值,均匀的分布到索引树的叶子节点中(16K)</li>
    <li>然后生成此索引键值所对应得后端数据页的指针</li>
    <li>生成枝节点和根节点,根据数据量级和索引键长度,生成合适的索引树高度</li>
</ol>
<p><strong>前缀索引</strong></p>
<p>当选取的索引列值过长，造成索引树增高，此时我们就需要使用前缀索引</p>
<h3 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h3>
<p><strong>什么时候创建索引？</strong></p>
<p>按业务所需创建合适的索引，并不是索引越多越好，将索引建立在经常<code>where</code>\<code>group by</code>\<code>order by</code>\<code>join on</code>的条件</p>
<p><strong>为什么随意建立索引？</strong></p>
<p>如果冗余索引过多，表的数据发生变化的时候，导致索引频繁更新，造成锁</p>
<p>索引过多会造成优化器选择偏差</p>
<figure class="highlight pgsql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 查询表索引</span><br><span class="line"><span class="keyword">desc</span> <span class="built_in">table_name</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span></span><br><span class="line"># PRI 聚簇索引、MUL辅助索引、 UNI索引</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name1 <span class="keyword">on</span> city(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">index</span> idx_name(<span class="keyword">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span> <span class="keyword">index</span> idx_co_po(countrycode,population);</span><br><span class="line"><span class="comment"># 前缀索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span> <span class="keyword">index</span> idx_di(district(<span class="number">5</span>));</span><br><span class="line"><span class="comment"># 唯一索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span> <span class="keyword">unique</span> <span class="keyword">index</span> idx_uni1(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">drop</span> <span class="keyword">index</span> Index_Name</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3>
<ul>
    <li>聚集索引只能有一个,非空唯一,一般时主键</li>
    <li>辅助索引,可以有多个,时配合聚集索引使用的</li>
    <li>聚集索引叶子节点,就是磁盘的数据行存储的数据页</li>
    <li>MySQL是根据聚集索引,组织存储数据,数据存储时就是按照聚集索引的顺序进行存储数据</li>
    <li>辅助索引,只会提取索引键值,进行自动排序生成B树结构</li>
</ul>
<p><strong>建索引原则</strong></p>
<figure class="highlight csharp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">(<span class="number">1</span>) 必须要有主键,如果没有可以做为主键条件的列,创建无关列</span><br><span class="line">(<span class="number">2</span>) 经常做为<span class="keyword">where</span>条件列  order <span class="keyword">by</span>  <span class="keyword">group</span> <span class="keyword">by</span>  <span class="keyword">join</span> <span class="keyword">on</span>, distinct 的条件(业务:产品功能+用户行为)</span><br><span class="line">(<span class="number">3</span>) 最好使用唯一值多的列作为索引,如果索引列重复值较多,可以考虑使用联合索引</span><br><span class="line">(<span class="number">4</span>) 列值长度较长的索引列,我们建议使用前缀索引.</span><br><span class="line">(<span class="number">5</span>) 降低索引条目,一方面不要创建没用索引,不常使用的索引清理,<span class="function">percona <span class="title">toolkit</span>(<span class="params">xxxxx</span>)</span></span><br><span class="line"><span class="function">(<span class="params"><span class="number">6</span></span>) 索引维护要避开业务繁忙期</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>关于索引树的高度受什么影响</strong></p>
<figure class="highlight csharp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="number">1.</span> 数据量级, 解决方法:分表,分库,分布式</span><br><span class="line"><span class="number">2.</span> 索引列值过长 , 解决方法:前缀索引</span><br><span class="line"><span class="number">3.</span> 数据类型:</span><br><span class="line">变长长度字符串,使用了<span class="keyword">char</span>,解决方案:变长字符串使用varchar</span><br><span class="line"><span class="keyword">enum</span>类型的使用<span class="keyword">enum</span> (<span class="string">'山东'</span>,<span class="string">'河北'</span>,<span class="string">'黑龙江'</span>,<span class="string">'吉林'</span>,<span class="string">'辽宁'</span>,<span class="string">'陕西'</span>......)</span><br><span class="line">                                         <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="执行计划获取及分析"><a href="#执行计划获取及分析" class="headerlink" title="执行计划获取及分析"></a>执行计划获取及分析</h2>
<blockquote>
    <p>执行计划： 优化器按照内置的cost计算，选择执行的方案</p>
    <p>cost：IO、CPU、MEM</p>
</blockquote>
<p>获取到的是优化器选择完成认为代价最小的执行计划.<br>作用: 语句执行前,先看执行计划信息,可以有效的防止性能较差的语句带来的性能问题.<br>如果业务中出现了慢语句，我们也需要借助此命令进行语句的评估，分析优化方案。</p>
<p><strong>select 获取数据的方法</strong></p>
<p>全表扫描(应当尽量避免,因为性能低)</p>
<p>索引扫描</p>
<p>获取不到数据</p>
<figure class="highlight pgsql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 查看执行计划</span><br><span class="line"><span class="keyword">desc</span> </span><br><span class="line"><span class="keyword">explain</span>  </span><br><span class="line"># <span class="keyword">desc</span>(<span class="keyword">explain</span>) <span class="keyword">select</span> * <span class="keyword">from</span> sr_paper</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmlbo3s5wmj319e02sgln.jpg" alt=""></p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 需关注点</span></span><br><span class="line">table						：此次查询涉及的表</span><br><span class="line">type						: 查询类型：全表(一般来说有问题，重点关注)、索引(详细探究)</span><br><span class="line">possible_keys		：可能会用的索引</span><br><span class="line">key							: 最后选择的索引</span><br><span class="line">key_len					： 索引覆盖长度</span><br><span class="line">rows						: 此次查询需要扫描的行数</span><br><span class="line">Extra 					：额外的信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出介绍</span></span><br><span class="line">全表扫：ALL</span><br><span class="line">索引扫描</span><br><span class="line">index：全索引扫描</span><br><span class="line">range：索引范围查询</span><br><span class="line">ref	：辅助索引等值查询</span><br><span class="line">eq_ref： 多表连接</span><br><span class="line">const(system)：聚簇索引等值查询</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>docker分层构建</title>
    <url>/2890729769.html</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2>
<p>​ 在构建、部署、测试等情景中下不知你也是否遇到过这么几个问题，构建慢、依赖安装慢、重复性构建。以至于每一次采用docker来构建时，都需要等上那么几分钟。有时候是非常的浪费时间，那么是否有方法进行一次分离构建呢。当然正如docker口号所说的那般”<strong>Build once，Run anywher</strong>“，</p>
<p>那么该如何解决“<strong>构建慢、依赖安装慢、重复性构建</strong>”的问题呢，看似三个或者更多问题，其实归根结底是一个问题——分层构建</p>
<h2 id="分层构建"><a href="#分层构建" class="headerlink" title="分层构建"></a>分层构建</h2>
<p>想深层理解docker的分层构建，不得不从docker的设计特性出发。虚拟机与docker结构，如下图所示。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu2gf5gk5aj60kn0c40tr02.jpg" alt="image-20210902182150947"></p>
<p><strong>一层一层的分层结构</strong>，那么所谓分层构建只需要将<strong>环境依赖</strong>与<strong>业务代码</strong>分开构建即可。实现如下</p>
<ul>
    <li>
        <p>短时间内环境依赖构建一次且仅构建一次</p>
    </li>
    <li>
        <p>业务代码触发构建</p>
    </li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3>
<figure class="highlight dockerfile">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">#构建环境依赖</span></span><br><span class="line"><span class="comment">## 拉取pythoo镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"><span class="comment">## 设置环境变量，相当于linux的export</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/bin:$PATH</span><br><span class="line"><span class="comment">## 在容器中进入根目录code（如果没有code目录则创建）相当于cd</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="comment">## 将执行docker build 路径下的所有文件copy到容器内所在的目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt .</span></span><br><span class="line"><span class="comment">## 执行shell命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m pip install -U pip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    python3 -m pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker build -t user/img_name:version .</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">docker push user/img_name:version</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight dockerfile">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">#项目构建</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span>/img_name:version</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"supervisord"</span>,<span class="string">"-c"</span>, <span class="string">"supervisord.conf"</span>]</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h4>
<p>两层： 1.依赖构建 2.编译与项目构建</p>
<p>三层： 1. 依赖构建 2.编译构建 3. 运行文件构建</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">FROM golang:1.16 as builder</span><br><span class="line"><span class="comment"># Setting environment variables</span></span><br><span class="line">ENV GOPROXY=<span class="string">"https://goproxy.cn,direct"</span> GO111MODULE=<span class="string">"on"</span> CGO_ENABLED=<span class="string">"0"</span> GOOS=<span class="string">"linux"</span> GOARCH=<span class="string">"amd64"</span></span><br><span class="line"><span class="comment">## add rely</span></span><br><span class="line">go mod tidy </span><br><span class="line"><span class="comment"># Switch to workspace</span></span><br><span class="line">WORKDIR /go/src/github.com/gowebspider/goproxies/</span><br><span class="line"><span class="comment"># Load file</span></span><br><span class="line">COPY . .</span><br><span class="line"><span class="comment"># Build and place the results in /tmp/goproxies</span></span><br><span class="line">RUN go build -o /tmp/goproxies .</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY --from=builder /tmp/goproxies .</span><br><span class="line">CMD [<span class="string">"./goproxies"</span>]</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>容器编排</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署控制</title>
    <url>/4479.html</url>
    <content><![CDATA[<h2 id="Docker-swarm部署控制"><a href="#Docker-swarm部署控制" class="headerlink" title="Docker swarm部署控制"></a>Docker swarm部署控制</h2>
<p>还记得我之前写过一片文章叫做<a href="https://mp.weixin.qq.com/s?__biz=Mzg2MzM4NTg3MA==&amp;tempkey=MTA5MF9RcFZ5c1B4QTFmSnZHd2Qxa3hMNWhpLXFoOEJYWVBBaUZyME1sRmVBQnR1QWN3V3FUZ1hfa1BnemdtOWpLY1o0RTlzVnE2OUtRblZPS1ZDV2pDSk9QU3BadDUzLTNJa3RHYmxFQXNqMjQyQ1dSNUlrcDdfTG1scDRTWVg2UDdiLTI5eWo4dE9HSHI4TlVKOVltZEdtVzZObW9NT19GN2I5eF9YbzdBfn4%3D&amp;chksm=4e78226b790fab7d1fb0283f8b6294c40456df7aebf58d947412ed03d0c3fc3aa188de79f130#rd" target="_blank" rel="noopener">《Docker快速部署项目，极速搭建分布式》</a>，在那里讲述了如何去使用docker swarm，如何构建自己的私人镜像仓库。随着最近的业务量的增长，机子加多。对于docker swarm管理难度有上升的趋势。主要的问题有以下几个</p>
<ul>
    <li>物理机配置不同（比如 CPU、内存等）</li>
    <li>部署着不同类型的服务（比如 Web服务、Job服务等）</li>
    <li>Swarm 集群中的节点跨机房，为了内部服务间通信更快，该如何分组部署</li>
    <li>。。。</li>
</ul>
<p>为了解决以上问题,以求更合理、更科学的管理部署所以有了今天这篇文章。</p>
<a id="more"></a>
<p>docker 节点的部署调度一共有三种机制，随机部署、平衡部署、先满部署</p>
<blockquote>
    <p>随机部署：active中随机选择</p>
    <p>平衡部署：尽可能先平均填满所有的节点</p>
    <p>先满部署：与平衡部署相反，先部署至上限，然后在部署对应的</p>
</blockquote>
<p>那么该如何管理呢？下面我介绍几种方式，如下</p>
<ul>
    <li>NodeId</li>
    <li>HOSTNAME</li>
    <li>Node role</li>
    <li>node labels</li>
    <li>engine.labels</li>
</ul>
<p>首先我们查看一下节点列表信息，直接使用<code>docker node ls</code>，即可</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glgia65xg6j31jo0b8dgn.jpg" alt=""></p>
<p>首先我们先解读一下，docker 的限制指令</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># docker service create --help</span></span><br><span class="line">--constraint list                    Placement constraints</span><br><span class="line">--container-label list               Container labels</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>他们的 后面跟随的参数都是list，具体使用如以下示例</p>
<h3 id="NodeId"><a href="#NodeId" class="headerlink" title="NodeId"></a>NodeId</h3>
<p>根据NodeId来指定部署节点，以下以搭建私人镜像仓库为示例。</p>
<h4 id="docker-service"><a href="#docker-service" class="headerlink" title="docker service"></a>docker service</h4>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">docker service create \</span><br><span class="line">--name registry \</span><br><span class="line">--publish published=5000,target=5000 \</span><br><span class="line">--constraint node.id==ytsyvuhfs60spr361y6irpynm \</span><br><span class="line">registry:2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glgiv5qw30j31le03i0sr.jpg" alt=""></p>
<p>命令解读</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 在docker swarm中创建服务</span></span><br><span class="line">docker service create 	\</span><br><span class="line"><span class="comment"># --name 服务别名</span></span><br><span class="line"><span class="comment"># 指定node的id，ytsyvuhfs60spr361y6irpynm这个是我这里的node.id，你使用的时候需按照需求替换即可</span></span><br><span class="line">--constraint node.id==ytsyvuhfs60spr361y6irpynm \</span><br><span class="line"><span class="comment"># 暴露公开的接口，可以让节点中的其他node可以访问</span></span><br><span class="line">--publish published=5000,target=5000	\</span><br><span class="line"><span class="comment"># 镜像名：版本号</span></span><br><span class="line">registry:2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这样我们就实现了指定节点的部署，是不是很简单呢。</p>
<h4 id="docker-stack"><a href="#docker-stack" class="headerlink" title="docker stack"></a>docker stack</h4>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># docker-compose.yaml </span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">registry:</span></span><br><span class="line">         <span class="string">registry:2</span></span><br><span class="line">         <span class="attr">ports:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">8080</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">published:</span> <span class="number">8080</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">mode:</span> <span class="string">ingress</span></span><br><span class="line">         <span class="attr">deploy:</span></span><br><span class="line">           <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">           <span class="attr">placement:</span></span><br><span class="line">              <span class="attr">constraints:</span>                      <span class="comment"># 添加条件约束</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node.id==ytsyvuhfs60spr361y6irpynm</span></span><br><span class="line">           <span class="attr">restart_policy:</span></span><br><span class="line">             <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">             <span class="attr">max_attempts:</span> <span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="HOSTNAME"><a href="#HOSTNAME" class="headerlink" title="HOSTNAME"></a>HOSTNAME</h3>
<p>​ 除此之外我们还可以指定hostname 去将应用部署到指定的hostname上，操作与以上差不多。那让我们来实现一下，首先我们需要查看对应节点的信息，在manager节点上使用<code>docker node ls</code>查看，如下</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glmhr7pa7oj31yo07ewfw.jpg" alt=""></p>
<h4 id="docker-service-1"><a href="#docker-service-1" class="headerlink" title="docker service"></a>docker service</h4>
<p><strong>创建命令如下</strong>,以nginx为例</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">docker<span class="built_in"> service </span>create \</span><br><span class="line">--name nginx \</span><br><span class="line">--constraint node.<span class="attribute">hostname</span>==ecs-dc8a-0003 \</span><br><span class="line">-p 80:80 nginx</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glmi66uraij31y405mt9f.jpg" alt=""></p>
<p>这样我们就将nginx服务部署至对应的节点了，并且扩容也仅会在此节点进行部署。示例如下</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">docker<span class="built_in"> service </span>scale <span class="attribute">nginx</span>=3</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glmidvm1g1j31y60pwtcy.jpg" alt=""></p>
<h4 id="docker-stack-1"><a href="#docker-stack-1" class="headerlink" title="docker stack"></a>docker stack</h4>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># docker-compose.yaml </span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nginx:</span></span><br><span class="line">         <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">         <span class="attr">ports:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">published:</span> <span class="number">80</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">mode:</span> <span class="string">ingress</span></span><br><span class="line">         <span class="attr">deploy:</span></span><br><span class="line">           <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">           <span class="attr">placement:</span></span><br><span class="line">              <span class="attr">constraints:</span>                      <span class="comment"># 添加条件约束</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node.hostname==ecs-dc8a-0003</span></span><br><span class="line">           <span class="attr">restart_policy:</span></span><br><span class="line">             <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">             <span class="attr">max_attempts:</span> <span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Node-role"><a href="#Node-role" class="headerlink" title="Node role"></a>Node role</h3>
<p>前面我们了解到了根据<code>node.id</code>,<code>node.hostname</code>进行指定节点的部署，但指定的却是唯一的。那么该如何实现同一类进行随机的部署呢？到这里我们继续深入了解，更具节点关系的进行约束。可部署节点中的关系有leader，work。</p>
<p>例如，我想实现不在主节点上部署，虽然我们可以使用使用限制中的条件，避开。例如这样</p>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="string">docker</span> <span class="string">service</span> <span class="string">create</span> <span class="string">\</span></span><br><span class="line"><span class="string">--name</span> <span class="string">registry</span> <span class="string">\</span></span><br><span class="line"><span class="string">--publish</span> <span class="string">published=5000,target=5000</span> <span class="string">\</span></span><br><span class="line"><span class="string">--constraint</span> <span class="string">node.id!=ytsyvuhfs60spr361y6irpynm</span> <span class="string">\</span> <span class="comment"># 修改处</span></span><br><span class="line"><span class="string">registry:2</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>只需要将<code>==</code>,改为<code>!=</code>,即可。</p>
<h4 id="docker-service-2"><a href="#docker-service-2" class="headerlink" title="docker service"></a>docker service</h4>
<p>但终究还是感觉很不喜欢，其实我们也可以这样,根据节点关系进行约束部署，示例如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">docker service create \</span><br><span class="line">--name nginx \</span><br><span class="line">--publish published=80,target=80 \</span><br><span class="line">--constraint node.role!=manager nginx</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="docker-stack-2"><a href="#docker-stack-2" class="headerlink" title="docker stack"></a>docker stack</h4>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># docker-compose.yaml </span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nginx:</span></span><br><span class="line">         <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">         <span class="attr">ports:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">published:</span> <span class="number">80</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">mode:</span> <span class="string">ingress</span></span><br><span class="line">         <span class="attr">deploy:</span></span><br><span class="line">           <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">           <span class="attr">placement:</span></span><br><span class="line">              <span class="attr">constraints:</span>                      <span class="comment"># 添加条件约束</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node.role!=manager</span></span><br><span class="line">           <span class="attr">restart_policy:</span></span><br><span class="line">             <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">             <span class="attr">max_attempts:</span> <span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Node-lables"><a href="#Node-lables" class="headerlink" title="Node lables"></a>Node lables</h3>
<p>讲了这么多，照顾新手的就已经过去了，接下来我们晚点更常用的部署，更具lables，来部署。只要是同一个lable，就会可以被部署到，切后续还可以根据label进行更得心应手的管理，例如加入一个label，进行节点驱逐、然后在新加入lables，扩容</p>
<h4 id="添加标签与检查标签"><a href="#添加标签与检查标签" class="headerlink" title="添加标签与检查标签"></a>添加标签与检查标签</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 添加标签</span></span><br><span class="line">docker node update --label-add role=web hostname</span><br><span class="line"><span class="comment"># 检查标签</span></span><br><span class="line">docker node inspect hostname </span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">docker node update --label-rm role hostname</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>输出如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="string">"ID"</span>: <span class="string">"ttdku9ch37pknxu7b9sxknimb"</span>,                                                                                   </span><br><span class="line">        <span class="string">"Version"</span>: &#123;                                                                                                         </span><br><span class="line">            <span class="string">"Index"</span>: 852                                                                                                     </span><br><span class="line">        &#125;,                                                                                                                   </span><br><span class="line">        <span class="string">"CreatedAt"</span>: <span class="string">"2020-12-08T11:10:53.322771866Z"</span>,                                                                       </span><br><span class="line">        <span class="string">"UpdatedAt"</span>: <span class="string">"2020-12-13T13:24:57.009816659Z"</span>,                                                                       </span><br><span class="line">        <span class="string">"Spec"</span>: &#123;                                                                                                            </span><br><span class="line">            <span class="string">"Labels"</span>: &#123;                                                                                                      </span><br><span class="line">                <span class="string">"role"</span>: <span class="string">"web"</span>              <span class="comment"># 这样我们就实现了添加标签                                                                                  </span></span><br><span class="line">            &#125;,                                                                                                               </span><br><span class="line">            <span class="string">"Role"</span>: <span class="string">"manager"</span>,                                                                                               </span><br><span class="line">            <span class="string">"Availability"</span>: <span class="string">"active"</span>                                                                                         </span><br><span class="line">        &#125;,                 </span><br><span class="line">        <span class="comment"># 略</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="docker-Service"><a href="#docker-Service" class="headerlink" title="docker Service"></a>docker Service</h4>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">docker service create \</span><br><span class="line">  --name nginx_2 \</span><br><span class="line">  --constraint <span class="string">'node.labels.role == web'</span> \</span><br><span class="line">  nginx</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="docker-Stack"><a href="#docker-Stack" class="headerlink" title="docker Stack"></a>docker Stack</h4>
<figure class="highlight csharp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">    mycat:</span><br><span class="line">         image: nginx</span><br><span class="line">         ports:</span><br><span class="line">           - target: <span class="number">8080</span></span><br><span class="line">             published: <span class="number">8080</span></span><br><span class="line">             protocol: tcp</span><br><span class="line">             mode: ingress</span><br><span class="line">         deploy:</span><br><span class="line">           mode: <span class="keyword">global</span></span><br><span class="line">           placement:</span><br><span class="line">              constraints:                      <span class="meta"># 添加条件约束</span></span><br><span class="line">                - node.labels.role==web</span><br><span class="line">           restart_policy:</span><br><span class="line">             condition: <span class="keyword">on</span>-failure</span><br><span class="line">             max_attempts: <span class="number">3</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><code>constraints</code> 为数组，填写多个约束时，它们之间的关系是 <code>AND</code>。也就是说我们可以进行组合使用</p>
<h3 id="更多请参考下表"><a href="#更多请参考下表" class="headerlink" title="更多请参考下表"></a>更多请参考下表</h3>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:left">node attribute</th>
                <th style="text-align:left">matches</th>
                <th style="text-align:left">example</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:left"><code>node.id</code></td>
                <td style="text-align:left">Node ID</td>
                <td style="text-align:left"><code>node.id==2ivku8v2gvtg4</code></td>
            </tr>
            <tr>
                <td style="text-align:left"><code>node.hostname</code></td>
                <td style="text-align:left">Node hostname</td>
                <td style="text-align:left"><code>node.hostname!=node-2</code></td>
            </tr>
            <tr>
                <td style="text-align:left"><code>node.role</code></td>
                <td style="text-align:left">Node role (<code>manager</code>/<code>worker</code>)</td>
                <td style="text-align:left"><code>node.role==manager</code></td>
            </tr>
            <tr>
                <td style="text-align:left"><code>node.platform.os</code></td>
                <td style="text-align:left">Node operating system</td>
                <td style="text-align:left"><code>node.platform.os==windows</code></td>
            </tr>
            <tr>
                <td style="text-align:left"><code>node.platform.arch</code></td>
                <td style="text-align:left">Node architecture</td>
                <td style="text-align:left"><code>node.platform.arch==x86_64</code></td>
            </tr>
            <tr>
                <td style="text-align:left"><code>node.labels</code></td>
                <td style="text-align:left">User-defined node labels</td>
                <td style="text-align:left"><code>node.labels.security==high</code></td>
            </tr>
            <tr>
                <td style="text-align:left"><code>engine.labels</code></td>
                <td style="text-align:left">Docker Engine’s labels</td>
                <td style="text-align:left"><code>engine.labels.operatingsystem==ubuntu-14.04</code></td>
            </tr>
        </tbody>
    </table>
</div>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3>
<p><a href="https://docs.docker.com/engine/reference/commandline/service_create/#set-service-mode---mode" target="_blank" rel="noopener">此部分的官方文档</a></p>
]]></content>
      <categories>
        <category>容器编排</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows中配置conda显示</title>
    <url>/2192683752.html</url>
    <content><![CDATA[<blockquote>
    <p>由于我更加习惯使用Powershell，所以在这里均在powershell中配置。</p>
    <p>毕竟如果使用cmd来进行操作，体验并不是那么好。<br>尤其是当你习惯了Linux Shell 之后。 </p>
</blockquote>
<p>在 Windows中对于conda的显示并不友好，为此需要对</p>
<p>powershell 进行一些设置使conda在Windows平台上也有个非常不错的<br>体验。相关设置如下</p>
<p>首先使用 管理员身份打开powershell，执行以下代码</p>
<figure class="highlight powershell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned</span><br><span class="line">conda init -<span class="literal">-all</span></span><br><span class="line">conda config -<span class="literal">-set</span> changeps1 false</span><br><span class="line">conda config -<span class="literal">-set</span> auto_activate_base false</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>powershell</category>
        <category>windows</category>
        <category>conda</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>golang并发模式</title>
    <url>/41600.html</url>
    <content><![CDATA[<p>并发模式并不是一种函数的运用、亦或者实际存在的东西。他是前人对于并发场景的运用总结与经验。他与23中设计模式一样。好啦，话不多说。开干</p>
<p>无论是如何厉害的架构还是编程方式，我始终相信都是从零开始，不断的抽象，不断的迭代的。抽象思维对于我们尤为重要。那么我们也带着这样的一个疑问。思考到底什么是抽象</p>
<p>首先我们将要学习的是<code>work pool</code>模式</p>
<a id="more"></a>
<h2 id="work-pool"><a href="#work-pool" class="headerlink" title="work pool"></a>work pool</h2>
<p>不知道大家是否在go并发的时候遇见过以下几个问题或者想法</p>
<ul>
    <li>goroutine的数量控制可能并不是那么称心如意<ul>
            <li>goroutine，创造过多，造成资源浪费。且并发效果也并非那么好。他正如正态分布那样。到达某个极点所带来的收益将会下降</li>
        </ul>
    </li>
    <li>goroutine复用的问题，往往一个goroutine都只处理了一个任务。不断的创建与删除</li>
    <li>甚至更多。。。</li>
</ul>
<p>workpool，首先分析以上问题，我个人总结都以上其实是一个问题，groutine与任务死死的绑定，并没有进行解耦。比如像这样。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exs</span><span class="params">(accept &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, recipient <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> result := <span class="keyword">range</span> accept &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Received only sent channel a:"</span>, result)</span><br><span class="line">		recipient &lt;- result + <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//fmt.Println("Send Only", recipient)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	startTime := time.Now()</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">			fmt.Println(&lt;-ch)</span><br><span class="line">		&#125;(ch)</span><br><span class="line">		ch &lt;- i</span><br><span class="line">	&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>那么我们来改造一下，然后进行代码剖析。代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">(id <span class="keyword">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, result <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Worker [ID]"</span>, id, <span class="string">"Start Process JoB [Id]"</span>, j)</span><br><span class="line">		time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">		<span class="comment">//fmt.Println("Working, will Spend 2 s")</span></span><br><span class="line">		fmt.Println(<span class="string">"Worker [ID]"</span>, id, <span class="string">"Carry Process JoB [Id]"</span>, j)</span><br><span class="line">		result &lt;- j * <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> jobNumber = <span class="number">1000</span></span><br><span class="line">	<span class="keyword">const</span> workerNumber = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">	jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, workerNumber)</span><br><span class="line">	result := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, jobNumber)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create Worker(start Goroutines)</span></span><br><span class="line">	<span class="keyword">for</span> w := <span class="number">0</span>; w &lt;= workerNumber; w++ &#123;</span><br><span class="line">		<span class="keyword">go</span> work(w, jobs, result)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// arrange work</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= jobNumber; j ++ &#123;</span><br><span class="line">		jobs &lt;- j</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取结果</span></span><br><span class="line">	<span class="keyword">for</span> r := <span class="number">0</span>; r &lt;= jobNumber; r ++ &#123;</span><br><span class="line">		&lt;- result</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>work pool的精髓在于将任务，与groutine进行分离。只关心初始的任务与结果。是不是与函数式编程很像呢？我也这么觉得，嘻嘻</p>
<p>来吧，我们剖析一下代码</p>
<ol>
    <li>首先我们定义了两个常量（建议是常量），<code>jobNum</code>与<code>workerNumber</code>，故名思义他们分别是任务数量，以及工人数量。你可以将他们看出生产者与消费者。</li>
    <li>我们定义了两个channel，他们作为我们发送指令与获取结果的通道。记得加缓存哦，否则将造成死锁</li>
    <li>最后就是分别定义消费者-<code>groutine</code>，生产者jobNumber，然后传递任务进入goroutine。然后我们就只需要得到结果就好啦</li>
</ol>
<p>nice，虽然很简单。但也有无限的可能性哦。你还可以进一步抽象，变成一个通用的goroutine pool。</p>
<h2 id="Pipeline-模式"><a href="#Pipeline-模式" class="headerlink" title="Pipeline 模式"></a>Pipeline 模式</h2>
<p>Pipeline 模式也称为流水线模式，模拟的就是现实世界中的流水线生产。</p>
<p>从技术上看，每一道工序的输出，就是下一道工序的输入，在工序之间传递的东西就是数据，这种模式称为流水线模式，而传递的数据称为数据流。下面我们用代码模拟<code>柴火烧饭的</code>过程</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	combust := wash(<span class="number">10</span>)</span><br><span class="line">	rice := combustion(combust)</span><br><span class="line">	packs := open(rice)</span><br><span class="line">	<span class="comment">//输出测试，看看效果</span></span><br><span class="line">	<span class="keyword">for</span> p := <span class="keyword">range</span> packs &#123;</span><br><span class="line">		fmt.Println(p)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wash</span><span class="params">(n <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">			out &lt;- fmt.Sprint(<span class="string">"洗米"</span>, i)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combustion</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">		<span class="keyword">for</span> c := <span class="keyword">range</span> in &#123;</span><br><span class="line">			out &lt;- <span class="string">"烧饭("</span> + c + <span class="string">")"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">		<span class="keyword">for</span> c := <span class="keyword">range</span> in &#123;</span><br><span class="line">			out &lt;- <span class="string">"开锅("</span> + c + <span class="string">")"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>开锅(烧饭(洗米1))<br>开锅(烧饭(洗米2))<br>开锅(烧饭(洗米3))<br>开锅(烧饭(洗米4))<br>开锅(烧饭(洗米5))<br>开锅(烧饭(洗米6))<br>开锅(烧饭(洗米7))<br>开锅(烧饭(洗米8))<br>开锅(烧饭(洗米9))<br>开锅(烧饭(洗米10))</p>
</blockquote>
<p>首先，我为什么一定强调是柴火烧饭呢，难道柴火香一点？那可不，必须的。</p>
<p>其实再这里，我们需要思考一个问题，什么是可异步的，什么是不可异步的？</p>
<blockquote>
    <p>拓展：</p>
    <p>可异步：例如网络请求，发送网络请求后，立马发送下一个。尽量减少网络io阻塞，从而提高效率。可前提是，网络io阻塞可以不用等待</p>
    <p>不可异步：也就是说我们每一步都必须参与其中，计算机它无法独自去完成。例如柴火烧饭，没柴火咋烧饭，魔法么。当然你硬要说火烧一次就一直可以不需要人去干预，那咱也没办法了不是</p>
</blockquote>
<p>在这里，生产者与消费者可能并不像之前那么分的那么开了，首先 </p>
<p>洗米（生产者）</p>
<p>烧饭（消费者、生产者）</p>
<p>开锅（消费者）</p>
<p>这种模式称为流水线模式，而传递的数据称为数据流</p>
<h2 id="分治模式"><a href="#分治模式" class="headerlink" title="分治模式"></a>分治模式</h2>
<p>就像前面所说那样，每一道必须依靠前面完成了才能进行下一步，但我们发现其中烧饭或者太慢了，我们可以分而治之，然后合并。也可以达到我们需要的效果。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	combust := wash(<span class="number">10</span>)</span><br><span class="line">	rice1 := combustion(combust)</span><br><span class="line">	rice2 := combustion(combust)</span><br><span class="line">	rice3 := combustion(combust)</span><br><span class="line">	rice := merge(rice1, rice2, rice3)</span><br><span class="line">	packs := open(rice)</span><br><span class="line">	<span class="comment">//输出测试，看看效果</span></span><br><span class="line">	<span class="keyword">for</span> p := <span class="keyword">range</span> packs &#123;</span><br><span class="line">		fmt.Println(p)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wash</span><span class="params">(n <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">			out &lt;- fmt.Sprint(<span class="string">"洗米"</span>, i)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combustion</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">		time.Sleep(<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">for</span> c := <span class="keyword">range</span> in &#123;</span><br><span class="line">			out &lt;- <span class="string">"烧饭("</span> + c + <span class="string">")"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">		<span class="keyword">for</span> c := <span class="keyword">range</span> in &#123;</span><br><span class="line">			out &lt;- <span class="string">"开锅("</span> + c + <span class="string">")"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(ins ...&lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">	<span class="comment">//把一个channel中的数据发送到out中</span></span><br><span class="line">	p := <span class="function"><span class="keyword">func</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> wg.Done()</span><br><span class="line">		<span class="keyword">for</span> c := <span class="keyword">range</span> in &#123;</span><br><span class="line">			out &lt;- c</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Add(<span class="built_in">len</span>(ins))</span><br><span class="line">	<span class="comment">//扇入，需要启动多个goroutine用于处于多个channel中的数据</span></span><br><span class="line">	<span class="keyword">for</span> _, cs := <span class="keyword">range</span> ins &#123;</span><br><span class="line">		<span class="keyword">go</span> p(cs)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//等待所有输入的数据ins处理完，再关闭输出out</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		wg.Wait()</span><br><span class="line">		<span class="built_in">close</span>(out)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="Futures-模式"><a href="#Futures-模式" class="headerlink" title="Futures 模式"></a>Futures 模式</h2>
<p>Pipeline 流水线模式中的工序是相互依赖的，上一道工序做完，下一道工序才能开始。但是在我们的实际需求中，也有大量的任务之间相互独立、没有依赖，所以为了提高性能，这些独立的任务就可以并发执行。</p>
<p>举个例子，比如我打算自己做顿火锅吃，那么就需要洗菜、烧水。洗菜、烧水这两个步骤相互之间没有依赖关系，是独立的，那么就可以同时做，但是最后做火锅这个步骤就需要洗好菜、烧好水之后才能进行。这个做火锅的场景就适用 Futures 模式。</p>
<p>Futures 模式可以理解为未来模式，主协程不用等待子协程返回的结果，可以先去做其他事情，等未来需要子协程结果的时候再来取，如果子协程还没有返回结果，就一直等待</p>
<p>Futures 模式下的协程和普通协程最大的区别是可以返回结果，而这个结果会在未来的某个时间点使用。所以在未来获取这个结果的操作必须是一个阻塞的操作，要一直等到获取结果为止。</p>
<p>如果你的大任务可以拆解为一个个独立并发执行的小任务，并且可以通过这些小任务的结果得出最终大任务的结果，就可以使用 Futures 模式。</p>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2>
<p>22讲通关go语言-飞雪无情</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>golang第三方包发布详细流程</title>
    <url>/16882.html</url>
    <content><![CDATA[<h3 id="发布golang第三方包"><a href="#发布golang第三方包" class="headerlink" title="发布golang第三方包"></a>发布golang第三方包</h3>
<p>事情是这样的，随着公司的业务的增长。各种重复的工作越来约多。CV久了就想在进一步的那啥，毕竟我懒，不是。我就想着能不能把那些重复cv的干脆写成一个第三方包，进行调用。咱不谈那些啥封装啥的，我也想过，我也做过。但无论咋封装，总不可能跨项目吧,还是需要。。。</p>
<p>所幸，还是有方法的，来吧，让我们发表第一个golang工具包</p>
<a id="more"></a>
<h3 id="创建项目仓库"><a href="#创建项目仓库" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h3>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2ghktr3vj31ml0u0abu.jpg" alt=""></p>
<ol>
    <li>首先输入仓库的名字，我这里输入simpleExample，用来做演示</li>
    <li>这里选择public，公开。要不并不好拉</li>
    <li>选择需要添加的文件(可选)</li>
    <li>鼠标左键点击create repository创建此仓库</li>
</ol>
<p>完成后就有一个名为simpleExample的项目仓库，如下图所示。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2gnbyu4kj32620nm3zq.jpg" alt=""></p>
<p>如果<code>第三步</code>全都没选的话就是另外一个图了</p>
<blockquote>
    <p>这一步还是很简单的，毕竟github，全球最大的程序员交友网站不是。2110年了相信大家还是都会用的，是实在不会的，可自行百度，或者Google。</p>
</blockquote>
<h3 id="拉取仓库，编辑示例代码"><a href="#拉取仓库，编辑示例代码" class="headerlink" title="拉取仓库，编辑示例代码"></a>拉取仓库，编辑示例代码</h3>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2gtep6b6j31hs0nigmr.jpg" alt=""></p>
<p>第一步，鼠标左键点击code</p>
<p>第二步，点击后面类似于粘贴板的东西，复制https的URL</p>
<p>然后在cd到GOPATH中使用git，把这个项目clone下来</p>
<p>例如，我在这里的使用的git命令如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">git <span class="built_in">clone</span> https://github.com/Golzaes/simpleExample.git</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>执行成功后使用 <code>ls</code>命令查看一下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2gzfqf28j31f2032weo.jpg" alt=""></p>
<p>使用编辑器打开<code>simpleExample</code>这个项目文件夹，如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2h1zo9gjj31fy0eugm9.jpg" alt=""></p>
<p><strong>go module初始化</strong></p>
<figure class="highlight diff">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="addition">+ go mod init "github.com/Golzaes/simpleExample"</span></span><br><span class="line"><span class="deletion">- go mod init "github.com/组织名/项目名"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意：这里的一定是<code>&quot;github.com/组织名/项目名&quot;</code>这样的格式</p>
</blockquote>
<p>创建文件夹与示例代码</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// Example/example.go</span></span><br><span class="line"><span class="keyword">package</span> exampleCode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadNumber create random number</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadNumber</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">// random number range</span></span><br><span class="line">	rnr := <span class="number">10</span></span><br><span class="line">	<span class="comment">//  returns, as an int, a non-negative pseudo-random number in [0,n)</span></span><br><span class="line">	<span class="keyword">return</span> rand.Intn(rnr)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>注意这里的函数名<code>ReadNumber</code>，首字母必须大写！！！</p>
    <p>否则无法再外部调用此函数</p>
</blockquote>
<p>来个简单的单元测试</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// Example/example_test.go</span></span><br><span class="line"><span class="keyword">package</span> exampleCode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadNumber</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">		name <span class="keyword">string</span></span><br><span class="line">		want <span class="keyword">int</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Add test cases.</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"exampleCode1"</span>,</span><br><span class="line">			<span class="number">1</span>,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="string">"exampleCode2"</span>,</span><br><span class="line">			<span class="number">2</span>,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="string">"exampleCode3"</span>,</span><br><span class="line">			<span class="number">3</span>,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="string">"exampleCode4"</span>,</span><br><span class="line">			<span class="number">4</span>,</span><br><span class="line">		&#125;,&#123;</span><br><span class="line">			<span class="string">"exampleCode5"</span>,</span><br><span class="line">			<span class="number">5</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">		t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">			<span class="keyword">if</span> got := ReadNumber(); got != tt.want &#123;</span><br><span class="line">				t.Errorf(<span class="string">"ReadNumber() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>运行测试</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2hje5s3pj31m20u0dhw.jpg" alt=""></p>
<p>有个测试过了，说明我们的代码没有问题，也可以外部调用</p>
<h3 id="推送与发布代码"><a href="#推送与发布代码" class="headerlink" title="推送与发布代码"></a>推送与发布代码</h3>
<p>使用以下命令，提交与push</p>
<figure class="highlight armasm">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>exampleCode/</span><br><span class="line"><span class="symbol">git</span> commit -am <span class="string">"add exampleCode"</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin master</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2hmyx0dlj31ws0u0409.jpg" alt=""></p>
<p>仔细对比就会发现，这里多了个<code>exampleCode</code>文件夹。到这里我们就已经将代码push到了github，接下来我们发布一个，这样我们可以在另外一个项目中以第三方包的形式使用</p>
<p>第一步，点击releases下面的create a new releases</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2hsentogj322q0smgn2.jpg" alt=""></p>
<p>先 填写标签号(常规格式是 x.y.z)例如我的<code>v0.0.1</code>,</p>
<p>填写发表的标题，一般是项目名</p>
<p>填写简介</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2hvvs1bsj31pk0u0tal.jpg" alt=""></p>
<p>然后鼠标左键点击 左下方的<code>publish release</code>，进行发布，发布完成后会自动跳转到如下图所示的发布栏</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2i0che88j323z0u0zl9.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2i0zg0g6j327e0qm3zw.jpg" alt=""></p>
<p>至此，发布部分就已经完成了。那么自己来测试一下这个第三方包</p>
<h3 id="使用发布的第三方包"><a href="#使用发布的第三方包" class="headerlink" title="使用发布的第三方包"></a>使用发布的第三方包</h3>
<p>新建一个项目、go mod init初始化、创建文件夹就不过多赘述了</p>
<p>下载我们发布的包</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2i6hgxrnj31ai044t8u.jpg" alt=""></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go get github.com/Golzaes/simpleExample/exampleCode</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp2ibah1b2j31gt0u0my1.jpg" alt=""></p>
<p>在项目中import 这个包</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3>
<p>本文从创建仓库开始到发布第三方包后到使用第三方包，这样我们就可以跨项目使用啦。</p>
<p>如果测试未完成，请重新查阅。尤其是注意点！！！</p>
]]></content>
      <categories>
        <category>Go</category>
        <category>git</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>golang并发铁索连环-context</title>
    <url>/2392.html</url>
    <content><![CDATA[<p>首先要和大家说声抱歉哈，由于工作上、生活上的某些琐事，以至于造成本节的断更。不过请不要悲伤。因为我在这期间也是做过详细的复习的。我相信一定会让你有更加深入的理解，同时也欢迎你向我提出不足。我们共同进步。话不多说，我相信你已经迫不及待了。还在等什么？let‘s GO</p>
<p>在本文中，我首先会介绍context是什么，它有什么作用，以及如何使用，其中还会参杂一点个人的理解，以及部分源码的了解。What are you waiting for?</p>
<a id="more"></a>
<h2 id="Context："><a href="#Context：" class="headerlink" title="Context："></a>Context：</h2>
<blockquote>
    <p>来自官方文档</p>
</blockquote>
<p>Context包定义了上下文类型，该类型在API边界之间以及进程之间传递截止日期，取消信号和其他请求范围的值</p>
<p>对服务器的传入请求应创建一个Context，而对服务器的传出调用应接受一个Context。</p>
<p>它们之间的函数调用链必须传播Context，可以选择将其替换为使用WithCancel，WithDeadline，WithTimeout或WithValue创建的派生Context。取消上下文后，从该上下文派生的所有上下文也会被取消。</p>
<p>WithCancel，WithDeadline和WithTimeout函数采用Context（父级）并返回派生的Context（子级）和CancelFunc。调用CancelFunc会取消该子代及其子代，删除父代对该子代的引用，并停止所有关联的计时器。未能调用CancelFunc会使子代及其子代泄漏，直到父代被取消或计时器触发。审核工具检查所有控制流路径上是否都使用了CancelFuncs。</p>
<p>使用上下文的程序应遵循以下规则，以使各个包之间的接口保持一致，并使静态分析工具可以检查上下文传播：</p>
<p>不要将上下文存储在结构类型中；而是将上下文明确传递给需要它的每个函数。 Context应该是第一个参数，通常命名为ctx：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoSomething</span><span class="params">(ctx context.Context, arg Arg)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">//  ... use ctx ...</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>即使函数允许，也不要传递nil Context。如果不确定使用哪个上下文，请传递context.TODO</p>
<p>仅将上下文值用于传递过程和API的请求范围数据，而不用于将可选参数传递给函数。</p>
<p>可以将相同的上下文传递给在不同goroutine中运行的函数。上下文可以安全地被多个goroutine同时使用</p>
<p>巴拉巴拉，说了一大堆，反正我一句没懂，当然我知道context是干嘛的，（尬～，不小心暴露了，学渣的本质），说说我的理解以及使用建议</p>
<ul>
    <li>对服务器的传入请求应创建一个Context，而对服务器的传出响应也应接受一个Context。</li>
    <li>
        <p>函数调用链必须传播Context，也可以选择将其替换为使用WithCancel，WithDeadline，WithTimeout或WithValue创建的派生Context(也就是子类context)。取消上下文后，从该上下文派生的所有上下文也会被取消</p>
    </li>
    <li>
        <p>Context 不要放在结构体中，要以参数的方式传递。</p>
    </li>
    <li>Context 作为函数的参数时，要放在第一位，也就是第一个参数。</li>
    <li>要使用 context.Background 函数生成根节点的 Context，也就是最顶层的 Context。</li>
    <li>Context 传值要传递必须的值，而且要尽可能地少，不要什么都传。</li>
    <li><strong>Context 多协程安全，可以在多个协程中放心使用。</strong></li>
</ul>
<h3 id="go-Context定义"><a href="#go-Context定义" class="headerlink" title="go Context定义"></a>go Context定义</h3>
<p>Context 是Go 1.7 标准库引入 的标准库，中文译作“上下文”，准确说它是 goroutine 的上下文，包含 goroutine 的运行状态、环境、现场等信息。</p>
<p>使用context，我们可以轻松优雅的做到<code>取消goroutine</code>，<code>超时时间</code>,<code>运行截止时间</code>，<code>k-v</code>存储等。<strong>它是并发安全的</strong></p>
<p>随着 context 包的引入，标准库中很多接口因此加上了 context 参数，例如 database/sql 包。context 几乎成为了并发控制和超时控制的标准做法。</p>
<blockquote>
    <p>context.Context 类型的值可以协调多个 groutine 中的代码执行“取消”操作，并且可以存储键值对。最重要的是它是并发安全的。<br>与它协作的 API 都可以由外部控制执行“取消”操作，例如：取消一个 HTTP 请求的执行。</p>
</blockquote>
<p>止于这些么？当然 不止,还有更多的骚操作，接下来让我们一起拿下它吧。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2>
<blockquote>
    <p>为什么需要使用context，理由一</p>
    <p>一个协程启动后，大部分情况需要等待里面的代码执行完毕，然后协程会自行退出。但需要让协程提前退出怎么办呢？</p>
</blockquote>
<p>下面我们以一个小的示例，来逐渐了解context的妙用之一吧</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">monitor</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启for select循环，j进行后台监控</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Printf(<span class="string">"Time: %v 监控者:%s, 正在监控...\n"</span>, time.Now().Unix(), name)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// sleep 1 second</span></span><br><span class="line">		time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"%s 监控完成，一切正常，请指示 over...\n"</span>, name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="comment">// Define waiting group</span></span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// Execution complete</span></span><br><span class="line">		<span class="keyword">defer</span> wg.Done()</span><br><span class="line">		monitor(<span class="string">"天眼"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">//Exit after waiting</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>我们在这里实现了一个基本的groutine执行的case</p>
<blockquote>
    <p>我们定义了等待组<code>wait group</code>,防止协程提前退出。关于<code>wait group</code>可参考上一篇文章，golang并发控制的心应手。</p>
</blockquote>
<p>他会周期性的运行，不断打印监控信息，例如</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnhog0u2cbj30iy06eq33.jpg" style="zoom:50%;" /></p>
<p>那么我们完成上述的那个需求<code>提前退出</code>,那么该怎么办呢？其中一个方法就是定义一个全局的sign，其他地方可以通过修改这个sign发出停止监控的指令。然后在协程中先检查这个变量，如果发现被通知关闭就停止监控，退出当前协程。从而实现可控制提前退出。示例代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">monitor1</span><span class="params">(signCh <span class="keyword">chan</span> <span class="keyword">bool</span>, MonitoringPeriod time.Duration, name <span class="keyword">string</span>, )</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启for select循环，一直后台监控</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-signCh:</span><br><span class="line">			fmt.Println(name, <span class="string">"停止指令已收到，停止..."</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Printf(<span class="string">"Time: %v [监控者]:%s, 正在监控...\n"</span>, time.Now().Unix(), name)</span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(MonitoringPeriod * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	signCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>) <span class="comment">//sign 用来停止监控</span></span><br><span class="line">	<span class="keyword">const</span> MonitoringTime, MonitoringPeriod = <span class="number">20</span>, <span class="number">2</span></span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> wg.Done()</span><br><span class="line">		monitor1(signCh, MonitoringPeriod, <span class="string">"天眼"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	time.Sleep(MonitoringTime * time.Second) <span class="comment">//实施监控时间</span></span><br><span class="line">	signCh &lt;- <span class="literal">true</span>                           <span class="comment">//发停止指令</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这样我们就实现了，可控制话的groutine退出，但如果在新增几个定期的任务功能，那该如何是好？</p>
<p>管他的，我们先把这个弄懂了先。老夫先干为敬。首先我们先看程序运行图，如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnhpa8zjtfj315k0tsmxg.jpg" style="zoom:50%;" /></p>
<p>这个示例是使用 select+channel 的方式改造，实现了通过 channel 发送指令让监控狗停止，进而达到协程退出的目的。</p>
<p>首先我们定义了sync.WaitGroup，防止gorontine提前退出。signCh，他是一个bool值类型channel，用于发送sign后续的退出。</p>
<p>MonitoringTime，MonitoringPeriod，监控时间与监控周期。second。</p>
<p>然后创建goroutine执行select+channel。</p>
<h2 id="Go-Context-初试体验"><a href="#Go-Context-初试体验" class="headerlink" title="Go Context 初试体验"></a>Go Context 初试体验</h2>
<p>为 函数增加 signCh 参数，用于接收停止指令；</p>
<p>在 main 函数中，声明用于停止的 signCh，传递给 monitor1 函数，然后通过 signCh&lt;-true 发送停止指令让协程退出。</p>
<p>通过 select+channel 让协程退出的方式比较优雅，以下几个问题也随之凸显</p>
<p>但如果我们希望做到同时取消很多个协程呢？</p>
<p>如果是定时取消协程又该怎么办？</p>
<p>这时候 select+channel 的局限性就凸现出来了，即使定义了多个 channel 解决问题，当然这个方式是可行的，但代码逻辑也会非常复杂、难以维护。</p>
<p>要解决这种复杂的协程问题，必须有一种可以跟踪协程的方案，只有跟踪到每个协程，才能更好地控制它们，这种方案就是 Go 语言标准库为我们提供的 Context，接下来我们体验一下它的强大之处吧。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="keyword">const</span> MonitoringTime, MonitoringPeriod = <span class="number">20</span>, <span class="number">2</span></span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// 定义一个等待的 `context`</span></span><br><span class="line">	ctx, stop := context.WithCancel(context.Background())</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> wg.Done()</span><br><span class="line">		monitor2(ctx, MonitoringPeriod, <span class="string">"天眼"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	time.Sleep(MonitoringTime * time.Second) <span class="comment">//先监控5秒</span></span><br><span class="line">	stop()                                   <span class="comment">//发停止指令</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">monitor2</span><span class="params">(ctx context.Context, MonitoringPeriod time.Duration, name <span class="keyword">string</span>, )</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启for select循环，一直后台监控</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			fmt.Println(name, <span class="string">"停止指令已收到，停止..."</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Printf(<span class="string">"Time: %v [监控者]:%s, 正在监控...\n"</span>, time.Now().Unix(), name)</span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(MonitoringPeriod * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>是不是很优雅呢？确实如此，那么为什么也可以达到上面使用<code>channel</code>，的效果呢。那么我们去看一下它的具体实现部分呢，</p>
<h3 id="WithCancel"><a href="#WithCancel" class="headerlink" title="WithCancel"></a><code>WithCancel</code></h3>
<p>以下是WithCancel：具体实现部分代码</p>
<blockquote>
    <p>WithCancel:返回具有新的“完成”通道的父级副本。当调用返回的cancel函数或关闭父上下文的Done通道时（以先发生的为准），将关闭返回的上下文的Done通道。取消此上下文将释放与其关联的资源，因此在此上下文中运行的操作完成后，代码应立即调用cancel。</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"cannot create context from nil parent"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	c := newCancelCtx(parent)</span><br><span class="line">	propagateCancel(parent, &amp;c)</span><br><span class="line">	<span class="keyword">return</span> &amp;c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>除了WithCancel，之外还有<code>WithDeadline</code>,<code>WithTimeout</code>,<code>WithValue</code>,首先我们来继续看看<code>WithDeadline</code>具体实现，以及使用技巧吧</p>
<h3 id="WithTimeout"><a href="#WithTimeout" class="headerlink" title="WithTimeout"></a><code>WithTimeout</code></h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, d time.Time)</span> <span class="params">(Context, CancelFunc)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"cannot create context from nil parent"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;</span><br><span class="line">		<span class="comment">// The current deadline is already sooner than the new one.</span></span><br><span class="line">		<span class="keyword">return</span> WithCancel(parent)</span><br><span class="line">	&#125;</span><br><span class="line">	c := &amp;timerCtx&#123;</span><br><span class="line">		cancelCtx: newCancelCtx(parent),</span><br><span class="line">		deadline:  d,</span><br><span class="line">	&#125;</span><br><span class="line">	propagateCancel(parent, c)</span><br><span class="line">	dur := time.Until(d)</span><br><span class="line">	<span class="keyword">if</span> dur &lt;= <span class="number">0</span> &#123;</span><br><span class="line">		c.cancel(<span class="literal">true</span>, DeadlineExceeded) <span class="comment">// deadline has already passed</span></span><br><span class="line">		<span class="keyword">return</span> c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">false</span>, Canceled) &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	c.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">	<span class="keyword">if</span> c.err == <span class="literal">nil</span> &#123;</span><br><span class="line">		c.timer = time.AfterFunc(dur, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			c.cancel(<span class="literal">true</span>, DeadlineExceeded)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span> <span class="params">(Context, CancelFunc)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> WithDeadline(parent, time.Now().Add(timeout))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>取消此上下文将释放与之关联的资源，因此在此上下文中运行的操作完成后，代码应立即调用cancel：</p>
</blockquote>
<p>来看一下具体如何使用吧，示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个子节点的context,3秒后自动超时</span></span><br><span class="line">	<span class="keyword">const</span> MonitoringTime, MonitoringPeriod = <span class="number">20</span>, <span class="number">2</span></span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">10</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		monitor4(ctx, MonitoringPeriod, <span class="string">"天眼"</span>)</span><br><span class="line">		fmt.Println(<span class="string">"退出时间"</span>,time.Now().Unix())</span><br><span class="line">	&#125;()</span><br><span class="line">	time.Sleep(MonitoringTime * time.Second)</span><br><span class="line">	cancel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">monitor4</span><span class="params">(ctx context.Context, MonitoringPeriod time.Duration, name <span class="keyword">string</span>, )</span></span> &#123;</span><br><span class="line">	<span class="comment">//开启for select循环，一直后台监控</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			fmt.Println(name, <span class="string">"停止指令已收到，停止..."</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Printf(<span class="string">"Time: %v [监控者]:%s, 正在监控...\n"</span>, time.Now().Unix(), name)</span><br><span class="line">			time.Sleep(MonitoringPeriod * time.Second)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>以上会有两种情况发生退出，</p>
    <p>一、程序main退出，全局退出</p>
    <p>二、我们定义的timeout退出</p>
</blockquote>
<p>他们的基本性质与使用我们就简单的过了一遍，下面让我们来个小结。</p>
<p>WithCancel(parent Context)：生成一个可取消的 Context。</p>
<p>WithDeadline(parent Context, d time.Time)：生成一个可定时取消的 Context，<strong>参数 d 为定时取消的具体时间。</strong></p>
<p>WithTimeout(parent Context, timeout time.Duration)：生成一个可超时取消的 Context，<strong>参数 timeout 用于设置多久后取消</strong></p>
<p>WithValue(parent Context, key, val interface{})：生成一个可携带 key-value 键值对的 Context。</p>
<p>是不是发现，其实也没有那么难呢？当然，它本来就很简单，接下来我们来点更刺激的，同时取消多goroutine，啥也不说了，上～</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> MonitoringTime, MonitoringPeriod = <span class="number">20</span>, <span class="number">2</span></span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	ctx, stop := context.WithCancel(context.Background())</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> monitor6(ctx, MonitoringPeriod, strconv.Itoa(i))</span><br><span class="line">	&#125;</span><br><span class="line">	time.Sleep(MonitoringTime * time.Second) <span class="comment">//先监控5秒</span></span><br><span class="line">	stop()                                   <span class="comment">//发停止指令</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">monitor6</span><span class="params">(ctx context.Context, MonitoringPeriod time.Duration, name <span class="keyword">string</span>, )</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	<span class="comment">//开启for select循环，一直后台监控</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			fmt.Println(name, <span class="string">"停止指令已收到，停止..."</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Printf(<span class="string">"Time: %v [监控者]:天眼%s, 正在监控...\n"</span>, time.Now().Unix(), name)</span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(MonitoringPeriod * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>Time: 1612948086 [监控者]:天眼0, 正在监控…<br>Time: 1612948086 [监控者]:天眼1, 正在监控…<br>Time: 1612948086 [监控者]:天眼2, 正在监控…<br>… …<br>Time: 1612948104 [监控者]:天眼2, 正在监控…<br>Time: 1612948104 [监控者]:天眼0, 正在监控…<br>Time: 1612948104 [监控者]:天眼1, 正在监控…<br>2 停止指令已收到，停止…<br>1 停止指令已收到，停止…<br>0 停止指令已收到，停止…</p>
</blockquote>
<p>你以为这样就完了么，这只是一个小的case，它还可以管理子节点。其管理与树形结构十分的相似。</p>
<p>除此之外还可以传递值，接下来让我们来看看吧</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	ctx, stop := context.WithCancel(context.Background())</span><br><span class="line">	ctxVal := context.WithValue(ctx, <span class="string">"user"</span>, <span class="string">"payne"</span>)</span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> wg.Done()</span><br><span class="line">		getValue(ctxVal)</span><br><span class="line">	&#125;()</span><br><span class="line">	time.Sleep(<span class="number">3</span>)</span><br><span class="line">	stop()</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getValue</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			fmt.Println(<span class="string">"exit"</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			user := ctx.Value(<span class="string">"user"</span>)</span><br><span class="line">			fmt.Println(<span class="string">"【获取用户】"</span>, <span class="string">"用户为："</span>, user)</span><br><span class="line">			time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>输出如下</p>
<blockquote>
    <p>【获取用户】 用户为： payne<br>exit…</p>
</blockquote>
<p>总结：</p>
<p>Context为我们主要定义四种方法<code>WithDeadline</code>,<code>WithTimeout</code>,<code>WithValue</code>,<code>WithCancel</code>,从而达到控制goroutine的目的，但却不仅限于我们以上介绍的那样(只介绍了一层，其实可以是多层。形成多对多的关系)，它更深层次的使用你可以想象成多叉树的情况。</p>
<p>context，这一篇就暂且完成啦，期待下一篇。并发模式</p>
<p>并发模式，故名思义。他与设计模式一样，即使用goroutine并发的一些总结。</p>
<p>我将与你探讨</p>
<ul>
    <li><code>Goroutine WorkPool</code>:让我们随影所欲的控制创建gototine的数量，且复用。</li>
    <li>Pipeline 模式，他像工厂流水线一般，我们将是这将其拆分归并</li>
    <li>扇出扇入模式，在pipline的基础上对耗时较长的进行处理</li>
    <li>Futures 模式，Pipeline 流水线模式中的工序是相互依赖的，但是在我们的实际需求中，也有大量的任务之间相互独立、没有依赖，所以为了提高性能，这些独立的任务就可以并发执行。</li>
</ul>
<p>期待～</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>golang配置神器viper</title>
    <url>/2559205426.html</url>
    <content><![CDATA[<h2 id="Viper简介"><a href="#Viper简介" class="headerlink" title="Viper简介"></a>Viper简介</h2>
<p>Viper是一个完整的Go语言项目的配置解决方案。它可以处理所有类型的配置需求和格式，相关链接如下</p>
<p>包文档：<a href="https://pkg.go.dev/github.com/spf13/viper" target="_blank" rel="noopener">https://pkg.go.dev/github.com/spf13/viper</a></p>
<p>github：<a href="https://github.com/spf13/viper" target="_blank" rel="noopener">https://github.com/spf13/viper</a></p>
<h2 id="Viper的优势"><a href="#Viper的优势" class="headerlink" title="Viper的优势"></a>Viper的优势</h2>
<p>在构建Golang程序时可以不必担心配置文件格式而更专注于实现。</p>
<p>viper主要包含以下操作：</p>
<ol>
    <li>查找、加载和反序列化 “json”, “toml”, “yaml”, “yml”, “properties”, “props”, “prop”, “hcl”, “tfvars”, “dotenv”, “env”, “ini”</li>
    <li>提供一种机制来为不同的配置选项设置默认值。</li>
    <li>提供一种机制来为通过命令行参数设置指定覆盖值。</li>
    <li>提供别名，以在不破坏现有代码的情况下轻松重命名参数。</li>
    <li>使区分用户何时提供与默认值相同的命令行或配置文件变得容易。</li>
</ol>
<p>每个项目的优先级都高于它下面的项目，Viper优先顺序。</p>
<ul>
    <li>显式调用 <code>Set</code></li>
    <li>命令行参数（flag）</li>
    <li>环境变量</li>
    <li>配置文件</li>
    <li>key/value存储</li>
    <li>默认值</li>
</ul>
<blockquote>
    <p> <strong>重要提示：</strong> Viper 配置键不区分大小写。正在进行关于使之成为可选项的讨论。</p>
</blockquote>
<h2 id="Viper使用场景"><a href="#Viper使用场景" class="headerlink" title="Viper使用场景"></a>Viper使用场景</h2>
<ul>
    <li>设置默认值</li>
    <li>“json”, “toml”, “yaml”, “yml”, “properties”, “props”, “prop”, “hcl”, “tfvars”, “dotenv”, “env”, “ini”文件中读取载入</li>
    <li>实时观看和重新读取配置文件（可选）</li>
    <li>从环境变量中读取</li>
    <li>从远程配置系统（etcd 或 Consul）读取，并观察变化</li>
    <li>从命令行标志读取</li>
    <li>从缓冲区读取</li>
    <li>设置显式值</li>
</ul>
<blockquote>
    <p>Viper 可以被认为是满足所有应用程序配置需求的注册表</p>
</blockquote>
<h2 id="Viper的安装"><a href="#Viper的安装" class="headerlink" title="Viper的安装"></a>Viper的安装</h2>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go get -u -v github.com/spf13/viper</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="Viper使用实例"><a href="#Viper使用实例" class="headerlink" title="Viper使用实例"></a>Viper使用实例</h2>
<h3 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h3>
<p>一个好的配置系统对于默认值拥有良好的支持，其重要性不言而喻。在Viper中的默认值使用如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/spf13/viper"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	viper.SetDefault(<span class="string">`Name`</span>, <span class="string">`Payne`</span>)</span><br><span class="line">	viper.SetDefault(<span class="string">`Age`</span>, <span class="number">20</span>)</span><br><span class="line">	viper.SetDefault(<span class="string">`hobby`</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">`First hobby`</span>:  <span class="string">`sing`</span>,</span><br><span class="line">		<span class="string">`Second hobby`</span>: <span class="string">`jump`</span>,</span><br><span class="line">		<span class="string">`Third hobby`</span>:  <span class="string">`Rap`</span>,</span><br><span class="line">		<span class="string">`fourth hobby`</span>: <span class="string">`Play Basketball`</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(viper.Get(<span class="string">`Name`</span>))</span><br><span class="line">	fmt.Println(viper.Get(<span class="string">`Age`</span>))</span><br><span class="line">	fmt.Println(viper.Get(<span class="string">`hobby`</span>))</span><br><span class="line">	<span class="keyword">for</span> _, i := <span class="keyword">range</span> viper.GetStringMapString(<span class="string">`hobby`</span>) &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="覆盖设置"><a href="#覆盖设置" class="headerlink" title="覆盖设置"></a>覆盖设置</h3>
<p>这些可能来自命令行标志，也可能来自你自己的应用程序逻辑。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.Set(<span class="string">"Verbose"</span>, <span class="literal">true</span>)</span><br><span class="line">viper.Set(<span class="string">"LogFile"</span>, LogFile)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="注册和使用别名"><a href="#注册和使用别名" class="headerlink" title="注册和使用别名"></a>注册和使用别名</h3>
<p>别名允许多个键引用单个值</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.RegisterAlias(<span class="string">"loud"</span>, <span class="string">"Verbose"</span>)  <span class="comment">// 注册别名（此处loud和Verbose建立了别名）</span></span><br><span class="line"></span><br><span class="line">viper.Set(<span class="string">"verbose"</span>, <span class="literal">true</span>) <span class="comment">// 结果与下一行相同</span></span><br><span class="line">viper.Set(<span class="string">"loud"</span>, <span class="literal">true</span>)   <span class="comment">// 结果与前一行相同</span></span><br><span class="line"></span><br><span class="line">viper.GetBool(<span class="string">"loud"</span>) <span class="comment">// true</span></span><br><span class="line">viper.GetBool(<span class="string">"verbose"</span>) <span class="comment">// true</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="配置文件使用"><a href="#配置文件使用" class="headerlink" title="配置文件使用"></a>配置文件使用</h2>
<h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3>
<p>抽离统一化管理成为配置文件，将所有的配置写在文件中便于管理修改与编辑。Viper 支持 “json”, “toml”, “yaml”, “yml”, “properties”, “props”, “prop”, “hcl”, “tfvars”, “dotenv”, “env”, “ini” 属性文件。Viper 可以搜索多个路径，但目前单个 Viper 实例仅支持单个配置文件。Viper 不会默认任何配置搜索路径，将默认决定留给应用程序。不需要任何特定路径，但应至少提供一个需要配置文件的路径。以下是如何使用 Viper 搜索和读取配置文件的示例。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.SetConfigFile(<span class="string">"./config.yaml"</span>) 			<span class="comment">// 指定配置文件路径</span></span><br><span class="line"></span><br><span class="line">viper.SetConfigName(<span class="string">"config"</span>) 						<span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">viper.SetConfigType(<span class="string">"yaml"</span>) 							<span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line"></span><br><span class="line">viper.AddConfigPath(<span class="string">"/etc/appname/"</span>)   		<span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"$HOME/.appname"</span>)  		<span class="comment">// 多次调用以添加多个搜索路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"."</span>)               		<span class="comment">// 还可以在工作目录中查找配置</span></span><br><span class="line"></span><br><span class="line">err := viper.ReadInConfig() 							<span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; 													<span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line">	<span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Fatal error config file: %s \n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件读取异常处理</span></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line">			<span class="comment">// Config file not found; ignore error if desired</span></span><br><span class="line">			log.Println(<span class="string">"no such config file"</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Config file was found but another error was produced</span></span><br><span class="line">			log.Println(<span class="string">"read config error"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		log.Fatal(err) <span class="comment">// 读取配置文件失败致命错误</span></span><br><span class="line">	&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><strong>注意</strong>若采用<code>setConfigName</code>则只会使用第一个配置文件夹</p>
    <p>推荐使用<code>SetConfigFile(&quot;path/file_name&quot;)</code> 来完成配置文件的载入</p>
</blockquote>
<h3 id="从io-Reader读取配置"><a href="#从io-Reader读取配置" class="headerlink" title="从io.Reader读取配置"></a>从io.Reader读取配置</h3>
<p>Viper预先定义了许多配置源，如文件、环境变量、标志和远程K/V存储，但也可以实现自己所需的配置源并将其提供给viper。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"bytes"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/spf13/viper"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">yamlConf</span><span class="params">()</span></span> &#123;</span><br><span class="line">	viper.SetConfigType(<span class="string">"yaml"</span>) </span><br><span class="line">	ExampleYaml := []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">name: Payne</span></span><br><span class="line"><span class="string">Age: 18</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">	viper.ReadConfig(bytes.NewBuffer(ExampleYaml))</span><br><span class="line">	fmt.Println(viper.Get(<span class="string">"NAME"</span>))</span><br><span class="line">	fmt.Println(viper.Get(<span class="string">"Age"</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jsonConf</span><span class="params">()</span></span> &#123;</span><br><span class="line">	viper.SetConfigType(<span class="string">`json`</span>)</span><br><span class="line"></span><br><span class="line">	ExampleJSON := []<span class="keyword">byte</span>(<span class="string">`&#123;</span></span><br><span class="line"><span class="string"> 	"name": "payne",</span></span><br><span class="line"><span class="string"> 	"age": 21</span></span><br><span class="line"><span class="string">&#125;`</span>)</span><br><span class="line">	viper.ReadConfig(bytes.NewBuffer(ExampleJSON))</span><br><span class="line">	fmt.Println(viper.Get(<span class="string">"name"</span>))</span><br><span class="line">	fmt.Println(viper.GetInt(<span class="string">"age"</span>))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h3>
<p>从配置文件中读取是很有用的，但有时你想存储在运行时所作的所有修改都比较繁琐。viper提供了相关功能</p>
<ul>
    <li>WriteConfig - 将当前的<code>viper</code>配置写入预定义的路径并覆盖（如果存在的话）。如果没有预定义的路径，则报错。</li>
    <li>SafeWriteConfig - 将当前的<code>viper</code>配置写入预定义的路径。如果没有预定义的路径，则报错。如果存在，将不会覆盖当前的配置文件。</li>
    <li>WriteConfigAs - 将当前的<code>viper</code>配置写入给定的文件路径。将覆盖给定的文件(如果它存在的话)。</li>
    <li>SafeWriteConfigAs - 将当前的<code>viper</code>配置写入给定的文件路径。不会覆盖给定的文件(如果它存在的话)。</li>
</ul>
<blockquote>
    <p> 根据经验，标记为<code>safe</code>的所有方法都不会覆盖任何文件，而是直接创建（如果不存在），而默认行为是创建或截断。</p>
</blockquote>
<h3 id="监听配置文件"><a href="#监听配置文件" class="headerlink" title="监听配置文件"></a>监听配置文件</h3>
<p>Viper支持在运行时实时读取配置文件的功能。</p>
<p>需要重新启动服务器以使配置生效的日子已经一去不复返了，viper驱动的应用程序可以在运行时读取配置文件的更新，而不会错过任何消息。</p>
<p>只需告诉viper实例watchConfig。可选地，你可以为Viper提供一个回调函数，以便在每次发生更改时运行。</p>
<blockquote>
    <p><strong>确保在调用<code>WatchConfig()</code>之前添加了所有的配置路径。</strong></p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 配置文件发生变更之后会调用的回调函数</span></span><br><span class="line">	fmt.Println(<span class="string">"Config file changed:"</span>, e.Name)</span><br><span class="line">&#125;)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>实例</strong></p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/fsnotify/fsnotify"</span></span><br><span class="line">	<span class="string">"github.com/spf13/viper"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		viper.SetConfigFile(<span class="string">`./example/config.yaml`</span>)</span><br><span class="line">		<span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line">				<span class="comment">// Config file not found; ignore error if desired</span></span><br><span class="line">				log.Println(<span class="string">"no such config file"</span>)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Config file was found but another error was produced</span></span><br><span class="line">				log.Println(<span class="string">"read config error"</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			log.Fatal(err) <span class="comment">// 读取配置文件失败致命错误</span></span><br><span class="line">		&#125;</span><br><span class="line">		viper.SetDefault(<span class="string">`a`</span>, <span class="string">`b`</span>)</span><br><span class="line">		viper.WatchConfig()</span><br><span class="line">		viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">			<span class="comment">// 配置文件发生变更之后会调用的回调函数</span></span><br><span class="line">			fmt.Println(<span class="string">"Config file changed:"</span>, e.Name)</span><br><span class="line">		&#125;)</span><br><span class="line">		fmt.Println(viper.Get(<span class="string">`port`</span>))</span><br><span class="line">		time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2>
<p>Viper完全支持环境变量。以下几种方法进行对ENV协作:</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// AllowEmptyEnv 告诉 Viper 将设置但为空的环境变量视为有效值，而不是回退。出于向后兼容性的原因，默认情况下这是错误的</span></span><br><span class="line">AllowEmptyEnv(allowEmptyEnv <span class="keyword">bool</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// AutomaticEnv 使 Viper 检查环境变量是否与任何现有键（配置、默认值或标志）匹配。如果找到匹配的环境变量，则将它们加载到 Viper 中</span></span><br><span class="line">AutomaticEnv()</span><br><span class="line"></span><br><span class="line"><span class="comment">// BindEnv 将 Viper 键绑定到 ENV 变量。ENV 变量区分大小写。如果只提供了一个键，它将使用与键匹配的 env 键，大写。如果提供了更多参数，它们将表示应绑定到此键的环境变量名称，并将按指定顺序使用。当未提供 env 名称时，将在设置时使用 EnvPrefix。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BindEnv</span><span class="params">(input ...<span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SetEnvPrefix 定义了 ENVIRONMENT 变量将使用的前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetEnvPrefix</span><span class="params">(in <span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SetEnvKeyReplacer允许你使用strings.Replacer对象在一定程度上重写 Env 键</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetEnvKeyReplacer</span><span class="params">(r *strings.Replacer)</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><strong><em>使用ENV变量时，务必要意识到Viper将ENV变量视为区分大小写。</em></strong></p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// case 1</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  viper.SetDefault(<span class="string">`Val`</span>, <span class="string">`Original`</span>)</span><br><span class="line">  viper.BindEnv(<span class="string">`Val`</span>)</span><br><span class="line">  fmt.Println(viper.Get(<span class="string">`Val`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通常是在应用程序之外完成的</span></span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">    os.Setenv(<span class="string">"VAL"</span>, <span class="string">"changed"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(i)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  viper.SetDefault(<span class="string">`Val`</span>, <span class="string">`Original`</span>)</span><br><span class="line">  viper.SetEnvPrefix(<span class="string">`CUSTOM`</span>) <span class="comment">// 将自动转为大写</span></span><br><span class="line">  viper.BindEnv(<span class="string">`Val`</span>)</span><br><span class="line">  fmt.Println(viper.Get(<span class="string">`Val`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通常是在应用程序之外完成的</span></span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">    os.Setenv(<span class="string">"CUSTOM_VAL"</span>, <span class="string">"changed"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(i)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>当第四次输出时<code>VAL</code>,将输出<code>change</code></p>
    <p>小技巧：在使用环境变量的时候推荐采用全大写，避免混淆</p>
</blockquote>
<h2 id="使用viper获取值"><a href="#使用viper获取值" class="headerlink" title="使用viper获取值"></a>使用viper获取值</h2>
<blockquote>
    <p>获取函数如下所示，具体作用见名思意</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Get(key <span class="keyword">string</span>) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Sub(key <span class="keyword">string</span>) *Viper</span><br><span class="line">GetBool(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">GetDuration(key <span class="keyword">string</span>) time.Duration</span><br><span class="line">GetFloat64(key <span class="keyword">string</span>) <span class="keyword">float64</span></span><br><span class="line">GetInt(key <span class="keyword">string</span>) <span class="keyword">int</span></span><br><span class="line">GetInt32(key <span class="keyword">string</span>) <span class="keyword">int32</span></span><br><span class="line">GetInt64(key <span class="keyword">string</span>) <span class="keyword">int64</span></span><br><span class="line">GetIntSlice(key <span class="keyword">string</span>) []<span class="keyword">int</span></span><br><span class="line">GetSizeInBytes(key <span class="keyword">string</span>) <span class="keyword">uint</span></span><br><span class="line">GetString(key <span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">GetStringMap(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetStringMapString(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">GetStringMapStringSlice(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line">GetStringSlice(key <span class="keyword">string</span>) []<span class="keyword">string</span></span><br><span class="line">GetTime(key <span class="keyword">string</span>) time.Time</span><br><span class="line">GetUint(key <span class="keyword">string</span>) <span class="keyword">uint</span></span><br><span class="line">GetUint32(key <span class="keyword">string</span>) <span class="keyword">uint32</span></span><br><span class="line">GetUint64(key <span class="keyword">string</span>) <span class="keyword">uint64</span></span><br><span class="line">InConfig(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">IsSet(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">AllSettings() <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="访问嵌套的键"><a href="#访问嵌套的键" class="headerlink" title="访问嵌套的键"></a>访问嵌套的键</h3>
<p>访问器方法也接受深度嵌套键的格式化路径。例如，如果加载下面的JSON文件：</p>
<figure class="highlight json">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"host"</span>: &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">5799</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"datastore"</span>: &#123;</span><br><span class="line">        <span class="attr">"metric"</span>: &#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">3099</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"warehouse"</span>: &#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"198.21.112.32"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">2112</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Viper可以通过传入<code>.</code>分隔的路径来访问嵌套字段：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">GetString(<span class="string">"datastore.datastore.warehouse.host"</span>) </span><br><span class="line"><span class="comment">// 返回 "198.21.112.32"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这遵守上面建立的优先规则；搜索路径将遍历其余配置注册表，直到找到为止。(译注：因为Viper支持从多种配置来源，例如磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值，我们在查找一个配置的时候如果在当前配置源中没找到，就会继续从后续的配置源查找，直到找到为止。)</p>
<p>例如，在给定此配置文件的情况下，<code>datastore.metric.host</code>和<code>datastore.metric.port</code>均已定义（并且可以被覆盖）。如果另外在默认值中定义了<code>datastore.metric.protocol</code>，Viper也会找到它。然而，如果<code>datastore.metric</code>被直接赋值覆盖（被flag，环境变量，<code>set()</code>方法等等…），那么<code>datastore.metric</code>的所有子键都将变为未定义状态，它们被高优先级配置级别“遮蔽”（shadowed）了。最后，如果存在与分隔的键路径匹配的键，则返回其值。例如：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"datastore.metric.host"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"host"</span>: &#123;</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">5799</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"datastore"</span>: &#123;</span><br><span class="line">        <span class="string">"metric"</span>: &#123;</span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="string">"port"</span>: <span class="number">3099</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"warehouse"</span>: &#123;</span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"198.0.0.1"</span>,</span><br><span class="line">            <span class="string">"port"</span>: <span class="number">2112</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetString(<span class="string">"datastore.metric.host"</span>) </span><br><span class="line"><span class="comment">// 返回 "0.0.0.0"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="提取子树"><a href="#提取子树" class="headerlink" title="提取子树"></a>提取子树</h3>
<p>从Viper中提取子树，<code>viper</code>实例现在代表了以下配置：</p>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">cache1:</span></span><br><span class="line">    <span class="attr">max-items:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">item-size:</span> <span class="number">64</span></span><br><span class="line">  <span class="attr">cache2:</span></span><br><span class="line">    <span class="attr">max-items:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">item-size:</span> <span class="number">80</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>执行后：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">subv := viper.Sub(<span class="string">"app.cache1"</span>)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><code>subv</code>现在就代表：</p>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attr">max-items:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">item-size:</span> <span class="number">64</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>假设我们现在有这么一个函数：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCache</span><span class="params">(cfg *Viper)</span> *<span class="title">Cache</span></span> &#123;...&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>它基于<code>subv</code>格式的配置信息创建缓存。现在，可以轻松地分别创建这两个缓存，如下所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">cfg1 := viper.Sub(<span class="string">"app.cache1"</span>)</span><br><span class="line">cache1 := NewCache(cfg1)</span><br><span class="line"></span><br><span class="line">cfg2 := viper.Sub(<span class="string">"app.cache2"</span>)</span><br><span class="line">cache2 := NewCache(cfg2)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3>
<p>你还可以选择将所有或特定的值解析到结构体、map等。</p>
<p>有两种方法可以做到这一点：</p>
<ul>
    <li><code>Unmarshal(rawVal interface{}) : error</code></li>
    <li><code>UnmarshalKey(key string, rawVal interface{}) : error</code></li>
</ul>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">	Port <span class="keyword">int</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	PathMap <span class="keyword">string</span> <span class="string">`mapstructure:"path_map"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">err := viper.Unmarshal(&amp;C)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	t.Fatalf(<span class="string">"unable to decode into struct, %v"</span>, err)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果你想要解析那些键本身就包含<code>.</code>(默认的键分隔符）的配置，你需要修改分隔符：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">v := viper.NewWithOptions(viper.KeyDelimiter(<span class="string">"::"</span>))</span><br><span class="line"></span><br><span class="line">v.SetDefault(<span class="string">"chart::values"</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"ingress"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">"annotations"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">"traefik.frontend.rule.type"</span>:                 <span class="string">"PathPrefix"</span>,</span><br><span class="line">            <span class="string">"traefik.ingress.kubernetes.io/ssl-redirect"</span>: <span class="string">"true"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">	Chart <span class="keyword">struct</span>&#123;</span><br><span class="line">        Values <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">v.Unmarshal(&amp;C)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Viper还支持解析到嵌入的结构体：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Example config:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">module:</span></span><br><span class="line"><span class="comment">    enabled: true</span></span><br><span class="line"><span class="comment">    token: 89h3f98hbwf987h3f98wenf89ehf</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">	Module <span class="keyword">struct</span> &#123;</span><br><span class="line">		Enabled <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">		moduleConfig <span class="string">`mapstructure:",squash"`</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// moduleConfig could be in a module specific package</span></span><br><span class="line"><span class="keyword">type</span> moduleConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Token <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">err := viper.Unmarshal(&amp;C)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	t.Fatalf(<span class="string">"unable to decode into struct, %v"</span>, err)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Viper在后台使用<a href="https://github.com/mitchellh/mapstructure" target="_blank" rel="noopener">github.com/mitchellh/mapstructure</a>来解析值，其默认情况下使用<code>mapstructure</code>tag。</p>
<blockquote>
    <p><strong>注意</strong> 当我们需要将viper读取的配置反序列到我们定义的结构体变量中时，一定要使用<code>mapstructure</code>tag！</p>
</blockquote>
<h3 id="序列化成字符串"><a href="#序列化成字符串" class="headerlink" title="序列化成字符串"></a>序列化成字符串</h3>
<p>你可能需要将viper中保存的所有设置序列化到一个字符串中，而不是将它们写入到一个文件中。你可以将自己喜欢的格式的序列化器与<code>AllSettings()</code>返回的配置一起使用。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    yaml <span class="string">"gopkg.in/yaml.v2"</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">yamlStringSettings</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    c := viper.AllSettings()</span><br><span class="line">    bs, err := yaml.Marshal(c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"unable to marshal config to YAML: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(bs)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="远程Key-Value存储支持"><a href="#远程Key-Value存储支持" class="headerlink" title="远程Key/Value存储支持"></a>远程Key/Value存储支持</h2>
<p>在Viper中启用远程支持，需要在代码中匿名导入<code>viper/remote</code>这个包。</p>
<figure class="highlight haxe">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> <span class="literal">_</span> <span class="string">"github.com/spf13/viper/remote"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Viper将读取从Key/Value存储（例如etcd或Consul）中的路径检索到的配置字符串（如<code>JSON</code>、<code>TOML</code>、<code>YAML</code>、<code>HCL</code>、<code>envfile</code>和<code>Java properties</code>格式）。这些值的优先级高于默认值，但是会被从磁盘、flag或环境变量检索到的配置值覆盖。（译注：也就是说Viper加载配置值的优先级为：磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值。）</p>
<p>Viper使用<a href="https://github.com/bketelsen/crypt" target="_blank" rel="noopener">crypt</a>从K/V存储中检索配置，这意味着如果你有正确的gpg密匙，你可以将配置值加密存储并自动解密。加密是可选的。</p>
<p>你可以将远程配置与本地配置结合使用，也可以独立使用。</p>
<p><code>crypt</code>有一个命令行助手，你可以使用它将配置放入K/V存储中。<code>crypt</code>默认使用在<a href="http://127.0.0.1:4001/" target="_blank" rel="noopener">http://127.0.0.1:4001</a>的etcd。</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ go get github.com/bketelsen/crypt/bin/crypt</span><br><span class="line">$ crypt <span class="built_in">set</span> -plaintext /config/hugo.json /Users/hugo/settings/config.json</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>确认值已经设置：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ crypt get -plaintext /config/hugo.json</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>有关如何设置加密值或如何使用Consul的示例，请参见<code>crypt</code>文档。</p>
<h3 id="远程Key-Value存储示例-未加密"><a href="#远程Key-Value存储示例-未加密" class="headerlink" title="远程Key/Value存储示例-未加密"></a>远程Key/Value存储示例-未加密</h3>
<h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.AddRemoteProvider(<span class="string">"etcd"</span>, <span class="string">"http://127.0.0.1:4001"</span>,<span class="string">"/config/hugo.json"</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">"json"</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h4>
<p>你需要 Consul Key/Value存储中设置一个Key保存包含所需配置的JSON值。例如，创建一个key<code>MY_CONSUL_KEY</code>将下面的值存入Consul key/value 存储：</p>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.AddRemoteProvider("consul", "localhost:8500", "MY_CONSUL_KEY")</span><br><span class="line">viper.SetConfigType("json") // 需要显示设置成json</span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="Firestore"><a href="#Firestore" class="headerlink" title="Firestore"></a>Firestore</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.AddRemoteProvider(<span class="string">"firestore"</span>, <span class="string">"google-cloud-project-id"</span>, <span class="string">"collection/document"</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">"json"</span>) <span class="comment">// 配置的格式: "json", "toml", "yaml", "yml"</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>当然，你也可以使用<code>SecureRemoteProvider</code>。</p>
<h3 id="远程Key-Value存储示例-加密"><a href="#远程Key-Value存储示例-加密" class="headerlink" title="远程Key/Value存储示例-加密"></a>远程Key/Value存储示例-加密</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">viper.AddSecureRemoteProvider(<span class="string">"etcd"</span>,<span class="string">"http://127.0.0.1:4001"</span>,<span class="string">"/config/hugo.json"</span>,<span class="string">"/etc/secrets/mykeyring.gpg"</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">"json"</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span></span><br><span class="line">err := viper.ReadRemoteConfig()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="监控etcd中的更改-未加密"><a href="#监控etcd中的更改-未加密" class="headerlink" title="监控etcd中的更改-未加密"></a>监控etcd中的更改-未加密</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 或者你可以创建一个新的viper实例</span></span><br><span class="line"><span class="keyword">var</span> runtime_viper = viper.New()</span><br><span class="line"></span><br><span class="line">runtime_viper.AddRemoteProvider(<span class="string">"etcd"</span>, <span class="string">"http://127.0.0.1:4001"</span>, <span class="string">"/config/hugo.yml"</span>)</span><br><span class="line">runtime_viper.SetConfigType(<span class="string">"yaml"</span>) <span class="comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次从远程读取配置</span></span><br><span class="line">err := runtime_viper.ReadRemoteConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启一个单独的goroutine一直监控远端的变更</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">	    time.Sleep(time.Second * <span class="number">5</span>) <span class="comment">// 每次请求后延迟一下</span></span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 目前只测试了etcd支持</span></span><br><span class="line">	    err := runtime_viper.WatchRemoteConfig()</span><br><span class="line">	    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	        log.Errorf(<span class="string">"unable to read remote config: %v"</span>, err)</span><br><span class="line">	        <span class="keyword">continue</span></span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 将新配置反序列化到我们运行时的配置结构体中。你还可以借助channel实现一个通知系统更改的信号</span></span><br><span class="line">	    runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="基于Viper实现的环境变量动态链接"><a href="#基于Viper实现的环境变量动态链接" class="headerlink" title="基于Viper实现的环境变量动态链接"></a>基于Viper实现的环境变量动态链接</h2>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"github.com/spf13/viper"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DynamicEnv is a dynamic adapter that interoperates with environment variables</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DynamicEnv</span><span class="params">(envName, Prefix <span class="keyword">string</span>, defaultVal <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">   viper.SetDefault(envName, defaultVal)</span><br><span class="line">   viper.SetEnvPrefix(Prefix)</span><br><span class="line">   viper.BindEnv(envName)</span><br><span class="line">   <span class="keyword">return</span> viper.Get(envName)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go日志库之logrus</title>
    <url>/1475843192.html</url>
    <content><![CDATA[<p>无路是在开发、测试、亦或者调试有一好的日志，都会事半功倍。本节我来学习一下 go 语言明星日志库 logrus。相关链接如下所示<br><a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener" title="github">github</a>: <a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener">https://github.com/sirupsen/logrus</a><br><a href="https://pkg.go.dev/logur.dev/adapter/logrus" target="_blank" rel="noopener" title="pkg">pkg</a>： <a href="https://pkg.go.dev/logur.dev/adapter/logrus" target="_blank" rel="noopener">https://pkg.go.dev/logur.dev/adapter/logrus</a></p>
<h2 id="Logrus-简介"><a href="#Logrus-简介" class="headerlink" title="Logrus 简介"></a>Logrus 简介</h2>
<p>Logrus 是 Go 语言结构化的 logger，与标准库 logger 完全 API 兼容。</p>
<p>它有以下特点：</p>
<ul>
    <li>完全兼容标准日志库，拥有七种日志级别：<code>Trace</code>, <code>Debug</code>, <code>Info</code>, <code>Warning</code>, <code>Error</code>, <code>Fatal</code>and <code>Panic</code>。</li>
    <li>可选的日志输出格式，内置了两种日志格式 JSONFormater 和 TextFormatter，还可以自定义日志格式</li>
    <li>Field 机制，通过 Filed 机制进行结构化的日志记录</li>
    <li>可扩展的 Hook 机制，允许使用者通过 Hook 的方式将日志分发到任意地方，如本地文件系统，logstash，elasticsearch 或者 mq 等，或者通过 Hook 定义日志内容和格式等</li>
    <li>线程安全</li>
</ul>
<h2 id="logrus-的安装"><a href="#logrus-的安装" class="headerlink" title="logrus 的安装"></a>logrus 的安装</h2>
<p>logrus 安装也非常的简单，直接使用<code>go get</code>即可，安装命令如下所示</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go get -v -u logur.dev/adapter/logrus</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>其中</p>
    <p><code>-v</code> 为显示包安装信息</p>
    <p><code>-u</code> 为安装最新版</p>
</blockquote>
<h2 id="logrus-的使用"><a href="#logrus-的使用" class="headerlink" title="logrus 的使用"></a>logrus 的使用</h2>
<p>介绍的包的使用，或许可以从几个维度，初始化、基本使用、骚操作及拓展。源于包使用，但不限于包使用</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3>
<p>logrus 相关于初始化的方面，一共有三种方式。基于<code>New()</code>、<code>Logger</code>、<code>不操作</code></p>
<h4 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h4>
<p>直接使用相对来说更便捷，更清亮。也是相对来说性能最高的，但不足也显而易言，那就是不能有更自由的操作了，如设置 log Level、Hook、Format 等等。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">logrus.Trace(<span class="string">"trace msg"</span>)</span><br><span class="line">logrus.Tracef(<span class="string">"trace %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Debug(<span class="string">"debug msg"</span>)</span><br><span class="line">logrus.Debugf(<span class="string">"debug %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Info(<span class="string">"info msg"</span>)</span><br><span class="line">logrus.Infof(<span class="string">"info %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Warn(<span class="string">"warn msg"</span>)</span><br><span class="line">logrus.Warnf(<span class="string">"warn %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Error(<span class="string">"error msg"</span>)</span><br><span class="line">logrus.Errorf(<span class="string">"error %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Fatal(<span class="string">"fatal msg"</span>)</span><br><span class="line">logrus.Fatalf(<span class="string">"fatal  %v"</span>, <span class="string">"msg"</span>)</span><br><span class="line"></span><br><span class="line">logrus.Panic(<span class="string">"panic msg"</span>)</span><br><span class="line">logrus.Panicf(<span class="string">"panic  %v"</span>, <span class="string">"msg"</span>)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>当然根据默认的规则会忽略掉一些输出信息</p>
</blockquote>
<h4 id="使用-New-初始化于定制"><a href="#使用-New-初始化于定制" class="headerlink" title="使用 New 初始化于定制"></a>使用 New 初始化于定制</h4>
<p>相对直接使用，使用 New 初始化，拥有更多的操作空间。</p>
<p>首先声明一个全局变量<code>log</code>，代码如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> log = logrus.New()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>常规情况下对于日志的定制主要在以下几个方面</p>
<ul>
    <li>日志可见等级</li>
    <li>日志格式配置</li>
    <li>执行调用信息</li>
    <li>日志另存为</li>
</ul>
<p><strong>日志可见等级</strong></p>
<blockquote>
    <p>相关源码如下</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	<span class="comment">// PanicLevel level, highest level of severity. Logs and then calls panic with the</span></span><br><span class="line">	<span class="comment">// message passed to Debug, Info, ...</span></span><br><span class="line">	PanicLevel Level = <span class="literal">iota</span></span><br><span class="line">	<span class="comment">// FatalLevel level. Logs and then calls `logger.Exit(1)`. It will exit even if the</span></span><br><span class="line">	<span class="comment">// logging level is set to Panic.</span></span><br><span class="line">	FatalLevel</span><br><span class="line">	<span class="comment">// ErrorLevel level. Logs. Used for errors that should definitely be noted.</span></span><br><span class="line">	<span class="comment">// Commonly used for hooks to send errors to an error tracking service.</span></span><br><span class="line">	ErrorLevel</span><br><span class="line">	<span class="comment">// WarnLevel level. Non-critical entries that deserve eyes.</span></span><br><span class="line">	WarnLevel</span><br><span class="line">	<span class="comment">// InfoLevel level. General operational entries about what's going on inside the</span></span><br><span class="line">	<span class="comment">// application.</span></span><br><span class="line">	InfoLevel</span><br><span class="line">	<span class="comment">// DebugLevel level. Usually only enabled when debugging. Very verbose logging.</span></span><br><span class="line">	DebugLevel</span><br><span class="line">	<span class="comment">// TraceLevel level. Designates finer-grained informational events than the Debug.</span></span><br><span class="line">	TraceLevel</span><br><span class="line">)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>简而言之，登记越高（数字越大），显示的等级越全。如 6 显示所有的日志，0 只显示<code>Panic</code></p>
<p>设置可见等级之需要在<code>log.SetLevel()</code><em>（log 为<code>var log = logrus.New()</code>而来）</em>设置整形(6-0)即可。</p>
<p><strong>日志格式化配置</strong></p>
<p>日志格式化主要分为文本格式化、JSON 格式化、自定义格式化或第三方插件格式化</p>
<p>如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// log.SetFormatter(&amp;logrus.TextFormatter&#123;</span></span><br><span class="line"><span class="comment">//		DisableColors: false,</span></span><br><span class="line"><span class="comment">//		FullTimestamp: true,</span></span><br><span class="line"><span class="comment">//	&#125;)</span></span><br><span class="line"><span class="keyword">type</span> TextFormatter <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Set to true to bypass checking for a TTY before outputting colors.</span></span><br><span class="line">	ForceColors <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Force disabling colors.</span></span><br><span class="line">	DisableColors <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Force quoting of all values</span></span><br><span class="line">	ForceQuote <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// DisableQuote disables quoting for all values.</span></span><br><span class="line">	<span class="comment">// DisableQuote will have a lower priority than ForceQuote.</span></span><br><span class="line">	<span class="comment">// If both of them are set to true, quote will be forced on all values.</span></span><br><span class="line">	DisableQuote <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Override coloring based on CLICOLOR and CLICOLOR_FORCE. - https://bixense.com/clicolors/</span></span><br><span class="line">	EnvironmentOverrideColors <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disable timestamp logging. useful when output is redirected to logging</span></span><br><span class="line">	<span class="comment">// system that already adds timestamps.</span></span><br><span class="line">	DisableTimestamp <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Enable logging the full timestamp when a TTY is attached instead of just</span></span><br><span class="line">	<span class="comment">// the time passed since beginning of execution.</span></span><br><span class="line">	FullTimestamp <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// TimestampFormat to use for display when a full timestamp is printed.</span></span><br><span class="line">	<span class="comment">// The format to use is the same than for time.Format or time.Parse from the standard</span></span><br><span class="line">	<span class="comment">// library.</span></span><br><span class="line">	<span class="comment">// The standard Library already provides a set of predefined format.</span></span><br><span class="line">	TimestampFormat <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The fields are sorted by default for a consistent output. For applications</span></span><br><span class="line">	<span class="comment">// that log extremely frequently and don't use the JSON formatter this may not</span></span><br><span class="line">	<span class="comment">// be desired.</span></span><br><span class="line">	DisableSorting <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The keys sorting function, when uninitialized it uses sort.Strings.</span></span><br><span class="line">	SortingFunc <span class="function"><span class="keyword">func</span><span class="params">([]<span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disables the truncation of the level text to 4 characters.</span></span><br><span class="line">	DisableLevelTruncation <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// PadLevelText Adds padding the level text so that all the levels output at the same length</span></span><br><span class="line">	<span class="comment">// PadLevelText is a superset of the DisableLevelTruncation option</span></span><br><span class="line">	PadLevelText <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// QuoteEmptyFields will wrap empty fields in quotes if true</span></span><br><span class="line">	QuoteEmptyFields <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Whether the logger's out is to a terminal</span></span><br><span class="line">	isTerminal <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// FieldMap allows users to customize the names of keys for default fields.</span></span><br><span class="line">	<span class="comment">// As an example:</span></span><br><span class="line">	<span class="comment">// formatter := &amp;TextFormatter&#123;</span></span><br><span class="line">	<span class="comment">//     FieldMap: FieldMap&#123;</span></span><br><span class="line">	<span class="comment">//         FieldKeyTime:  "@timestamp",</span></span><br><span class="line">	<span class="comment">//         FieldKeyLevel: "@level",</span></span><br><span class="line">	<span class="comment">//         FieldKeyMsg:   "@message"&#125;&#125;</span></span><br><span class="line">	FieldMap FieldMap</span><br><span class="line"></span><br><span class="line">	<span class="comment">// CallerPrettyfier can be set by the user to modify the content</span></span><br><span class="line">	<span class="comment">// of the function and file keys in the data when ReportCaller is</span></span><br><span class="line">	<span class="comment">// activated. If any of the returned value is the empty string the</span></span><br><span class="line">	<span class="comment">// corresponding key will be removed from fields.</span></span><br><span class="line">	CallerPrettyfier <span class="function"><span class="keyword">func</span><span class="params">(*runtime.Frame)</span> <span class="params">(function <span class="keyword">string</span>, file <span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line">	terminalInitOnce sync.Once</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The max length of the level text, generated dynamically on init</span></span><br><span class="line">	levelTextMaxLength <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>格式 JSON 化</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// log.SetFormatter(&amp;logrus.JSONFormatter&#123;&#125;)</span></span><br><span class="line"><span class="keyword">type</span> JSONFormatter <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// TimestampFormat sets the format used for marshaling timestamps.</span></span><br><span class="line">	<span class="comment">// The format to use is the same than for time.Format or time.Parse from the standard</span></span><br><span class="line">	<span class="comment">// library.</span></span><br><span class="line">	<span class="comment">// The standard Library already provides a set of predefined format.</span></span><br><span class="line">	TimestampFormat <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// DisableTimestamp allows disabling automatic timestamps in output</span></span><br><span class="line">	DisableTimestamp <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// DisableHTMLEscape allows disabling html escaping in output</span></span><br><span class="line">	DisableHTMLEscape <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// DataKey allows users to put all the log entry parameters into a nested dictionary at a given key.</span></span><br><span class="line">	DataKey <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// FieldMap allows users to customize the names of keys for default fields.</span></span><br><span class="line">	<span class="comment">// As an example:</span></span><br><span class="line">	<span class="comment">// formatter := &amp;JSONFormatter&#123;</span></span><br><span class="line">	<span class="comment">//   	FieldMap: FieldMap&#123;</span></span><br><span class="line">	<span class="comment">// 		 FieldKeyTime:  "@timestamp",</span></span><br><span class="line">	<span class="comment">// 		 FieldKeyLevel: "@level",</span></span><br><span class="line">	<span class="comment">// 		 FieldKeyMsg:   "@message",</span></span><br><span class="line">	<span class="comment">// 		 FieldKeyFunc:  "@caller",</span></span><br><span class="line">	<span class="comment">//    &#125;,</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	FieldMap FieldMap</span><br><span class="line"></span><br><span class="line">	<span class="comment">// CallerPrettyfier can be set by the user to modify the content</span></span><br><span class="line">	<span class="comment">// of the function and file keys in the json data when ReportCaller is</span></span><br><span class="line">	<span class="comment">// activated. If any of the returned value is the empty string the</span></span><br><span class="line">	<span class="comment">// corresponding key will be removed from json fields.</span></span><br><span class="line">	CallerPrettyfier <span class="function"><span class="keyword">func</span><span class="params">(*runtime.Frame)</span> <span class="params">(function <span class="keyword">string</span>, file <span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// PrettyPrint will indent all json logs</span></span><br><span class="line">	PrettyPrint <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><a href="https://github.com/sirupsen/logrus#formatters" target="_blank" rel="noopener">https://github.com/sirupsen/logrus#formatters</a></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guu60plma8j60l00740to02.jpg" alt="image-20210926173746478"></p>
<p><strong>写入文件夹 SetOutput</strong></p>
<p>O_RDONLY：只读模式(read-only)</p>
<p>O_WRONLY：只写模式(write-only)</p>
<p>O_RDWR：读写模式(read-write)</p>
<p>O_APPEND：追加模式(append)</p>
<p>O_CREATE：文件不存在就创建(create a new file if none exists.)</p>
<p>O_EXCL：与 O_CREATE 一起用，构成一个新建文件的功能，它要求文件必须不存在(used with O_CREATE, file must not exist)</p>
<p>O_SYNC：同步方式打开，即不使用缓存，直接写入硬盘 O_TRUNC：打开并清空文件</p>
<p>示例代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	logDirPath := <span class="string">`log/`</span> + time.Now().Format(<span class="string">"2006-01-02"</span>)</span><br><span class="line">	logFilePath := filepath.Join(logDirPath, time.Now().Format(<span class="string">`15`</span>))</span><br><span class="line">	os.MkdirAll(logFilePath, <span class="number">0775</span>)</span><br><span class="line">	file, err := os.OpenFile(logFilePath + <span class="string">`/`</span> + time.Now().Format(<span class="string">`04`</span>) + <span class="string">`.log`</span>, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Error(<span class="string">`open file error`</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	log.SetOutput(file)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><code>log.SetReportCaller()</code>: 显示调用关系，开启这个模式会增加性能开销(成本在 20% 到 40% 之间)。</p>
<p><strong>Hook</strong></p>
<p>logrus 通过实现 <code>Hook</code>接口扩展 hook 机制,可以根据需求将日志分发到任意的存储介质, 比如 es, mq 或者监控报警系统,及时获取异常日志。可以说极大的提高了日志系统的可扩展性。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">type</span> Hook <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// 定义哪些等级的日志触发 hook 机制</span></span><br><span class="line">	Levels() []Level</span><br><span class="line">  <span class="comment">// hook 触发器的具体执行操作</span></span><br><span class="line">  <span class="comment">// 如果 Fire 执行失败,错误日志会重定向到标准错误流</span></span><br><span class="line">	Fire(*Entry) error</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>具体 Hook 示列可参考 <a href="https://github.com/sirupsen/logrus/blob/master/hooks/syslog/README.md" target="_blank" rel="noopener">https://github.com/sirupsen/logrus/blob/master/hooks/syslog/README.md</a></p>
<h2 id="referer"><a href="#referer" class="headerlink" title="referer"></a>referer</h2>
<p><a href="https://blog.csdn.net/wangzhezhilu001/article/details/95363789" target="_blank" rel="noopener">https://blog.csdn.net/wangzhezhilu001/article/details/95363789</a></p>
<p><a href="https://blog.csdn.net/sserf/article/details/103388133" target="_blank" rel="noopener">https://blog.csdn.net/sserf/article/details/103388133</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go代码测试与调优</title>
    <url>/65092.html</url>
    <content><![CDATA[<p>在了解golang的测试之前，先了解一下go语言自带的测试工具-go test</p>
<h2 id="go-test工具"><a href="#go-test工具" class="headerlink" title="go test工具"></a>go test工具</h2>
<p>Go语言中的测试依赖<code>go test</code>命令。编写测试代码和编写普通的Go代码过程是类似的，并不需要学习新的语法、规则或工具。</p>
<a id="more"></a>
<p>go test命令是一个按照一定约定和组织的测试代码的驱动程序。在包目录内，所有以<code>_test.go</code>为后缀名的源代码文件都是<code>go test</code>测试的一部分，不会被<code>go build</code>编译到最终的可执行文件中。</p>
<p>在<code>*_test.go</code>文件中有三种类型的函数，单元测试函数、基准测试函数和示例函数。</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">类型</th>
                <th style="text-align:center">格式</th>
                <th style="text-align:center">作用</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">测试函数</td>
                <td style="text-align:center">函数名前缀为Test</td>
                <td style="text-align:center">测试程序的一些逻辑行为是否正确</td>
            </tr>
            <tr>
                <td style="text-align:center">基准函数</td>
                <td style="text-align:center">函数名前缀为Benchmark</td>
                <td style="text-align:center">测试函数的性能</td>
            </tr>
            <tr>
                <td style="text-align:center">示例函数</td>
                <td style="text-align:center">函数名前缀为Example</td>
                <td style="text-align:center">为文档提供示例文档</td>
            </tr>
        </tbody>
    </table>
</div>
<h4 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h4>
<p><code>go test</code>命令会遍历所有的<code>*_test.go</code>文件中符合上述命名规则的函数，然后生成一个临时的main包用于调用相应的测试函数，然后构建并运行、报告测试结果，最后清理测试中生成的临时文件。</p>
<h3 id="使用详解"><a href="#使用详解" class="headerlink" title="使用详解"></a>使用详解</h3>
<p>上次对于<code>go test</code> 并没有详细的阐述，这次补上。</p>
<p>go test 的使用语法如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go <span class="built_in">test</span> [build/<span class="built_in">test</span> flags] [packages] [build/<span class="built_in">test</span> flags &amp; <span class="built_in">test</span> binary flags]</span><br><span class="line"><span class="comment"># 可以直接 go test 直接运行，那么它将运行本目录下的所有*_test.go的基准测试。</span></span><br><span class="line"><span class="comment"># 还可以进行编译后测试例如 go test build</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>更多请查看 <code>go help testfunc</code>。</p>
    <p><code>go test</code> 命令还会忽略 <code>testdata</code> 目录，该目录用来保存测试需要用到的辅助数据。</p>
    <p>go test 有两种运行模式：</p>
    <p>1、本地目录模式，在没有包参数（例如 <code>go test</code> 或 <code>go test -v</code>）调用时发生。在此模式下，<code>go test</code> 编译当前目录中找到的包和测试，然后运行测试二进制文件。在这种模式下，caching 是禁用的。在包测试完成后，<code>go test</code> 打印一个概要行，显示测试状态、包名和运行时间。</p>
    <p>2、包列表模式，在使用显示包参数调用 <code>go test</code> 时发生（例如 <code>go test math</code>，<code>go test ./...</code> 甚至是 <code>go test .</code>）。在此模式下，go 测试编译并测试在命令上列出的每个包。如果一个包测试通过，<code>go test</code> 只打印最终的 <code>ok</code> 总结行。如果一个包测试失败，<code>go test</code> 将输出完整的测试输出。如果使用 <code>-bench</code> 或 <code>-v</code> 标志，则 <code>go test</code> 会输出完整的输出，甚至是通过包测试，以显示所请求的基准测试结果或详细日志记录。</p>
    <p>下面详细说明下 <code>go test</code> 的具体用法，flag 的作用及一些相关例子。需要说明的是：一些 flag 支持 <code>go test</code> 命令和编译后的二进制测试文件。它们都能识别加 <code>-test.</code> 前缀的 flag，如 <code>go test -test.v</code>，但编译后的二进制文件必须加前缀 <code>./sum.test -test.bench=.</code>。</p>
</blockquote>
<p>参数详解</p>
<h3 id="test-flag"><a href="#test-flag" class="headerlink" title="test flag"></a>test flag</h3>
<p>以下 flag 可以跟被 <code>go test</code> 命令使用：</p>
<ul>
    <li><code>-args</code>：传递命令行参数，该标志会将 -args 之后的参数作为命令行参数传递，最好作为最后一个标志。</li>
</ul>
<figure class="highlight maxima">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ <span class="built_in">go</span> test -<span class="built_in">args</span> -p=<span class="literal">true</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li><code>-c</code>：编译测试二进制文件为 [pkg].test，不运行测试。</li>
</ul>
<figure class="highlight cmake">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ go <span class="keyword">test</span> -c &amp;&amp; ./sum.<span class="keyword">test</span> -p=<span class="keyword">true</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li><code>-exec xprog</code>：使用 xprog 运行测试，行为同 <code>go run</code> 一样，查看 <code>go help run</code>。</li>
    <li><code>-i</code>：安装与测试相关的包，不运行测试。</li>
</ul>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">$</span><span class="bash"> go <span class="built_in">test</span> -i</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li><code>-o file</code>：编译测试二进制文件并指定文件，同时运行测试。</li>
</ul>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go <span class="built_in">test</span> -o filename</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="test-binary-flag"><a href="#test-binary-flag" class="headerlink" title="test/binary flag"></a>test/binary flag</h3>
<p>以下标志同时支持测试二进制文件和 <code>go test</code> 命令。</p>
<ul>
    <li><code>-bench regexp</code>：通过正则表达式执行基准测试，默认不执行基准测试。可以使用 <code>-bench .</code>或<code>-bench=.</code>执行所有基准测试。</li>
</ul>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">$</span><span class="bash"> go <span class="built_in">test</span> -bench=.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> go <span class="built_in">test</span> -c</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sum.test -test.bench=.</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li><code>-benchtime t</code>：每个基准测试运行足够迭代消耗的时间，time.Duration（如 -benchtime 1h30s），默认 1s。</li>
</ul>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ go test <span class="attribute">-bench</span>=. -benchtime 0.1s</span><br><span class="line">$ ./sum.test -test.<span class="attribute">bench</span>=. -test.<span class="attribute">benchtime</span>=1s</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li><code>-count n</code>：运行每个测试和基准测试的次数（默认 1），如果 -cpu 指定了，则每个 GOMAXPROCS 值执行 n 次，Examples 总是运行一次。</li>
</ul>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ go test <span class="attribute">-bench</span>=. <span class="attribute">-count</span>=2</span><br><span class="line">$ ./sum.test -test.<span class="attribute">bench</span>=. -test.<span class="attribute">count</span>=2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li><code>-cover</code>：开启覆盖分析，开启覆盖分析可能会在编译或测试失败时，代码行数不对。</li>
</ul>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">$ go test <span class="attribute">-bench</span>=. -cover</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li>```<br>-covermode set,count,atomic<figure class="highlight sql">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">  ：覆盖分析的模式，默认是 <span class="keyword">set</span>，如果设置 -race，将会变为 atomic。</span><br><span class="line"></span><br><span class="line">    - <span class="keyword">set</span>，<span class="built_in">bool</span>，这个语句运行吗？</span><br><span class="line">    - <span class="keyword">count</span>，<span class="built_in">int</span>，该语句运行多少次？</span><br><span class="line">    - atomic，<span class="built_in">int</span>，数量，在多线程正确使用，但是耗资源的。</span><br><span class="line"></span><br><span class="line">- <span class="string">`-coverpkg pkg1,pkg2,pkg3`</span>：指定分析哪个包，默认值只分析被测试的包，包为导入的路径。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
        <h1 id="sum-gt-GOPATH-src-test-sum"><a href="#sum-gt-GOPATH-src-test-sum" class="headerlink" title="sum -&gt; $GOPATH/src/test/sum"></a>sum -&gt; $GOPATH/src/test/sum</h1>$ go test -coverpkg test/sum<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-cpu <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>`：指定测试或基准测试的 GOMAXPROCS 值。默认为 GOMAXPROCS 的当前值。</span><br><span class="line">- `-list regexp`：列出与正则表达式匹配的测试、基准测试或 Examples。只列出顶级测试（不列出子测试），不运行测试。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -list Sum<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-parallel n`：允许并行执行通过调用 t.Parallel 的测试函数的最大次数。默认值为 GOMAXPROCS 的值。-parallel 仅适用于单个二进制测试文件，但`go test`命令可以通过指定 -p 并行测试不同的包。查看 `go help build`。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -run=TestSumParallel -parallel=2<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-run regexp`：只运行与正则表达式匹配的测试和Examples。可以通过 / 来指定测试子函数。`go test Foo/A=`，会先去匹配并执行 Foo 函数，再查找子函数。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -v -run TestSumSubTest/1+<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-short`：缩短长时间运行的测试的测试时间。默认关闭。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -short<figure class="highlight angelscript">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-timeout d`：如果二进制测试文件执行时间过长，panic。默认<span class="number">10</span>分钟（<span class="number">10</span>m）。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -run TestSumLongTime -timeout 1s<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-v`：详细输出，运行期间所有测试的日志。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -v<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">### analyze flag</span><br><span class="line"></span><br><span class="line">以下测试适用于 `go test` 和测试二进制文件：</span><br><span class="line"></span><br><span class="line">- `-benchmem`：打印用于基准的内存分配统计数据。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -bench=. -benchmem<br>$ ./sum.test -test.bench -test.benchmem<figure class="highlight armasm">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-<span class="keyword">blockprofile </span><span class="keyword">block.out`：当所有的测试都完成时，在指定的文件中写入一个 </span>goroutine 阻塞概要文件。指定 -c，将写入测试二进制文件。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -v -cpuprofile=prof.out<br>$ go tool pprof prof.out<figure class="highlight autohotkey">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">- `-blockprofilerate n`：goroutine 阻塞时候打点的纳秒数。默认不设置就相当于 -test.blockprofilerate=<span class="number">1</span>，每一纳秒都打点记录一下。</span><br><span class="line">- `-coverprofile cover.out`：在所有测试通过后，将覆盖概要文件写到文件中。设置过 -cover。</span><br><span class="line">- `-cpuprofile cpu.out`：在退出之前，将一个 CPU 概要文件写入指定的文件。</span><br><span class="line">- `-memprofile mem.out`：在所有测试通过后，将内存概要文件写到文件中。</span><br><span class="line">- `-memprofilerate n`：开启更精确的内存配置。如果为 <span class="number">1</span>，将会记录所有内存分配到 profile。</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure> $ go test -memprofile mem.out -memprofilerate 1<br>$ go tool pprof mem.out<figure class="highlight markdown">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line"><span class="bullet">- </span><span class="code">`-mutexprofile mutex.out`</span>：当所有的测试都完成时，在指定的文件中写入一个互斥锁争用概要文件。指定 -c，将写入测试二进制文件。</span><br><span class="line"><span class="bullet">- </span><span class="code">`-mutexprofilefraction n`</span>：样本 1 在 n 个堆栈中，goroutines 持有 a，争用互斥锁。</span><br><span class="line"><span class="bullet">- </span><span class="code">`-outputdir directory`</span>：在指定的目录中放置输出文件，默认情况下，<span class="code">`go test`</span> 正在运行的目录。</span><br><span class="line"><span class="bullet">- </span><span class="code">`-trace trace.out`</span>：在退出之前，将执行跟踪写入指定文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 单元测试</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 以下是来自wiki对于单元测试的定义</span></span><br><span class="line"></span><br><span class="line">在[<span class="string">计算机编程</span>](<span class="link">https://zh.wikipedia.org/wiki/计算机编程</span>)中，<span class="strong">**单元测试**</span>（英语：Unit Testing）又称为<span class="strong">**模块测试**</span>，是针对[<span class="string">程序模块</span>](<span class="link">https://zh.wikipedia.org/wiki/模組_(程式設計</span>))（[<span class="string">软件设计</span>](<span class="link">https://zh.wikipedia.org/wiki/软件设计</span>)的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在[<span class="string">过程化编程</span>](<span class="link">https://zh.wikipedia.org/wiki/過程化編程</span>)中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。</span><br><span class="line"></span><br><span class="line">通常来说，程序员每修改一次程序就会进行最少一次单元测试，在编写程序的过程中前后很可能要进行多次单元测试，以证实程序达到[<span class="string">软件规格书</span>](<span class="link">https://zh.wikipedia.org/wiki/規格_(技術標準</span>))要求的工作目标，没有[<span class="string">程序错误</span>](<span class="link">https://zh.wikipedia.org/wiki/Bug</span>)；虽然单元测试不是必须的，但也不坏，这牵涉到[<span class="string">项目管理</span>](<span class="link">https://zh.wikipedia.org/wiki/專案管理</span>)的政策决定。</span><br><span class="line"></span><br><span class="line">每个理想的[<span class="string">测试案例</span>](<span class="link">https://zh.wikipedia.org/wiki/测试案例</span>)独立于其它案例；为测试时隔离模块，经常使用stubs、mock[<span class="string">[1\</span>]](https://zh.wikipedia.org/wiki/单元测试#cite_note-mocksarentstubs-1)或fake等测试[<span class="string">马甲程序</span>](<span class="link">https://zh.wikipedia.org/w/index.php?title=马甲程序&amp;action=edit&amp;redlink=1</span>)。单元测试通常由[<span class="string">软件开发人员</span>](<span class="link">https://zh.wikipedia.org/w/index.php?title=软件开发人员&amp;action=edit&amp;redlink=1</span>)编写，用于确保他们所写的代码符合软件需求和遵循[<span class="string">开发目标</span>](<span class="link">https://zh.wikipedia.org/w/index.php?title=开发目标&amp;action=edit&amp;redlink=1</span>)。它的实施方式可以是非常手动的（透过纸笔），或者是做成[<span class="string">构建自动化</span>](<span class="link">https://zh.wikipedia.org/wiki/構建自動化</span>)的一部分。</span><br><span class="line"></span><br><span class="line">简单来说，单元测试就是程序员自己对于自己的代码进行测试，而一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。</span><br><span class="line"></span><br><span class="line">更有一种开发手法，那就是TDD（Test Driven Development）,测试驱动开发。期望局部最优到全局最优，这个是一种非常不错的好习惯</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 请注意这里的局部最优的，局部，并不是函数内的详细。而是整个函数。甚至是一个类，等等。</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; 因为有些函数内部的最优，并非这个函数的最优。这点需要格外的注意。若有兴趣，可了解一下有点关系的贪心算法</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 测试函数格式</span></span><br><span class="line"></span><br><span class="line">其中参数<span class="code">`t`</span>用于报告测试失败和附加的日志信息。 <span class="code">`testing.T`</span>的拥有的方法如下：</span><br><span class="line"></span><br><span class="line"><span class="code">```go</span></span><br><span class="line"><span class="code">func (c *T) Error(args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Errorf(format string, args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Fail()</span></span><br><span class="line"><span class="code">func (c *T) FailNow()</span></span><br><span class="line"><span class="code">func (c *T) Failed() bool</span></span><br><span class="line"><span class="code">func (c *T) Fatal(args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Fatalf(format string, args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Log(args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Logf(format string, args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Name() string</span></span><br><span class="line"><span class="code">func (t *T) Parallel()</span></span><br><span class="line"><span class="code">func (t *T) Run(name string, f func(t *T)) bool</span></span><br><span class="line"><span class="code">func (c *T) Skip(args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) SkipNow()</span></span><br><span class="line"><span class="code">func (c *T) Skipf(format string, args ...interface&#123;&#125;)</span></span><br><span class="line"><span class="code">func (c *T) Skipped() bool</span></span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
</ul>
<p>说了这么多，来实现一个<code>简单的</code>string中的Split函数，并对他进行单元测试，然后在剖析代码。了解单元测试的相关规范</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// splits.go</span></span><br><span class="line"><span class="keyword">package</span> splitStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// split package with a single split function.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Split slices s into all substrings separated by sep and</span></span><br><span class="line"><span class="comment">// returns a slice of the substrings between those separators.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="params">(result []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	i := strings.Index(s, sep)</span><br><span class="line">	<span class="keyword">for</span> i &gt; <span class="number">-1</span> &#123;</span><br><span class="line">		result = <span class="built_in">append</span>(result, s[:i])</span><br><span class="line">		s = s[i+<span class="number">1</span>:]</span><br><span class="line">		i = strings.Index(s, sep)</span><br><span class="line">	&#125;</span><br><span class="line">	result = <span class="built_in">append</span>(result, s)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// split_test.go</span></span><br><span class="line"><span class="keyword">package</span> splitStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"reflect"</span></span><br><span class="line">	<span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestSplit 单元测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit</span><span class="params">(t *testing.T)</span></span> &#123; <span class="comment">// 测试函数名必须以Test开头，必须接收一个*testing.T类型参数</span></span><br><span class="line">	got := Split(<span class="string">"a:b:c"</span>, <span class="string">":"</span>)         <span class="comment">// 程序输出的结果</span></span><br><span class="line">	want := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;    <span class="comment">// 期望的结果</span></span><br><span class="line">	<span class="keyword">if</span> !reflect.DeepEqual(want, got) &#123; <span class="comment">// 因为slice不能直接比较，借助反射包中的方法比较</span></span><br><span class="line">		t.Errorf(<span class="string">"excepted:%v, got:%#v"</span>, want, got) <span class="comment">// 测试失败输出错误提示</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestSplit2 单元测试组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 定义一个测试用例类型</span></span><br><span class="line">	<span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">		input <span class="keyword">string</span></span><br><span class="line">		sep   <span class="keyword">string</span></span><br><span class="line">		want  []<span class="keyword">string</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 定义一个存储测试用例的切片</span></span><br><span class="line">	tests := []test&#123;</span><br><span class="line">		&#123;input: <span class="string">"a:b:c"</span>, sep: <span class="string">":"</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">		&#123;input: <span class="string">"a:b:c"</span>, sep: <span class="string">","</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"a:b:c"</span>&#125;&#125;,</span><br><span class="line">		&#123;input: <span class="string">"abcd"</span>, sep: <span class="string">"bc"</span>, want: []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"d"</span>&#125;&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 遍历切片，逐一执行测试用例</span></span><br><span class="line">	<span class="keyword">for</span> _, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line">		got := Split(tc.input, tc.sep)</span><br><span class="line">		<span class="keyword">if</span> !reflect.DeepEqual(got, tc.want) &#123;</span><br><span class="line">			t.Errorf(<span class="string">"excepted:%v, got:%#v"</span>, tc.want, got)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>运行结果如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnrolzdwnuj318y0dq3z2.jpg" alt=""></p>
<p>说明测试成功，本次通过。当然你也可以在<code>Terminal</code>里面直接运行<code>go test</code>，命令，如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnropdatxhj30oa0bg0t4.jpg" style="zoom:70%;" /></p>
<blockquote>
    <p>温馨提示：关于可能造成运行test不成功原因</p>
    <p>直接在<code>split_test.go</code>,运行。</p>
    <ul>
        <li>或许知道，go是以文件夹的方法来区分项目。所以当前文件，并不能跑到旁边文件中去找到<code>Split</code>,以至于测试失败。或未达到预期效果</li>
    </ul>
    <p>那么正确的打开方式应该是？</p>
    <p>在goland中，鼠标右键点击run测试文件所在的文件夹，选择后面第二个 <code>go test projectFileName</code></p>
    <p>在<code>Terminal</code>中，应在<code>测试文件所在的文件夹</code>的路径中，进行<code>go test [arge...]</code></p>
</blockquote>
<p>示例看完了，那么进行简单的剖析。先从函数文件说起，(也就是这里的<code>splits.go</code>)</p>
<ol>
    <li>不在是<code>package main</code>,而是<code>packge projectFileName</code></li>
    <li>函数名大写，大写意味着公有函数，可支持外部调用</li>
</ol>
<p>测试文件</p>
<ol>
    <li>文件名为’*_test.go’</li>
    <li>不在是<code>package main</code>,而是<code>packge projectFileName</code></li>
    <li>函数名为TestFuncName</li>
</ol>
<h2 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h2>
<h3 id="基准测试函数格式"><a href="#基准测试函数格式" class="headerlink" title="基准测试函数格式"></a>基准测试函数格式</h3>
<p>基准测试就是在一定的工作负载之下检测程序性能的一种方法。基准测试的基本格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkName</span><span class="params">(b *testing.B)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>基准测试以<code>Benchmark</code>为前缀，需要一个<code>*testing.B</code>类型的参数b，基准测试必须要执行<code>b.N</code>次，这样的测试才有对照性，<code>b.N</code>的值是系统根据实际情况去调整的，从而保证测试的稳定性。 <code>testing.B</code>拥有的方法如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Error</span><span class="params">(args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">FailNow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Failed</span><span class="params">()</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Fatal</span><span class="params">(args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Fatalf</span><span class="params">(format <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Log</span><span class="params">(args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Logf</span><span class="params">(format <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">ReportAllocs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">ResetTimer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">Run</span><span class="params">(name <span class="keyword">string</span>, f <span class="keyword">func</span>(b *B)</span>) <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">RunParallel</span><span class="params">(body <span class="keyword">func</span>(*PB)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">SetBytes</span><span class="params">(n <span class="keyword">int64</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">SetParallelism</span><span class="params">(p <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Skip</span><span class="params">(args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">SkipNow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Skipf</span><span class="params">(format <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *B)</span> <span class="title">Skipped</span><span class="params">()</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">StartTimer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span> <span class="title">StopTimer</span><span class="params">()</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="基准测试示例"><a href="#基准测试示例" class="headerlink" title="基准测试示例"></a>基准测试示例</h3>
<p>为自己写的<code>Split</code>函数编写基准测试如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// BenchmarkSplit 基准测试(性能测试)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplit</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;b.N ; i++ &#123;</span><br><span class="line">		Split(<span class="string">"abcdebdae"</span>, <span class="string">"b"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果如下</span></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: Gp/part5/splitStr</span><br><span class="line">BenchmarkSplit</span><br><span class="line">BenchmarkSplit<span class="number">-8</span>   	 <span class="number">5740642</span>	       <span class="number">209</span> ns/op</span><br><span class="line">PASS</span><br><span class="line">ok  	Gp/part5/splitStr	<span class="number">1.963</span>s</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>其中</p>
    <p>BenchmarkSplit：表示对Split函数进行基准测试</p>
    <p>BenchmarkSplit-8：数字<code>8</code>表示<code>GOMAXPROCS</code>的值，这个对于并发基准测试很重要</p>
    <p>5188407和206 ns/op：表示每次调用<code>Split</code>函数耗时<code>203ns</code></p>
</blockquote>
<p>还可以为基准测试添加<code>-benchmem</code>参数，来获得内存分配的统计数据。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnrw3i5yuej312k07adg0.jpg" alt=""></p>
<blockquote>
    <p> 112 B/op：表示每次操作内存分配了112字节</p>
    <p><code>3 allocs/op</code>：则表示每次操作进行了3次内存分配！！！</p>
</blockquote>
<p>优化后代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// split.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="params">(result []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	i := strings.Index(s, sep)</span><br><span class="line">  <span class="comment">// 手动分配固定内存，避免多次创建</span></span><br><span class="line">	result = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, strings.Count(s, sep)+<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> i &gt; <span class="number">-1</span> &#123;</span><br><span class="line">		result = <span class="built_in">append</span>(result, s[:i])</span><br><span class="line">		s = s[i+<span class="built_in">len</span>(sep):] <span class="comment">// 这里使用len(sep)获取sep的长度</span></span><br><span class="line">		i = strings.Index(s, sep)</span><br><span class="line">	&#125;</span><br><span class="line">	result = <span class="built_in">append</span>(result, s)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>优化后代码如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnrx800j18j314g07gjrk.jpg" alt=""></p>
<blockquote>
    <p>这个使用make函数提前分配内存的改动，减少了2/3的内存分配次数，并且减少了一半的内存分配。</p>
    <p>仅仅小小的一处改动，就引起如此大的性能改变。so good</p>
    <p>量变产生质变</p>
</blockquote>
<h3 id="性能比较函数"><a href="#性能比较函数" class="headerlink" title="性能比较函数"></a>性能比较函数</h3>
<p>上面的基准测试只能得到给定操作的绝对耗时，但是在很多性能问题是发生在两个不同操作之间的相对耗时，比如同一个函数处理1000个元素的耗时与处理1万甚至100万个元素的耗时的差别是多少？再或者对于同一个任务究竟使用哪种算法性能最佳？通常需要对两个不同算法的实现使用相同的输入来进行基准比较测试。</p>
<p>性能比较函数通常是一个带有参数的函数，被多个不同的Benchmark函数传入不同的值来调用。举个例子如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">benchmark</span><span class="params">(b *testing.B, size <span class="keyword">int</span>)</span></span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark10</span><span class="params">(b *testing.B)</span></span>&#123; benchmark(b, <span class="number">10</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark100</span><span class="params">(b *testing.B)</span></span>&#123; benchmark(b, <span class="number">100</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark1000</span><span class="params">(b *testing.B)</span></span>&#123; benchmark(b, <span class="number">1000</span>) &#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>例如编写了一个计算斐波那契数列的函数如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// fib.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fib 是一个计算第n个斐波那契数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Fib(n<span class="number">-1</span>) + Fib(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>编写的性能比较函数如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// fib_test.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">benchmarkFib</span><span class="params">(b *testing.B, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		Fib(n)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib1</span><span class="params">(b *testing.B)</span></span>  &#123; benchmarkFib(b, <span class="number">1</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib2</span><span class="params">(b *testing.B)</span></span>  &#123; benchmarkFib(b, <span class="number">2</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib3</span><span class="params">(b *testing.B)</span></span>  &#123; benchmarkFib(b, <span class="number">3</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib10</span><span class="params">(b *testing.B)</span></span> &#123; benchmarkFib(b, <span class="number">10</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib20</span><span class="params">(b *testing.B)</span></span> &#123; benchmarkFib(b, <span class="number">20</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib40</span><span class="params">(b *testing.B)</span></span> &#123; benchmarkFib(b, <span class="number">40</span>) &#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>运行基准测试：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">split $ go <span class="built_in">test</span> -bench=.</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/payne/Gp/code_demo/test_demo/fib</span><br><span class="line">BenchmarkFib1-8         1000000000               2.03 ns/op</span><br><span class="line">BenchmarkFib2-8         300000000                5.39 ns/op</span><br><span class="line">BenchmarkFib3-8         200000000                9.71 ns/op</span><br><span class="line">BenchmarkFib10-8         5000000               325 ns/op</span><br><span class="line">BenchmarkFib20-8           30000             42460 ns/op</span><br><span class="line">BenchmarkFib40-8               2         638524980 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/payne/Gp/code_demo/test_demo/fib 12.944s</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这里需要注意的是，默认情况下，每个基准测试至少运行1秒。如果在Benchmark函数返回时没有到1秒，则b.N的值会按1,2,5,10,20,50，…增加，并且函数再次运行。</p>
<p>最终的BenchmarkFib40只运行了两次，每次运行的平均值只有不到一秒。像这种情况下应该可以使用<code>-benchtime</code>标志增加最小基准时间，以产生更准确的结果。例如：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">split $ go <span class="built_in">test</span> -bench=Fib40 -benchtime=20s</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/payne/Gp/code_demo/test_demo/fib</span><br><span class="line">BenchmarkFib40-8              50         663205114 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/payne/Gp/code_demo/test_demo/fib 33.849s</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这一次<code>BenchmarkFib40</code>函数运行了50次，结果就会更准确一些了。</p>
<p>使用性能比较函数做测试的时候一个容易犯的错误就是把<code>b.N</code>作为输入的大小，例如以下两个例子都是错误的示范：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 错误示范1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFibWrong</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">		Fib(n)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误示范2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFibWrong2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	Fib(b.N)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="重置时间"><a href="#重置时间" class="headerlink" title="重置时间"></a>重置时间</h2>
<p><code>b.ResetTimer</code>之前的处理不会放到执行时间里，也不会输出到报告中，所以可以在之前做一些不计划作为测试报告的操作。例如：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplit</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second) <span class="comment">// 假设需要做一些耗时的无关操作</span></span><br><span class="line">	b.ResetTimer()              <span class="comment">// 重置计时器</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		strings.Split(<span class="string">"山河和河山"</span>, <span class="string">"和"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="并行测试"><a href="#并行测试" class="headerlink" title="并行测试"></a>并行测试</h2>
<p><code>func (b *B) RunParallel(body func(*PB))</code>会以并行的方式执行给定的基准测试。</p>
<p><code>RunParallel</code>会创建出多个<code>goroutine</code>，并将<code>b.N</code>分配给这些<code>goroutine</code>执行， 其中<code>goroutine</code>数量的默认值为<code>GOMAXPROCS</code>。用户如果想要增加非CPU受限（non-CPU-bound）基准测试的并行性， 那么可以在<code>RunParallel</code>之前调用<code>SetParallelism</code> 。<code>RunParallel</code>通常会与<code>-cpu</code>标志一同使用。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplitParallel</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="comment">// b.SetParallelism(1) // 设置使用的CPU数</span></span><br><span class="line">	b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">			Split(<span class="string">"山河和河山"</span>, <span class="string">"和"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>执行一下基准测试：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">split $ go <span class="built_in">test</span> -bench=.</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/payne/Gp/code_demo/test_demo/split</span><br><span class="line">BenchmarkSplit-8                10000000               131 ns/op</span><br><span class="line">BenchmarkSplitParallel-8        50000000                36.1 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/payne/Gp/code_demo/test_demo/split       3.308s</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>还可以通过在测试命令后添加<code>-cpu</code>参数如<code>go test -bench=. -cpu 1</code>来指定使用的CPU数量。</p>
<h2 id="Setup与TearDown"><a href="#Setup与TearDown" class="headerlink" title="Setup与TearDown"></a>Setup与TearDown</h2>
<p>测试程序有时需要在测试之前进行额外的设置（setup）或在测试之后进行拆卸（teardown）。</p>
<h2 id="Go性能优化"><a href="#Go性能优化" class="headerlink" title="Go性能优化"></a>Go性能优化</h2>
<p>做了这么多的测试最终的目的是测试代码有没有写对，性能是否可以优化。接下来进行性能优化与调优</p>
<p>在计算机性能调试领域里，profiling 是指对应用程序的画像，画像就是应用程序使用 CPU 和内存的情况。 Go语言是一个对性能特别看重的语言，因此语言中自带了 profiling 的库。</p>
<p>Go语言项目中的性能优化主要有以下几个方面：</p>
<ul>
    <li>CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据</li>
    <li>Memory Profile（Heap Profile）：报告程序的内存的使用情况</li>
    <li>Block Profiling：报告 goroutine 不在运行状态的情况，可以用来分析与查找死锁等性能瓶颈</li>
    <li>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的</li>
</ul>
<h3 id="采集性能数据"><a href="#采集性能数据" class="headerlink" title="采集性能数据"></a>采集性能数据</h3>
<p>Go语言内置了获取程序的运行数据的工具，包括以下两个标准库：</p>
<ul>
    <li><code>runtime/pprof</code>：采集工具型应用运行数据进行分析</li>
    <li><code>net/http/pprof</code>：采集服务型应用运行时数据进行分析</li>
</ul>
<p>pprof开启后，每隔一段时间（10ms）就会收集下当前的堆栈信息，获取各个函数占用的CPU以及内存资源；最后通过对这些采样数据进行分析，形成一个性能分析报告。</p>
<h3 id="pprof应用"><a href="#pprof应用" class="headerlink" title="pprof应用"></a>pprof应用</h3>
<p>如果你的应用程序是运行一段时间就结束退出类型。那么最好的办法是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用<code>runtime/pprof</code>库。 首先在代码中导入<code>runtime/pprof</code>工具：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> <span class="string">"runtime/pprof"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="CPU性能分析"><a href="#CPU性能分析" class="headerlink" title="CPU性能分析"></a>CPU性能分析</h3>
<p>开启CPU性能分析：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pprof.StartCPUProfile(w io.Writer)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>停止CPU性能分析：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pprof.StopCPUProfile()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>应用执行结束后，就会生成一个文件，保存了 CPU profiling 数据。得到采样数据之后，使用<code>go tool pprof</code>工具进行CPU性能分析。</p>
<h3 id="内存性能优化"><a href="#内存性能优化" class="headerlink" title="内存性能优化"></a>内存性能优化</h3>
<p>记录程序的堆栈信息</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pprof.WriteHeapProfile(w io.Writer)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>得到采样数据之后，使用<code>go tool pprof</code>工具进行内存性能分析。</p>
<p><code>go tool pprof</code>默认是使用<code>-inuse_space</code>进行统计，还可以使用<code>-inuse-objects</code>查看分配对象的数量。</p>
<h2 id="服务型应用"><a href="#服务型应用" class="headerlink" title="服务型应用"></a>服务型应用</h2>
<p>如果你的应用程序是一直运行的，比如 web 应用，那么可以使用<code>net/http/pprof</code>库，它能够在提供 HTTP 服务进行分析。</p>
<p>如果使用了默认的<code>http.DefaultServeMux</code>（通常是代码直接使用 http.ListenAndServe(“0.0.0.0:8000”, nil)），只需要在你的web server端代码中按如下方式导入<code>net/http/pprof</code></p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> _ <span class="string">"net/http/pprof"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果你使用自定义的 Mux，则需要手动注册一些路由规则：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">r.HandleFunc(<span class="string">"/debug/pprof/"</span>, pprof.Index)</span><br><span class="line">r.HandleFunc(<span class="string">"/debug/pprof/cmdline"</span>, pprof.Cmdline)</span><br><span class="line">r.HandleFunc(<span class="string">"/debug/pprof/profile"</span>, pprof.Profile)</span><br><span class="line">r.HandleFunc(<span class="string">"/debug/pprof/symbol"</span>, pprof.Symbol)</span><br><span class="line">r.HandleFunc(<span class="string">"/debug/pprof/trace"</span>, pprof.Trace)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果你使用的是gin框架，推荐使用<a href="https://github.com/gin-contrib/pprof" target="_blank" rel="noopener">github.com/gin-contrib/pprof</a>，在代码中通过以下命令注册pprof相关路由。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pprof.Register(router)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>不管哪种方式，你的 HTTP 服务都会多出<code>/debug/pprof</code> endpoint，访问它会得到类似下面的内容：</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpih7cgmhxj30hu0jwmy0.jpg" alt=""></p>
<p>这个路径下还有几个子页面：</p>
<ul>
    <li>/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，并生成一个文件供下载</li>
    <li>/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</li>
    <li>/debug/pprof/block：block Profiling 的路径</li>
    <li>
        <p>/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</p>
    </li>
    <li>
        <p>。。。 。。。</p>
    </li>
</ul>
<h3 id="go-tool-pprof命令"><a href="#go-tool-pprof命令" class="headerlink" title="go tool pprof命令"></a>go tool pprof命令</h3>
<p>不管是工具型应用还是服务型应用，我们使用相应的pprof库获取数据之后，下一步的都要对这些数据进行分析，我们可以使用<code>go tool pprof</code>命令行工具。</p>
<p><code>go tool pprof</code>最简单的使用方式为:</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go tool pprof [binary] [<span class="built_in">source</span>]</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>其中：</p>
<ul>
    <li>binary 是应用的二进制文件，用来解析各种符号；</li>
    <li>source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。</li>
</ul>
<p><strong>注意事项：</strong> 获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。</p>
<h3 id="命令行交互界面"><a href="#命令行交互界面" class="headerlink" title="命令行交互界面"></a>命令行交互界面</h3>
<p>我们使用go工具链里的<code>pprof</code>来分析一下。</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go tool pprof cpu.pprof</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>执行上面的代码会进入交互界面如下：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">runtime_pprof $ go tool pprof cpu.pprof</span><br><span class="line">Type: cpu</span><br><span class="line">Time: Jun 28, 2020 at 11:28am (CST)</span><br><span class="line">Duration: 20.13s, Total samples = 1.91mins (538.60%)</span><br><span class="line">Entering interactive mode (<span class="built_in">type</span> <span class="string">"help"</span> <span class="keyword">for</span> commands, <span class="string">"o"</span> <span class="keyword">for</span> options)</span><br><span class="line">(pprof)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>我们可以在交互界面输入<code>top3</code>来查看程序中占用CPU前3位的函数：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">(pprof) top3</span><br><span class="line">Showing nodes accounting <span class="keyword">for</span> 100.37s, 87.68% of 114.47s total</span><br><span class="line">Dropped 17 nodes (cum &lt;= 0.57s)</span><br><span class="line">Showing top 3 nodes out of 4</span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line">    42.52s 37.15% 37.15%     91.73s 80.13%  runtime.selectnbrecv</span><br><span class="line">    35.21s 30.76% 67.90%     39.49s 34.50%  runtime.chanrecv</span><br><span class="line">    22.64s 19.78% 87.68%    114.37s 99.91%  main.logicCode</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>其中：</p>
<ul>
    <li>flat：当前函数占用CPU的耗时</li>
    <li>flat：:当前函数占用CPU的耗时百分比</li>
    <li>sun%：函数占用CPU的耗时累计百分比</li>
    <li>cum：当前函数加上调用当前函数的函数占用CPU的总耗时</li>
    <li>cum%：当前函数加上调用当前函数的函数占用CPU的总耗时百分比</li>
    <li>最后一列：函数名称</li>
</ul>
<p>在大多数的情况下，我们可以通过分析这五列得出一个应用程序的运行情况，并对程序进行优化。</p>
<p>还可以使用<code>list 函数名</code>命令查看具体的函数分析，例如执行<code>list logicCode</code>查看我们编写的函数的详细分析。</p>
<h3 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h3>
<p>或者可以直接输入web，通过svg图的方式查看程序中详细的CPU占用情况。 想要查看图形化的界面首先需要安装<a href="https://graphviz.gitlab.io/" target="_blank" rel="noopener">graphviz</a>图形化工具。</p>
<p>Mac：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">brew install graphviz</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Windows: 下载<a href="https://graphviz.gitlab.io/_pages/Download/Download_windows.html" target="_blank" rel="noopener">graphviz</a> 将<code>graphviz</code>安装目录下的bin文件夹添加到Path环境变量中。 在终端输入<code>dot -version</code>查看是否安装成功。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpihc6efdzj310a0q676g.jpg" alt=""></p>
<p>关于图形的说明： 每个框代表一个函数，理论上框的越大表示占用的CPU资源越多。 方框之间的线条代表函数之间的调用关系。 线条上的数字表示函数调用的次数。 方框中的第一行数字表示当前函数占用CPU的百分比，第二行数字表示当前函数累计占用CPU的百分比。</p>
<p>除了分析CPU性能数据，pprof也支持分析内存性能数据。比如，使用下面的命令分析http服务的heap性能数据，查看当前程序的内存占用以及热点内存对象使用的情况。</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 查看内存占用数据</span></span><br><span class="line">go tool pprof -inuse_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class="line">go tool pprof -inuse_objects http://127.0.0.1:8080/debug/pprof/heap</span><br><span class="line"><span class="comment"># 查看临时内存分配数据</span></span><br><span class="line">go tool pprof -alloc_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class="line">go tool pprof -alloc_objects http://127.0.0.1:8080/debug/pprof/heap</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="go-torch和火焰图"><a href="#go-torch和火焰图" class="headerlink" title="go-torch和火焰图"></a>go-torch和火焰图</h2>
<p>火焰图（Flame Graph）是 Bredan Gregg 创建的一种性能分析图表，因为它的样子近似 🔥而得名。上面的 profiling 结果也转换成火焰图，如果对火焰图比较了解可以手动来操作，不过这里我们要介绍一个工具：<code>go-torch</code>。这是 uber 开源的一个工具，可以直接读取 golang profiling 数据，并生成一个火焰图的 svg 文件。</p>
<h3 id="安装go-torch"><a href="#安装go-torch" class="headerlink" title="安装go-torch"></a>安装go-torch</h3>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go get -v github.com/uber/go-torch</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>火焰图 svg 文件可以通过浏览器打开，它对于调用图的最优点是它是动态的：可以通过点击每个方块来 zoom in 分析它上面的内容。</p>
<p>火焰图的调用顺序从下到上，每个方块代表一个函数，它上面一层表示这个函数会调用哪些函数，方块的大小代表了占用 CPU 使用的长短。火焰图的配色并没有特殊的意义，默认的红、黄配色是为了更像火焰而已。</p>
<p>go-torch 工具的使用非常简单，没有任何参数的话，它会尝试从<code>http://localhost:8080/debug/pprof/profile</code>获取 profiling 数据。它有三个常用的参数可以调整：</p>
<ul>
    <li>-u –url：要访问的 URL，这里只是主机和端口部分</li>
    <li>-s –suffix：pprof profile 的路径，默认为 /debug/pprof/profile</li>
    <li>–seconds：要执行 profiling 的时间长度，默认为 30s</li>
</ul>
<h3 id="安装-FlameGraph"><a href="#安装-FlameGraph" class="headerlink" title="安装 FlameGraph"></a>安装 FlameGraph</h3>
<p>要生成火焰图，需要事先安装 FlameGraph工具，这个工具的安装很简单（需要perl环境支持），只要把对应的可执行文件加入到环境变量中即可。</p>
<ol>
    <li>下载安装perl：<a href="https://www.perl.org/get.html" target="_blank" rel="noopener">https://www.perl.org/get.html</a></li>
    <li>下载FlameGraph：<code>git clone https://github.com/brendangregg/FlameGraph.git</code></li>
    <li>将<code>FlameGraph</code>目录加入到操作系统的环境变量中。</li>
    <li>Windows平台，需要把<code>go-torch/render/flamegraph.go</code>文件中的<code>GenerateFlameGraph</code>按如下方式修改，然后在<code>go-torch</code>目录下执行<code>go install</code>即可。</li>
</ol>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// GenerateFlameGraph runs the flamegraph script to generate a flame graph SVG. func GenerateFlameGraph(graphInput []byte, args ...string) ([]byte, error) &#123;</span></span><br><span class="line">flameGraph := findInPath(flameGraphScripts)</span><br><span class="line"><span class="keyword">if</span> flameGraph == <span class="string">""</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, errNoPerlScript</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> runtime.GOOS == <span class="string">"windows"</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> runScript(<span class="string">"perl"</span>, <span class="built_in">append</span>([]<span class="keyword">string</span>&#123;flameGraph&#125;, args...), graphInput)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> runScript(flameGraph, args, graphInput)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="压测工具wrk"><a href="#压测工具wrk" class="headerlink" title="压测工具wrk"></a>压测工具wrk</h3>
<p>推荐使用<a href="https://github.com/wg/wrk" target="_blank" rel="noopener">https://github.com/wg/wrk</a> 或 <a href="https://github.com/adjust/go-wrk" target="_blank" rel="noopener">https://github.com/adjust/go-wrk</a></p>
<h3 id="使用go-torch"><a href="#使用go-torch" class="headerlink" title="使用go-torch"></a>使用go-torch</h3>
<p>使用wrk进行压测:</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go-wrk -n 50000 http://127.0.0.1:8080/book/list</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在上面压测进行的同时，打开另一个终端执行:</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go-torch -u http://127.0.0.1:8080 -t 30</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>30秒之后终端会出现如下提示：<code>Writing svg to torch.svg</code></p>
<p>然后我们使用浏览器打开<code>torch.svg</code>就能看到如下火焰图了。</p>
<p>火焰图的y轴表示cpu调用方法的先后，x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多。通过火焰图我们就可以更清楚的找出耗时长的函数调用，然后不断的修正代码，重新采样，不断优化。</p>
<p>此外还可以借助火焰图分析内存性能数据：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go-torch -inuse_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class="line">go-torch -inuse_objects http://127.0.0.1:8080/debug/pprof/heap</span><br><span class="line">go-torch -alloc_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class="line">go-torch -alloc_objects http://127.0.0.1:8080/debug/pprof/heap</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="pprof与性能测试结合"><a href="#pprof与性能测试结合" class="headerlink" title="pprof与性能测试结合"></a>pprof与性能测试结合</h2>
<p><code>go test</code>命令有两个参数和 pprof 相关，它们分别指定生成的 CPU 和 Memory profiling 保存的文件：</p>
<ul>
    <li>-cpuprofile：cpu profiling 数据要保存的文件地址</li>
    <li>-memprofile：memory profiling 数据要报文的文件地址</li>
</ul>
<p>我们还可以选择将pprof与性能测试相结合，比如：</p>
<p>比如下面执行测试的同时，也会执行 CPU profiling，并把结果保存在 cpu.prof 文件中：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go <span class="built_in">test</span> -bench . -cpuprofile=cpu.prof</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>比如下面执行测试的同时，也会执行 Mem profiling，并把结果保存在 cpu.prof 文件中：</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">go <span class="built_in">test</span> -bench . -memprofile=./mem.prof</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>需要注意的是，Profiling 一般和性能测试一起使用，这个原因在前文也提到过，只有应用在负载高的情况下 Profiling 才有意义。</p>
<h2 id="referce"><a href="#referce" class="headerlink" title="referce"></a>referce</h2>
<p><a href="https://www.liwenzhou.com/posts/Go/performance_optimisation/" target="_blank" rel="noopener">李文周-Go性能优化</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>js调试小笔记</title>
    <url>/2341116369.html</url>
    <content><![CDATA[<h2 id="操作键"><a href="#操作键" class="headerlink" title="操作键"></a>操作键</h2>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guna6e3v4wj60bm01imwy02.jpg" alt="image-20210920184244435"></p>
<p><strong>resume/pause script execution</strong>: 恢复/暂停脚本执行</p>
<p><strong>step over next function call</strong>: 跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。</p>
<p><strong>step into next function call</strong>: 跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。</p>
<p><strong>step out of current function</strong>:跳出当前函数</p>
<p><strong>deactivate breakpoints</strong>:停用断点</p>
<p><strong>don‘t pause on exceptions</strong>:不暂停异常捕获</p>
<h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guna86ju6bj6042016gld02.jpg" alt="image-20210920184426027"></p>
<p>变量监听</p>
<p>定位到关键值时加入Watch中实现实时监听，可根据监听内容变化预估此变化。</p>
<h2 id="BreakPoints"><a href="#BreakPoints" class="headerlink" title="BreakPoints"></a>BreakPoints</h2>
<p>所有断点列表，且自动按照执行顺序排序</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1guna98mrchj60jm082mxp02.jpg" alt="image-20210920184528622"></p>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2>
<p>该范围内所有变量的值</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunafyd9hhj60kc0mc40502.jpg" alt="image-20210920185155365"></p>
<h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2>
<p><strong>一个 procedure（通常译作“过程”）吃进来一些参数，干一些事情，再吐出去一个返回值（或者什么也不吐）</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunaocua19j60co02m3ye02.jpg" alt="image-20210920185959949"></p>
<h2 id="XHR-fetch-Breakpints"><a href="#XHR-fetch-Breakpints" class="headerlink" title="XHR/fetch Breakpints"></a>XHR/fetch Breakpints</h2>
<p>XHR/fetch Breakpints：请求断点（拦截），当发生符合要求的将触发定位到请求发送前一步</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunaonikx8j60kw03kaa902.jpg" alt="image-20210920190017589"></p>
<h2 id="DOM-Break-points"><a href="#DOM-Break-points" class="headerlink" title="DOM Break points"></a>DOM Break points</h2>
<p>当符合条件时触发定位到BOM</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunau1dh9bj60ay038q2y02.jpg" alt="image-20210920190528135"></p>
<h2 id="Global-Listeners"><a href="#Global-Listeners" class="headerlink" title="Global Listeners"></a>Global Listeners</h2>
<p>全局时间监听，包含所有时间，如点击、滑动等</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunavas820j60g80ect9a02.jpg" alt="image-20210920190640937"></p>
<h2 id="Event-Listener-Break-points"><a href="#Event-Listener-Break-points" class="headerlink" title="Event Listener Break points"></a>Event Listener Break points</h2>
<p>事件侦听器断点，监听所有事件与断点实现。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gunawqe43pj60gw0nyjsk02.jpg" alt="image-20210920190803044"></p>
<h3 id="预览几种不同的breakpoint类型"><a href="#预览几种不同的breakpoint类型" class="headerlink" title="预览几种不同的breakpoint类型"></a>预览几种不同的breakpoint类型</h3>
<p>众人皆知的breakpoint类型是line-of-code。但是line-of-code型breakpoint有的时候没法设置（<strong>其实就是没法在代码左边点出一个绿点来</strong>），或者如果你正在使用一个大型的代码库。通过学习如何和何时使用这些不同类型的breakpoint debug，会大大节约你的时间。</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th>断点类型</th>
                <th>当你想Pause的时候使用</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Line-of-code</td>
                <td>代码具体某一行（<strong>其实就是没法在代码左边点出一个绿点来</strong>）</td>
            </tr>
            <tr>
                <td>Conditional line-of-code</td>
                <td>代码具体某一行，但是只有在一些条件为true时</td>
            </tr>
            <tr>
                <td>DOM</td>
                <td>在改变或者移除一个DOM节点或者它的DOM子节点时</td>
            </tr>
            <tr>
                <td>XHR</td>
                <td>当一个XHR URL包含一个string pattern</td>
            </tr>
            <tr>
                <td>Event Listener</td>
                <td>在运行了某个特定事件后的代码上，例如click事件触发</td>
            </tr>
            <tr>
                <td>Exception</td>
                <td>在抛出了一个caught或者uncaught的exception时</td>
            </tr>
            <tr>
                <td>Function</td>
                <td>当一个函数被调用时</td>
            </tr>
        </tbody>
    </table>
</div>
<h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2>
<p>全局作用域 this = window </p>
<p>局部作用域 this = 调用者 </p>
<p>类的方法里面 this = 类自己</p>
<p><a href="https://blog.csdn.net/xc_zhou/article/details/106269239" target="_blank" rel="noopener">https://blog.csdn.net/xc_zhou/article/details/106269239</a></p>
<p><a href="https://blog.csdn.net/qq_27324983/article/details/102467199" target="_blank" rel="noopener">https://blog.csdn.net/qq_27324983/article/details/102467199</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Crawler</category>
        <category>JavaScript</category>
        <category>技巧</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>Web Spider</tag>
        <tag>数据采集</tag>
        <tag>JS</tag>
        <tag>Chrome</tag>
        <tag>JavaScript</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes搭建dashboard</title>
    <url>/1529878275.html</url>
    <content><![CDATA[<p>当部署完Kubernetes集群之后，为了便于管理Web UI或许是一种新型且快捷的部署方式。本节将以部署工具helm搭建Kubernetes Dashboard。以及拍坑</p>
<p>helm相关文档：</p>
<ul>
    <li><a href="https://helm.sh/zh/docs/" target="_blank" rel="noopener">helm</a></li>
    <li><a href="https://www.cncf.io/reports/cncf-helm-project-journey-report/" target="_blank" rel="noopener">CNCF Helm 项目过程报告</a></li>
</ul>
<h2 id="helm初始化"><a href="#helm初始化" class="headerlink" title="helm初始化"></a>helm初始化</h2>
<p>在这里推荐使用Kubernetes dashboard官方的仓库。在helm初始化完成后可使用如下命令进行helm repo初始化</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># add repo</span></span><br><span class="line">helm repo add kubernetes-dashboard	https://kubernetes.github.io/dashboard/</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>为避免加入的repo非最新，可使用如下命令进行更新</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">helm repo update</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>效果如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz2xowgsrj61di0880wn02.jpg" alt="image-20210830201834557"></p>
<h3 id="helm安装Kubernetes-dashboard"><a href="#helm安装Kubernetes-dashboard" class="headerlink" title="helm安装Kubernetes dashboard"></a>helm安装Kubernetes dashboard</h3>
<p>笔者建议使用新的namespace</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># create namespace</span></span><br><span class="line">Kubernetes create ns monitor</span><br><span class="line"><span class="comment"># helm install kubernetes dashboard</span></span><br><span class="line">helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard -n monitor</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>输出如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz47x30vvj627u0k2aj602.jpg" alt="image-20210830210303410"></p>
<p>等待部署完成，查看如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz67m63w5j60yc08sdi602.jpg" alt="image-20210830221157231"></p>
<h4 id="修改端口暴露类型"><a href="#修改端口暴露类型" class="headerlink" title="修改端口暴露类型"></a>修改端口暴露类型</h4>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">kubectl <span class="builtin-name">edit</span> -n monitor<span class="built_in"> service </span>kubernetes-dashboard</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>将type：ClusterIP修改为NodePort类型暴露端口，如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6dpjcmjj60v20r844s02.jpg" alt="image-20210830221749368"></p>
<p>修改完成后，就可以获得暴露的端口啦，如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6cvz8lmj610809iacr02.jpg" alt="image-20210830221701538"></p>
<blockquote>
    <p>若在云服务器上请开启对应端口，笔者这里为32623</p>
</blockquote>
<p>此时访问服务器ip+端口，即可进入登陆页面。如下图所示</p>
<blockquote>
    <ol>
        <li>
            <p>必须为<a href="https://ip:port">https://ip:port</a></p>
        </li>
        <li>
            <p>建议使用火狐浏览器</p>
        </li>
    </ol>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6inwfgxj624m0mqq6802.jpg" alt="image-20210830222235151"></p>
<p>至此部署部分已经完成</p>
<h2 id="获取token与授权访问"><a href="#获取token与授权访问" class="headerlink" title="获取token与授权访问"></a>获取token与授权访问</h2>
<h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3>
<figure class="highlight smali">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 查看token名称</span></span><br><span class="line">kubectl get secrets -n<span class="built_in"> monitor </span>| grep kubernetes-dashboard-token</span><br><span class="line"><span class="comment"># 查看token详情</span></span><br><span class="line">kubectl describe secrets -n<span class="built_in"> monitor </span>| grep kubernetes-dashboard-token-你自己的后缀名</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6lrrzogj611001o74u02.jpg" alt="image-20210830222534534"></p>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3>
<p>此时我们刚进去界面，发现什么资源都显示不了，是因为dashboard默认的<code>serviceaccount</code>并没有权限，所以我们需要给予它授权。</p>
<blockquote>
    <p><strong>注意</strong>：这里直接赋予的是超级管理员权限，如果需要更加细颗粒度的授权，请参照官方的说明</p>
    <p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md</a></p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtz6nfrdq3j62060oktgn02.jpg" alt="image-20210830222709899"></p>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitor</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>将以上的yaml文件copy到master服务器上创建即可,当然若您也是使用的monitor 的namespace可直接使用如下命令</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/KubernetersDeployExample/script/main/dashboard/authorization.yaml</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>docker</tag>
        <tag>容器编排</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>pipenv 让你的虚拟环境更加funny一点</title>
    <url>/22141.html</url>
    <content><![CDATA[<h2 id="什么是虚拟环境？"><a href="#什么是虚拟环境？" class="headerlink" title="什么是虚拟环境？"></a>什么是虚拟环境？</h2>
<ul>
    <li>由<a href="https://cuiqingcai.com/[https://baike.baidu.com/item/虚拟环境/6529153?fr=aladdin](https://baike.baidu.com/item/虚拟环境/6529153?fr=aladdin" target="_blank" rel="noopener">百度百科</a> ) 得知： 以专利的实时动态程序行为修饰与模拟算法，直接利用本机的 OS，模拟出自带与本机相容 OS 的虚拟机（Vista 下可模拟 Vista、XP，Windows 7 下则可模拟 Windows 7、Vista、XP），也称为 “虚拟环境”</li>
    <li>功能： 每一个环境都相当于一个新的 Python 环境。你可以在这个新的环境里安装库，运行代码等</li>
</ul>
<a id="more"></a>
<h2 id="为什么需要使用虚拟环境？"><a href="#为什么需要使用虚拟环境？" class="headerlink" title="为什么需要使用虚拟环境？"></a>为什么需要使用虚拟环境？</h2>
<ul>
    <li>众所周知 Python 的强大在于其兼容性，其强大的社区等。正因为第三方库多，层次不齐造成了许多的第三方库并不兼容</li>
    <li>真实环境与虚拟环境二者相对关联，并非绝对关联，可以在虚拟环境里面随便造。</li>
    <li>虚拟环境中进行了隔离，更方便我们部署上线</li>
</ul>
<h2 id="什么时候需要使用虚拟环境？"><a href="#什么时候需要使用虚拟环境？" class="headerlink" title="什么时候需要使用虚拟环境？"></a>什么时候需要使用虚拟环境？</h2>
<p><strong>例如：</strong></p>
<ul>
    <li>项目依赖版本不同时 </li>
    <li>所需包与其他包(非此项目所需，但却存在)产生冲突时</li>
    <li>等等</li>
</ul>
<h2 id="为什么虚拟环境使用pipenv好一点？"><a href="#为什么虚拟环境使用pipenv好一点？" class="headerlink" title="为什么虚拟环境使用pipenv好一点？"></a>为什么虚拟环境使用<code>pipenv</code>好一点？</h2>
<p><strong>Pipenv</strong>是一种工具，旨在将所有包装领域（捆扎机，作曲家，npm，货物，纱线等）中的最佳产品引入Python世界。<em>Windows是我们世界上的头等公民。</em></p>
<p>它会自动为您的项目创建和管理virtualenv，并<code>Pipfile</code>在您安装/卸载软件包时从您的软件包中添加/删除软件包。它还会生成非常重要的<code>Pipfile.lock</code>，用于生成确定性构建。</p>
<p>Pipenv的主要目的是为应用程序的用户和开发人员提供一种简单的方法来设置工作环境。有关库和应用程序之间的区别以及使用<code>setup.py</code>vs<code>Pipfile</code>定义依赖<a href="https://docs.pipenv.org/advanced/#pipfile-vs-setuppy" target="_blank" rel="noopener">项的区别</a>，请参见<a href="https://docs.pipenv.org/advanced/#pipfile-vs-setuppy" target="_blank" rel="noopener">☤Pipfile vs setup.py</a>。</p>
<p>Pipenv试图解决的问题是多方面的：</p>
<ul>
    <li>您不再需要使用<code>pip</code>和<code>virtualenv</code>分开。他们一起工作。</li>
    <li>管理<code>requirements.txt</code>文件可能会出现问题，因此Pipenv使用<code>Pipfile</code>和<code>Pipfile.lock</code>将抽象依赖声明与上次测试的组合分开。</li>
    <li>哈希值随处可见。安全。自动公开安全漏洞。</li>
    <li>强烈建议使用最新版本的依赖项，以最大程度地减少由于过时的组件引起的安全风险。</li>
    <li>让您深入了解依赖关系图（例如）。<code>$ pipenv graph</code></li>
    <li>通过加载<code>.env</code>文件来简化开发工作流程。</li>
</ul>
<h2 id="pipenv安装"><a href="#pipenv安装" class="headerlink" title="pipenv安装"></a>pipenv安装</h2>
<p>建议使用<code>pip3</code>, mac还是服务器上的Linux一般都会有<code>python2.x</code>版本。在这种场景大多情况下，<code>pip</code>指向<code>python2.x</code>,并非<code>python3.x</code></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pip3 install --upgrade pip</span><br><span class="line"><span class="comment"># 推荐使用pip来安装</span></span><br><span class="line">pip3 install pipenv</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>其他几种安装方式</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># If you’re on MacOS, you can install Pipenv easily with Homebrew:</span></span><br><span class="line">brew install pipenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or, if you’re using Fedora 28:</span></span><br><span class="line">sudo dnf install pipenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you're using centos</span></span><br><span class="line">sudo yum install -y pipenv</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>反正安装都一样,无论是使用其他的包管理工具还是pip，都可以</p>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># python3 环境创建</span></span><br><span class="line">pipenv --python 3.x</span><br><span class="line">pipenv --three</span><br><span class="line">pipenv install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建完成后，虚拟环境的pip。并不是你真实环境的pip版本，如果有需要，需要升级一下pip 的版本</span></span><br><span class="line">python3 -m pip install --upgrade pip</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>值得一提的是，首先必须得安装了相对应的Python 版本才能创建虚拟环境。可能点萌萌哒。举个栗子，例如我的电脑环境中只有python3.7，而我想创建一个python2.7 这样是不能创建的</p>
    <p>Pip3安装的pipenv 只能python3 只能使用</p>
</blockquote>
<h2 id="安装删除第三方库"><a href="#安装删除第三方库" class="headerlink" title="安装删除第三方库"></a>安装删除第三方库</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv install packageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装多个包，中间以空格分隔即可</span></span><br><span class="line">pipenv install packageName-1 packageName-2 packageNama-3</span><br><span class="line"></span><br><span class="line">pipenv uninstall packageName</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="Terminal激活虚拟环境"><a href="#Terminal激活虚拟环境" class="headerlink" title="Terminal激活虚拟环境"></a>Terminal激活虚拟环境</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv shell</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ul>
        <li>此时终端会在最前面显示<code>(xxx)</code>, xxx一般为项目文件名。证明退出成功</li>
        <li>并不需要关心虚拟环境的具体位置，只需要在当前目录下。有<code>Pipfile</code>即可</li>
    </ul>
</blockquote>
<h2 id="Terminal中退出虚拟环境"><a href="#Terminal中退出虚拟环境" class="headerlink" title="Terminal中退出虚拟环境"></a>Terminal中退出虚拟环境</h2>
<p>在其他包的虚拟环境中退出可能是使用<code>deactivate</code>,在conda 中使用<code>conda deactivate</code>,而在pipenv 中直接使用</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 即可退出</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>如果使用deactivate，然后在使用<code>pipenv shell</code>,造成本终端页面进入虚拟环境失败。请参考勘误2</p>
</blockquote>
<h2 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h2>
<p>在此项目目录下只需一下命令</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv --rm</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="镜像源安装第三方包"><a href="#镜像源安装第三方包" class="headerlink" title="镜像源安装第三方包"></a>镜像源安装第三方包</h2>
<p>我相信你也和我一样遇见过或尽力过下载第三方包失效包很慢，或者干脆出现<code>timeout</code>导致第三方包下载失败的情况，那么接下来让我们来使用国内的镜像源进行安装第三方包。速度嗖嗖嗖～</p>
<h3 id="单一的安装"><a href="#单一的安装" class="headerlink" title="单一的安装"></a>单一的安装</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 以requests 为栗子</span></span><br><span class="line"> pipenv install requests  --pypi-mirror https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3>
<p>使用pipenv创建虚拟环境之后会在项目目录下生成<code>Pipfile</code>,的文件。</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Pipfile</span></span><br><span class="line">[[<span class="built_in">source</span>]]</span><br><span class="line">url = <span class="string">"https://pypi.tuna.tsinghua.edu.cn/simple/"</span></span><br><span class="line">verify_ssl = <span class="literal">true</span></span><br><span class="line">name = <span class="string">"pypi"</span></span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line">requests = <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">"3.8"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="获取包依赖"><a href="#获取包依赖" class="headerlink" title="获取包依赖"></a>获取包依赖</h3>
<p>我们可以使用命令来清晰地呈现出当前安装的 Python 包版本及之间的依赖关系，命令如下：</p>
<figure class="highlight ebnf">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attribute">pipenv graph</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>~ ProjectNote % pipenv graph<br>lxml==4.6.2<br>requests==2.25.1</p>
    <ul>
        <li>certifi [required: &gt;=2017.4.17, installed: 2020.12.5]</li>
        <li>chardet [required: &gt;=3.0.2,&lt;5, installed: 4.0.0]</li>
        <li>idna [required: &gt;=2.5,&lt;3, installed: 2.10]</li>
        <li>urllib3 [required: &gt;=1.21.1,&lt;1.27, installed: 1.26.2]</li>
    </ul>
</blockquote>
<h3 id="产生-Pipfile-lock"><a href="#产生-Pipfile-lock" class="headerlink" title="产生 Pipfile.lock"></a>产生 Pipfile.lock</h3>
<p>有时候可能 Pipfile.lock 文件不存在或被删除了，这时候我们可以使用如下命令生成：</p>
<figure class="highlight cos">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv <span class="keyword">lock</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>以上就是pipenv基础使用了，但这还不够哦。接下来让我们深入探究一下</p>
<h2 id="不知道但常用"><a href="#不知道但常用" class="headerlink" title="不知道但常用"></a>不知道但常用</h2>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --<span class="built_in">where</span>                         Output project home information.</span><br><span class="line">  --venv                          Output virtualenv information.</span><br><span class="line">  --py                            Output Python interpreter information.</span><br><span class="line">  --envs                          Output Environment Variable options.</span><br><span class="line">  --rm                            Remove the virtualenv.</span><br><span class="line">  --bare                          Minimal output.</span><br><span class="line">  --completion                    Output completion (to be executed by the</span><br><span class="line">                                  shell).</span><br><span class="line"></span><br><span class="line">  --man                           Display manpage.</span><br><span class="line">  --support                       Output diagnostic information <span class="keyword">for</span> use <span class="keyword">in</span></span><br><span class="line">                                  GitHub issues.</span><br><span class="line"></span><br><span class="line">  --site-packages / --no-site-packages</span><br><span class="line">                                  Enable site-packages <span class="keyword">for</span> the virtualenv.</span><br><span class="line">                                  [env var: PIPENV_SITE_PACKAGES]</span><br><span class="line"></span><br><span class="line">  --python TEXT                   Specify <span class="built_in">which</span> version of Python virtualenv</span><br><span class="line">                                  should use.</span><br><span class="line"></span><br><span class="line">  --three / --two                 Use Python 3/2 when creating virtualenv.</span><br><span class="line">  --clear                         Clears caches (pipenv, pip, and pip-tools).</span><br><span class="line">                                  [env var: PIPENV_CLEAR]</span><br><span class="line"></span><br><span class="line">  -v, --verbose                   Verbose mode.</span><br><span class="line">  --pypi-mirror TEXT              Specify a PyPI mirror.</span><br><span class="line">  --version                       Show the version and <span class="built_in">exit</span>.</span><br><span class="line">  -h, --<span class="built_in">help</span>                      Show this message and <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage Examples:</span><br><span class="line">   Create a new project using Python 3.7, specifically:</span><br><span class="line">   $ pipenv --python 3.7</span><br><span class="line"></span><br><span class="line">   Remove project virtualenv (inferred from current directory):</span><br><span class="line">   $ pipenv --rm</span><br><span class="line"></span><br><span class="line">   Install all dependencies <span class="keyword">for</span> a project (including dev):</span><br><span class="line">   $ pipenv install --dev</span><br><span class="line"></span><br><span class="line">   Create a lockfile containing pre-releases:</span><br><span class="line">   $ pipenv lock --pre</span><br><span class="line"></span><br><span class="line">   Show a graph of your installed dependencies:</span><br><span class="line">   $ pipenv graph</span><br><span class="line"></span><br><span class="line">   Check your installed dependencies <span class="keyword">for</span> security vulnerabilities:</span><br><span class="line">   $ pipenv check</span><br><span class="line"></span><br><span class="line">   Install a <span class="built_in">local</span> setup.py into your virtual environment/Pipfile:</span><br><span class="line">   $ pipenv install -e .</span><br><span class="line"></span><br><span class="line">   Use a lower-level pip <span class="built_in">command</span>:</span><br><span class="line">   $ pipenv run pip freeze</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  check      Checks <span class="keyword">for</span> PyUp Safety security vulnerabilities and against PEP</span><br><span class="line">             508 markers provided <span class="keyword">in</span> Pipfile.</span><br><span class="line"></span><br><span class="line">  clean      Uninstalls all packages not specified <span class="keyword">in</span> Pipfile.lock.</span><br><span class="line">  graph      Displays currently-installed dependency graph information.</span><br><span class="line">  install    Installs provided packages and adds them to Pipfile, or (<span class="keyword">if</span> no</span><br><span class="line">             packages are given), installs all packages from Pipfile.</span><br><span class="line"></span><br><span class="line">  lock       Generates Pipfile.lock.</span><br><span class="line">  open       View a given module <span class="keyword">in</span> your editor.</span><br><span class="line">  run        Spawns a <span class="built_in">command</span> installed into the virtualenv.</span><br><span class="line">  scripts    Lists scripts <span class="keyword">in</span> current environment config.</span><br><span class="line">  shell      Spawns a shell within the virtualenv.</span><br><span class="line">  sync       Installs all packages specified <span class="keyword">in</span> Pipfile.lock.</span><br><span class="line">  uninstall  Uninstalls a provided package and removes it from Pipfile.</span><br><span class="line">  update     Runs lock, <span class="keyword">then</span> sync.</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="在真实环境中使用虚拟环境中包并运行"><a href="#在真实环境中使用虚拟环境中包并运行" class="headerlink" title="在真实环境中使用虚拟环境中包并运行"></a>在真实环境中使用虚拟环境中包并运行</h3>
<blockquote>
    <p>场景如下：</p>
    <p>假设正式环境中为一个干净的仓库,有且仅有初始的包</p>
    <p>虚拟环境中有所需要的第三方包。</p>
    <p>如何实现在真实环境中使用虚拟环境中的第三方包并运行</p>
</blockquote>
<figure class="highlight dockerfile">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv <span class="keyword">run</span><span class="bash"> python xxx.py</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="产生-Pipfile-lock-1"><a href="#产生-Pipfile-lock-1" class="headerlink" title="产生 Pipfile.lock"></a>产生 Pipfile.lock</h3>
<p>有时候可能 Pipfile.lock 文件不存在或被删除了，这时候我们可以使用以下命令生成：</p>
<figure class="highlight cos">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv <span class="keyword">lock</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="批量安装第三方依赖包"><a href="#批量安装第三方依赖包" class="headerlink" title="批量安装第三方依赖包"></a>批量安装第三方依赖包</h2>
<p>部署的时候只需要将此执行一下命令即可安装所有的依赖包，它是依靠Pipfile.lock的</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pipenv sync</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="示例-使用pipenv-对接docker或其他的部署"><a href="#示例-使用pipenv-对接docker或其他的部署" class="headerlink" title="示例:使用pipenv 对接docker或其他的部署"></a>示例:使用pipenv 对接docker或其他的部署</h3>
<p>只说不做假把式，只做不说傻把式。搞了这么多，来个case实现与项目接轨吧。这里为以docker部署为栗子</p>
<p>首先在项目中我们也使用虚拟环境去开发,当然也建议这样去做。没错，我是在教你做事。嘻嘻～</p>
<p>此时的项目应该差不多如下,此时两个为必须存在一个是<code>Pipfile</code>, 一个是项目文件(文件夹)。<code>deploy</code>，<code>Dockerfile</code>为后实现</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glvroonkofj30ly07i0so.jpg" alt=""></p>
<p>书写Dockerfile，拿docker部署没有Dockerfile是不阔能滴</p>
<p>Dockerfile实现如下,可以按需修改</p>
<figure class="highlight dockerfile">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sh deploy.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"pipenv"</span>, <span class="string">"run"</span>, <span class="string">"python3"</span>, <span class="string">"testfile.py"</span>]</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Deploy.sh如下</p>
<p>其实deploy 其中的内容可以直接放到dockerfile中，我自己喜欢这样。更加清晰一点。啊，如此清晰的逻辑与结构，无敌～。我又在教你做事，大哥别杀我</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 保持pip版本为最新版，及安装pipenv</span></span><br><span class="line">python3 -m pip install --upgrade pip  &amp;&amp; pip3 install pipenv</span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">pipenv --python 3.8</span><br><span class="line"><span class="comment"># 安装环境依赖(第三方包)</span></span><br><span class="line">pipenv update</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>这里需要注意的是，我建议你使用<code>pipenv update</code>,更加保险。</p>
    <p>什么， 你问我为什么不用sync？</p>
    <p>既然你诚心诚意的发问了，那我就大发慈悲的告诉你吧。哈哈～</p>
    <p><code>pipenv update</code>相当于执行了<code>pipenv lock</code>和<code>pipenv sync</code>两个命令</p>
    <p>如果用<code>pipenv sync</code>，而此时的你如果没有<code>Pipfile.lock</code>,那岂不是很尬</p>
</blockquote>
<p>Docker build 执行结果如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Sending build context to Docker daemon  99.33kB</span><br><span class="line">Step 1/5 : FROM python:3.8</span><br><span class="line"> ---&gt; d1bfb3dd9268</span><br><span class="line">Step 2/5 : WORKDIR /code</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 74cda17b1483</span><br><span class="line">Removing intermediate container 74cda17b1483</span><br><span class="line"> ---&gt; ecfd46d28538</span><br><span class="line">Step 3/5 : COPY . /code</span><br><span class="line"> ---&gt; 8a89f329a4f9</span><br><span class="line">Step 4/5 : RUN pip install pipenv &amp;&amp; sh deploy.bash.sh</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> cea95051d481</span><br><span class="line">Collecting pipenv</span><br><span class="line">  Downloading pipenv-2020.11.15-py2.py3-none-any.whl (3.9 MB)</span><br><span class="line">Requirement already satisfied: setuptools&gt;=36.2.1 <span class="keyword">in</span> /usr/<span class="built_in">local</span>/lib/python3.8/site-packages (from pipenv) (51.0.0)</span><br><span class="line">Requirement already satisfied: pip&gt;=18.0 <span class="keyword">in</span> /usr/<span class="built_in">local</span>/lib/python3.8/site-packages (from pipenv) (20.3.3)</span><br><span class="line">Collecting virtualenv-clone&gt;=0.2.5</span><br><span class="line">  Downloading virtualenv_clone-0.5.4-py2.py3-none-any.whl (6.6 kB)</span><br><span class="line">Collecting certifi</span><br><span class="line">  Downloading certifi-2020.12.5-py2.py3-none-any.whl (147 kB)</span><br><span class="line">Collecting virtualenv</span><br><span class="line">  Downloading virtualenv-20.2.2-py2.py3-none-any.whl (5.7 MB)</span><br><span class="line">Collecting appdirs&lt;2,&gt;=1.4.3</span><br><span class="line">  Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)</span><br><span class="line">Collecting distlib&lt;1,&gt;=0.3.1</span><br><span class="line">  Downloading distlib-0.3.1-py2.py3-none-any.whl (335 kB)</span><br><span class="line">Collecting filelock&lt;4,&gt;=3.0.0</span><br><span class="line">  Downloading filelock-3.0.12-py3-none-any.whl (7.6 kB)</span><br><span class="line">Collecting six&lt;2,&gt;=1.9.0</span><br><span class="line">  Downloading six-1.15.0-py2.py3-none-any.whl (10 kB)</span><br><span class="line">Installing collected packages: six, filelock, distlib, appdirs, virtualenv-clone, virtualenv, certifi, pipenv</span><br><span class="line">Successfully installed appdirs-1.4.4 certifi-2020.12.5 distlib-0.3.1 filelock-3.0.12 pipenv-2020.11.15 six-1.15.0 virtualenv-20.2.2 virtualenv-clone-0.5.4</span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> this project...</span><br><span class="line">Pipfile: /code/Pipfile</span><br><span class="line">Using /usr/<span class="built_in">local</span>/bin/python3.8 (3.8.6) to create virtualenv...</span><br><span class="line">⠦ Creating virtual environment...created virtual environment CPython3.8.6.final.0-64 <span class="keyword">in</span> 1079ms</span><br><span class="line">  creator CPython3Posix(dest=/root/.<span class="built_in">local</span>/share/virtualenvs/code-_Py8Si6I, clear=False, no_vcs_ignore=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/root/.<span class="built_in">local</span>/share/virtualenv)</span><br><span class="line">    added seed packages: pip==20.3.1, setuptools==51.0.0, wheel==0.36.1</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator</span><br><span class="line">                                                                                                                                                                           ✔ Successfully created virtual environment! </span><br><span class="line">Virtualenv location: /root/.<span class="built_in">local</span>/share/virtualenvs/code-_Py8Si6I</span><br><span class="line">Installing dependencies from Pipfile.lock (d2a522)...</span><br><span class="line">To activate this project<span class="string">'s virtualenv, run pipenv shell.</span></span><br><span class="line"><span class="string">Alternatively, run a command inside the virtualenv with pipenv run.</span></span><br><span class="line"><span class="string">All dependencies are now up-to-date!</span></span><br><span class="line"><span class="string">Removing intermediate container cea95051d481</span></span><br><span class="line"><span class="string"> ---&gt; 5bc79a1c17b6</span></span><br><span class="line"><span class="string">Step 5/5 : CMD ["pipenv", "run", "python3", "testfile.py"]</span></span><br><span class="line"><span class="string"> ---&gt; Running in d86af926715c</span></span><br><span class="line"><span class="string">Removing intermediate container d86af926715c</span></span><br><span class="line"><span class="string"> ---&gt; a64b6bc63353</span></span><br><span class="line"><span class="string">Successfully built a64b6bc63353</span></span><br><span class="line"><span class="string">Successfully tagged test:1</span></span><br><span class="line"><span class="string">(ProjectNote) stringle-004@zhixiankeji-004s-MacBook-Pro ProjectNote % docker run  test:1</span></span><br><span class="line"><span class="string">&lt;Response [200]&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class="bg s_ipt_wr"&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus=autofocus&gt;&lt;/span&gt;&lt;span class="bg s_btn_wr"&gt;&lt;input type=submit id=su value=百度一下 clabg s_btn" autofocus&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=https://www.hao123.com name=tj_trhao1 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.bacom name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tlogin class=lb&gt;登录&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write('</span>&lt;a href=<span class="string">"http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='+ encodeURIComponent(window.location.href+ (windowocation.search === "</span><span class="string">" ? "</span>?<span class="string">" : "</span>&amp;<span class="string">")+ "</span>bdorz_come=1<span class="string">")+ '"</span> name=<span class="string">"tj_login"</span> class=<span class="string">"lb"</span>&gt;登录&lt;/a&gt;<span class="string">');</span></span><br><span class="line"><span class="string">                &lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style="display: block;"&gt;更多产品&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;关于百度&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;前必读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;tml&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;Element html at 0x7fbfe776d100&gt;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Docker 构建注意事项：</p>
<ol>
    <li>
        <p>```sh</p>
        <h1 id="Pipfile文件"><a href="#Pipfile文件" class="headerlink" title="Pipfile文件"></a>Pipfile文件</h1>
        <p>[requires]<br>python_version = “3.8”</p>
        <h1 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h1>
        <p>FROM python:3.8</p>
        <p>这两个后面跟的版本号必须一致，否则将会构建失败</p>
        <figure class="highlight n1ql">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line">2. 使用`pipenv <span class="keyword">update</span> <span class="symbol">`而不是`</span>pipenv sync<span class="symbol">`,为什么，我就不告诉你了。看上面就好</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">## 勘误</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">### 1.pip版本过低造成安装失败</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">还记得我之前在服务器上，无论怎么安装就是安装不上，无论是其他包还是`</span>pipenv<span class="symbol">`.后来硬是找不到什么原因。直到。。。</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">`</span><span class="symbol">``</span>sh</span><br><span class="line"># 查看pip 版本</span><br><span class="line">pip3 -V</span><br><span class="line"># <span class="keyword">or</span></span><br><span class="line">pip3 --version</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
</ol>
<blockquote>
    <p>输出结果类似如下</p>
    <figure class="highlight sh">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">~ % pip3 -V</span><br><span class="line">pip 20.3.3 from /usr/<span class="built_in">local</span>/lib/python3.9/site-packages/pip (python 3.9)</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<p>如果pip 的版本还不是20版本的，需要进行升级</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 推荐</span></span><br><span class="line">python3 -m pip install --upgrade pip [--user]</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">python3 -m pip install -U pip [--user]</span><br><span class="line"><span class="comment"># 不推荐</span></span><br><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip3 install -U pip</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ul>
        <li>
            <p>其中[—user] 为可选参数，最好加上。一般情况下不加也没事</p>
        </li>
        <li>
            <p><code>-m</code>:run library module as a script (terminates option list) 将库模块作为脚本运行（终止选项列表）</p>
        </li>
    </ul>
</blockquote>
<h3 id="2-虚拟环境重载错误"><a href="#2-虚拟环境重载错误" class="headerlink" title="2.虚拟环境重载错误"></a>2.虚拟环境重载错误</h3>
<p>之前使用其他的python虚拟环境工具的时候，使用<code>deactivate</code>,退出虚拟环境。而<code>pipenv</code>, 并不是这样</p>
<p>使用<code>deactivate</code>,退出虚拟环境后又使用`pipenv shell, 进入虚拟环境，结果显示…</p>
<blockquote>
    <p>Shell for UNKNOWN_VIRTUAL_ENVIRONMENT already activated.<br>No action taken to avoid nested environments.</p>
</blockquote>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 先exit 一下即可，然后使用</span></span><br><span class="line">pipenv shell</span><br><span class="line"><span class="comment"># 即可重新进入虚拟环境</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ol>
    <li>
        <p>创建虚拟环境需注意<br>pipenv 并不支持嵌套的虚拟环境，默认使用此文件的父级目录中的pipfile</p>
        <blockquote>
            <p>比如：在projectfile中有文件src-1，pipfile, src-2,如果进入src-1 中执行<code>pipenv install</code>or<code>pipenv --python 3.8</code>or <code>pipenv tree</code>,中任何一个命令都会优先使用projectfile/pipfile</p>
        </blockquote>
    </li>
</ol>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2>
<p><a href="https://docs.pipenv.org/" target="_blank" rel="noopener">pipenv官方文档</a></p>
<p><a href="https://pypi.org/project/pipenv/" target="_blank" rel="noopener">pipenv pypi</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>技术杂谈</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>redis持久化那些事儿</title>
    <url>/882995737.html</url>
    <content><![CDATA[<h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2>
<p>redis的持久化方式有两种，一种是RDB持久化，一种是AOF持久化。</p>
<h1 id="RDB快照（snapshot）"><a href="#RDB快照（snapshot）" class="headerlink" title="RDB快照（snapshot）"></a>RDB快照（snapshot）</h1>
<p>redis把数据以快照的方式保存在磁盘上。默认的情况下，redis将数据保存在文件名为dump.rdb的二进制文件中。</p>
<p>redis在运行时，会把内存中的数据快照保存到磁盘上，在redis重启时，会从rdb文件中读取数据还原redis数据库的状态。</p>
<p>rdb是自动默认开启的，但并没有开启触发规则。</p>
<h2 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h2>
<p>RDB的触发可分为两大类，一类是自动触发，一类是手动触发。</p>
<p>自动触发</p>
<h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3>
<p>当数据操作满足一定的规则，自动触发。详细规则如下</p>
<blockquote>
    <p>默认开启rdb，但没有配置规则，若需要使用或配置则需要在配置文件中将注释放开</p>
</blockquote>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># RDB自动持久化规则</span></span><br><span class="line"><span class="comment"># 当900 秒内有至少有 1 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 当 300 秒内有至少有 10 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 当 60 秒内有至少有 10000 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"><span class="comment"># RDB持久化文件名</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="comment"># 数据持久化文件存储目录</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/var/lib/redis</span></span><br><span class="line"><span class="comment"># bgsave发生错误时是否停止写入，通常为yes</span></span><br><span class="line"><span class="string">stop-writes-on-bgsave-error</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># rdb文件是否使用压缩格式</span></span><br><span class="line"><span class="string">rdbcompression</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># 是否对rdb文件进行校验和检验，通常为yes</span></span><br><span class="line"><span class="string">rdbchecksum</span> <span class="literal">yes</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3>
<h4 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h4>
<p>在客户端执行save命令，会触发一次保存快照。save命令是同步命令，在save执行时，会占用主进程，导致redis其他命令无法使用。在数据量过大时，可能会导致redis反应变慢。</p>
<h4 id="bgsave命令"><a href="#bgsave命令" class="headerlink" title="bgsave命令"></a>bgsave命令</h4>
<p>bgsave命令是异步操作，执行bgsave命令保存快照，可以在生成快照的同时，依然可以正常处理其他命令。bgsave子进程是由主线程fock生成的，它不影响主进程的执行，同时还可以共享主进程的数据</p>
<h4 id="save和bgsave对比"><a href="#save和bgsave对比" class="headerlink" title="save和bgsave对比"></a>save和bgsave对比</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th>命令</th>
                <th>save</th>
                <th>bgsave</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>IO类型</td>
                <td>同步</td>
                <td>异步</td>
            </tr>
            <tr>
                <td>是否阻塞redis</td>
                <td>是</td>
                <td>是(在生成子进程时有短暂阻塞，速度很快，基本没有影响)</td>
            </tr>
            <tr>
                <td>时间复杂度</td>
                <td>O(n)</td>
                <td>O(n)</td>
            </tr>
            <tr>
                <td>优点</td>
                <td>不消耗额外内存</td>
                <td>不阻塞客户端</td>
            </tr>
            <tr>
                <td>缺点</td>
                <td>阻塞客户端命令</td>
                <td>需要fork子进程，消耗内存</td>
            </tr>
        </tbody>
    </table>
</div>
<h3 id="关闭RDB"><a href="#关闭RDB" class="headerlink" title="关闭RDB"></a>关闭RDB</h3>
<p>虽然这种方式可能不需要，但若需要关闭rdb的时候，在redis-shell中只需要执行即可</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">config set save ""</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>当然也可以在配置文件中将 <code>save &quot;&quot;</code> 注释打开，也可以。</p>
<h1 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h1>
<blockquote>
    <p>默认情况下，Redis 异步转储磁盘上的数据集。RDB模式在很多应用场景中已经足够好了，但是 Redis 进程的问题或断电可能会导致几分钟的写入丢失（取决于配置的保存点）。 Append Only File 是另一种持久性模式，可提供更好的持久性。<br>例如，使用默认的数据 fsync 策略（见后面的配置文件）Redis 可能会在服务器断电等戏剧性事件中丢失一秒钟的写入，或者如果 Redis 进程本身发生问题，则会丢失一次写入，但是操作系统仍然正常运行。可以同时启用 AOF 和 RDB 持久化。如果在启动时启用了 AOF，Redis 将加载 AOF，即具有更好持久性保证的文件。</p>
</blockquote>
<p>AOF是通过将修改的每一条指令写入一个记录文件件appendonly.aof中(先写入os cache，每隔一段时间 fsync到磁盘)。这样子的话，在redis重启时，可以通过读取指令来重新写入数据达到重建数据库的目的。</p>
<h2 id="开启AOF"><a href="#开启AOF" class="headerlink" title="开启AOF"></a>开启AOF</h2>
<p>可以通过修改配置文件来打开AOF功能与命令，配置文件中如下：</p>
<blockquote>
    <p>在配置文件中将 <code>appendonly yes</code>注释打开即可<br>
    <figure class="highlight shell">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">appendonly yes</span><br></pre>
                </td>
            </tr>
        </table>
    </figure><br>命令<br>
    <figure class="highlight shell">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">config set appendonly yes</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    </p>
    <h2 id="AOF保存策略"><a href="#AOF保存策略" class="headerlink" title="AOF保存策略"></a>AOF保存策略</h2>
</blockquote>
<ul>
    <li>appendfsync always：每次有新命令追加到 AOF 文件时就执行一次 fsync ，非常慢，也非常安全。</li>
    <li>appendfsync everysec：每秒 fsync 一次，足够快，并且在故障时只会丢失 1 秒钟的数据。</li>
    <li>appendfsync no：从不 fsync ，将数据交给操作系统来处理。更快，也更不安全的选择。<blockquote>
            <p> 推荐（也就是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p>
            <h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2>
        </blockquote>
    </li>
</ul>
<p>由于AOF不断的将命令追加到文件的末尾，因此随着命令的不断增加，AOF文件的体积会变的越来越大。</p>
<p>例如执行INCR命令执行了1000次，在AOF内会生成1000个操作命令。但实际上来说，只需要SET到当前值的命令就可以存储了，前面的999次INCR都是无意义的。</p>
<blockquote>
    <p>实际上可能不止这一种多余的废操作，因此Redis可以对AOF文件进行重写，会把命令进行精简整合成一个新的AOF文件，新的文件里包含生成当前数据的最少命令。</p>
</blockquote>
<p>执行AOF重写的方式也有两种，一种是命令，一种是配置文件</p>
<h3 id="配置文件配置aof重写"><a href="#配置文件配置aof重写" class="headerlink" title="配置文件配置aof重写"></a>配置文件配置aof重写</h3>
<blockquote>
    <p>默认开启重写，但需要先开始aof<br>
    <figure class="highlight shell">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="meta">#</span><span class="bash"> 当前大小大于指定的百分比触发重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF 文件指定最小大小</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre>
                </td>
            </tr>
        </table>
    </figure><br>将此基本大小与当前大小进行比较。如果当前大小大于指定的百分比，则触发重写。此外，您还需要为要重写的 AOF 文件指定最小大小，这对于避免重写 AOF 文件（即使达到百分比增加但仍然很小）很有用。指定百分比为零以禁用自动 AOF 重写功能。</p>
    <h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3>
</blockquote>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">bgrewriteaof</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h1 id="RDB-与-AOF对比"><a href="#RDB-与-AOF对比" class="headerlink" title="RDB 与 AOF对比"></a>RDB 与 AOF对比</h1>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2>
<p><strong>优点</strong></p>
<ul>
    <li>文件紧凑，很适合进行数据备份和容灾恢复</li>
    <li>恢复大量数据时RDB速度快</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
    <li>数据量越大，二进制保存到磁盘会耗时越久</li>
    <li>遇见意外的情况下，如宕机等，可能导致未持久化的数据完全丢失<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2>
    </li>
</ul>
<p><strong>优点</strong></p>
<ul>
    <li>可以使用不同的fsync策略，在默认的每秒fsync下，最多丢失1s的数据</li>
    <li>AOF的持久化记录是文件追加，保存速度快</li>
    <li>存储的是操作命令，AOF文件易读，可以轻易的进行文件分析</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
    <li>文件体积较RDB大</li>
    <li>重启时恢复数据速度较慢</li>
</ul>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th>类型</th>
                <th>RDB</th>
                <th>AOF</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>启动优先级</td>
                <td>低</td>
                <td>高</td>
            </tr>
            <tr>
                <td>体积</td>
                <td>小</td>
                <td>大</td>
            </tr>
            <tr>
                <td>宕机恢复速度</td>
                <td>快</td>
                <td>慢</td>
            </tr>
            <tr>
                <td>数据安全性</td>
                <td>可能丢失数据</td>
                <td>每秒fsync最多丢失1s数据</td>
            </tr>
        </tbody>
    </table>
</div>
<h2 id="是rdb还是aof？"><a href="#是rdb还是aof？" class="headerlink" title="是rdb还是aof？"></a>是rdb还是aof？</h2>
<p>使用可以根据需要来自行选择，如果对数据丢失不敏感的，使用rdb即可。当然在生产环境使用时，可以两种方式都启用。rdb文件可以用来做备份，aof文件来保证数据的安全性</p>
<h2 id="RDB与AOF混用"><a href="#RDB与AOF混用" class="headerlink" title="RDB与AOF混用"></a>RDB与AOF混用</h2>
<blockquote>
    <p>必须先开启aof</p>
</blockquote>
<pre><code>在redis4.0之后，出现了一个新的持久化选项——混合持久化。    可以通过以下配置开启混合持久化
</code></pre>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash"> 在配置文件中设置</span></span><br><span class="line">aof‐use‐rdb‐preamble yes</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>开启混合持久化后，AOF在重写时，不是单纯的把命令写入AOF文件，而是把重写这一刻之前的内存数据做RDB快照处理，在重写之后的还是继续使用AOF命令的形式保存。这样aof文件里就有历史的RDB快照和增量的AOF命令。<br> 我们知道，RDB文件的恢复速度比AOF快的多，因此这种混合的模式，在redis重启的时候能大大提升效率。</p>
<h1 id="Redis淘汰机制"><a href="#Redis淘汰机制" class="headerlink" title="Redis淘汰机制"></a>Redis淘汰机制</h1>
<p>将内存使用限制设置为指定的字节数。当达到内存限制时，Redis 将尝试根据选择的驱逐策略删除键。</p>
<p>MAXMEMORY 策略：</p>
<blockquote>
    <p>当达到 maxmemory 时，Redis 将如何选择要删除的内容。可以从以下行为中选择一项</p>
</blockquote>
<p>noeviction：默认禁止驱逐数据。内存不够使用时，对申请内存的命令报错。</p>
<p>volatile-lru：从设置了过期时间的数据集中淘汰最近没使用的数据。</p>
<p>volatile-ttl：从设置了过期时间的数据集中淘汰即将要过期的数据。</p>
<p>volatile-random：从设置了过期时间的数据中随机淘汰数据。</p>
<p>allkeys-lru：淘汰最近没使用的数据。</p>
<p>allkeys-random：随机淘汰数据。</p>
<blockquote>
    <p>注意：使用上述任何一种策略，当没有合适的键用于驱逐时，Redis 将在需要更多内存的写操作时返回错误。这些通常是创建新密钥、添加数据或修改现有密钥的命令。一些示例是：SET、INCR、HSET、LPUSH、SUNIONSTORE、SORT（由于 STORE 参数）和 EXEC（如果事务包括任何需要内存的命令）。</p>
</blockquote>
<p>如果 Redis 无法根据策略删除键，或者如果策略设置为“noeviction”，Redis 将开始对会使用更多内存的命令（如 SET、LPUSH 等）回复错误信息，并将继续回复像 GET 这样的只读命令。简而言之…如果附加了副本，建议为 maxmemory 设置一个下限，以便系统上有一些空闲 RAM 用于副本输出缓冲区（但如果策略是“noeviction”，则不需要这样做）</p>
<p>警告：如果您将副本附加到启用了 maxmemory 的实例，则从使用的内存计数中减去提供副本所需的输出缓冲区的大小，以便网络问题重新同步不会触发密钥被逐出的循环，并且在将副本的输出缓冲区填满，删除键的 DEL 触发删除更多键，依此类推，直到数据库完全清空</p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>NoSQL</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes NFS实践</title>
    <url>/2760374101.html</url>
    <content><![CDATA[<h2 id="NFS实践"><a href="#NFS实践" class="headerlink" title="NFS实践"></a>NFS实践</h2>
<h3 id="安装NFS"><a href="#安装NFS" class="headerlink" title="安装NFS"></a>安装NFS</h3>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 下载nfs相关软件（全成员）</span></span><br><span class="line">yum install -y nfs-common nfs-utils rpcbind</span><br><span class="line"><span class="comment"># 创建NFS共享文件夹，以及授权（需要root）</span></span><br><span class="line">mkdir /nfs &amp;&amp; chmod 766 /nfs &amp;&amp; chown nfsnobody /nfs/</span><br><span class="line"><span class="comment"># 声明共享文件权限（NFS主服务器）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/nfs *(rw,no_root_squash,no_all_squash,sync)"</span> &gt;&gt; /etc/exports</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">exportfs -r</span><br><span class="line">systemctl restart rpcbind &amp;&amp; systemctl restart nfs &amp;&amp; systemctl status rpcbind &amp;&amp; systemctl status nfs</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4>
<blockquote>
    <p>IP: 主机地址</p>
</blockquote>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 查看共享目录</span></span><br><span class="line">showmount -e IP</span><br><span class="line">mkdir /<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 将本机目录（test）挂载至目标目录（nfs）</span></span><br><span class="line">mount -t nfs IP:/nfs /<span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> /<span class="built_in">test</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"asdsadsa"</span> &gt;&gt; a.txt</span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">umount /<span class="built_in">test</span> &amp;&amp; rm -rf /<span class="built_in">test</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="部署PV"><a href="#部署PV" class="headerlink" title="部署PV"></a>部署PV</h3>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv-master</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.27</span> <span class="comment"># 节点ip</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h3>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">"nfs"</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3>
<figure class="highlight maxima">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">kubectl <span class="built_in">get</span> <span class="built_in">pv</span></span><br><span class="line">kubectl desc</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu3v3oji9fj62090u047b02.jpg" alt="image-20210903233505574"></p>
<figure class="highlight lsl">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># <span class="number">192.168</span><span class="number">.0</span><span class="number">.27</span> /nfs</span><br><span class="line">echo <span class="string">"asds"</span>  &gt; index.html</span><br><span class="line">kubectl get pod -o wid</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu3vd2jo46j61vk04uace02.jpg" alt="image-20210903234426686"></p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">curl 10.244.1.53</span><br><span class="line"><span class="comment"># asds</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
        <category>NFS</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy-splash对接代理</title>
    <url>/3018.html</url>
    <content><![CDATA[<h2 id="Scrapy-Splash使用及代理失败处理"><a href="#Scrapy-Splash使用及代理失败处理" class="headerlink" title="Scrapy-Splash使用及代理失败处理"></a>Scrapy-Splash使用及代理失败处理</h2>
<p>在日常做爬虫的时候肯定遇到这么一些问题，网页js渲染，接口加密等，以至于无法有效的获取数据，那么此时若想获取数据大致有两种方向，<code>硬刚加密参数</code>或<code>使用渲染工具</code></p>
<p>二者的各有所不同？</p>
<p>刚加密参数：</p>
<ul>
    <li>
        <p>优势：爬取速度快，实效性。损耗资源更少</p>
    </li>
    <li>
        <p>劣势：耗费时间长，不懂的完全不会，会的也不一定能完全处理。难以在有效的时间内获取到数据</p>
    </li>
</ul>
<a id="more"></a>
<p>渲染工具：webdervi，puppeteer，pyppeteer，splash</p>
<ul>
    <li>优势：见效快、新手友好</li>
    <li>劣势：爬取速度较慢、数据实效性难以保证、损耗资源多</li>
</ul>
<p>那么相信做爬虫的小伙伴一定会有相对应的权衡</p>
<blockquote>
    <p>个人建议：如果可以刚参数，尽量刚参数。一方面是为了自己的在爬虫这条路上逐步前进，另一方面是更加符合</p>
    <p>当然如果实在搞不掉了，也可以使用渲染工具来进行模拟爬取</p>
</blockquote>
<h3 id="splash是什么？"><a href="#splash是什么？" class="headerlink" title="splash是什么？"></a>splash是什么？</h3>
<p><strong>Splash-一种JavaScript渲染服务</strong></p>
<p>Splash是一种javascript渲染服务。这是一个带有HTTP API的轻量级Web浏览器，使用Twisted和QT5在Python 3中实现。（扭曲的）QT反应器用于使服务完全异步，从而允许通过QT主循环利用Webkit并发性。Splash的一些功能：</p>
<ul>
    <li>并行处理多个网页；</li>
    <li>获取HTML结果和/或获取屏幕截图；</li>
    <li>关闭图片或使用Adblock Plus规则来加快渲染速度；</li>
    <li>在页面上下文中执行自定义JavaScript；</li>
    <li>编写Lua浏览<a href="https://splash.readthedocs.io/en/stable/scripting-tutorial.html#scripting-tutorial" target="_blank" rel="noopener">脚本</a>;</li>
    <li>在<a href="https://splash.readthedocs.io/en/stable/kernel.html#splash-jupyter" target="_blank" rel="noopener">Splash-Jupyter</a> Notebook中开发Splash Lua脚本。</li>
    <li>以HAR格式获取详细的渲染信息。</li>
</ul>
<p>话不多说，直接上splash。谁让我菜呢？</p>
<h3 id="splash的安装"><a href="#splash的安装" class="headerlink" title="splash的安装"></a>splash的安装</h3>
<p>官方建议直接使用docker进行运行，<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">docker安装</a></p>
<p>安装完成之后直接运行一下命令，使用docker运行splash</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 拉取splash</span></span><br><span class="line">docker pull scrapinghub/splash</span><br><span class="line"><span class="comment"># 运行splash </span></span><br><span class="line">docker run -p 8050:8050 --name splash scrapinghub/splash</span><br><span class="line">docker run -itd --name splash  -p 8050:8050 scrapinghub/splash --<span class="built_in">disable</span>-lua-sandbox</span><br><span class="line"><span class="comment"># -p 向外暴露端口</span></span><br><span class="line"><span class="comment"># -d 守护进程方式运行(后台运行)</span></span><br><span class="line"><span class="comment"># --name 自定义昵称</span></span><br><span class="line"><span class="comment"># --disable-lua-sandbox 关闭沙盒模式。如果是在测试环境上可以直接去体验一下，功能更全。如果是在开发环境的话那就直接用正式的，虽然花里胡哨，但安全性并不好</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此时你若无意外你可以访问’<a href="http://localhost:8050/&#39;，就可以看到这样的画面" target="_blank" rel="noopener">http://localhost:8050/&#39;，就可以看到这样的画面</a></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glt2mblmo3j31kh0u0q51.jpg" alt=""></p>
<p>ok，到这里你就可以正常的使用它了，此时对于新手朋友的关照就已经结束了。接下来让我们对接scrapy。请确保scrapy可以正常运行。</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">scrapy startproject &lt;projectName&gt;</span><br><span class="line"><span class="comment"># 创建spider</span></span><br><span class="line"><span class="built_in">cd</span> &lt;projectName&gt;</span><br><span class="line">scrapy genspider httpbin httpbin.org/get</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此时的项目结构应该如下</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glt3ab0oyij30kc0fc3yn.jpg" alt=""></p>
<h3 id="scrapy-splash试用前配置"><a href="#scrapy-splash试用前配置" class="headerlink" title="scrapy-splash试用前配置"></a>scrapy-splash试用前配置</h3>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">pip3 install scrapy-splash</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>settings.py</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure scrapy-splash(加入)</span></span><br><span class="line">SPLASH_URL = <span class="string">'http://localhost:8050'</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Httbin.py</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy_splash <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttbinSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'httpbin'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['httbin.org/get']</span></span><br><span class="line">    start_urls = [<span class="string">'https://httpbin.org/get'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.start_urls[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">yield</span> SplashRequest(</span><br><span class="line">            url=self.start_urls[<span class="number">0</span>],</span><br><span class="line">            callback=self.parse</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response, **kwargs)</span>:</span></span><br><span class="line">        print(response)</span><br><span class="line">        print(response.text)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 运行爬虫</span></span><br><span class="line">scrapy crawl httpbin</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>返回打印结果如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">2020-12-19 13:21:51 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://httpbin.org/get via http://localhost:8050/render.html&gt; (referer: None)</span><br><span class="line">&lt;200 https://httpbin.org/get&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre style=<span class="string">"word-wrap: break-word; white-space: pre-wrap;"</span>&gt;&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"en"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Scrapy/2.4.0 (+https://scrapy.org)"</span>, </span><br><span class="line">    <span class="string">"X-Amzn-Trace-Id"</span>: <span class="string">"Root=1-5fdd8dea-4ba769963b76178b56cd9724"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"220.202.249.12"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">---略</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>我们用浏览器访问一下”<a href="https://httpbin.org/get" target="_blank" rel="noopener">https://httpbin.org/get</a>“</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate, br"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"</span>, </span><br><span class="line">    <span class="string">"Dnt"</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"Sec-Fetch-Dest"</span>: <span class="string">"document"</span>, </span><br><span class="line">    <span class="string">"Sec-Fetch-Mode"</span>: <span class="string">"navigate"</span>, </span><br><span class="line">    <span class="string">"Sec-Fetch-Site"</span>: <span class="string">"none"</span>, </span><br><span class="line">    <span class="string">"Sec-Fetch-User"</span>: <span class="string">"?1"</span>, </span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"</span>, </span><br><span class="line">    <span class="string">"X-Amzn-Trace-Id"</span>: <span class="string">"Root=1-5fdd8e50-48c6e9ec6dc7274967b9a493"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"220.202.249.12"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Ok，基本的使用也就到这里ok了。那么该如何配置代理呢？访问量一大大多情况下都会封ip</p>
<h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4>
<p>如下</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">import scrapy</span><br><span class="line">from scrapy_splash import SplashRequest</span><br><span class="line"></span><br><span class="line">class HttbinSpider(scrapy.Spider):</span><br><span class="line">    name = <span class="string">'httbin'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['httbin.org/get']</span></span><br><span class="line">    start_urls = [<span class="string">'https://httpbin.org/get'</span>]</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        <span class="built_in">print</span>(self.start_urls[0])</span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; U; Android 0.5; en-us) AppleWebKit/522  (KHTML, like Gecko) Safari/419.3'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># yield scrapy.Request(url=self.start_urls[0], callback=self.parse, headers=header)</span></span><br><span class="line">        yield SplashRequest(</span><br><span class="line">            url=self.start_urls[0],</span><br><span class="line">            callback=self.parse,</span><br><span class="line">            args=&#123;</span><br><span class="line">                <span class="string">"wait"</span>: 3,</span><br><span class="line">                <span class="string">"proxy"</span>: <span class="string">'http://119.114.100.159:22992'</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def parse(self, response, **kwargs):</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果如下</span></span><br><span class="line">2020-12-19 13:31:06 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://httpbin.org/get via http://localhost:8050/render.html&gt; (referer: None)</span><br><span class="line">&lt;200 https://httpbin.org/get&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre style=<span class="string">"word-wrap: break-word; white-space: pre-wrap;"</span>&gt;&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"en"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Scrapy/2.4.0 (+https://scrapy.org)"</span>, </span><br><span class="line">    <span class="string">"X-Amzn-Trace-Id"</span>: <span class="string">"Root=1-5fdd9017-7ef5ac1d6c66d99b52b200c0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"119.114.100.159"</span>, 	<span class="comment"># 代理修改完成</span></span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>使用中间件的方式设置代理</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHttpProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">	      request.meta[<span class="string">'splash'</span>][<span class="string">'args'</span>][<span class="string">'proxy'</span>] = proxyServer	<span class="comment"># （eg：'http://119.114.100.159:22992'）</span></span><br><span class="line">        <span class="comment"># 认证消息，没有可以不写</span></span><br><span class="line">	      <span class="comment"># request.headers["Proxy-Authorization"] = proxyAuth</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此时的中间件设置为</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'learnSplash.middlewares.MyHttpProxyMiddleware'</span>: 724,</span><br><span class="line">    <span class="string">'learnSplash.middlewares.MyUserAgentMiddleware'</span>: 400,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: 723,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: 725,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: 810,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="对接代理错误点总结："><a href="#对接代理错误点总结：" class="headerlink" title="对接代理错误点总结："></a>对接代理错误点总结：</h3>
<ol>
    <li>
        <p>```python</p>
        <h1 id="settings中"><a href="#settings中" class="headerlink" title="settings中"></a>settings中</h1>
        <p>SPLASH_URL = ‘<a href="http://localhost:8050" target="_blank" rel="noopener">http://localhost:8050</a>‘<br>错写成SPLASH_URL = ‘localhost:8050’ (错误。验证方式command+鼠标左点击，若能正常显示splash页面即可)</p>
        <figure class="highlight 1c">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line"></span><br><span class="line"><span class="number">2</span>. ```python</span><br><span class="line">   <span class="meta"># 爬虫文件中</span></span><br><span class="line">   args=&#123;</span><br><span class="line">   <span class="string">"wait"</span>: <span class="number">3</span>,</span><br><span class="line">   <span class="string">"proxy"</span>: 'http://119.114.100.159:<span class="number">2299</span>2'</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta"># proxy，书写格式不对，缺少http等字段</span></span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
    <li>
        <pre><code class="lang-python"># 中间键设置代理
# 错误点一：书写格式不对，缺少http等字段
# 权重设置错误
DOWNLOADER_MIDDLEWARES = {
    &#39;learnSplash.middlewares.MyHttpProxyMiddleware&#39;: 724,
    &#39;learnSplash.middlewares.MyUserAgentMiddleware&#39;: 400,
    &#39;scrapy_splash.SplashCookiesMiddleware&#39;: 723,
    &#39;scrapy_splash.SplashMiddleware&#39;: 725,
    &#39;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&#39;: 810,

}
# MyHttpProxyMiddleware的权重必须小于等于725，否则设定不成功。将使用原始ip访问
</code></pre>
    </li>
</ol>
<h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://splash.readthedocs.io/en/stable/" target="_blank" rel="noopener">官方文档</a></h3>
<p><a href="https://github.com/PowerSpider/ScrapySplashTest" target="_blank" rel="noopener">完整代码</a></p>
]]></content>
      <categories>
        <category>技术杂谈</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>splash</tag>
        <tag>scrapy-splash</tag>
      </tags>
  </entry>
  <entry>
    <title>sql,何必在忆-基础篇</title>
    <url>/44075.html</url>
    <content><![CDATA[<p>还记得那是在2018年的十月的某个日子，虽早已入秋，但夏日的炎热却丝毫不减退散。那时的我正捧着一本<code>SQL Server程序设计</code>的白蓝皮书与九栋315的狗子们，匆匆的走向<code>j1-402</code>进行了我们人生中第一次<code>SQL数据库的学习</code>，时光总是戏人，现实总是玩笑。当初的几个伙伴都走向了各行各业，而唯有我编程课，问啥啥不会，写啥啥就废的我进入了IT行业。说来实在嘲讽，缅怀那些我错过的编程课，致那些年说过无数次“让我学<code>SQL</code>,根本不可能”，我承认我打脸了。正如此章的title一般，“SQL语句， 何必在忆？”</p>
<p>很久之前就学了SQL，然而又忘记，今天正式系统的性的回顾一下，温故而知新。可以为师矣</p>
<a id="more"></a>
<h2 id="表属性"><a href="#表属性" class="headerlink" title="表属性"></a>表属性</h2>
<h3 id="表的属性"><a href="#表的属性" class="headerlink" title="表的属性"></a>表的属性</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">存储引擎:</span><br><span class="line">InnoDB（默认的）</span><br><span class="line">字符集和排序规则:</span><br><span class="line">utf8</span><br><span class="line">utf8mb4</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="列的属性"><a href="#列的属性" class="headerlink" title="列的属性"></a>列的属性</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">约束(一般建表时添加):</span><br><span class="line">primary key ：主键约束</span><br><span class="line">设置为主键的列，此列的值必须非空且唯一，主键在一个表中只能有一个，但是可以有多个列一起构成。 作为聚簇索引</span><br><span class="line">not null      ：非空约束</span><br><span class="line">列值不能为空，也是表设计的规范，尽可能将所有的列设置为非空。可以设置默认值为0</span><br><span class="line">unique key ：唯一键</span><br><span class="line">列值不能重复</span><br><span class="line">unsigned ：无符号</span><br><span class="line">针对数字列，非负数。</span><br><span class="line"></span><br><span class="line">其他属性:</span><br><span class="line">key :索引</span><br><span class="line">可以在某列上建立索引，来优化查询,一般是根据需要后添加</span><br><span class="line">default           :默认值</span><br><span class="line">列中，没有录入值时，会自动使用default的值填充</span><br><span class="line">auto_increment:自增长</span><br><span class="line">针对数字列，顺序的自动填充数据（默认是从1开始，将来可以设定起始点和偏移量）</span><br><span class="line">comment : 注释</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="sql-mode"><a href="#sql-mode" class="headerlink" title="sql_mode"></a>sql_mode</h3>
<p>作用：影响sql执行行为，规范SQL语句的书写方式(例如除数不能为0)</p>
<p>可以使用select @sql_mode查看(各版本有所出入)</p>
<h3 id="字符集-charset-及校对规则-Collation"><a href="#字符集-charset-及校对规则-Collation" class="headerlink" title="字符集(charset)及校对规则(Collation)"></a>字符集(charset)及校对规则(Collation)</h3>
<h4 id="字符集："><a href="#字符集：" class="headerlink" title="字符集："></a>字符集：</h4>
<ul>
    <li>utf8：最大存储长度，单个字符最多3字节</li>
    <li>utf8mb4：最大存储长度，单个字符最多4字节</li>
</ul>
<p>常用于建库建表时</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> dbname <span class="keyword">charset</span> utf8mb4;</span><br><span class="line"><span class="comment"># 查看数据库的字符集合</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> dbname;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="校对规则"><a href="#校对规则" class="headerlink" title="校对规则"></a>校对规则</h4>
<p>每种字符集，有多种校对规则(排序)，例如常见的ASCII编码表</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">show</span> <span class="keyword">collation</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>作用：影响排序的操作</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>
<h4 id="text类型"><a href="#text类型" class="headerlink" title="text类型"></a>text类型</h4>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmd63x1tzoj311o0u0go0.jpg" alt=""></p>
<h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmd64lw40rj313c0kegn5.jpg" alt=""></p>
<p><code>*</code>:这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。</p>
<h4 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h4>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmd66b11g5j313o0piabh.jpg" alt=""></p>
<p><code>*</code>即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。</p>
<h2 id="什么是SQL语句"><a href="#什么是SQL语句" class="headerlink" title="什么是SQL语句"></a>什么是SQL语句</h2>
<p>SQL语句是结构化查询语言(Structured Query Language)的简称,是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>
<h2 id="SQL语句的类型"><a href="#SQL语句的类型" class="headerlink" title="SQL语句的类型"></a>SQL语句的类型</h2>
<p>数据查询语言（<a href="https://baike.baidu.com/item/DQL" target="_blank" rel="noopener">DQL</a>:Data Query Language）：其语句，也称为“数据检索<a href="https://baike.baidu.com/item/语句" target="_blank" rel="noopener">语句</a>”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字<a href="https://baike.baidu.com/item/SELECT/10735068" target="_blank" rel="noopener">SELECT</a>是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其它类型的SQL语句一起使用。</p>
<p><a href="https://baike.baidu.com/item/数据操作语言" target="_blank" rel="noopener">数据操作语言</a>（DML：Data Manipulation Language）：其语句包括动词<a href="https://baike.baidu.com/item/INSERT" target="_blank" rel="noopener">INSERT</a>、<a href="https://baike.baidu.com/item/UPDATE" target="_blank" rel="noopener">UPDATE</a>和<a href="https://baike.baidu.com/item/DELETE" target="_blank" rel="noopener">DELETE</a>。它们分别用于添加、修改和删除。</p>
<p>事务控制语言（TCL）：它的语句能确保被DML语句影响的表的所有行及时得以更新。包括COMMIT（提交）命令、SAVEPOINT（保存点）命令、ROLLBACK（回滚）命令。</p>
<p><a href="https://baike.baidu.com/item/数据控制语言" target="_blank" rel="noopener">数据控制语言</a>（DCL）：它的语句通过GRANT或REVOKE实现权限控制，确定单个用户和用户组对<a href="https://baike.baidu.com/item/数据库对象" target="_blank" rel="noopener">数据库对象</a>的访问。某些RDBMS可用GRANT或REVOKE控制对<a href="https://baike.baidu.com/item/表单" target="_blank" rel="noopener">表单</a>个列的访问。</p>
<p>数据定义语言（<a href="https://baike.baidu.com/item/DDL/21997" target="_blank" rel="noopener">DDL</a>）：其语句包括动词CREATE,ALTER和DROP。在数据库中创建新表或修改、删除表（CREATE TABLE 或 DROP TABLE）；为表加入索引等。</p>
<p>指针控制语言（CCL）：它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p>
<p>比较常用的有<code>DDL(数据定义语言)</code>`DCL(数据控制语言)<code>\</code>DML(数据操作语言)<code>\</code>DQL(数据查询语言)`</p>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">?         (\?) Synonym <span class="keyword">for</span> `help<span class="string">'.           # 帮助信息                                                                                </span></span><br><span class="line"><span class="string">clear     (\c) Clear the current input statement.  清空此行sql                                                                         </span></span><br><span class="line"><span class="string">connect   (\r) Reconnect to the server. Optional arguments are db and host.                                                  </span></span><br><span class="line"><span class="string">delimiter (\d) Set statement delimiter.                                                                                      </span></span><br><span class="line"><span class="string">edit      (\e) Edit command with $EDITOR.                                                                                    </span></span><br><span class="line"><span class="string">ego       (\G) Send command to mysql server, display result vertically. 格式化输出</span></span><br><span class="line"><span class="string">exit      (\q) Exit mysql. Same as quit.	退出登陆 ctrl(control) + d </span></span><br><span class="line"><span class="string">go        (\g) Send command to mysql server.</span></span><br><span class="line"><span class="string">help      (\h) Display this help.</span></span><br><span class="line"><span class="string">nopager   (\n) Disable pager, print to stdout.</span></span><br><span class="line"><span class="string">tee       (\T) Set outfile [to_outfile]. Append everything into given outfile. # 记录日志（语句+结果） eg:tee /tmp/mysql.log</span></span><br><span class="line"><span class="string">notee     (\t) Don'</span>t write into outfile. 不记录日志</span><br><span class="line">pager     (\P) <span class="builtin-name">Set</span> PAGER [to_pager]. <span class="builtin-name">Print</span> the query results via PAGER.</span><br><span class="line"><span class="builtin-name">print</span>     (\p) <span class="builtin-name">Print</span> current command.</span><br><span class="line">prompt    (\R) Change your mysql prompt.</span><br><span class="line">quit      (\q) Quit mysql.</span><br><span class="line">rehash    (\#) Rebuild completion hash.</span><br><span class="line">source    (\.) Execute an SQL<span class="built_in"> script </span>file. Takes a file name as an argument. 导入脚步，相当于 &lt;</span><br><span class="line">status    (\s) <span class="builtin-name">Get</span> status information <span class="keyword">from</span> the server.</span><br><span class="line">system    (\!) Execute a<span class="built_in"> system </span>shell command.</span><br><span class="line">use       (\u) Use another database. Takes database name as argument.</span><br><span class="line">charset   (\C) Switch <span class="keyword">to</span> another charset. Might be needed <span class="keyword">for</span> processing binlog with multi-byte charsets.</span><br><span class="line">warnings  (\W) Show warnings after every statement.</span><br><span class="line">nowarning (\w) Don<span class="string">'t show warnings after every statement.</span></span><br><span class="line"><span class="string">resetconnection(\x) Clean session context.</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3>
<h4 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL 数据定义语言"></a>DDL 数据定义语言</h4>
<p>在日常中DDL多用于库、表的管理.</p>
<p><strong>库名与库属性</strong></p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">#增</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> dbname</span><br><span class="line">eg: <span class="keyword">create</span> <span class="keyword">database</span> dbname <span class="keyword">charset</span> utf8mb4</span><br><span class="line"><span class="comment">## 删</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> dbname</span><br><span class="line"><span class="comment">## 改 (从小到大改， utf8 -&gt; utf8mb4, 严格超集)</span></span><br><span class="line"><span class="keyword">alter</span>  <span class="keyword">database</span> dbname 将修改的属性名 将要修改的属性值</span><br><span class="line"><span class="comment">## 查</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>建库规范：</p>
    <p>1.库名不能有大写字母,不能太长(&lt;30字符) 多平台兼容性问题</p>
    <p>2.建库要加字符集</p>
    <p>3.库名不能有数字开头</p>
    <p>4.库名要和业务相关</p>
</blockquote>
<p><strong>表</strong></p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tableName(</span><br><span class="line">列<span class="number">1</span>  属性（数据类型、约束、其他属性） ，</span><br><span class="line">列<span class="number">2</span>  属性，</span><br><span class="line">列<span class="number">3</span>  属性</span><br><span class="line">)</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">id</span>      <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">sname   <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">sage    <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">sgender ENUM(<span class="string">'m'</span>,<span class="string">'f'</span>,<span class="string">'n'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'n'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span> ,</span><br><span class="line">sfz     <span class="built_in">CHAR</span>(<span class="number">18</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>  <span class="keyword">COMMENT</span> <span class="string">'身份证'</span>,</span><br><span class="line">intime  <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NOW</span>() <span class="keyword">COMMENT</span> <span class="string">'入学时间'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span> <span class="string">'学生表'</span>;</span><br><span class="line"></span><br><span class="line">id INT NOT NULL PRIMARY KEY AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'全局id'</span>, </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TableName2 <span class="keyword">LIKE</span> TableName1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tableName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span>(<span class="keyword">DROP</span>) 属性（数据类型、约束、其他属性）</span><br><span class="line">eg:</span><br><span class="line"><span class="comment"># 在stuent表中添加qq列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> qq <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'qq'</span>;</span><br><span class="line"><span class="comment"># 在sname后加微信列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> wechat <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>  <span class="keyword">COMMENT</span> <span class="string">'微信号'</span> <span class="keyword">AFTER</span> sname ;</span><br><span class="line"><span class="comment"># 在id列前加一个新列num</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数字'</span> <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除列 </span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> <span class="keyword">num</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> qq;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> wechat;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将sgender 改为 sg 数据类型改为 CHAR 类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">change</span> sgender sg <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'n'</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用的时候，一定要注意：</span><br><span class="line">修改数据类型，修改字段位置  <span class="comment">---用modify</span></span><br><span class="line">修改名字 <span class="comment">--就用change</span></span><br><span class="line"><span class="comment"># 范围大用change，小用modify。</span></span><br><span class="line"><span class="comment"># 均需要加入类型，限制</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ol>
        <li>表名小写</li>
        <li>不能是数字开头</li>
        <li>注意字符集和存储引擎</li>
        <li>表名和业务有关</li>
        <li>选择合适的数据类型，简短的、长度合适的数据类型</li>
        <li>每个列都要有注释</li>
        <li>每个列设置为非空，无法保证非空，用0来填充。</li>
        <li>必须有主键</li>
    </ol>
</blockquote>
<h4 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL 数据控制语言"></a>DCL 数据控制语言</h4>
<p>控制就是操作权限，而在DCL之中，主要有两个语法：GRANT,REVOKE</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 用户管理</span></span><br><span class="line">create<span class="built_in"> user </span>xxx@<span class="string">"白名单"</span> indentified by <span class="string">"password"</span></span><br><span class="line">drop user</span><br><span class="line">alter user</span><br><span class="line">select user,host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="comment"># 权限</span></span><br><span class="line"><span class="comment">## 查看所有权限列表</span></span><br><span class="line">show privileges;</span><br><span class="line">all </span><br><span class="line">with grant option</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户权限</span></span><br><span class="line">show grant UserName@<span class="string">"白名单"</span></span><br><span class="line">select * <span class="keyword">from</span> mysql.user\G;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfo1pre7wj31hy0u0afz.jpg" alt=""></p>
<p><strong>DCL</strong></p>
<p>授权</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">on</span> 对象 <span class="keyword">to</span> 用户 <span class="keyword">identified</span> <span class="keyword">by</span> “密码”</span><br><span class="line"><span class="comment"># mysql 8.0+:(中文表示，可自定制)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户 <span class="keyword">identified</span> <span class="keyword">by</span> “密码”</span><br><span class="line"><span class="keyword">grant</span> 权限<span class="number">1</span>，权限<span class="number">2</span>，权限<span class="number">3.</span>.. <span class="keyword">on</span> 对象 <span class="keyword">to</span> 用户 <span class="keyword">identified</span> <span class="keyword">by</span> “密码”</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>权限:<br> ALL: 管理员(不包含“ Grant option”，给他人授权)<br> 权限1，权限2，权限3…： 普通人员(开发人员)<br> Grant option</p>
<p>对象范围: 库，表</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">“.”</th>
                <th style="text-align:center">—-&gt; chmod -R 755 /</th>
                <th style="text-align:center">管理员</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">userName.*</td>
                <td style="text-align:center">—-&gt; chmod -R 755 userName/</td>
                <td style="text-align:center">普通用户</td>
            </tr>
            <tr>
                <td style="text-align:center">userName.t1</td>
                <td style="text-align:center">—-&gt; chmod -R 755 userName/t1</td>
            </tr>
        </tbody>
    </table>
</div>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 授权</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">update</span>, <span class="keyword">select</span> ... <span class="keyword">on</span> 库名.表的范围[*(所有), 表名<span class="number">1</span>] <span class="keyword">to</span> userName@“白名单”</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Mysql授权表</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">user</th>
                <th style="text-align:center"><em>.</em></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">db</td>
                <td style="text-align:center">db.*</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:center">Tables_priv</td>
                <td style="text-align:center">db.table</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:center">Colums</td>
                <td style="text-align:center">列</td>
                <td></td>
            </tr>
            <tr>
                <td style="text-align:center">Procs_priv</td>
                <td style="text-align:center">存储过程中的权限</td>
            </tr>
        </tbody>
    </table>
</div>
<p>回收权限</p>
<figure class="highlight applescript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">revoke 权限 <span class="keyword">on</span> 库 <span class="keyword">from</span> 用户@“白名单”</span><br><span class="line"><span class="comment"># 具体eg如上</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>拓展，忘记root密码了该怎么办？</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 需知</span></span><br><span class="line"><span class="comment"># --skip-grant-tables 跳过授权表</span></span><br><span class="line"><span class="comment"># --skip-network  关闭TCP/IP连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.关闭数据库(任选其一)</span></span><br><span class="line">service mysqld stop</span><br><span class="line">/etc/init.d/mysqld stop</span><br><span class="line">pkill mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.跳过验证(任选其一)</span></span><br><span class="line">service mysqld start --skip-grant-tables</span><br><span class="line">service mysqld restart --skip-grant-tables</span><br><span class="line">mysql_safe --skip-grant-tables &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.禁止远程连接</span></span><br><span class="line">service mysqld start --skip-grant-tables --skip-network </span><br><span class="line">service mysqld restart --skip-grant-tables --skip-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.修改密码</span></span><br><span class="line"><span class="comment">## 4.1手动加载授权表</span></span><br><span class="line">flush privileges</span><br><span class="line"><span class="comment">## 4.2修改密码</span></span><br><span class="line">alter<span class="built_in"> user </span>root@<span class="string">"localhost"</span> indentified by <span class="string">"new Passwd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.重启数据库</span></span><br><span class="line">service mysqld restart</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>原理探究</strong></p>
<p>说到这个，那就不得不从mysql的<code>server</code>层说起了，mysql的架构图如下(仅关键部分)</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmgl5sg1n2j30rq0ic3yp.jpg" alt=""></p>
<p>当我们忘记密码的时候,改怎么办呢？</p>
<p>这就对于我们平时对于mysql的模型有所考察了，如果你知道mysql的他内部到底是如何运行的,那么只需要在合适的地方，按照我们所想的给他“绕道而行”，是否就可以绕过这个密码验证了呢？答案是当然可以的。</p>
<p>首先我们介绍一下上面这副图中执行流程，当我们启动mysql服务的时候，系统会自动帮我们做一下这些事儿</p>
<ol>
    <li>首先提供可连接的协议，也就是提供服务</li>
    <li>打开用户与密码校验，以处理将要连接的客户</li>
    <li>验证成功，分配独立的连接线程</li>
</ol>
<p>如果我们需要跳过密码校验,那么只需要做以下几件事。</p>
<ol>
    <li>让系统重启</li>
    <li>在重启的过程中停掉用户与密码校验</li>
</ol>
<p>这样我们就可以连接了，但是还不够。尽然已经停掉了。此时的我们无法修改密码.(跳过验证，而不是把验证功能移除了)</p>
<p>那么我们此时还需要把验证功能加载进来，然后对验证的表进行修改。</p>
<h4 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML 数据操作语言"></a>DML 数据操作语言</h4>
<p>这个也是我们日常中用的最多的地方，应为建库表，改权限，改密码。修改等等什么的并不是每次都要嘛.这个也很好理解</p>
<blockquote>
    <p>DML 数据操作语言 对表中的数据行进行增、删、改</p>
</blockquote>
<p><strong>insert</strong></p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">单行数据</span><br><span class="line">INSERT INTO tableName(key1, key2, key3..) VALUES(value1, value2,value3...) [SELECT * FROM tableName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行数据</span></span><br><span class="line">INSERT INTO tableName(key1, key2, key3..) VALUES \</span><br><span class="line">(value1, value2,value3...)</span><br><span class="line">(value1, value2,value3...)</span><br><span class="line">(value1, value2,value3...);</span><br><span class="line">...</span><br><span class="line">[SELECT * FROM tableName]</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>插入时, key1,key2,key3 必须与value1，value2， value3 数量一致</p>
    <p>插入对应字段</p>
    <figure class="highlight reasonml">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">INSERT INTO table<span class="constructor">Name(<span class="params">key1</span>, <span class="params">key3</span>..)</span> <span class="constructor">VALUES(<span class="params">value1</span>, <span class="params">value3</span><span class="operator">...</span>)</span> <span class="literal">[SELECT <span class="operator">*</span> FROM <span class="identifier">tableName</span>]</span></span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<p><strong>update</strong></p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 更新前我们一般都会先查表内数据</span></span><br><span class="line"><span class="comment"># 查询出对应表已存在所有行</span></span><br><span class="line">DESC tableName;</span><br><span class="line"><span class="comment"># 查询对应表已存在数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tableName;	<span class="comment"># * 可替换成字段名，查对应字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> 字段名=<span class="string">'新值'</span> [<span class="keyword">WHERE</span> 限定条件];</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Eg:</p>
<p>创建一张新的student表</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 建表</span></span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line"> `id` int <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'学号'</span>,</span><br><span class="line"> `sname` varchar(255) CHARACTER <span class="builtin-name">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">'姓名'</span>,</span><br><span class="line"> `sage` tinyint unsigned <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">'0'</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line"> `intime` timestamp <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>CURRENT_TIMESTAMP COMMENT <span class="string">'入学时间'</span>,</span><br><span class="line"> PRIMARY KEY (`id`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8mb4 <span class="attribute">COLLATE</span>=utf8mb4_0900_ai_ci <span class="attribute">COMMENT</span>=<span class="string">'学生表'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入演示数据</span></span><br><span class="line">INSERT INTO student(sname,sage) VALUES(<span class="string">"赵一"</span>, 1),</span><br><span class="line">(<span class="string">"王二"</span>, 2),</span><br><span class="line">(<span class="string">"张三"</span>, 3),</span><br><span class="line">(<span class="string">"李四"</span>, 4);</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>数据库</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmgmsbglbmj30ey09it8s.jpg" alt=""></p>
<p>需求一:</p>
<p>李四改名为“里斯”;</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">UPDATE student <span class="builtin-name">SET</span> <span class="attribute">sname</span>=<span class="string">"里斯"</span> WHERE sname = <span class="string">"李四"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">UPDATE student <span class="builtin-name">SET</span> <span class="attribute">sname</span>=<span class="string">"里斯"</span> WHERE <span class="attribute">id</span>=4;</span><br><span class="line">UPDATE student <span class="builtin-name">SET</span> <span class="attribute">sname</span>=<span class="string">"里斯"</span> WHERE <span class="attribute">sage</span>=4;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>修改后，如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmgmx1cum6j30ey09eq30.jpg" alt=""></p>
<p>需求二:</p>
<p>将所有表内成员的年龄+10;</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">UPDATE student <span class="builtin-name">SET</span> <span class="attribute">sage</span>=sage + 10</span><br><span class="line"><span class="comment"># UPDATE student SET sage+=10(错误写法,开发时候用的什么sage ++， sage +=，在这里都不允许)</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmgn1b1f0bj30f009ct8s.jpg" alt=""></p>
<p>需求三:将所有表内成员的年龄+10,除了里斯</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">UPDATE student <span class="builtin-name">SET</span> <span class="attribute">sage</span>=sage + 10 WHERE sname != <span class="string">"里斯"</span>;</span><br><span class="line"><span class="comment"># 当然也可以这样写;</span></span><br><span class="line">UPDATE student <span class="builtin-name">SET</span> <span class="attribute">sage</span>=sage + 10 WHERE sname = <span class="string">"赵一"</span> <span class="keyword">OR</span> sname = <span class="string">"王二"</span> <span class="keyword">OR</span> <span class="attribute">sname</span>=<span class="string">"张三"</span> ;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>AND: 执行均满足</p>
    <p>OR: 满足其一执行</p>
    <p>where 见下文</p>
</blockquote>
<p><strong>delete</strong></p>
<figure class="highlight objectivec">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># 删除指定数据</span><br><span class="line">DELETE FROM tableName  [WHERE <span class="keyword">id</span>=<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"># 清空标中所有数据</span><br><span class="line">DELETE FROM student;</span><br><span class="line">truncate table student;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>区别:</p>
    <p>delete: DML操作, 是逻辑性质删除,逐行进行删除,速度慢.</p>
    <p>truncate: DDL操作,对与表段中的数据页进行清空,速度快.</p>
</blockquote>
<p>伪删除：用update来替代delete，最终保证业务中查不到（select）</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">1.添加状态列</span><br><span class="line">ALTER TABLE stuent <span class="builtin-name">ADD</span> state TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>1 ;</span><br><span class="line">SELECT * <span class="keyword">FROM</span> stuent;</span><br><span class="line">2. UPDATE 替代 DELETE</span><br><span class="line">UPDATE stuent <span class="builtin-name">SET</span> <span class="attribute">state</span>=0 WHERE <span class="attribute">id</span>=6;</span><br><span class="line">3. 业务语句查询</span><br><span class="line">SELECT * <span class="keyword">FROM</span> stu WHERE <span class="attribute">state</span>=1;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p><strong>拓展</strong></p>
    <figure class="highlight sql">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> student;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student;</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>以上三条删除语句有何区别？</p>
    <p>同：三者都是删除语句，均可删除</p>
    <p>异:</p>
    <p>DELETE FROM student:</p>
    <p>逻辑上<code>逐行</code>删除，数据过多，操作很慢</p>
    <p>并没有真正的从磁盘上删除，知识在磁盘上打上标记，磁盘空间不立即释放。HWM高位线不会降低</p>
    <p>DROP TABLE student;</p>
    <p>将表结构(元数据)和数据行，物理层次删除</p>
    <p>truncate truncate table student;</p>
    <p>清空表段中的所有数据页，物理层次删除全表数据，磁盘空间立即释放。HWM高位线降低</p>
    <p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmhjljoy2gj30j20643zc.jpg" alt=""></p>
</blockquote>
<h4 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL 数据查询语言"></a>DQL 数据查询语言</h4>
<p>show类</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> databaseName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">table</span>;</span><br><span class="line"></span><br><span class="line">desc tableName;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>select类</strong> </p>
<blockquote>
    <p>获取表中的数据行</p>
</blockquote>
<figure class="highlight css">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># <span class="selector-tag">select</span> @<span class="keyword">@xxx</span> 查看系统参数</span><br><span class="line">SELECT @@port;</span><br><span class="line"><span class="selector-tag">SELECT</span> @<span class="keyword">@basedir</span>;</span><br><span class="line"><span class="selector-tag">SELECT</span> @<span class="keyword">@datadir</span>;</span><br><span class="line"><span class="selector-tag">SELECT</span> @<span class="keyword">@socket</span>;</span><br><span class="line"><span class="selector-tag">SELECT</span> @<span class="keyword">@server_id</span>;</span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">select</span> 函数</span><br><span class="line"><span class="selector-tag">SELECT</span> <span class="selector-tag">NOW</span>();</span><br><span class="line"><span class="selector-tag">SELECT</span> <span class="selector-tag">DATABASE</span>();</span><br><span class="line"><span class="selector-tag">SELECT</span> <span class="selector-tag">USER</span>();</span><br><span class="line"><span class="selector-tag">SELECT</span> <span class="selector-tag">CONCAT</span>("<span class="selector-tag">hello</span> <span class="selector-tag">world</span>");</span><br><span class="line"><span class="selector-tag">SELECT</span> <span class="selector-tag">CONCAT</span>(<span class="selector-tag">USER</span>,"@",HOST) FROM mysql.user;</span><br><span class="line"><span class="selector-tag">SELECT</span> <span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">USER</span>,"@",HOST) FROM mysql.user;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>手册 <a href="https://dev.mysql.com/doc/refman/8.0/en/sql-function-reference.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/sql-function-reference.html</a></p>
<p>select配合子句</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">select </span><br><span class="line"><span class="keyword">FROM</span> 表1，表2<span class="built_in">..</span>.,</span><br><span class="line">WHERE 过滤条件1，过滤条件2，过滤条件3 <span class="built_in">..</span>.</span><br><span class="line">GROUP BY 条件列1，条件列2，条件列3 <span class="built_in">..</span>.</span><br><span class="line">	# selct_list 列名</span><br><span class="line">HAVING 过滤条件1，过滤条件2，过滤条件3 <span class="built_in">..</span>.</span><br><span class="line">ORDER BY 条件列1，条件列2，条件列3 <span class="built_in">..</span>.</span><br><span class="line">LIMIT 限制条件;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>单表子句-from</strong></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SELECT 列1,列2 FROM 表</span><br><span class="line">SELECT  *  FROM 表</span><br><span class="line"></span><br><span class="line"># EG</span><br><span class="line"># 查询student中所有的数据(不要对大表进行操作)</span><br><span class="line">SELECT * FROM stu ;</span><br><span class="line"># 查询stu表中,学生姓名和入学时间</span><br><span class="line">SELECT sname , intime FROM stuent;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>单表子句-where</strong></p>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SELECT col1,col2 FROM TABLE WHERE colN 条件;</span><br><span class="line"># where 操作符(&gt;、&lt;、&gt;&#x3D;、 &lt;&#x3D;、 &lt;&gt;、in、like、and、or)</span><br><span class="line">SELECT col1,col2 FROM TABLE WHERE &#x3D; 条件;</span><br><span class="line"></span><br><span class="line"># where 模糊查询</span><br><span class="line">SELECT * FROM city WHERE district LIKE &#39;guang%&#39;;    </span><br><span class="line">%  : 表示任意0个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。</span><br><span class="line">_  : 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句</span><br><span class="line">[] : 表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</span><br><span class="line"></span><br><span class="line"># where配合between...and...</span><br><span class="line">SELECT * FROM city  WHERE population &gt;1000000 AND population &lt;2000000;</span><br><span class="line">SELECT * FROM city  WHERE population BETWEEN 1000000 AND 2000000;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p> <strong>group by</strong></p>
<p>根据 by后面的条件进行分组，方便统计，by后面跟一个列或多个列</p>
<p>未分组分组列，使用聚合函数</p>
<p>聚合函数</p>
<figure class="highlight swift">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">**<span class="built_in">max</span>()**      ：最大值</span><br><span class="line">**<span class="built_in">min</span>()**      ：最小值</span><br><span class="line">**avg()**      ：平均值</span><br><span class="line">**sum()**      ：总和</span><br><span class="line">**<span class="built_in">count</span>()**    ：个数</span><br><span class="line">group_concat() : 列转行</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>HAVING</strong></p>
<p>需要在group by 之后，在做判断过滤使用(类似于where)</p>
<p><strong>order by</strong></p>
<blockquote>
    <p>实现先排序，by后添加条件列(默认从小到大)</p>
    <p>逆序：后加DESC</p>
</blockquote>
<p><strong>distinct：去重复</strong></p>
<figure class="highlight cpp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SELECT countrycode FROM city ;</span><br><span class="line"><span class="function">SELECT <span class="title">DISTINCT</span><span class="params">(countrycode)</span> FROM city  </span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>联合查询- union all</p>
<figure class="highlight csharp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">-- 中国或美国城市信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM city </span><br><span class="line"><span class="function">WHERE countrycode <span class="title">IN</span> (<span class="params"><span class="string">'CHN'</span> ,<span class="string">'USA'</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">SELECT * FROM city WHERE countrycode=<span class="string">'CHN'</span></span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM city WHERE countrycode=<span class="string">'USA'</span></span><br><span class="line"></span><br><span class="line">说明:一般情况下,我们会将 IN 或者 OR 语句 改写成 UNION ALL,来提高性能</span><br><span class="line">UNION     去重复</span><br><span class="line">UNION ALL 不去重复</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>LIMIT 限制条件</strong></p>
<p>限制查询</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> 限制条件</span><br><span class="line">eg:</span><br><span class="line"><span class="comment">--- 只输出前1000条</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">1000</span></span><br><span class="line"><span class="comment">--- 只输出前1000-2000条</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">1000</span>, <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">1000</span>, <span class="number">2000</span></span><br><span class="line">相当于</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">2000</span> <span class="keyword">OFFSET</span> <span class="number">1000</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>join 多表连接查询</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmhk5wso0sj31080ak76b.jpg" alt=""></p>
<p><strong>内连接</strong></p>
<p>查询li4家的地址</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">SELECT</span> A.name,B.address <span class="keyword">FROM</span></span><br><span class="line">A <span class="keyword">JOIN</span>  B</span><br><span class="line"><span class="keyword">ON</span> A.id=B.id	<span class="comment">--- 关联列</span></span><br><span class="line"><span class="keyword">WHERE</span> A.name=<span class="string">'li4'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 相当于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> A.name,B.address <span class="keyword">FROM</span></span><br><span class="line">A <span class="keyword">JOIN</span>  B</span><br><span class="line"><span class="keyword">ON</span> A.id=B.id</span><br><span class="line"><span class="keyword">WHERE</span> A.name=<span class="string">'li4'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>外连接</strong></p>
<p>驱动表建议使用 数据少的表 为驱动表</p>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">SELECT</span> A.name,B.address <span class="keyword">FROM</span></span><br><span class="line">A <span class="keyword">JOIN</span>  B</span><br><span class="line"><span class="keyword">ON</span> A.id=B.id	<span class="comment">--- 关联列</span></span><br><span class="line"><span class="keyword">WHERE</span> A.name=<span class="string">'li4'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 相当于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> A.name,B.address <span class="keyword">FROM</span></span><br><span class="line">A <span class="keyword">left</span> <span class="keyword">JOIN</span>  B</span><br><span class="line"><span class="keyword">ON</span> A.id=B.id</span><br><span class="line"><span class="keyword">WHERE</span> A.name=<span class="string">'li4'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---  A left JOIN  B 其中a位驱动表</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mac(m1)配置php xdebug</title>
    <url>/4294103192.html</url>
    <content><![CDATA[<blockquote>
    <p>使用 <code>homebrew</code> 安装 php@7.4</p>
</blockquote>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash"> 下载debug</span></span><br><span class="line">pecl install xdebug</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">cat &gt;&gt; /opt/homebrew/etc/php/7.4/conf.d/ext-xdebug.ini &lt;&lt; EOF</span><br><span class="line">zend_extension=<span class="string">"/opt/homebrew/Cellar/php@7.4/7.4.26/pecl/20190902/xdebug.so"</span></span><br><span class="line">xdebug.remote_enable = On　　//是否运行远程终端，必须开启</span><br><span class="line">xdebug.remote_handler = <span class="string">"dbgp"</span></span><br><span class="line">xdebug.remote_host = <span class="string">"localhost"</span></span><br><span class="line">xdebug.remote_port = 9000  //这个端口号要和phpstorm中的保持一致，示例的端口是9001</span><br><span class="line">xdebug.idekey = PHPSTROM　　//调试器关键字</span><br><span class="line">EOF</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>xdebug</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>xdebug</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞懂二叉树遍历</title>
    <url>/23559.html</url>
    <content><![CDATA[<h2 id="Brush-the-topic-BinaryTree"><a href="#Brush-the-topic-BinaryTree" class="headerlink" title="Brush the topic-BinaryTree"></a>Brush the topic-BinaryTree</h2>
<p>大家好，这是Brush the topic的第一章节,BinaryTree。首先我说一下为什么把这个放在刷题的第一节呢？</p>
<p>原因如下:</p>
<ul>
    <li>培养、训练自己的计算机的思维。</li>
    <li>锻炼模版化，抽象化思维</li>
</ul>
<p>下面让我们一起去完成一个壮举，那就是完全解决二叉树的遍历问题，以及相关问题。are you ok？</p>
<h3 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h3>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4>
<p>由于对于二叉树的遍历顺序不同，构造出三种不同的遍历方式</p>
<a id="more"></a>
<ul>
    <li>前序遍历-根左右</li>
    <li>中序遍历-左根右</li>
    <li>后序遍历-左右根</li>
</ul>
<h4 id="递归代码模版如下"><a href="#递归代码模版如下" class="headerlink" title="递归代码模版如下"></a>递归代码模版如下</h4>
<p><strong>Python</strong></p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOreder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> root:</span><br><span class="line">    self.traverse_path.append(root.val)</span><br><span class="line">    preOreder(self.left)</span><br><span class="line">    preOreder(self.right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inOreder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> root:</span><br><span class="line">    preOreder(self.left)</span><br><span class="line">    self.traverse_path.append(root.val)</span><br><span class="line">    preOreder(self.right)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postOreder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> root:</span><br><span class="line">    preOreder(self.left)</span><br><span class="line">    preOreder(self.right)</span><br><span class="line">    self.traverse_path.append(root.val)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>Golang</strong></p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOreder</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">  result := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">  result  = <span class="built_in">append</span>(result, root.value)</span><br><span class="line">  preOreder(root.Left)</span><br><span class="line">  preOreder(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOreder</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">  result := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">  preOreder(root.Left)</span><br><span class="line">  result  = <span class="built_in">append</span>(result, root.value)</span><br><span class="line">  preOreder(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postOreder</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">  result := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">  postOreder(root.Left)</span><br><span class="line">  postOreder(root.Right)</span><br><span class="line">  result  = <span class="built_in">append</span>(result, root.value)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="practice"><a href="#practice" class="headerlink" title="practice"></a>practice</h3>
<p>基于此我们可以拿下以下题目,完全二叉树递归模版解题</p>
<h3 id="144-二叉树的前序遍历-Python"><a href="#144-二叉树的前序遍历-Python" class="headerlink" title="144. 二叉树的前序遍历-Python"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">144. 二叉树的前序遍历</a>-Python</h3>
<h4 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a><strong>Recursive</strong></h4>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive-1 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        result = []</span><br><span class="line">        self.helper(root, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span></span><br><span class="line">        result.append(root.val)</span><br><span class="line">        self.helper(root.left,result)</span><br><span class="line">        self.helper(root.right, result)</span><br><span class="line"><span class="comment"># Recursive-2 Another way Anonymous function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root: TreeNode)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> </span><br><span class="line">            res.append(root.val)</span><br><span class="line">            helper(root.left)</span><br><span class="line">            helper(root.right)</span><br><span class="line">            </span><br><span class="line">        res = list()</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive-3 more clean code</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        res+=self.preorderTraversal(root.left)</span><br><span class="line">        res+=self.preorderTraversal(root.right)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a><strong>Iterative</strong></h4>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution-1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">         stack, result = [], []</span><br><span class="line">         <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">             <span class="keyword">while</span> root:</span><br><span class="line">                 <span class="comment"># 前序遍历-根左右，先拿根</span></span><br><span class="line">                 result.append(root.val)</span><br><span class="line">                 <span class="comment"># 压栈</span></span><br><span class="line">                 stack.append(root)</span><br><span class="line">                 <span class="comment"># 拿完根之后拿左儿子</span></span><br><span class="line">                 root = root.left</span><br><span class="line">             <span class="comment"># 左儿子拿出来，拿右儿子</span></span><br><span class="line">             node = stack.pop()</span><br><span class="line">             root = node.right</span><br><span class="line">        <span class="comment"># # 完成</span></span><br><span class="line">         <span class="keyword">return</span> result</span><br><span class="line">      </span><br><span class="line"><span class="comment"># Solution-2	简化Solution-1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                result.append(root.val)</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                root = node.right</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution-3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack, result = [root], []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            <span class="comment"># 拿出根</span></span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="comment"># 前序遍历拿出，先拿根的值                </span></span><br><span class="line">                result.append(node.val)</span><br><span class="line">                <span class="comment"># 模仿栈，先入后出。后拿右孩子</span></span><br><span class="line">                stack.append(node.right)</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="94-二叉树的中序遍历-Python"><a href="#94-二叉树的中序遍历-Python" class="headerlink" title="94. 二叉树的中序遍历-Python"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">94. 二叉树的中序遍历</a>-Python</h3>
<h4 id="Recursive-1"><a href="#Recursive-1" class="headerlink" title="Recursive"></a><strong>Recursive</strong></h4>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive-1 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        result = []</span><br><span class="line">        self.helper(root, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left,result)</span><br><span class="line">        result.append(root.val)</span><br><span class="line">        self.helper(root.right, result)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># Recursive-2 Another way Anonymous function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root: TreeNode)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> </span><br><span class="line">            helper(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            helper(root.right)</span><br><span class="line">        res = list()</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive-3 more clean code</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        res+=self.preorderTraversal(root.left)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        res+=self.preorderTraversal(root.right)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="Iterative-1"><a href="#Iterative-1" class="headerlink" title="Iterative"></a><strong>Iterative</strong></h4>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution - 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> </span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            result.append(node.val)</span><br><span class="line">            root = node.right</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution - 2 简化Solution-1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                result.append(node.val)</span><br><span class="line">                root = node.right</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution - 3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                result.append(node.val)</span><br><span class="line">                root = node.right</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></h3>
<h4 id="Recursive-2"><a href="#Recursive-2" class="headerlink" title="Recursive"></a><strong>Recursive</strong></h4>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive-1 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        result = []</span><br><span class="line">        self.helper(root, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left,result)</span><br><span class="line">        self.helper(root.right, result)</span><br><span class="line">        result.append(root.val)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># Recursive-2 Another way Anonymous function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root: TreeNode)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> </span><br><span class="line">            helper(root.left)</span><br><span class="line">            helper(root.right)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">        res = list()</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive-3 more clean code</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        res+=self.preorderTraversal(root.left)</span><br><span class="line">        res+=self.preorderTraversal(root.right)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="Iterative-2"><a href="#Iterative-2" class="headerlink" title="Iterative"></a><strong>Iterative</strong></h4>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Solution - 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> root <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                result.append(root.val)</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.right</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            root = node.left</span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>]</span><br><span class="line">      </span><br><span class="line"> <span class="comment"># Solution - 2    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                result.append(root.val)</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                root = node.left</span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>]</span><br><span class="line">      </span><br><span class="line"><span class="comment"># Solution - 3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">      	<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        stack, result = [root], []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                result.append(node.val)</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>]</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>二叉树迭代遍历模版-Python</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 前序遍历</span></span><br><span class="line"><span class="comment"># Solution-1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> root <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                result.append(root.val)</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            tmp = stack.pop()</span><br><span class="line">            root = tmp.right</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 中序遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> </span><br><span class="line">        stack, result = [], []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            result.append(node.val)</span><br><span class="line">            root = node.right</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>由递归到迭代，基本的思想就是由递归中由系统维护的栈，转为手动维护。</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh结合actions实现源码分离部署</title>
    <url>/3847153486.html</url>
    <content><![CDATA[<p>本博客采用github page实现部署，但由于github的性质无法有效的进行分离快速部署。</p>
<p>必须博客展示页，必须以username.github.io结尾，这样感觉不是很方便</p>
<p>部署前基本流程为，部署github page -&gt; 手动上传源码到对应仓库。</p>
<p>那么我们是否可以直接push到私有源码仓库，出发二段部署从实现自动的博客部署，此时我们只需要关心与维护自己的博客源码，再也不用刻意的关注部署了</p>
<p>说干就干</p>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2>
<h3 id="ssh部署"><a href="#ssh部署" class="headerlink" title="ssh部署"></a>ssh部署</h3>
<figure class="highlight excel">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"your email"</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>若配置了全局的git email 可使用<code>ssh-keygen -t rsa -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</code></p>
</blockquote>
<p>完成后将在本地<code>$HOME/.ssh</code>中生成私钥<code>id_rsa</code>,与公钥，<code>id_rsa.pub</code>,将公钥上传到github上，进入<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a> ，登陆自己的github账号。如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4h329orfj60tf0a775a02.jpg" alt="image-20210904121559885"></p>
<p>New SSH Key</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4h3tn133j60lp0bomxg02.jpg" alt="image-20210904121643113"></p>
<p>其中title为自定义，key为<code>id_rsa.pub</code>中内容。完成后点击Add SSH key即可</p>
<h2 id="建立私有博客源码仓库"><a href="#建立私有博客源码仓库" class="headerlink" title="建立私有博客源码仓库"></a>建立私有博客源码仓库</h2>
<p>github上创建一个私有仓库即可，详细流程不在过多赘述</p>
<h2 id="创建Actions"><a href="#创建Actions" class="headerlink" title="创建Actions"></a>创建Actions</h2>
<h3 id="配置Actions-secrets"><a href="#配置Actions-secrets" class="headerlink" title="配置Actions secrets"></a>配置Actions secrets</h3>
<p>Settings -&gt; Deploy keys -&gt; New repository secrets，如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4ezhkflmj61mk0u0aeq02.jpg" alt="image-20210904110320916"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4f2jcgr5j61sv0u00v602.jpg" alt="image-20210904110617453"></p>
<p>将上面生成的id_rsa，复制到私钥中。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu4hbf985wj6172072wf202.jpg" alt="image-20210904122401191"></p>
<p>将workflow增加到源码文件中，拉取到本地。</p>
<p>deploy.yml如下</p>
<figure class="highlight yaml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run. Triggers the workflow on push or pull request</span></span><br><span class="line"><span class="comment"># events but only for the master branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called "build"</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Env</span> <span class="string">setup</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$<span class="template-variable">&#123;&#123; secrets.DEPLOY_KEY &#125;&#125;</span>"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span>	<span class="comment"># DEPLOY_KEY 为secret name</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="comment"># setup deploy git account</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"your user name"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"your email"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">find</span> <span class="string">.</span> <span class="string">-type</span> <span class="string">f</span> <span class="string">-name</span> <span class="string">*.log</span> <span class="string">-delete</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>以上便是github page 源码保护分析详细过程，其基本原理就是将ssh部署的工作交给自动构建的Actions。</p>
]]></content>
      <categories>
        <category>blog</category>
        <category>ssh</category>
        <category>actions</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>actions</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用迭代器优化pymysql大量查询</title>
    <url>/1032104040.html</url>
    <content><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2>
<p>当我们需要使用<code>pymysql</code>进行大量数据的提取时，发现越来越慢。直到阻塞，down。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2>
<p>使用<code>SSDictCursor</code>无缓冲游标来操作，使用<code>fetchall_unbuffered</code>，来进行。同时辅以分页查询即可</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql <span class="keyword">as</span> pms</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> cursors</span><br><span class="line"></span><br><span class="line">client_config = dict(host=<span class="string">"localhost"</span>, user=<span class="string">"user"</span>, passwd=<span class="string">"passwd"</span>, db=<span class="string">"db"</span>, charset=<span class="string">"utf8mb4"</span>, cursorclass=pms.cursors.SSDictCursor)</span><br><span class="line">client = pms.connect(**client_config)</span><br><span class="line">cursor = client.cursor()</span><br><span class="line"><span class="keyword">for</span> pg <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    cursor.execute(<span class="string">f"select * from table limit <span class="subst">&#123;pg&#125;</span>, 10000;"</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> cursor.fetchall_unbuffered():</span><br><span class="line">        pprint.pprint(_)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
]]></content>
      <categories>
        <category>pymysql</category>
        <category>python</category>
        <category>iter</category>
      </categories>
      <tags>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vim文本基础操作</title>
    <url>/1813580861.html</url>
    <content><![CDATA[<h2 id="vim-模式"><a href="#vim-模式" class="headerlink" title="vim 模式"></a>vim 模式</h2>
<p>普通模式：vi file_name,主要用于文件操作如浏览、增删改查</p>
<p>输入模式：在普通模式下输入 <code>i</code> 即可进入输入模式</p>
<p>命令模式：在普通模式下输入 <code>:</code> 进入命令模式，使用命令进行操作</p>
<p>可视模式：在普通模式中输入 <code>v</code> 进入可视模式。类似于鼠标选中进行批量操作 </p>
<p>几种进入插入模式的方法，以便于更快捷的编辑</p>
<p><code>a</code>: 用于在光标之后进入插入模式</p>
<p><code>A</code>: 用于当前行行末进入插入模式（与$a等价）</p>
<p><code>i</code>: 在当前位置进入插入模式</p>
<p><code>I</code>: 在当前行缩进之后的行首进入插入模式</p>
<p><code>o</code>: 在光标下一行新增一行并进入插入模式</p>
<p><code>O</code>: 在光标上一行新增一行并进入插入模式</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2>
<p><code>g</code>: 跳至行首，<code>G</code>: 跳至文末尾</p>
<p><code>cc</code>：删除这一行进入修改模式</p>
<p><code>dd</code>: 删除一整行</p>
<p><code>uu</code>：撤销上次操作</p>
<p><code>yy</code>: 复制</p>
<p><code>pp</code>：粘贴</p>
<blockquote>
    <p>tips： 这里笔者使用了组合的形式来展示，其实不然，比如删除4行，可以是<code>d4d</code>, 删除5个单词为<code>d4w</code>,</p>
</blockquote>
<p>当然还可以结合 可视模式（多选）来辅助批量复制粘贴等。</p>
]]></content>
      <categories>
        <category>vim</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/60366.html</url>
    <content><![CDATA[<h2 id="进制与位运算"><a href="#进制与位运算" class="headerlink" title="进制与位运算"></a>进制与位运算</h2>
<p>在我们编程的领域，进制的重要性不言而喻。为什么我的世界只有0与1，这之间到底有什么不可不知的秘密</p>
<p>为什么旁边的“高级工程师”，天天学框架、学架构，反而给他学废了。这一切的一切究竟是计算机的计算扭曲，还是计算机的道德沦丧。今天让我们进入哪个传说中只有0与1的世界。</p>
<a id="more"></a>
<h3 id="进制介绍"><a href="#进制介绍" class="headerlink" title="进制介绍"></a>进制介绍</h3>
<p>进制是人为定义的带进位的计数方法（有不带进位的计数方法，比如原始的结绳计数法，唱票时常用的“正”字计数法，以及类似的tally mark计数）。 对于任何一种进制—-X进制，就表示每一位置上的数运算时都是逢X进一位。 是逢十进一，是逢十六进一，就是逢二进一，以此类推，x进制就是逢x进位。</p>
<h3 id="常见进制表示"><a href="#常见进制表示" class="headerlink" title="常见进制表示"></a>常见进制表示</h3>
<p>二进制: 0, 1 逢2进1，常以0b，0B开头</p>
<p>八进制：0-7 逢8进1，常以o开头</p>
<p>十进制：0-9 逢10进1</p>
<p>十六进制：逢16进1，0-9 A(10)-F(15 )常以0x开头</p>
<h3 id="进制运算"><a href="#进制运算" class="headerlink" title="进制运算"></a>进制运算</h3>
<p>二进制数的加法和乘法基本运算法则各有四条，如下：</p>
<p>0+0=0，0+1=1，1+0=1，1+1=10</p>
<p>0×0=0，0×1=0，1×0=0，1×1=1</p>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3>
<h4 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h4>
<p>一个十进制整数转换为二进制整数通常采用除二取余法，即用2连续除十进制数，直到商为0，<a href="https://baike.baidu.com/item/逆序" target="_blank" rel="noopener">逆序</a>排列余数即可得到――简称除二取余法．</p>
<p>上面这段话是什么意思呢？逆序排列即二进制中的从高位到低位排序</p>
<p>如以下为例</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 十进制11的二进制</span></span><br><span class="line">11 ➗ 2 = 5 	余 1</span><br><span class="line"> 5 ➗ 2 = 2  余 1</span><br><span class="line"> 2 ➗ 2 = 1  余 0 </span><br><span class="line"> 1 ➗ 2 = 0  余 1</span><br><span class="line"></span><br><span class="line">11 = (1011)2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <ol>
        <li>十进制数除以 2 ，得到商和余数；</li>
        <li>再用第一步的商除以 2,得到新的商和余数；</li>
        <li>重复第 1 和第 2 步，直到商为 0;</li>
        <li>将先得到的余数作为二进制数的高位，后得到的余数作为二进制数的低位，依次排序；</li>
    </ol>
</blockquote>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decimal_to_binary</span><span class="params">(value: int)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0b0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Accepted parameters must be int"</span>)</span><br><span class="line">    flag = <span class="literal">False</span> <span class="keyword">if</span> value &lt;= <span class="number">0</span> <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">    value = abs(value)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> value:</span><br><span class="line">        <span class="keyword">if</span> value % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            result.append(<span class="string">'1'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(<span class="string">'0'</span>)</span><br><span class="line">        value &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'0b'</span> + <span class="string">''</span>.join(result[::<span class="number">-1</span>]) <span class="keyword">if</span> flag <span class="keyword">else</span> <span class="string">'-0b'</span> + <span class="string">''</span>.join(result[::<span class="number">-1</span>])</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h4>
<p>二进制转化为十进制的原理，(二进制数长度(不含0b) - 1) 次方 X 此位置的数值</p>
<figure class="highlight angelscript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="number">0</span>b1101 <span class="number">13</span></span><br><span class="line"><span class="number">2</span>的<span class="number">3</span>次方 乘 <span class="number">1</span> + <span class="number">2</span>的<span class="number">2</span>次方 乘 <span class="number">1</span> + <span class="number">2</span>的<span class="number">1</span>次方 乘 <span class="number">0</span> + <span class="number">2</span>的<span class="number">0</span>次方 乘 <span class="number">1</span></span><br><span class="line"><span class="number">8</span> + <span class="number">4</span> + <span class="number">0</span> + <span class="number">1</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>代码实现</p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_to_decimal</span><span class="params">(binary: str)</span>:</span></span><br><span class="line">    binary_list = binary.split(<span class="string">"0b"</span>)[<span class="number">-1</span>] <span class="keyword">if</span> <span class="string">'0b'</span> <span class="keyword">in</span> binary <span class="keyword">else</span> binary</span><br><span class="line">    <span class="comment">#  判断是否为正数</span></span><br><span class="line">    flag = <span class="literal">True</span> <span class="keyword">if</span> <span class="string">'-'</span> <span class="keyword">not</span> <span class="keyword">in</span> binary <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(binary_list):</span><br><span class="line">        a = <span class="number">2</span> ** int(len(binary_list) - index - <span class="number">1</span>)</span><br><span class="line">        sum += a * int(value)</span><br><span class="line">    <span class="keyword">return</span> sum <span class="keyword">if</span> flag <span class="keyword">else</span> <span class="string">f'-<span class="subst">&#123;sum&#125;</span>'</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight maxima">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="number">13</span>: </span><br><span class="line">binary：<span class="number">0b1101</span> </span><br><span class="line">oct：(<span class="number">001</span>) (<span class="number">101</span>) <span class="number">0o15</span></span><br><span class="line">hex：<span class="number">0000</span> (<span class="number">1101</span>) <span class="number">0xd</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>同理得进制转换</p>
<h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2>
<p>现代的计算器技术全部采用的是二进制，因为他只使用0、1两个数字符号，非常简单方便，易于计算机实现。计算机内部都是采用二进制数来表示</p>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的从服务器上传下载文件</title>
    <url>/1195400737.html</url>
    <content><![CDATA[<p><strong>如何优雅的从Linux服务器上进行文件“上传”与“下载”</strong></p>
<p>不知你是否也遇到以下几种情形：</p>
<ul>
    <li>本地电脑上传文件至Linux服务器</li>
    <li>Linux服务器之间文件传递</li>
</ul>
<p>那么如何有效、且优雅的的进行呢。特意为了此下载xshell、finalshell等软件？其实也大可不必，隐患太多也并不方便。只需要学会使用Linux中scp命令即可</p>
<h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2>
<p>scp在网络上的主机之间复制文件。它使用ssh进行数据传输，并使用与ssh相同的身份验证和提供相同的安全性。scp如果身份验证需要密码或密码短语，则会询问密码或密码。</p>
<p>scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。</p>
<blockquote>
    <p>文件名可能包含用户和主机规范，以指示将文件复制到该主机或从该主机复制文件。本地文件名可以使用绝对或相对路径名</p>
</blockquote>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">scp [options] remote_ip:remote_folder(remote_file) local_folder(local_file)</span><br><span class="line">scp [options] remote_user@remote_ip:remote_folder(remote_file) local_folder(local_file)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传</span></span><br><span class="line">scp [options] local_folder(local_file) remote_ip:remote_folder(remote_file)</span><br><span class="line">scp [options] local_folder(local_file) remote_user@remote_ip:remote_folder(remote_file)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>记忆</strong></p>
<blockquote>
    <p>remote_ip 在前即下载，在后即上传</p>
</blockquote>
<h3 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h3>
<ul>
    <li>-1： 强制scp命令使用协议ssh1</li>
    <li>-2： 强制scp命令使用协议ssh2</li>
    <li>-4： 强制scp命令只使用IPv4寻址</li>
    <li>-6： 强制scp命令只使用IPv6寻址</li>
    <li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li>
    <li>-C： 允许压缩（将-C标志传递给ssh，从而打开压缩功能）</li>
    <li>-q： 不显示传输进度条。</li>
    <li>-r： 递归复制整个目录。</li>
    <li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li>
    <li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li>
    <li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>
    <li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li>
    <li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li>
    <li>-o ssh_option： 如果习惯于使用ssh_config中的参数传递方式，</li>
    <li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li>
    <li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3>
<p>使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。</p>
<p>如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下：</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash"> scp 命令使用端口号 4526</span></span><br><span class="line">scp -P 4526 remote@s2:/usr/local/checkNetwokr.sh ~/</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="实例脚本"><a href="#实例脚本" class="headerlink" title="实例脚本"></a>实例脚本</h2>
<p>使用scp实现文件(夹)分发上传到服务器</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 远程地址列表 remote hosts List</span></span></span><br><span class="line">rhs_list=(s1 s2)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 本地文件路径</span></span></span><br><span class="line">local_file=~/c.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 目的文件路径</span></span></span><br><span class="line">target_path=~/</span><br><span class="line"></span><br><span class="line">for host in $&#123;rhs_list[@]&#125;; do</span><br><span class="line">		scp -C $&#123;local_file&#125; root@$&#123;host&#125;:~/</span><br><span class="line">done</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>反之也可下载</p>
</blockquote>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2>
<p>配合ssh免密登陆与host解析scp更加丝滑哦</p>
<p>具体可参考基于ssh-key实现服务器免密登陆</p>
]]></content>
      <categories>
        <category>ssh</category>
        <category>Linux</category>
        <category>服务器</category>
        <category>文件传输</category>
        <category>scp</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>文件传输</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>uiautomator2使用笔记</title>
    <url>/1235432439.html</url>
    <content><![CDATA[<h2 id="uiautomator2-简介"><a href="#uiautomator2-简介" class="headerlink" title="uiautomator2 简介"></a>uiautomator2 简介</h2>
<p>UiAutomator是Google提供的用来做安卓自动化测试的一个Java库，基于Accessibility服务。功能很强，可以对第三方App进行测试，获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作。而uiautomator2便是UiAutomator的Python实现</p>
<p>除了对原有的库的bug进行了修复，还增加了很多新的Feature。主要有以下部分：</p>
<ul>
    <li>设备和开发机可以脱离数据线，通过WiFi互联（基于<a href="https://github.com/openatx/atx-agent" target="_blank" rel="noopener">atx-agent</a>）</li>
    <li>集成了<a href="https://github.com/openstf/minicap" target="_blank" rel="noopener">openstf/minicap</a>达到实时屏幕投频，以及实时截图</li>
    <li>集成了<a href="https://github.com/openstf/minitouch" target="_blank" rel="noopener">openstf/minitouch</a>达到精确实时控制设备</li>
    <li>修复了<a href="https://github.com/xiaocong/uiautomator" target="_blank" rel="noopener">xiaocong/uiautomator</a>经常性退出的问题</li>
    <li>代码进行了重构和精简，方便维护</li>
    <li>实现了一个设备管理平台(也支持iOS) <a href="https://github.com/openatx/atxserver2" target="_blank" rel="noopener">atxserver2</a></li>
    <li>扩充了toast获取和展示的功能</li>
</ul>
<p>相关链接如下：</p>
<p><a href="https://developer.android.com/training/testing/ui-automator.html" target="_blank" rel="noopener">UiAutomator</a>：<a href="https://developer.android.com/training/testing/ui-automator.html" target="_blank" rel="noopener">https://developer.android.com/training/testing/ui-automator.html</a></p>
<p><a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">uiautomator2</a>： <a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">https://github.com/openatx/uiautomator2</a></p>
<p><a href="https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md" target="_blank" rel="noopener">QUICK_REFERENCE</a>： <a href="https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md" target="_blank" rel="noopener">https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2>
<p>由于python实现的，在此可以使用<code>pip</code> 直接安装即可，命令如下</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># # 如果是在Windows平台下，未做`python3` 与 `python` 的link，在这里使用`python` 而不是`python3`</span></span><br><span class="line">python3 -m pip install --upgrade uiautomator2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>Tips： 建议使用虚拟环境</p>
</blockquote>
<p>开发版安装</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">python3 -m pip install --upgrade --pre uiautomator2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>源码安装</p>
<blockquote>
    <p>需要git客户端，若未安装git，可移步<code>https://git-scm.com/downloads</code>进行下载，</p>
    <p>当然，源码也可以使用zip的方式进行下载，请自行探索</p>
</blockquote>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">git <span class="built_in">clone</span> https://github.com/openatx/uiautomator2</span><br><span class="line">python3 -m pip install -e uiautomator2</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3>
<p>先准备一台（不要两台）开启了<code>开发者选项</code>的安卓手机，连接上电脑，确保执行<code>adb devices</code>可以看到连接上的设备。如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx45djlejbj30mr01e0sq.jpg" alt="image-20211206153159233"></p>
<p>运行<code>python3 -m uiautomator2 init</code>安装包含httprpc服务的apk到手机+<code>atx-agent, minicap, minitouch</code> </p>
<blockquote>
    <p>在过去的版本中，这一步是必须执行的，但是从1.3.0之后的版本，当运行python代码<code>u2.connect()</code>时就会自动推送这些文件了</p>
</blockquote>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接设备(当只有只有一台设备的时候可以为空，当有多台设备可以是设备号或ip地址)</span></span><br><span class="line">device = u2.connect()</span><br><span class="line"><span class="comment"># get uiautomator2 device info</span></span><br><span class="line">pprint(device.info)</span><br><span class="line"><span class="comment"># get device info</span></span><br><span class="line">pprint(device.device_info)</span><br><span class="line"><span class="comment"># get device windows size</span></span><br><span class="line">print(device.window_size())</span><br><span class="line"><span class="comment"># get device wlan ip</span></span><br><span class="line">pprint(device.wlan_ip)</span><br><span class="line"><span class="comment"># get serial id</span></span><br><span class="line">pprint(device.serial)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx45jkcixoj30d906qmxa.jpg" alt="image-20211206153746081"></p>
<h2 id="app开启与关闭"><a href="#app开启与关闭" class="headerlink" title="app开启与关闭"></a>app开启与关闭</h2>
<p>当我们需要打开对应的app时，需要知道对应设备的包名。获取包名有两种方式</p>
<ul>
    <li>在设备上打开对应的app，获取当前app包名(<code>app_current()</code>)</li>
    <li>获取全部的应用包(<code>app_list_running()</code>)</li>
</ul>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># 开启app</span></span><br><span class="line">app_start</span><br><span class="line"><span class="comment"># 关闭app</span></span><br><span class="line">app_stop</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3>
<blockquote>
    <p>此时笔者的测试手机在已经打开app</p>
</blockquote>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date         : 07-12-2021 </span></span><br><span class="line"><span class="comment"># @Author       : Payne</span></span><br><span class="line"><span class="comment"># @Email        : wuzhipeng1289690157@gmail.com</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line"></span><br><span class="line"><span class="comment"># content device</span></span><br><span class="line">device = u2.connect()</span><br><span class="line">logger.info(<span class="string">f"DEVICE INFO:<span class="subst">&#123;device.info&#125;</span>"</span>)</span><br><span class="line"><span class="comment"># check current app</span></span><br><span class="line">current_app = device.app_current()</span><br><span class="line"><span class="comment"># get the package</span></span><br><span class="line">device.app_start(current_app.get(<span class="string">'package'</span>), stop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 正态分布休眠,模拟操作</span></span><br><span class="line">time.sleep(random.uniform(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># stop all app</span></span><br><span class="line">device.app_stop_all()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>Tips: 复习一下adb command</p>
</blockquote>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># adb 命令 -- 获取报包名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># current （需要打开app）</span></span><br><span class="line">adb -s &#123;device_serial&#125; shell dumpsys activity | grep mFocusedActivity</span><br><span class="line"><span class="comment"># all</span></span><br><span class="line">adb -s &#123;device_serial&#125; shell pm list packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据关键字过滤包</span></span><br><span class="line">adb -s &#123;device_serial&#125; shell pm list packages | grep “keyword”</span><br><span class="line"><span class="comment"># 查看包安装位置 </span></span><br><span class="line">adb -s &#123;device_serial&#125; shell pm list packages -f</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h2>
<ul>
    <li>
        <p>Turn on/off screen</p>
        <figure class="highlight routeros">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line">d.screen_on() # turn on the screen</span><br><span class="line">d.screen_off() # turn off the screen</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
    <li>
        <p>Press hard/soft key</p>
        <figure class="highlight lsl">
            <table>
                <tr>
                    <td class="gutter">
                        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
                    </td>
                    <td class="code">
                        <pre><span class="line">d.press(<span class="string">"home"</span>) # press the home <span class="type">key</span>, with <span class="type">key</span> name</span><br><span class="line">d.press(<span class="string">"back"</span>) # press the back <span class="type">key</span>, with <span class="type">key</span> name</span><br><span class="line">d.press(<span class="number">0x07</span>, <span class="number">0x02</span>) # press keycode <span class="number">0x07</span>('<span class="number">0</span>') with META ALT(<span class="number">0x02</span>)</span><br></pre>
                    </td>
                </tr>
            </table>
        </figure>
    </li>
    <li>
        <p>These key names are currently supported:</p>
        <ul>
            <li>
                <p>home、back、</p>
            </li>
            <li>
                <p>left、right、up、down</p>
            </li>
            <li>
                <p>center、menu、search</p>
            </li>
            <li>
                <p>enter、delete ( or del)</p>
            </li>
            <li>
                <p>recent (recent apps)</p>
            </li>
            <li>
                <p>volume_up、volume_down、volume_mute</p>
            </li>
            <li>
                <p>camera、power</p>
            </li>
        </ul>
    </li>
    <li>
        <p>Click on the screen</p>
    </li>
</ul>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">d.click(x, y)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li>Double click</li>
</ul>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">d.double_click(x, y)</span><br><span class="line">d.double_click(x, y, 0.1) <span class="comment"># default duration between two click is 0.1s</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<ul>
    <li>long_click</li>
</ul>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">d.long_click(x, y)</span><br><span class="line">d.long_click(x, y, 0.5) <span class="comment"># long click 0.5s (default)</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2>
<p><strong>Swipe</strong></p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># Swipe</span></span><br><span class="line">swipe(self, fx, fy, tx, ty, duration: Optional[float] = <span class="literal">None</span>, steps: Optional[int] = <span class="literal">None</span>)</span><br><span class="line">fx, fy：起始坐标</span><br><span class="line">tx, ty：目标坐标</span><br><span class="line">duration： 持续时间（力度）</span><br><span class="line">steps： 分开滑动次数</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>swipe_ext</strong></p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">d.swipe_ext(<span class="string">"right"</span>) <span class="comment"># 手指右滑，4选1 "left", "right", "up", "down"</span></span><br><span class="line">d.swipe_ext(<span class="string">"right"</span>, scale=0.9) <span class="comment"># 默认0.9, 滑动距离为屏幕宽度的90%</span></span><br><span class="line">d.swipe_ext(<span class="string">"right"</span>, box=(0, 0, 100, 100)) <span class="comment"># 在 (0,0) -&gt; (100, 100) 这个区域做滑动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实践发现上滑或下滑的时候，从中点开始滑动成功率会高一些</span></span><br><span class="line">d.swipe_ext(<span class="string">"up"</span>, scale=0.8) <span class="comment"># 代码会vkk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用Direction作为参数</span></span><br><span class="line">from uiautomator2 import Direction</span><br><span class="line"></span><br><span class="line">d.swipe_ext(Direction.FORWARD) <span class="comment"># 页面下翻, 等价于 d.swipe_ext("up"), 只是更好理解</span></span><br><span class="line">d.swipe_ext(Direction.BACKWARD) <span class="comment"># 页面上翻</span></span><br><span class="line">d.swipe_ext(Direction.HORIZ_FORWARD) <span class="comment"># 页面水平右翻</span></span><br><span class="line">d.swipe_ext(Direction.HORIZ_BACKWARD) <span class="comment"># 页面水平左翻</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>Drag</strong></p>
<figure class="highlight vim">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">d.drag(sx, <span class="keyword">sy</span>, <span class="keyword">ex</span>, ey)</span><br><span class="line">d.drag(sx, <span class="keyword">sy</span>, <span class="keyword">ex</span>, ey, <span class="number">0.5</span>) </span><br><span class="line"></span><br><span class="line">sx, <span class="keyword">sy</span>：起始坐标</span><br><span class="line"><span class="keyword">ex</span>, ey：目标坐标</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>Swipe points</strong></p>
<figure class="highlight python">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment"># swipe from point(x0, y0) to point(x1, y1) then to point(x2, y2)</span></span><br><span class="line"><span class="comment"># time will speed 0.2s bwtween two points</span></span><br><span class="line"><span class="comment"># swipe_points(self, points, duration: float = 0.5)</span></span><br><span class="line">d.swipe_points([(x0, y0), (x1, y1), (x2, y2)], <span class="number">0.2</span>))</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2>
<p>选择器是一种在当前窗口中识别特定 UI 对象的便捷机制, 很多时候仅按照坐标时点击并不精确，通用型不强。</p>
<p>选择器支持以下参数。有关详细信息，请参阅<a href="http://developer.android.com/tools/help/uiautomator/UiSelector.html" target="_blank" rel="noopener">UiSelector Java 文档</a>。</p>
<ul>
    <li><code>text</code>, <code>textContains</code>, <code>textMatches</code>,<code>textStartsWith</code></li>
    <li><code>className</code>, <code>classNameMatches</code></li>
    <li><code>description</code>, <code>descriptionContains</code>, <code>descriptionMatches</code>,<code>descriptionStartsWith</code></li>
    <li><code>checkable</code>, <code>checked</code>, <code>clickable</code>,<code>longClickable</code></li>
    <li><code>scrollable</code>, <code>enabled</code>, <code>focusable</code>, <code>focused</code>,<code>selected</code></li>
    <li><code>packageName</code>, <code>packageNameMatches</code></li>
    <li><code>resourceId</code>, <code>resourceIdMatches</code></li>
    <li><code>index</code>, <code>instance</code></li>
</ul>
]]></content>
      <categories>
        <category>uiautomator2</category>
        <category>crawler</category>
        <category>mobile phone</category>
      </categories>
      <tags>
        <tag>uiautomator2</tag>
      </tags>
  </entry>
  <entry>
    <title>反爬虫常见策略总结</title>
    <url>/358032656.html</url>
    <content><![CDATA[<p>知己知彼，百战不殆 ——《孙子兵法》。</p>
<blockquote>
    <p>本文仅总结鄙人所知的反爬虫方式，不涉猎任何具体的分析与绕过方案。</p>
</blockquote>
<h1 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h1>
<p>反爬虫，即应对爬虫进行反制的统称，<strong>主要区分“正常用户”与“机器人”的一种策略统称</strong>。</p>
<h2 id="认识反爬虫"><a href="#认识反爬虫" class="headerlink" title="认识反爬虫"></a>认识反爬虫</h2>
<p>​ 正所谓知其然，知其所以然。对于反爬虫的措施有所了解与认知，一方面便于快捷定位防护点实现分析或绕过，另一方面组成爬虫攻防体系。万变自不离其宗，应对反爬虫措施游刃有余。一般常在如下几大部分<strong>设伏</strong>。</p>
<blockquote>
    <p> 以下便不考虑第三方测试工具的校验</p>
</blockquote>
<h3 id="请求前校验"><a href="#请求前校验" class="headerlink" title="请求前校验"></a>请求前校验</h3>
<h4 id="抓包拦截"><a href="#抓包拦截" class="headerlink" title="抓包拦截"></a><strong>抓包拦截</strong></h4>
<p>​ 做过爬虫的小伙伴，一定知道在分析加密、执行爬虫项目之前。首先第一步一定是先抓包，定位到对应数据包，然后继续才进行分析或规律。那么在此无疑是<strong>最为有效</strong>的反抓，捕获不到流量包URL未知，除了使用自动化测试工具、RPC等通常可能都毫无办法。</p>
<p>抓包拦截又可细分为控制台检测、端口转移、证书校验，私有协议总而言之就是让你抓不到包，其方法无所不用其极。</p>
<p>控制台检测抓包绕过策略：</p>
<ul>
    <li>
        <p>替代法: 采用<strong>中间人抓包</strong>（Charles、mitmproxy、firdler等）</p>
    </li>
    <li>
        <p>分析绕过法：定位到检测处，分析绕过</p>
    </li>
</ul>
<p>端口转移绕过策略：</p>
<ul>
    <li>强制端口</li>
    <li>流量转发</li>
</ul>
<p><strong>证书锁定与公钥锁定</strong></p>
<p>​ 为了防止中间人攻击，采用SSL-Pinning的技术来反抓包。 中间人抓包要点是伪造了一个假的证书实现拦截与转发，从而在中间获取的过路数据包实现抓包。<br>反抓思路就是，客户端也预置一份服务端的证书，比较一下就知道真假了。SSL-pinning有两种方式证书锁定（Certificate Pinning）与公钥锁定（Public Key Pinning）</p>
<p>证书锁定</p>
<blockquote>
    <p>​ 证书锁定是SSL/TLS加密的额外保证手段。它会将服务器的证书公钥预先保存在客户端。在建立安全连接的过程中，客户端会将预置的公钥和接受的证书做比较。<br>如果一致，就建立连接，否则就拒绝连接。在客户端设置证书只允许设置指定域名的证书，而不接受操作系统或浏览器内置的CA根证书对应的任何证书。</p>
</blockquote>
<p>公钥锁定</p>
<blockquote>
    <p> HTTP公钥锁定是HTTPS网站防止攻击者CA机构错误签发的证书进行中间人攻击的一种安全机制，用于预防CA遭受入侵或其他会造成CA签发未授权证书的情况。<br>采用公钥锁定时，网站会提供已授权公钥的哈希列表，指示客户端在后续通讯中只接受列表上的公钥。提取证书中的公钥并内置到客户端中，通过与服务器对比公钥值来验证连接的正确性。</p>
</blockquote>
<p>绕过：Hook到证书校验，无论如何返回正确的即可</p>
<p><strong>私有协议通讯</strong></p>
<p>一线大厂自定义通讯协议，自然考虑到了抓包。那么自然而然也设置了反抓包</p>
<p>绕过：Hook、沙箱</p>
<h4 id="运行环境检测"><a href="#运行环境检测" class="headerlink" title="运行环境检测"></a>运行环境检测</h4>
<p>CDN网络分发加验证:经典产品5秒盾</p>
<blockquote>
    <p>其核心为 请求 -&gt; cdn -&gt; 返回关键参数 -&gt; 通过 -&gt; 数据(可能为假)</p>
</blockquote>
<h3 id="请求校验"><a href="#请求校验" class="headerlink" title="请求校验"></a>请求校验</h3>
<blockquote>
    <p>当抓到包之后，便是模拟用户请求了。那么这里的常见的反抓措施有哪些呢</p>
</blockquote>
<p>请求校验，即在发送请求时即对网络请求时进行校验，实现区分。<strong>通过则返回数据，未通过不返回或返回假数据</strong>常有如下几种方式</p>
<h4 id="协议校验"><a href="#协议校验" class="headerlink" title="协议校验"></a><strong>协议校验</strong></h4>
<p>常见通用的协议有HTTP1.0、 HTTP1.1、HTTP2.0 ，若强行只允许HTTP2.0协议来完成请求与响应。那么平常使用其他</p>
<h4 id="TSL指纹"><a href="#TSL指纹" class="headerlink" title="TSL指纹"></a><strong>TSL指纹</strong></h4>
<p>每个请求库其实是有自己的库指纹，若只允许某段或某规则指纹通过，那么自然而言实现了反抓的效果。</p>
<h4 id="header校验"><a href="#header校验" class="headerlink" title="header校验"></a>header校验</h4>
<p>header校验又可分为两种。其一是字段校验，其二是header字段顺序校验</p>
<p>header各字段校验，如ua、sign、cookie、token、safe等</p>
<blockquote>
    <p>绕过方案或思想：<br>通过JS解密或逆向获取关键参数缺啥补啥，完成模拟即可</p>
</blockquote>
<p>header字段顺序：当我们打开一个网页其实是一个新的会话那么在未断开或重新连接的时候那么这个顺序就是固定的。而字典格式中位置其实是随机分配的，自定义客户端刷新，对header取指纹或字段顺序检测即可实现鉴别</p>
<blockquote>
    <p>绕过方案或思想：保持会话一致</p>
</blockquote>
<h4 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h4>
<p>通常字段不仅在header中校验还经常在请求参数中，如sgin、token、safe等。</p>
<blockquote>
    <p>参数不可无缘无故来，主要来源JS 生成、服务器下发(不限于文件、JS、wasm等)。又可进行多次中间操作</p>
</blockquote>
<h4 id="前后端分离技术Ajax"><a href="#前后端分离技术Ajax" class="headerlink" title="前后端分离技术Ajax"></a>前后端分离技术Ajax</h4>
<blockquote>
    <p>严格来说并不算反扒而是前后端分离技术,但常常结合反抓共同出现</p>
</blockquote>
<p>Ajax（异步JavaScript和XML）也叫不刷新页面请求。</p>
<h4 id="RPC防护"><a href="#RPC防护" class="headerlink" title="RPC防护"></a>RPC防护</h4>
<p>采用RPC及加密或编码方式实现前后端分离、微服务架构等。</p>
<blockquote>
    <p>rpc结合反抓基本步骤，客户端请求(中间极有可能涉猎加密)RPC服务端，RPC客户端(原服务端)再次(中间极有可能涉猎加密)请求(一次或多次)。实现“分端”请求，多端加密。</p>
    <p>逆写rpc进行调用，模拟“第一次”客户端请求rpc无差别，绕过</p>
</blockquote>
<h4 id="请求校验小结"><a href="#请求校验小结" class="headerlink" title="请求校验小结"></a>请求校验小结</h4>
<p>通常设置参数有两种情况，</p>
<ol>
    <li>二次或多次请求：<ol>
            <li>RPC：客户端请求，服务端使用RPC等再请求。</li>
            <li>AJax</li>
        </ol>
    </li>
    <li>JS设置关键参数（<strong>含二次刷新删除源文件跳转页面</strong>）</li>
</ol>
<h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2>
<ul>
    <li>识别点选或输入型</li>
    <li>滑轨、滑块型</li>
    <li>计算型</li>
    <li>空值补齐型</li>
    <li>空间推理型</li>
    <li>短信或语音验证型</li>
</ul>
<h2 id="风控"><a href="#风控" class="headerlink" title="风控"></a>风控</h2>
<p>范围极大极广，简而言之，用户行为、运行环境等是否<strong>合理</strong>。从而实现区分</p>
<p>IP封禁</p>
<p>代码运行环境检测</p>
<p>等</p>
<h3 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h3>
<p>在不改变原有展示的情况下实现<strong>“隐藏”</strong></p>
<p>通常数据保护有以下种方式：</p>
<ol>
    <li>动态字体</li>
    <li>CSS偏移</li>
    <li>内容加密映射</li>
    <li>SVG映射等</li>
    <li>内容图片化</li>
</ol>
<h2 id="代码防护"><a href="#代码防护" class="headerlink" title="代码防护"></a>代码防护</h2>
<h3 id="JS代码混淆"><a href="#JS代码混淆" class="headerlink" title="JS代码混淆"></a>JS代码混淆</h3>
<p>在遇见需要逆向的参数时候，往往不像表面一个参数那般平静。一查看各种混淆、防护又来了。怎么办怎么办，肝啊！当然也可以使用渲染工具模拟，此方案在此便不在过多赘述。</p>
<p>代码混淆是增加分析难度而牺牲部分性能的一种方案，此方案大部分是体现在通过逻辑转换换等方式将代码转化为难以分析的代码。难以分析是混淆的目的，等价转换是需要确保混淆前后的代码需不影响运行的功能。对于混淆可以又分为如下四种：布局混淆、数据混淆、控制混淆、预防混淆</p>
<p><strong>布局混淆</strong></p>
<p>布局混淆指在源代码中删除原有无用代码，处理常量名、变量名函数名等标识符，增加对于代码的阅读与分析。</p>
<p>无用代码：注释、调试信息、缩进、换行、无用函数与数据等</p>
<p>处理常量名、变量名函数名等标识符：</p>
<ul>
    <li>标识重命名：将原有代码重命名为无具体意义的字符，例如 将name 重命名为a</li>
</ul>
<blockquote>
    <p> 注意点：作用域内标识符碰撞情况</p>
</blockquote>
<p><strong>小结</strong>：布局混淆并不会影响执行的过程、内存开销，甚至代码体积反而减少了。</p>
<p><strong>数据混淆</strong></p>
<p>JS拥有常见的7种数据类型，number、string、boolean、unfined、null、Object</p>
<p><strong>数字混淆</strong></p>
<p>数据混淆有常见：进制转换、数字分治、其他</p>
<ul>
    <li>
        <p>进制转换：将十进制转化为二进制、八进制、十六进制等，从而达到“混淆”的目的</p>
    </li>
    <li>
        <p><strong>数学分治</strong>：简而言之就是将数拆开，例如 2 = 1 + 1，也等于2 - 1 - 1 + 2再辅以数学公式等</p>
    </li>
    <li>
        <p>其他：重新赋值等</p>
    </li>
</ul>
<p><strong>字符串混淆</strong></p>
<p>字符串混淆常见的有编码转换编译、加密。常见的有hash、base64、md5等</p>
<p><strong>boolean</strong></p>
<p>我们都知道Boolean值为True、False。根据对boolean的处理，变成难以显示阅读的代码。</p>
<figure class="highlight erlang-repl">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">!<span class="number">0</span>,!<span class="number">1</span></span><br><span class="line">![], !![]</span><br><span class="line">!&#123;&#125;,!!&#123;&#125;</span><br><span class="line">!NaN,!!NaN</span><br><span class="line">!<span class="string">""</span>, !!<span class="string">""</span></span><br><span class="line">!undefined, !!undefined</span><br><span class="line">!null, !!null</span><br><span class="line">!Object, !!Object</span><br><span class="line">!void(<span class="number">0</span>),!!void(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">|,||, &amp;, &amp;&amp;, Boolean()</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>控制混淆</strong></p>
<p>控制混淆是指对程序的控制流进行转换变化，常见的方式有插入僵尸代码、控制流平坦化</p>
<p>插入僵尸代码：插入僵尸代码即插入无用的代码，增强调试难度</p>
<p>控制流平坦化：控制流平坦化,将原本的的执行流程平坦化。具体可自行搜索</p>
<p><strong>预防混淆</strong></p>
<p>主要体现在 提高反混淆的难度或检测现有混淆器中的漏洞设计</p>
<h3 id="JS虚拟机"><a href="#JS虚拟机" class="headerlink" title="JS虚拟机"></a>JS虚拟机</h3>
<p>自定义或定制JavaScript虚拟机，基于给予二进制文件获取结果</p>
<h3 id="Android-iOS-SDK-加固保护"><a href="#Android-iOS-SDK-加固保护" class="headerlink" title="Android/iOS SDK 加固保护"></a>Android/iOS SDK 加固保护</h3>
<p><strong>代码混淆</strong></p>
<blockquote>
    <p>具体可参考JS混淆部分，殊归同途</p>
</blockquote>
<p><strong>Dex 加固与抽取</strong></p>
<p>​ Dex 加固即将需要保护的代码单独生成Dex，在so加载时解密jar并通过DexClassLoader加载到内存里。该方案的主要问题在于解密后的Dex会以文件形式存储在手机内存中，而且通过内存dump 的方式能够获取解密后的jar 包，而没有生成文件加载的方式存在很多兼容性的问题</p>
<p>​ 在实际对抗环境下，Dex 无论如何保护，都有方法还原至原始的Dex，进而反编译得到Java 代码。而C 代码相对而言较难逆向。Java2c 是指将原有的Java 代码抽取出来，通过jni 在native 层反射实现。</p>
<p>流程如下：Dex→smali→抽取+native 化→生成so</p>
<p>抽取后的原始Java 函数，反编译出来是native 函数，在运行过程中也不会还原。Java2c 配合C 语言的代码混淆技术和字符串混淆技术，可以对Android 的Java 代码起到很好的保护效果。同时也不需要对原始Java 代码进行重写</p>
<p><strong>LLVM</strong></p>
<p>LLVM 是Low Level Virtual Machine 的缩写，其定位是一个比较底层的虚拟机。然而LLVM 本身并不是一个完整的编译器，LLVM 是一个编译器基础架构，把很多编译器需要的功能以可调用的模块形式实现出来并包装成库，其他编译器实现者可以根据自己的需要使用或扩展，主要聚焦于编译器后端功能，如代码生成、代码优化、JIT 等。</p>
<p><strong>代码虚拟化</strong></p>
<p>​ 代码虚拟化保护技术是一种比Dex 文件保护、Java2c 技术更强的安全防护技术，可以更有效地对抗逆向工程或破解，避免造成核心技术和风控逻辑被泄密的问题。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<figure class="highlight plain">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">graph LR</span><br><span class="line">A(已有)&#x3D;&#x3D;无数次的中间转换&#x3D;&#x3D;&gt; B1(所需)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>以上便是本人对于所见所知所想的反爬虫，各种加密、编译、混淆等。中间围绕无数种可能。一起加油吧！！！</p>
<p>好像什么都说了，什么都没说。望君参考却不限于此。</p>
<p>总体来说就是抓包、请求前校验、请求校验、数据保护。以及风控、验证码、及对于代码进行保护。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Crawler</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>Web Spider</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做好自我介绍</title>
    <url>/2241892771.html</url>
    <content><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2>
<p>​ 介，古代传递宾主之言的人。绍，绍继、接续。介绍指相继传话；为人引进或带入新的事物。自我介绍是向别人展示你，认识你。</p>
<p>​ 自我介绍好不好，重要性不言而喻其直接关系到你给别人的第一印象的好坏及以后交往的顺利与否。同时，也是认识自我的手段。</p>
<h3 id="如何做好自我介绍"><a href="#如何做好自我介绍" class="headerlink" title="如何做好自我介绍"></a>如何做好自我介绍</h3>
<p>自我介绍一是为了更好的破冰，让别人记住你、了解你等，那么如何做自我介绍自然也从这几点切入。</p>
<h3 id="自嘲式"><a href="#自嘲式" class="headerlink" title="自嘲式"></a>自嘲式</h3>
<blockquote>
    <p>适用场景：演讲</p>
    <p>关键词：破冰</p>
</blockquote>
<p>有趣的自嘲可以快速吸引注意力，让人对你记忆犹新。</p>
<p>例如：你（大家）好，我叫xxx。原本想做一名x x x,可能是xxx不太好。所以目前做了xxx</p>
<h3 id="八卦式"><a href="#八卦式" class="headerlink" title="八卦式"></a>八卦式</h3>
<blockquote>
    <p>适用场景：非正式场合</p>
    <p>关键词：好奇</p>
</blockquote>
<p>在远古社会，智人凭借八卦，使整个群体更趋于稳定和学会更多的协作，而协作就是智人强大起来的秘诀，但是为什么八卦可以使一个族群稳定和协作呢?因为信任，因为八卦这种社交行为可以让智人相互信任，而信任的基础就是相互了解，八卦就是智人相互了解的过程。 ——《人类简史》</p>
<p>例如：大家好，我叫xxx，来自xxx，（合理热点）结果xxx。我xxx</p>
<h3 id="自荐式"><a href="#自荐式" class="headerlink" title="自荐式"></a>自荐式</h3>
<blockquote>
    <p>适用场景：商务场合、聚会，面试</p>
    <p>关键词：自我推荐</p>
</blockquote>
<p>我是xxx，他人最需要自我价值面。</p>
<blockquote>
    <p>切记避免<strong>多次</strong>,尽量全面</p>
</blockquote>
]]></content>
      <categories>
        <category>个人随笔</category>
        <category>所思所想</category>
      </categories>
      <tags>
        <tag>个人随笔</tag>
        <tag>所思所想</tag>
      </tags>
  </entry>
  <entry>
    <title>常见安全产品(pc)</title>
    <url>/63324.html</url>
    <content><![CDATA[<p>在做爬虫的时候，很多时候都会遇到较成熟成体系的安全产品。更好的”认识”它，对于解决有至关重要的帮助。以下一起来了解一下网站常见防护产品及特征</p>
<blockquote>
    <p>声明：本节不涉猎任何实际的产品破解，仅介绍其特征与辨别方式或思路。以下仅根据个人现所了解暂划分为一线、二线等。</p>
</blockquote>
<h3 id="一线"><a href="#一线" class="headerlink" title="一线"></a>一线</h3>
<blockquote>
    <p>学习的对象，自研产品。安全系数高，分析较困难</p>
</blockquote>
<p>ali、akamai、jd、pdd、google(含无感验证码)、各大银行支付接口</p>
<a id="more"></a>
<h4 id="ali滑块"><a href="#ali滑块" class="headerlink" title="ali滑块"></a>ali滑块</h4>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs4rk7k7tgj31p60qkq5m.jpg" alt=""></p>
<p>控制台中有g.alicdn.com字样，其中/后为版本号</p>
<h4 id="akamai"><a href="#akamai" class="headerlink" title="akamai"></a>akamai</h4>
<blockquote>
    <p>主要在tls指纹进行相关加密</p>
</blockquote>
<h4 id="jd"><a href="#jd" class="headerlink" title="jd"></a>jd</h4>
<blockquote>
    <p>自写的虚拟机</p>
</blockquote>
<h4 id="pdd"><a href="#pdd" class="headerlink" title="pdd"></a>pdd</h4>
<blockquote>
    <p>Web pack 打包 + 风控</p>
</blockquote>
<h4 id="google-含无感验证码"><a href="#google-含无感验证码" class="headerlink" title="google(含无感验证码)"></a>google(含无感验证码)</h4>
<p>5s 盾 + 谷歌验证码</p>
<p>绕过方案与线索</p>
<ul>
    <li>5秒盾 <a href="https://mp.weixin.qq.com/s/zwmatF3yTgSyS0gz8sinaA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zwmatF3yTgSyS0gz8sinaA</a></li>
    <li>谷歌验证码打码绕过方案<a href="https://cuiqingcai.com/30026.html" target="_blank" rel="noopener">https://cuiqingcai.com/30026.html</a></li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtseloz24yj61d60naaca02.jpg" alt="image-20210825014317964"></p>
<h3 id="二线"><a href="#二线" class="headerlink" title="二线"></a>二线</h3>
<blockquote>
    <p>可敬的对象</p>
</blockquote>
<p>加密与代码保护：瑞数信息（瑞数）、创宇超防（加速乐）、</p>
<p>验证码：极验、数美、五秒盾、易盾、顶象</p>
<h4 id="加密与代码保护"><a href="#加密与代码保护" class="headerlink" title="加密与代码保护"></a>加密与代码保护</h4>
<h5 id="瑞数信息（瑞数）"><a href="#瑞数信息（瑞数）" class="headerlink" title="瑞数信息（瑞数）"></a>瑞数信息（瑞数）</h5>
<ol>
    <li>未带cookie访问首先是一段神奇的页面，如下图所示</li>
</ol>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711183607468.png" alt="image-20210711183607468"></p>
<p>特征：</p>
<p>1.</p>
<p>一长段的：content。有点类似于ob的大数组</p>
<p>script标签中带有 r=“m”的字样</p>
<p>执行加密函数1，函数名为 <code>_$xx(xxx)</code></p>
<p>执行加密函数2（实际加密处）</p>
<ol>
    <li>无比恶心的乱码</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsd76unofcj30sp02qt8m.jpg" alt="ddddd"></p>
<ol>
    <li>
        <p>动态js</p>
    </li>
    <li>
        <p>版本号</p>
        <p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsd8b8qfa3j305y00i0si.jpg" alt=""></p>
        <p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711192226256.png" alt="image-20210711192226256"></p>
    </li>
</ol>
<p>首数字开头的编号，编号常见的有4、5、6代</p>
<h5 id="创宇超防（加速乐）"><a href="#创宇超防（加速乐）" class="headerlink" title="创宇超防（加速乐）"></a>创宇超防（加速乐）</h5>
<ol>
    <li>未带cookies访问，先是一段神奇的JS，设置cookie。如下图所示</li>
</ol>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711183150521.png" alt="image-20210711183150521"></p>
<p>实际内容如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsd6qt4brnj311b02qjrj.jpg" alt=""></p>
<ol>
    <li>
        <p>魔改ob</p>
        <p>用于cookies拼接</p>
        <p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsd6wykikcj31lf0u0n36.jpg" alt=""></p>
    </li>
</ol>
<h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4>
<h5 id="极验"><a href="#极验" class="headerlink" title="极验"></a>极验</h5>
<p>geetest(极验)官网：<a href="https://www.geetest.com/" target="_blank" rel="noopener">https://www.geetest.com/</a></p>
<p>demo：<a href="https://www.geetest.com/demo/" target="_blank" rel="noopener">https://www.geetest.com/demo/</a></p>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711195920957.png" alt="image-20210711195920957"></p>
<!---------->
<h5 id="数美"><a href="#数美" class="headerlink" title="数美"></a>数美</h5>
<p>官网：<a href="https://www.ishumei.com/" target="_blank" rel="noopener">https://www.ishumei.com/</a></p>
<p>体验：<a href="https://www.ishumei.com/trial/captcha.html" target="_blank" rel="noopener">https://www.ishumei.com/trial/captcha.html</a></p>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711195358760.png" alt="image-20210711195358760"></p>
<h5 id="网易易盾"><a href="#网易易盾" class="headerlink" title="网易易盾"></a>网易易盾</h5>
<p>官网：<a href="https://dun.163.com/" target="_blank" rel="noopener">https://dun.163.com/</a></p>
<p>Demo：<a href="https://dun.163.com/trial/space-inference" target="_blank" rel="noopener">https://dun.163.com/trial/space-inference</a></p>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711200120467.png" alt="image-20210711200120467"></p>
<h5 id="Vaptcha"><a href="#Vaptcha" class="headerlink" title="Vaptcha"></a>Vaptcha</h5>
<p><a href="https://www.vaptcha.com/" target="_blank" rel="noopener">https://www.vaptcha.com/</a></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsd8xpb30oj30vc0g1afq.jpg" alt=""></p>
<h5 id="顶象"><a href="#顶象" class="headerlink" title="顶象"></a>顶象</h5>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711195702599.png" alt="image-20210711195702599"></p>
<h3 id="三线"><a href="#三线" class="headerlink" title="三线"></a>三线</h3>
<blockquote>
    <p>主要来源于开源框架</p>
</blockquote>
<p>Ob混淆系（obfuscator、sojson、Jsaham）、Jsfuck、JJEncode、AAEncode、eval等、</p>
<p>obfuscator: <a href="https://obfuscator.io/" target="_blank" rel="noopener">https://obfuscator.io/</a></p>
<p>sojson：<a href="https://www.sojson.com/jsjiemi.html" target="_blank" rel="noopener">https://www.sojson.com/jsjiemi.html</a></p>
<p>Jsaham：<a href="http://www.jshaman.com/#section2" target="_blank" rel="noopener">http://www.jshaman.com/#section2</a></p>
<p>jstuck:<a href="http://www.jsfuck.com/" target="_blank" rel="noopener">http://www.jsfuck.com/</a> GitHub:<a href="https://github.com/aemkei/jsfuck" target="_blank" rel="noopener">https://github.com/aemkei/jsfuck</a></p>
<p>JJEncode:<a href="http://www.atoolbox.net/Tool.php?Id=704" target="_blank" rel="noopener">http://www.atoolbox.net/Tool.php?Id=704</a></p>
<p>JJEncode:<a href="http://www.atoolbox.net/Tool.php?Id=703" target="_blank" rel="noopener">http://www.atoolbox.net/Tool.php?Id=703</a></p>
<p>Eval:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval</a>;</p>
<p>​ 分析：eval换为console.log()(前提：console.log未改写)</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4>
<h5 id="ob系列"><a href="#ob系列" class="headerlink" title="ob系列"></a>ob系列</h5>
<p>特点</p>
<ol>
    <li>大数组</li>
    <li>数据移位（常见regex内存检测，建议不format绕过或remove regex）</li>
    <li>解密函数（常见regex内存检测，建议不format绕过或remove regex）</li>
    <li>定时器setInterval() 、setTimeout() + 无限debugger （可能含有）</li>
    <li><strong>业务代码 + 控制流平坦化：（ob强度90%取决于此代码强度、这里是加密前的逻辑）</strong></li>
    <li>控制流平坦化 + 无限debugger + 僵尸代码注入（一般不含有业务逻辑）</li>
</ol>
<p>Example:</p>
<ol>
    <li>找到实际处（ob）</li>
    <li>找前三段（数组、数组移位、解密函数），剪切出去</li>
    <li>格式化控制流平坦化、实际逻辑。放回前剪切出去的内容</li>
    <li>定位加密函数</li>
</ol>
<h5 id="Jsfuck、JJEncode、AAEncode"><a href="#Jsfuck、JJEncode、AAEncode" class="headerlink" title="Jsfuck、JJEncode、AAEncode"></a>Jsfuck、JJEncode、AAEncode</h5>
<p>配合eval类型防护：</p>
<blockquote>
    <ol>
        <li>直接放控制台console执行(报非unsafe错误)；点击错位堆栈直接完成脱壳</li>
    </ol>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsdbgkbq35j30ix0bjwet.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsdbfu2amkj31ae02maa0.jpg" alt=""></p>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210711211026971.png" alt="image-20210711211026971"></p>
<blockquote>
    <p>2.控制台不报错，构建强制报错。删除一些代码（为了不干扰原本代码，建议删除括号或加无意义代码）</p>
    <p>3。控制台报unsafe错误，自写html文件运行。参考以上</p>
</blockquote>
<p>混淆部分数字：</p>
<h3 id="四线"><a href="#四线" class="headerlink" title="四线"></a>四线</h3>
<blockquote>
    <p>工程化工具、各种加密函数魔改、辅助作用</p>
</blockquote>
<p>webpack、vue、react、angular</p>
<p>webpack：<a href="https://webpack.docschina.org/" target="_blank" rel="noopener">https://webpack.docschina.org/</a></p>
<p>关键点：加载器（也叫分发器）</p>
<p>经典绕过方案：点位插桩</p>
<p>扣取思路：找到加载器、扣出加载器构建自己的加载器（网站与关键参数（函数））、补环境</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Crawler</category>
        <category>JavaScript</category>
        <category>技巧</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>Web Spider</tag>
        <tag>数据采集</tag>
        <tag>JS</tag>
        <tag>Chrome</tag>
        <tag>JavaScript</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>新mac使用技巧入门指北</title>
    <url>/34489.html</url>
    <content><![CDATA[<p>当第一手拿到mac，第一件事也许是去。。。</p>
<p>然而我想要说的是，把基本的环境搭建一下，设置调配一下</p>
<a id="more"></a>
<h3 id="键盘、鼠标的灵敏度"><a href="#键盘、鼠标的灵敏度" class="headerlink" title="键盘、鼠标的灵敏度"></a>键盘、鼠标的灵敏度</h3>
<p>这也是个人习惯吧，我个人比较畅想那种打字、拖鼠标丝滑的感觉</p>
<p>偏好设置 -&gt; 鼠标灵敏度看自己感觉拉。</p>
<p>偏好设置 -&gt; 键盘</p>
<blockquote>
    <p>个人建议拉满</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpxcygvyc2j31100mctht.jpg" alt="image-20210426191253111"></p>
<h2 id="定制zsh编辑器"><a href="#定制zsh编辑器" class="headerlink" title="定制zsh编辑器"></a>定制zsh编辑器</h2>
<p>原生的mac，zsh是没有命令提示的，以及显示也并没有那么好看。自定制一下</p>
<h4 id="下载oh-my-zsh"><a href="#下载oh-my-zsh" class="headerlink" title="下载oh-my-zsh"></a>下载oh-my-zsh</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">git <span class="built_in">clone</span> https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="复制-zshrc"><a href="#复制-zshrc" class="headerlink" title="复制 .zshrc"></a>复制 .zshrc</h4>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="修改默认-shell-可选"><a href="#修改默认-shell-可选" class="headerlink" title="修改默认 shell(可选)"></a>修改默认 shell(可选)</h4>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">chsh -s /bin/zsh</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在终端中新建一个窗口(快捷键：command + n），你就发现不一样的shell，如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpxd433qdsj317o0e0wes.jpg" alt="image-20210426191816929"></p>
<h4 id="配置命令补全的插件"><a href="#配置命令补全的插件" class="headerlink" title="配置命令补全的插件"></a>配置命令补全的插件</h4>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions ～/.oh-my-zsh/plugins/zsh-autosuggestions</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="编辑-zshrc-文件"><a href="#编辑-zshrc-文件" class="headerlink" title="编辑 .zshrc 文件"></a>编辑 .zshrc 文件</h4>
<p>找到<code>plugins=(git)</code>,修改成<code>plugins=(git zsh-autosuggestions)</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpxee9jh16j30zc06wtb6.jpg" alt=""></p>
<h4 id="生效配置"><a href="#生效配置" class="headerlink" title="生效配置"></a>生效配置</h4>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">source ~/.zshrc</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此时你就可以看到一个全新的Terminal,快来试试吧。爽不爽自己知道</p>
<h2 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h2>
<p><a href="https://brew.sh/" target="_blank" rel="noopener">HomeBrew官方地址</a></p>
<p>简单来说他是类似于<code>yum、apt</code>,mac的包管理工具，使用它我们可以非常简单、丝滑的下载大部分的包、或者软件</p>
<p>或许第一次可以尝试使用如下命令进行安装</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>由于种种原因，如果安装不上，可以使用华科大的源进行安装</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">/bin/bash -c "$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)"</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>安装完成后，检查一下</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">brew update &amp;&amp; brew upgrade &amp;&amp; brew doctor</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>设置</p>
<figure class="highlight dsconfig">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="string">git </span>-C <span class="string">"/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-core</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="kubectl-自动补全"><a href="#kubectl-自动补全" class="headerlink" title="kubectl 自动补全"></a>kubectl 自动补全</h3>
<blockquote>
    <p>由于我习惯于zsh终端。这里给出zsh的，后面还有bash的</p>
</blockquote>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果是<code>bash</code><br>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">#</span><span class="bash"> Automatic completion of <span class="built_in">command</span></span></span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器指纹在反爬虫领域的应用</title>
    <url>/38968.html</url>
    <content><![CDATA[<p>在上文中较为详细的介绍了指纹、设备指纹的常规获取与获取指纹环境监测，本节将详细的了解一下</p>
<p>浏览器指纹在反爬虫领域的应用，Android分析暂且搁置（其实是我也并不精通，pc端比较熟悉一点）</p>
<a id="more"></a>
<p>本节详细的聊聊Web指纹，在学习前必须先给自己的几个问题？</p>
<h2 id="什么是web指纹？"><a href="#什么是web指纹？" class="headerlink" title="什么是web指纹？"></a>什么是web指纹？</h2>
<p>见上文</p>
<h3 id="Web指纹有何作用？"><a href="#Web指纹有何作用？" class="headerlink" title="Web指纹有何作用？"></a>Web指纹有何作用？</h3>
<p>Web指纹的作用有很多，例如区分环境、区分机器人与真实用户，保障正常运行，只要是web浏览器的特征均可以作为web指纹</p>
<h2 id="Web指纹有哪些？"><a href="#Web指纹有哪些？" class="headerlink" title="Web指纹有哪些？"></a>Web指纹有哪些？</h2>
<p>web指纹如下</p>
<p>全局：window、document</p>
<p>环境：navigator、screen、history</p>
<p>请求：XMLHttpRequest、fetch、worker、<code>.$ajax</code>(jquery)、SSL/TSL</p>
<p>Dom：canvas、dom的操作</p>
<p>存储：storage IndexedDB cookie</p>
<p>其他：Cache、WebGL、AndioContext、WebRTC</p>
<p>NodeJS</p>
<p>全局变量：global</p>
<p>导包：require「危险⚠️」</p>
<p>可被重写的全局</p>
<p>觉大多数的Web API</p>
<p>全部的DOM节点</p>
<p>Web API：<a href="https://developer.mozilla.org/zh-CN/docs/Web/api" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/api</a></p>
<p>NodeJs API：中文：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a> 官方： <a href="https://nodejs.org/api/" target="_blank" rel="noopener">https://nodejs.org/api/</a></p>
<p>异同：<a href="http://nodejs.cn/api/path.html" target="_blank" rel="noopener">http://nodejs.cn/api/path.html</a></p>
<p>无论做何操作均可视为区分正常用户与机器人，如果被检测出来，最简单的自然是拿不到数据，bt一点的蜜罐、甚至强制删除电脑内文件。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Crawler</category>
        <category>JavaScript</category>
        <category>技巧</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>Web Spider</tag>
        <tag>数据采集</tag>
        <tag>JS</tag>
        <tag>Chrome</tag>
        <tag>JavaScript</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>漫游密码学</title>
    <url>/2640324344.html</url>
    <content><![CDATA[<p>作为一名优秀的新时代农民工，加密解密、编码算法自然逃不了。为了更安全、更隐蔽 数字签名，信息加密在开发过程中一定少不了，例如用户密码、关键消息等等，所以密码学至关重要。</p>
<p>作为爬虫工程师，逆向工程师见到目标的加密后的结果，而又无法有效的获取与定位到关键函数。那岂不是抓瞎，那么如果对于常见的加密、编码算法算法有足够的了解，那么是可以便捷很多，例如</p>
<ul>
    <li>根据特征结果，直接Hook对应函数。通常有奇效</li>
    <li>根据特征结果，与所知的参数进行尝试碰撞。也可大幅度减少分析时间</li>
</ul>
<p>等等，书到用时方恨少，知识与见识自然也是。</p>
<a id="more"></a>
<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2>
<p>​ 结合爬虫来看，对于密码学，加密与解密掌握自然的越精通越好，同时这又是一陡峭的过程。相较于与密码学相关知识结合爬虫来看并不一定要成为“密码学专家”，但确实拥有足够的<strong>了解</strong>将对于我们在逆向、防护方面有不错的帮助。就爬虫来说其中包含但不限于进制、摘要、非对称加密、对称加密等。</p>
<h2 id="0x02-加密与解密"><a href="#0x02-加密与解密" class="headerlink" title="0x02 加密与解密"></a>0x02 加密与解密</h2>
<p>加密，是以某种特殊的算法改变原有的信息数据</p>
<p>解密，加密的逆过程，常为加密等逆处理。</p>
<p>具体实现有编码算法，摘要算法、对称加密、非对称加密等。当然这之间可以一次或多次、一个或多个过程使用</p>
<h2 id="0x03-编码算法"><a href="#0x03-编码算法" class="headerlink" title="0x03 编码算法"></a>0x03 编码算法</h2>
<p>编码是信息从一种形式或格式转换为另一种形式的过程。根据映射关系实现转换。</p>
<p>常见的算法有Base16、Base32、Base64</p>
<h2 id="0x04-摘要算法"><a href="#0x04-摘要算法" class="headerlink" title="0x04 摘要算法"></a>0x04 摘要算法</h2>
<p>​ 消息摘要算法的主要特征是<strong>加密过程不需要密钥</strong>，并且经过加密的数据<strong>理论</strong>上无法被解密，目前可以被解密逆向的只有<a href="https://baike.baidu.com/item/CRC32/7460858" target="_blank" rel="noopener">CRC32</a>算法，只有输入相同的明文数据经过相同的消息摘要算法才能得到相同的密文。消息摘要算法不存在密钥的管理与分发问题，较为适合于分布式网络上使用。由于其加密计算的工作量相当可观，这种算法通常只用于数据量有限的情况下的加密，</p>
<p>​ 消息摘要算法主要应用在“数字签名”领域，作为对明文的摘要算法。著名的摘要算法有MD5算法和SHA-1算法及其大量的变体。</p>
<blockquote>
    <p>MD5:</p>
    <blockquote>
        <p>默认key:01234567890abdcdef</p>
    </blockquote>
    <p>变体：md2、md4、md5、hmac(带密码的md5)</p>
    <p>种类：16位 32位 40位</p>
    <p>SHA-1:</p>
    <p>sha1 40位</p>
    <p>sha256 64位</p>
    <p>sha512 128位</p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3>
<p>消息摘要是把任意长度的输入揉和而产生长度固定的<a href="https://baike.baidu.com/item/伪随机" target="_blank" rel="noopener">伪随机</a>输入的算法。消息摘要的主要特点有：</p>
<ol>
    <li>
        <p>无论输入的消息有多长，计算出来的消息摘要的长度总是固定的。例如应用MD5算法摘要的消息有128个比特位，用SHA-1算法摘要的消息最终有160比特位的输出，SHA-1的变体可以产生192比特位和256比特位的消息摘要。一般认为，摘要的最终输出越长，该摘要算法就越安全。</p>
    </li>
    <li>
        <p>消息摘要看起来是“随机的”。这些比特看上去是胡乱的杂凑在一起的。可以用大量的输入来检验其输出是否相同，一般，不同的输入会有不同的输出，而且输出的摘要消息可以通过<a href="https://baike.baidu.com/item/随机性" target="_blank" rel="noopener">随机性</a>检验。但是，一个摘要并不是真正随机的，因为用相同的算法对相同的消息求两次摘要，其结果必然相同；而若是真正随机的，则无论如何都是无法重现的。因此消息摘要是“伪随机的”。</p>
    </li>
    <li>
        <p>一般地，只要输入的消息不同，对其进行摘要以后产生的摘要消息也必不相同；但相同的输入必会产生相同的输出。这正是好的消息摘要算法所具有的性质：输入改变了，输出也就改变了；两条相似的消息的摘要确不相近，甚至会大相径庭。</p>
    </li>
    <li>
        <p>消息摘要函数是无<a href="https://baike.baidu.com/item/陷门" target="_blank" rel="noopener">陷门</a>的单向函数，即只能进行正向的信息摘要，而无法从摘要中恢复出任何的消息，甚至根本就找不到任何与原信息相关的信息。当然，可以采用强力攻击的方法，即尝试每一个可能的信息，计算其摘要，看看是否与已有的摘要相同，如果这样做，最终肯定会恢复出摘要的消息。但实际上，要得到的信息可能是无穷个消息之一，所以这种强力攻击几乎是无效的。</p>
    </li>
    <li>
        <p>好的摘要算法，没有人能从中找到“碰撞”，虽然“碰撞”是肯定存在的。即对于给定的一个摘要，不可能找到一条信息使其摘要正好是给定的。或者说，无法找到两条消息，使它们的摘要相同。</p>
    </li>
</ol>
<h2 id="0x05加密"><a href="#0x05加密" class="headerlink" title="0x05加密"></a>0x05加密</h2>
<p>​ 加密一般分为对称式加密以及非对称式加密两类。采用的比较广泛的是对称式加密，主要特点是加密和解密使用同一个密钥。</p>
<p>​ 而非对称式加密在进行加密时则使用了两个密钥，加密和解密过程中分别使用不同的密钥，这两个密钥分别为“公钥”以及“私钥”，想要能正常完成加密解密过程，就必需配对使用，而在使用过程中，“公钥”是公开的，“私钥”则必须由发送人保密，同时只能由持有人所有。</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3>
<p>​ 需要对加密和解密使用相同密钥的加密算法。由于其速度快，对称性加密通常在消息发送方需要加密大量数据时使用。对称性加密也称为密钥加密。</p>
<p>​ 所谓对称，就是采用这种加密方法的双方使用方式用同样的密钥进行加密和解密。密钥是控制加密及解密过程的指令。算法是一组规则，规定如何进行加密和解密。</p>
<p>​ 因此加密的安全性不仅取决于<strong>加密算法本身，密钥管理的安全性更是重要</strong>。因为加密和解密都使用同一个密钥，如何把密钥安全地传递到解密者手上就成了必须要解决的问题。对称加密算法中常用的算法有：<a href="https://baike.baidu.com/item/DES" target="_blank" rel="noopener">DES</a>、<a href="https://baike.baidu.com/item/3DES" target="_blank" rel="noopener">3DES</a>、TDEA、<a href="https://baike.baidu.com/item/Blowfish" target="_blank" rel="noopener">Blowfish</a>、RC2、RC4、<a href="https://baike.baidu.com/item/RC5" target="_blank" rel="noopener">RC5</a>、<a href="https://baike.baidu.com/item/IDEA" target="_blank" rel="noopener">IDEA</a>、SKIPJACK等。</p>
<p>采用单钥密码的加密方法，同一个密钥可以同时用来加密和解密，这种加密方法称为对称加密，也称为单密钥加密。常用的单向加密算法：</p>
<p>1、DES（Data Encryption Standard）：<a href="https://baike.baidu.com/item/数据加密标准/1577169" target="_blank" rel="noopener">数据加密标准</a>，速度较快，适用于加密大量数据的场合；</p>
<p>2、3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高；</p>
<p>3、AES（Advanced Encryption Standard）：<a href="https://baike.baidu.com/item/高级加密标准/468774" target="_blank" rel="noopener">高级加密标准</a>，是下一代的加密算法标准，速度快，安全级别高，支持128、192、256、512位密钥的加密；</p>
<p>4、Blowfish</p>
<p><strong>算法特征</strong></p>
<p>1、加密方和解密方使用同一个密钥；</p>
<p>2、加密解密的速度比较快，适合数据比较长时的使用；</p>
<p>3、密钥传输的过程不安全，且容易被破解，密钥管理也比较麻烦；</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3>
<p>非对称加密算法需要两个<a href="https://baike.baidu.com/item/密钥/101144" target="_blank" rel="noopener">密钥</a>来进行加密和解密，这两个密钥是<a href="https://baike.baidu.com/item/公开密钥/7453570" target="_blank" rel="noopener">公开密钥</a>（public key，简称公钥）和私有密钥（private key，简称私钥）。</p>
<ul>
    <li><strong>RSA：</strong>RSA 是一种目前应用非常广泛、历史也比较悠久的非对称秘钥加密技术，在1977年被麻省理工学院的罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）三位科学家提出，由于难于破解，RSA 是目前应用最广泛的数字加密和签名技术，比如国内的支付宝就是通过RSA算法来进行签名验证。它的安全程度取决于秘钥的长度，目前主流可选秘钥长度为 1024位、2048位、4096位等，理论上秘钥越长越难于破解，按照维基百科上的说法，小于等于256位的秘钥，在一台个人电脑上花几个小时就能被破解，512位的秘钥和768位的秘钥也分别在1999年和2009年被成功破解，虽然目前还没有公开资料证实有人能够成功破解1024位的秘钥，但显然距离这个节点也并不遥远，所以目前业界推荐使用 2048 位或以上的秘钥，不过目前看 2048 位的秘钥已经足够安全了，支付宝的官方文档上推荐也是2048位，当然更长的秘钥更安全，但也意味着会产生更大的性能开销。</li>
    <li><strong>DSA：</strong>既 Digital Signature Algorithm，数字签名算法，他是由美国国家标准与技术研究所（NIST）与1991年提出。和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。</li>
    <li><strong>ECDSA：</strong>Elliptic Curve Digital Signature Algorithm，椭圆曲线签名算法，是ECC（Elliptic curve cryptography，椭圆曲线密码学）和 DSA 的结合，椭圆曲线在密码学中的使用是在1985年由Neal Koblitz和Victor Miller分别独立提出的，相比于RSA算法，ECC 可以使用更小的秘钥，更高的效率，提供更高的安全保障，据称256位的ECC秘钥的安全性等同于3072位的RSA秘钥，和普通DSA相比，ECDSA在计算秘钥的过程中，部分因子使用了椭圆曲线算法。</li>
</ul>
<h3 id="加密小结"><a href="#加密小结" class="headerlink" title="加密小结"></a>加密小结</h3>
<p>对称加密只需要获取到公钥即可，进行解密</p>
<p><a href="https://baike.baidu.com/item/非对称加密算法" target="_blank" rel="noopener">非对称加密算法</a>需要两个<a href="https://baike.baidu.com/item/密钥" target="_blank" rel="noopener">密钥</a>：<a href="https://baike.baidu.com/item/公开密钥" target="_blank" rel="noopener">公开密钥</a>（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2>
<p>​ 简单来说加密与解密就阐述了密码学基本特征，非专业的了解。可大致了解编码、摘要、对称加密、非对称加密即可。后有兴趣可深入</p>
]]></content>
      <categories>
        <category>密码学</category>
        <category>加密与解密</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>加密与解密</tag>
      </tags>
  </entry>
  <entry>
    <title>执行一条SQL，这之间到底发生了啥？</title>
    <url>/11430.html</url>
    <content><![CDATA[<h3 id="MySQL模型初探"><a href="#MySQL模型初探" class="headerlink" title="MySQL模型初探"></a>MySQL模型初探</h3>
<p>MySQL基础结构是采用典型的C/S工作模型(即是server/client)</p>
<a id="more"></a>
<p>以sshd与xshell为例,如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm9saa2hxxj30s60f0wfd.jpg" alt=""></p>
<h2 id="MySQL客户端实例："><a href="#MySQL客户端实例：" class="headerlink" title="MySQL客户端实例："></a>MySQL客户端实例：</h2>
<p>MySQL客户端主要有以下功能</p>
<ul>
    <li>连接数据库</li>
    <li>发送指令</li>
</ul>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3>
<p>socket连接方式与远程TCP/IP连接</p>
<p>在Linux中<code>/etc/my.cnf</code>文件中显示（已完成MySQL的安装）</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">socket= /tmp/MySQL.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例如下</span></span><br><span class="line">root@ecs-dc8a-0003:~<span class="comment"># cat /etc/my.cnf                                                                                        </span></span><br><span class="line">[client]</span><br><span class="line"><span class="comment">#password       = your_password</span></span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/MySQL.sock</span><br><span class="line"></span><br><span class="line">[MySQLd]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/MySQL.sock</span><br><span class="line">datadir = /www/server/data</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">performance_schema_max_table_instances = 400</span><br><span class="line">table_definition_cache = 400</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size = 1024M</span><br><span class="line"></span><br><span class="line">---略</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="连接MySQL的两种方式实现"><a href="#连接MySQL的两种方式实现" class="headerlink" title="连接MySQL的两种方式实现"></a>连接MySQL的两种方式实现</h3>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">way1: <span class="comment"># 只能在本地使用，不依靠ip地址与端口号</span></span><br><span class="line">在本地可直接使用如下命令进行scoket连接	</span><br><span class="line">MySQL -S /tmp/MySQL.sock</span><br><span class="line"></span><br><span class="line">way2: <span class="comment"># “远程”连接(基于TCP/IP)</span></span><br><span class="line">MySQL -h ip -P 3306 -u username -p passwd</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>常用参数示例:</p>
    <p><code>-S</code>: 指定socker文件</p>
    <p><code>-h</code>: 指定连接ip地址</p>
    <p><code>-P</code>：指定连接端口号，默认为3306</p>
    <p><code>-u</code>: 指定连接用户名</p>
    <p>`-p 指定连接密码</p>
</blockquote>
<h3 id="发送指令"><a href="#发送指令" class="headerlink" title="发送指令"></a>发送指令</h3>
<p>即发送操作数据库指令(SQL语句)</p>
<blockquote>
    <p><strong>SQL种类</strong></p>
    <p>DDL 数据定义语言</p>
    <p>DCL 数据控制语言</p>
    <p>DML 数据操作语言</p>
    <p>DQL 数据查询语言</p>
</blockquote>
<h2 id="服务器端-实例"><a href="#服务器端-实例" class="headerlink" title="服务器端(实例):"></a>服务器端(实例):</h2>
<p>实例：My sqld + 工作线程 + 预分配内存 </p>
<p>功能：管理数据(增删改查等)</p>
<h3 id="MySQLd工作模型"><a href="#MySQLd工作模型" class="headerlink" title="MySQLd工作模型"></a>MySQLd工作模型</h3>
<p>MySQLd的工作模型可分为两块，<code>server</code>层，<code>引擎层</code>，server层可细分为<code>连接层</code>、<code>SQL层</code></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmace22omuj30em0jit8k.jpg" alt="MySQLd工作模型"></p>
<h3 id="连接层：提供连接"><a href="#连接层：提供连接" class="headerlink" title="连接层：提供连接"></a>连接层：提供连接</h3>
<ol>
    <li>提供可连接协议，例如（TCP/IP， socket）</li>
    <li>验证用户名密码等连接</li>
    <li>提供专用的连接线程</li>
</ol>
<p>在MySQL命令行中使用<code>show processlist;</code>查看连接线程,如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmacry3p4cj31p608wab1.jpg" alt=""></p>
<h3 id="SQL层：执行SQL"><a href="#SQL层：执行SQL" class="headerlink" title="SQL层：执行SQL"></a>SQL层：执行SQL</h3>
<ol>
    <li>验证SQL语句(语法检查)</li>
    <li>语意(SQL语句种类，DDL，DCL，DML，DQL)</li>
    <li>权限验证</li>
    <li>解析器：解析预处理，列举所有可行的方案</li>
    <li>优化器：MySQL会采用自己的估价函数去预估选择”最优执行”方法</li>
    <li>执行器：执行其按照优化器选择执行SQL语句</li>
    <li>日志记录(bingo二进制日志\glog，默认不开启。需人工开启)</li>
</ol>
<p>MySQL中有查询缓存这么一说(query_cache,默认不开启)，当业务量有大量相同的查询等操作，我们一般采用Redis进行一个缓存.</p>
<h3 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h3>
<p>相当于Linux中文件系统，与磁盘交互的模块</p>
<h2 id="SQL语句执行流程"><a href="#SQL语句执行流程" class="headerlink" title="SQL语句执行流程"></a>SQL语句执行流程</h2>
<p>那么各层之间有什么作用呢？请听我细细说来，在这样我们使用一条SQL语句执行流程来理解一下此流程。</p>
<p>当需要执行SQL语句的时候，必然需要服务端（MySQLd）存在，那么我们无论如何是需要首先开启MySQLd的服务</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmahqqq935j31000sgwj9.jpg" alt=""></p>
<h3 id="服务端开启"><a href="#服务端开启" class="headerlink" title="服务端开启"></a>服务端开启</h3>
<p>首先开启MySQL服务即(MySQLd),成功开启此服务后，主要体现为<code>MySQLd实例</code>，开启工作线程，向系统申请内存(此内存为预分配内存，一旦分配无论使用与否，其他应用均不可使用)</p>
<p>MySQLd开启后，打开server层 存储引擎层，其中server层中连接层提供连接，sql层准备接受客户端指令，存储引擎层与系统磁盘交互。至此MySQLd服务开启成功</p>
<h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3>
<p>假设MySQL服务端启动完成之后，我们可以采用<code>TCP/IP</code>或者<code>socket</code>协议连接MySQL数据库。那么我们此时便发起连接请求。输入以下连接命令</p>
<figure class="highlight sh">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">MySQL -h ip -P 3306 -u username -p passwd</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>服务端接受到连接请求，将会进行以下几步操作。(发生在服务端，肉眼无法直接看见)</p>
<p>首先会验证连接请求的账号与密码。去MySQL.user表中去寻找账号名，账号名不存在断开连接，账号存在下一步寻找对应加密了的密码。与之对应验证。验证成功后，分配此连接专用的连接线程。并提供服务。</p>
<p>连接成功之后如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmai4ejkq8j31920gs0us.jpg" alt=""></p>
<p>接下来我们，在MySQL的终端上执行如下sql查询语句,它的意思是从MySQL库中的user表查询字段名(表头)为<code>host,name</code>的所有内容</p>
<figure class="highlight n1ql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span> host,name <span class="keyword">from</span> MySQL.<span class="keyword">user</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>当MySQLd接收到此指令之后，会进行以下几步操作。</p>
<ol>
    <li>
        <p>语法检查，如果语法不属于sql语句系列，直接抛出错误，终止执行此语句。若通过之后执行下一步</p>
    </li>
    <li>
        <p>语义，进一步释意sql语句。若表不存在，字段名不存在。直接抛出错误，终止执行此语句。若通过之后执行下一步</p>
    </li>
    <li>
        <p>验证<code>用户权限</code>，顾名思义，这个没什么好说的</p>
    </li>
    <li>
        <p>解析预处理，经过层层验证到了此步骤之后，说明此语句是可以被执行的。那么此时MySQLd会采用”演练”枚举列出所有的可执行方案。我们或多或少的知道，需要达到相同的效果，达成的方法有各种各样。此时MySQL会列举出所有的方案。例如，以”select host,name from MySQL.user;”这条SQL语句为例，它可达到目的的方式至少有两种，</p>
        <ul>
            <li>方案1.对MySQL下的user表进行全表查询，后截断塞选出user表查询字段名(表头)为<code>host,name</code>的所有内容。</li>
            <li>方案2.对MySQL下user表字段<code>host,name</code>进行查询，后直接输出</li>
        </ul>
        <p>虽然二者执行的结果是一致的但资源消耗却并不是一致的</p>
    </li>
    <li>
        <p>优化器，经过上一步的解析预处理之后，这一步MySQL会采用直接的估计函数，进行资源损耗的预估，从而选择“最优”</p>
    </li>
    <li>
        <p>得到优化器的方案选举结果，执行</p>
    </li>
    <li>
        <p>到存储引擎层申请数据，存储引擎层向磁盘获取数据</p>
    </li>
    <li>
        <p>查询</p>
    </li>
    <li>
        <p>查询成功，释放内存</p>
    </li>
    <li>
        <p>输出</p>
    </li>
</ol>
<p>执行成功后，如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmaifmwzqfj30mu0ca74v.jpg" alt=""></p>
<p>那么到这里你可能会有以下两个疑问</p>
<p>疑问一：</p>
<p>既然MySQL有‘优化器’来帮助我们进行最优的执行方案，那么是否我们的SQL语句只要能正常运行就好了呢？反正它都是“最优的”执行方案。</p>
<p>理论上确实如此，但是实际上却并不一定是这样的。MySQL的优化器仅仅帮我们达到了局部最优，而不是全局最优。类似于“贪心算法”思路，我们得到的最终结果就并不一定是全局最优的。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫:有什么让人眼前一亮的调试习惯与技巧</title>
    <url>/10849.html</url>
    <content><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy39xz1a8j31hc0u077n.jpg" alt=""></p>
<p>在爬虫调试的时候一个良好的调试习惯,正确的调试技巧。绝对能让您在抓包，定位及JS解密与JS逆向等各种方面事半功倍。</p>
<a id="more"></a>
<h2 id="优秀的调试习惯"><a href="#优秀的调试习惯" class="headerlink" title="优秀的调试习惯"></a>优秀的调试习惯</h2>
<h3 id="无痕模式"><a href="#无痕模式" class="headerlink" title="无痕模式"></a>无痕模式</h3>
<p>无痕浏览（<a href="https://baike.baidu.com/item/隐私浏览模式" target="_blank" rel="noopener">隐私浏览模式</a>、隐身窗口、InPrevate），是指不留下上网浏览记录的互联网浏览方式。但是，用户下载的文件和建立的收藏夹或书签会保存下来。支持该模式的浏览器包括但不限于百度浏览器，Firefox火狐，搜狗浏览器，360安全浏览器，Avant browser ，世界之窗浏览器，Google Chrome，Internet Explorer 8及更新版本，Edge，Safari.</p>
<h4 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h4>
<p> 不记录上网痕迹，保护您的个人隐私</p>
<p> 不记录 Cookies</p>
<p> 不记录 Internet <a href="https://baike.baidu.com/item/临时文件" target="_blank" rel="noopener">临时文件</a></p>
<p> 不记录网页表单数据（用户名、密码、搜索关键词等）</p>
<p> 不记录撤销页面列表，即历史记录</p>
<p>等等</p>
<h4 id="特别提醒"><a href="#特别提醒" class="headerlink" title="特别提醒"></a>特别提醒</h4>
<p><strong>通过无痕浏览不会影响其他用户、服务器或软件。但请谨防以下情况：</strong></p>
<ul>
    <li>进行无痕浏览时，您下载的文件、新收藏的网址、新修改的浏览器配置将仍然被保留。</li>
    <li>因特网服务提供商或雇主还是可以追溯用户访问过的页面。</li>
    <li>如果想要清除电脑中的网页浏览痕迹，可以使用安全软件（如360安全卫士）的清理痕迹按钮或手动删除历史记录和缓存文件。</li>
    <li>因为是无痕浏览，同样浏览器原先保存的密码和账号同样无法使用，这也会给网络浏览带来不便之处。</li>
    <li>网站收集或分享您的相关信息</li>
    <li>以提供免费表情图片为名跟踪按键记录的恶意软件</li>
    <li>在您浏览过程中的监视者</li>
    <li>浏览器插件信息的窃取</li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4>
<ul>
    <li>IE 和 Chrome 都会在无痕浏览下默认关闭扩展功能，而 FireFox 不一样，在隐私模式下仍然可以使用插件，这无疑又给隐私泄露提供了另一个途径。</li>
    <li>所以在关闭Firefox的隐私浏览模式后，您需要检查浏览器插件是否记录了浏览信息，或在隐私模式前暂时禁用不需要开启的插件，否则您的信息可能会被公开</li>
    <li>部分插件（如Adobe Flash Player）拥有一套自己的Cookie系统，在隐私模式下 Cookies 仍然会正常工作，甚至在隐私模式下获取的 Cookies 一样是公开可读的。在退出无痕浏览后您需要手动清除Cookis才能做到完全无痕。</li>
</ul>
<h4 id="系统隔离技术"><a href="#系统隔离技术" class="headerlink" title="系统隔离技术"></a>系统隔离技术</h4>
<p>通过一些轻量级的<a href="https://baike.baidu.com/item/虚拟系统" target="_blank" rel="noopener">虚拟系统</a>实现，具体原理：轻量级的虚拟系统可以实现与<a href="https://baike.baidu.com/item/主机系统" target="_blank" rel="noopener">主机系统</a>相互隔离目标，隔离的实现是通过<a href="https://baike.baidu.com/item/镜像" target="_blank" rel="noopener">镜像</a>主机系统环境生成独立的操作系统<a href="https://baike.baidu.com/item/桌面环境" target="_blank" rel="noopener">桌面环境</a>，用户可以在<a href="https://baike.baidu.com/item/虚拟环境" target="_blank" rel="noopener">虚拟环境</a>下安装和使用Internet Explorer，遨游，<a href="https://baike.baidu.com/item/QQ浏览器" target="_blank" rel="noopener">QQ浏览器</a>，Firefox等等<a href="https://baike.baidu.com/item/第三方浏览器" target="_blank" rel="noopener">第三方浏览器</a>，轻量级虚拟系统具有启动资源占用率低，可移动便携方便。这类产品有：VMware Workstation ，Prayaya v3虚拟系统，Ceedo，Macpac等等。</p>
<h4 id="沙盒技术"><a href="#沙盒技术" class="headerlink" title="沙盒技术"></a>沙盒技术</h4>
<p>所谓<a href="https://baike.baidu.com/item/沙盒技术" target="_blank" rel="noopener">沙盒技术</a>，具体见百科（<a href="https://baike.baidu.com/item/sandbox" target="_blank" rel="noopener">sandbox</a>)，沙盒技术可以重定向<a href="https://baike.baidu.com/item/主机系统" target="_blank" rel="noopener">主机系统</a>环境操作到其他的存储空间，以及重定向变量，同时沙盒退出后会自动消失原先的<a href="https://baike.baidu.com/item/虚拟环境" target="_blank" rel="noopener">虚拟环境</a>连接由此达到安装到沙盒中的应用程序不在主机系统中保留痕迹的目的。这类产品有：360安全浏览器，Google 浏览器，火狐浏览器，遨游浏览器等</p>
<h4 id="为什么建议使用无痕模式进行调试"><a href="#为什么建议使用无痕模式进行调试" class="headerlink" title="为什么建议使用无痕模式进行调试"></a>为什么建议使用无痕模式进行调试</h4>
<p>当我们使用浏览器访问的时候，难免会由于cookies未及时手动清理，JS缓存等各种情况存在造成调试误差。让人难以快速正确的调试出问题。</p>
<h3 id="多浏览器"><a href="#多浏览器" class="headerlink" title="多浏览器"></a>多浏览器</h3>
<p>多浏览器在这里指使用多个不同的浏览器进行调试，而非仅仅使用Chrome。其中的益处不言而喻，多浏览器能够快速的找到不同。</p>
<h3 id="优秀的调试方式与技巧"><a href="#优秀的调试方式与技巧" class="headerlink" title="优秀的调试方式与技巧"></a>优秀的调试方式与技巧</h3>
<blockquote>
    <p>优秀的调试技巧，能够让你事半功倍，极大的降低调试难度。</p>
</blockquote>
<h4 id="巧用DevTools搜索工具快速定位数据接口"><a href="#巧用DevTools搜索工具快速定位数据接口" class="headerlink" title="巧用DevTools搜索工具快速定位数据接口"></a>巧用DevTools搜索工具快速定位数据接口</h4>
<p>当我们确定了需要抓取数据的目标网站，往往是这种情况。里面参杂了不少不包含数据的包，例如这样。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvq9pigxwj312c0kqwfu.jpg" alt=""></p>
<p>那么如果需要过去该页面数据，就必须找到对应的数据包，一个一个去找明显不现实。有什么方法可以快的定位到该数据包呢？我们可以这样操作。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxwjtd2efj30d60dv0t0.jpg" alt=""></p>
<p>第一步：鼠标左键点击“放大镜”，呼出Search面板。</p>
<p>第二步：搜索对应的内容，支持大小写敏感，正则</p>
<p>第三步：根据结果，鼠标双击对应内容，即可直接跳至对应包位置</p>
<h4 id="巧用重放攻击快速定位加密位置"><a href="#巧用重放攻击快速定位加密位置" class="headerlink" title="巧用重放攻击快速定位加密位置"></a>巧用重放攻击快速定位加密位置</h4>
<p>当网站有相关的验证时，由于参数过多，无法快速的确定哪个参数才是真正决定是否为真实数据的时候，那么我们可以采用重放攻击的方式。进行测试从而快速定位加密位置。</p>
<h5 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h5>
<p>重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的<a href="https://baike.baidu.com/item/主机/455151" target="_blank" rel="noopener">主机</a>已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用<a href="https://baike.baidu.com/item/网络监听/10914318" target="_blank" rel="noopener">网络监听</a>或者其他方式盗取认证凭据，之后再把它重新发给<a href="https://baike.baidu.com/item/认证服务器" target="_blank" rel="noopener">认证服务器</a>。重放攻击在任何网络通过程中都可能发生，是计算机世界<a href="https://baike.baidu.com/item/黑客/118396" target="_blank" rel="noopener">黑客</a>常用的攻击方式之一。 </p>
<h5 id="重放攻击的原理"><a href="#重放攻击的原理" class="headerlink" title="重放攻击的原理"></a>重放攻击的原理</h5>
<p>重放攻击的基本原理就是把以前<a href="https://baike.baidu.com/item/窃听/1624599" target="_blank" rel="noopener">窃听</a>到的数据原封不动地重新发送给接收方。很多时候，网络上传输的数据是<a href="https://baike.baidu.com/item/加密/752748" target="_blank" rel="noopener">加密</a>过的，此时窃听者无法得到数据的准确意义。但如果他知道这些数据的作用，就可以在不知道数据内容的情况下通过再次发送这些数据达到愚弄接收端的目的。例如，有的系统会将鉴别信息进行简单加密后进行传输，这时攻击者虽然无法窃听<a href="https://baike.baidu.com/item/密码/65553" target="_blank" rel="noopener">密码</a>，但他们却可以首先截取加密后的口令然后将其重放，从而利用这种方式进行有效的攻击。再比如，假设网上存款系统中，一条消息表示用户支取了一笔存款，攻击者完全可以多次发送这条消息而偷窃存款</p>
<h5 id="重放攻击的类型"><a href="#重放攻击的类型" class="headerlink" title="重放攻击的类型"></a>重放攻击的类型</h5>
<p><strong>1.根据重放消息的接收方与消息的原定接收方的关系，重放攻击可分为3种：</strong> </p>
<p>第一种是直接重放，即重放给原来的验证端，直接重放的发送方和接收方均不变。 </p>
<p>第二种是反向重放，将原本发给接收方的消息反向重放给发送方。 </p>
<p>第三种是第三方重放，将消息重放给域内的其他验证端。 </p>
<p><strong>2.基于重放法发生在什么回合，可以将重放攻击分为两类：</strong> </p>
<p>(1)在当前回合外攻击中，重放的消息来自协议当前回合之外，因此至少涉及协议的两个回合运行，可以并发也可以顺序地实现。 </p>
<p>①交错攻击需要两回合或多回合同时执行<a href="https://baike.baidu.com/item/协议/13020269" target="_blank" rel="noopener">协议</a>，著名的例子是Lowe对NSPK协议的攻击。 [5] </p>
<p>②经典重放也涉及当前回合外执行协议，但不要求同时执行协议。攻击者存储在前面的回合中所传送的消息，并抓住机会重放它们，对协议的当前回合进行攻击。Denning和Sacco对NSSK协议的攻击，就是经典重放的一个著名例子。 </p>
<p>(2)在当前回合内攻击中，重放的消息来自协议当前回合。 </p>
<p><strong>3.考查攻击者对消息重定向，这种分类法称为目的地分类法。分类如下。 </strong> </p>
<p>(1)偏转重放攻击：重放消息重新定向，发送给不同于原接收者的第三方。这种情形可进一步分为如下子类： </p>
<p>①重放消息重定向，发送给原发送者，称为反射重放攻击。 </p>
<p>②重放消息重定向，发送给第三方，即不同于原发送者和原接收方的第三方。</p>
<p>(2)攻击者通过延时的方法(可能涉及不同的协议回合)，将消息传送给目的地，称为直接重放攻击。 </p>
<blockquote>
    <p>以上信息来自<a href="https://baike.baidu.com/item/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB/2229240?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>
</blockquote>
<h5 id="简单操作流程如下"><a href="#简单操作流程如下" class="headerlink" title="简单操作流程如下"></a>简单操作流程如下</h5>
<p>首先先确定数据包，获取该数据包中的URL。使用代码或脚本间隔一定时间发送网络请求。若根据时间到推移，手动对于请求参数的修改。进行多次验证。基本结构图如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqvr9k38vtj30k90gmt8w.jpg" alt=""></p>
<p><strong>多次</strong>请求验证，确定加密处。</p>
<h4 id="妙用中间人攻击进行抓包"><a href="#妙用中间人攻击进行抓包" class="headerlink" title="妙用中间人攻击进行抓包"></a>妙用中间人攻击进行抓包</h4>
<p>在很多情况下一个DevTools解决所有，但也有很少部分针对此进行了限制。</p>
<h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4>
<p>中间人攻击（Man-in-the-MiddleAttack，简称“<a href="https://baike.baidu.com/item/MITM攻击/15637385" target="_blank" rel="noopener">MITM攻击</a>”）是一种“间接”的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为“中间人”。</p>
<p>中间人原理图，如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqw5udebogj30v80ggq2w.jpg" alt=""></p>
<p>使用中间人进行”代理“拦截和转发。从而实现抓包的目的.</p>
<h5 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h5>
<p>抓包抓不到？</p>
<blockquote>
    <p>多体现在Android抓包</p>
</blockquote>
<p>强制代理</p>
<p>VPN转发</p>
<h4 id="各种断点助力调试"><a href="#各种断点助力调试" class="headerlink" title="各种断点助力调试"></a>各种断点助力调试</h4>
<blockquote>
    <p>程序断点的相关概念便不在此过多赘述，若想了解请自行搜搜</p>
</blockquote>
<p><strong>DOM断点</strong></p>
<p>DOM断点一般有三种方式，subtree modification、attribute modification、node removal。如下图所示，</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqw795aqmuj30n00oign0.jpg" alt="">在这里使用下了一个node removal断点。那么当我们删除此节点的时候将触发断点。如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqw7bttdw2j31cx0u00vm.jpg" alt=""></p>
<p>JS断点</p>
<p>Js断点有两种，一种是Js运行断点，一种是Js调试断点。</p>
<p>Js运行断点：当网页执行Js的时便会立即进入调试模式。操作方式如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxflr7ihpj31gt0u0q54.jpg" alt=""></p>
<p>首先打开开发者工具，</p>
<p>然后进入source选项卡</p>
<p>然后进入右栏中 Event Listener Breakpoints中</p>
<p>最后勾选Script</p>
<p>即可开启，当网站运行时。便会进入debugger模式</p>
<p>Js调试断点: 此断点需要开发者的去下</p>
<p>首先打开开发者工具，</p>
<p>然后进入source选项卡</p>
<p>找到对应位置，鼠标左键点击。</p>
<p>即可完成</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxfvabvc5j31wc0p2q5u.jpg" alt=""></p>
<p>若网页运行到此处，便会触发断点。</p>
<h4 id="XHR断点"><a href="#XHR断点" class="headerlink" title="XHR断点"></a>XHR断点</h4>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>（XHR）是一种创建<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX" target="_blank" rel="noopener">AJAX</a>请求的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript" target="_blank" rel="noopener">JavaScript </a><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/API" target="_blank" rel="noopener">API</a>。它的方法提供了在<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Browser" target="_blank" rel="noopener">浏览器</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Server" target="_blank" rel="noopener">服务器</a>之间发送请求的能力。</p>
<p>当网站是Ajax请求当时候，XHR断点将是一个非常不错的调试技巧。</p>
<p>XHR断点也有两种，一种是发生任何XHR请求的时候都出发断点，另一种是特定条件的XHR断点。</p>
<p>操作如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxg88pojcj31110hqt90.jpg" alt=""></p>
<p>打开DevTools，进入source选项卡。点开XHR/fetch Breakpoints。</p>
<p>鼠标左键点击旁边的“+”号，直接Enter即可完成。如下图所示：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxg8o1vr1j305c01bdfm.jpg" alt=""></p>
<p>特定XHR断点：</p>
<p>鼠标左键点击旁边的“+”号，在输入栏中输入限定条件，如Id，输入完成后Enter</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxgedm9qxj3060018dfm.jpg" alt=""></p>
<h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4>
<p>Hook 又叫作钩子技术，它就是在程序运行的过程中，对其中的某个方法进行重写，在原有的方法前后自定义的代码。相当于在系统没有调用该函数之前，钩子程序就先捕获该消息，可以先得到控制权，这时钩子函数便可以加工处理（改变）该函数的执行行为。执行函数后释放控制权限，继续运行原有逻辑。</p>
<p>示意图如下，</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxgrt9q3sj30kv0j3wej.jpg" alt=""></p>
<figure class="highlight javascript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">(func(args...)&#123;</span><br><span class="line"> <span class="comment">// Hook 逻辑</span></span><br><span class="line"> &#125;)(args...)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>常实现的有 Devtools Hook，本地文件映射Hook，插件Tempermonkey Hook</p>
<p> <strong>Devtools 直接注入:</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxh7igr7sj307f03wmx0.jpg" alt=""></p>
<p> Devtools 直接注入的优点：可以直接把Hook函数copy至console中，直接运行。简单便捷。</p>
<p>缺点：比较难修改已经注入的Hook。难以复用。</p>
<p><strong>文件映射Hook</strong></p>
<p>在本地书写Hook函数，后使用DevTools中source选项卡中的Overrides进行文件映射。当网页运行满足Hook条件时候，便会触发Hook函数。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxhf2qvgnj30he03xglj.jpg" alt=""></p>
<p><strong>Tempermonkey Hook</strong></p>
<p><em>Tampermonkey</em> 是第一个可以用来让 Chrome 支持更多 UserScript 的 Chrome 扩展，它可以加入更多的 Chrome 本身不支持的用户脚本功能。Tempermonkey下载与使用请自行搜索</p>
<p>优点：可定制化，通用化。有针对的进行开发。</p>
<p>缺点：需要下载，需要学习Tempermonkey 的使用</p>
<h4 id="JS注入"><a href="#JS注入" class="headerlink" title="JS注入"></a>JS注入</h4>
<p>当我们访问网站时候，一般情况下会将Js缓存到本地，进行相关运行。那么说如果我将本地的保存，修改其中逻辑，并覆盖其服务器下发的Js。这就是注入攻击</p>
<p>其原理是保存服务器下发的Js文件形成类似于“缓存”的功能，修改并覆盖下发Js文件即可完成。</p>
<p>常见的实现方法有三种</p>
<ol>
    <li>
        <p>DevTools中source选项卡中的Overrides进行文件映射</p>
    </li>
    <li>
        <p>Tempermonkey</p>
        <blockquote>
            <p>以上操作，请参考上文</p>
        </blockquote>
    </li>
    <li>
        <p>Charles或其他第三方工具</p>
        <p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxhxiph0mj305a0j5jrl.jpg" alt=""></p>
    </li>
</ol>
<p> <img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxhxz28n1j30cx0budfw.jpg" alt=""></p>
<h4 id="点位插桩调试"><a href="#点位插桩调试" class="headerlink" title="点位插桩调试"></a>点位插桩调试</h4>
<p>其核心原理为：监听核心变量</p>
<p>首先在对应位置鼠标右键呼出，选择add conditional break…</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxia1wn4vj306s04ht8o.jpg" alt=""></p>
<p>输入监听值</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxi9firu2j30gy02pq2t.jpg" alt=""></p>
<p>放入 Logpoint中。完成后运行js即可在对应级别内看到日志输出</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxigqz9fpj306o06vdfp.jpg" alt=""></p>
<center>
    <font color=red size=5px style="font-family: cursive">希望以上方法与技巧对你有所帮助</br></font>
    <font color=red size=3px style="font-family: cursive">知道的越多，不知道的越多。</font>
</center>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqy30zuc6nj31c20mgn13.jpg" alt=""></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Crawler</category>
        <category>JavaScript</category>
        <category>技巧</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>Web Spider</tag>
        <tag>数据采集</tag>
        <tag>JS</tag>
        <tag>Chrome</tag>
        <tag>JavaScript</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫优化之道</title>
    <url>/42803.html</url>
    <content><![CDATA[<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2>
<h3 id="网络爬虫的定义"><a href="#网络爬虫的定义" class="headerlink" title="网络爬虫的定义"></a>网络爬虫的定义</h3>
<p>爬虫又称为网络蜘蛛、网页追逐者。是一种按照一定的规则，自动地抓取万维网信息的程序或脚本</p>
<p>同时还有很多种说法,但我个人认为最通俗的理解就是，模拟用户访问的程序或脚本。</p>
<a id="more"></a>
<h3 id="网络爬虫实现的核心步骤"><a href="#网络爬虫实现的核心步骤" class="headerlink" title="网络爬虫实现的核心步骤"></a>网络爬虫实现的核心步骤</h3>
<p>无论多么复杂的爬虫都离不开以下核心的四步，当然极少数特例除外。</p>
<ul>
    <li>
        <p>确定数据URL</p>
    </li>
    <li>
        <p>发送请求,获取响应</p>
    </li>
    <li>
        <p>解析响应，获取数据</p>
    </li>
    <li>
        <p>数据持久化</p>
    </li>
</ul>
<h2 id="网络爬虫优化"><a href="#网络爬虫优化" class="headerlink" title="网络爬虫优化"></a>网络爬虫优化</h2>
<p>无论是何种方向，我们都希望以更少的代价获取更大的收益，相信优化这一个话题一直是大家所探讨的。</p>
<p>决定网络爬虫性能的指标有很多，在不考虑特殊情况及阀值情况下</p>
<p>网络请求更快，解析效率更快，数据持久化更快等，那么爬虫会更快，这个是必然的</p>
<p>那么网络爬虫该如何优化，且听我从以下几个方面进行分析。</p>
<ol>
    <li>分布式爬虫：更多的worker</li>
    <li>减少重复或无效的网络请求、减少或分割繁琐的请求流程</li>
    <li>网络优化</li>
    <li>解析优化</li>
    <li>数据持久化</li>
</ol>
<h3 id="爬虫优化第一式-分布式爬虫"><a href="#爬虫优化第一式-分布式爬虫" class="headerlink" title="爬虫优化第一式-分布式爬虫"></a>爬虫优化第一式-分布式爬虫</h3>
<p>在网络爬虫的世界中，我们爬虫工程师开发的爬虫一般都是聚焦爬虫，而一个网站的数据量假设是个常量。那么爬虫的任务量也是个定值。那么更多的爬虫，一定是比单机单任务爬虫更快的。</p>
<blockquote>
    <p>一般来说我们接触网站的数据增长量，还没有达到那种成几何倍数增长的情况。在这里只为论述大多情况下。特殊情况下例外</p>
</blockquote>
<p>分布式爬虫概念，在此便不再过多赘述，感兴趣的朋友可以自行搜索。</p>
<p>实现分布式爬虫的核心理念就是任务共有化统一调度。在这里爬虫领域，我们可以简单的理解为URL或URN的管理。只要管理好了URL或URN，分布式爬虫相信你实现起来也并不困难。分布式爬虫基础架构图如下所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gquzrwsspdj30r50do0sr.jpg" alt=""></p>
<p><strong>分布式爬虫优化之一，氪金：</strong></p>
<p>只要机器够多，配置够高，集群够强大。那么日入过亿so easy。</p>
<p><strong>分布式爬虫优化之二：部署优化</strong></p>
<p>在以上的基础上，对于资源利用并不能够达到一个很完美的情况。如果有上百台机器，一个一个去启动爬虫没开完，爬虫工程师们就累死在了半路上。</p>
<p><strong>部署优化之一:单机批量运行</strong></p>
<blockquote>
    <p>在一台机器机器中是允许开启多个爬虫！！！</p>
</blockquote>
<p>使用shell脚本，进行批量运行。</p>
<p>使用subprocess，进行批量运行。</p>
<p><strong>部署优化之二：虚拟容器</strong></p>
<p>在以上的基础上，我还建议你使用 docker，Kubernetes进行多机器分布式爬虫的部署。只需要短短几个命令即可部署到服务器。</p>
<p>这样就可以实现快捷部署</p>
<h3 id="爬虫优化第二式：爬取策略"><a href="#爬虫优化第二式：爬取策略" class="headerlink" title="爬虫优化第二式：爬取策略"></a>爬虫优化第二式：爬取策略</h3>
<p>减少重复或无效的网络请求、减少或分割繁琐的请求流程。</p>
<p>首先我们来看个较经典的页面结构图，大部分页面都是一种B*树 或者图的数据结构。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqv1hqdepcj31400u04qr.jpg" alt=""></p>
<div style="text-align: center;">首页简称Index，列表页简称List， 详情页简称detail</div>
<p>网页结构的不同采用不同遍历方式也不同，采用先深度后广度将是最快的“路径”。</p>
<p>如果detail可以一直获取到下一页</p>
<p>直接从起始页到最后一页。时间复杂度为O(N),N为总页数</p>
<p>如果只能列表页才能获取详情页</p>
<p>翻页获取下一页，可从先遍历List页后遍历获取详情页。时间复杂度为O(MN), M为列表页数，N为详情页数</p>
<p>如果是图，建议转化为树形结构进行考虑</p>
<blockquote>
    <p>小技巧：</p>
    <p>如何制定抓取策略？</p>
    <p>建议自底向上的方式，先考虑详情页是否可以直达，后考虑列表页从而间接获取详情页</p>
</blockquote>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4>
<p>如果是分布式爬虫，那么我们可以使用生产者-消费者模型的概念。ListCrwaler获取详情url，存入URL-Pool中</p>
<p>如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqv21zh059j30f70asglk.jpg" alt=""></p>
<blockquote>
    <p>存入到URL-pool中建议使用Set进行URL去重。当URL过大的时候我们可以剔除公共部分，仅保存Id。</p>
    <p>若数据量极大，可使用<strong>BloomFilter算法</strong></p>
</blockquote>
<h3 id="爬虫优化第三式-请求优化"><a href="#爬虫优化第三式-请求优化" class="headerlink" title="爬虫优化第三式: 请求优化"></a>爬虫优化第三式: 请求优化</h3>
<h4 id="异常处理之超时"><a href="#异常处理之超时" class="headerlink" title="异常处理之超时"></a>异常处理之超时</h4>
<p>当连接超过某个阀值，可判定此次请求失败。个人偏爱timeout 为60s</p>
<h4 id="提高并发量"><a href="#提高并发量" class="headerlink" title="提高并发量"></a>提高并发量</h4>
<p>合适的并发量可以将资源使用到极致，合适的并发量可以从按照实际情况调。</p>
<h3 id="爬虫优化第四式：网络优化"><a href="#爬虫优化第四式：网络优化" class="headerlink" title="爬虫优化第四式：网络优化"></a>爬虫优化第四式：网络优化</h3>
<h4 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h4>
<p><strong>网络带宽</strong></p>
<h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4>
<p><strong>域名系统</strong>（<a href="https://baike.baidu.com/item/英文" target="_blank" rel="noopener">英文</a>：<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，<a href="https://baike.baidu.com/item/缩写" target="_blank" rel="noopener">缩写</a>：<strong>DNS</strong>）是<a href="https://baike.baidu.com/item/互联网" target="_blank" rel="noopener">互联网</a>的一项服务。它作为将<a href="https://baike.baidu.com/item/域名" target="_blank" rel="noopener">域名</a>和<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>相互<a href="https://baike.baidu.com/item/映射" target="_blank" rel="noopener">映射</a>的一个<a href="https://baike.baidu.com/item/分布式数据库" target="_blank" rel="noopener">分布式数据库</a>，能够使人更方便地访问网页。</p>
<p>简易的访问步骤到获取到呈现页面</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqv2nmieu3j30f90c1wec.jpg" alt=""></p>
<p>当大规模抓取每次都要做DNS解析时，浪费的时间是非常大的。所以如果能在本地做DNS缓存，每次系统都读本地DNS的话，这个时间消耗大大降低。</p>
<p><strong>实现DNS缓存的常见几种方法</strong></p>
<p>最简单的方法就是直接修改/etc/hosts文件，在文件里直接添加IP和域名，例如这样</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqv30rtefqj30mt0bbjrk.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqv3074tn5j30s60apmx7.jpg" alt=""></p>
<p>第二种方式：使用DNS缓存工具，例如DNSmasq</p>
<h3 id="爬虫优化第五式：解析优化"><a href="#爬虫优化第五式：解析优化" class="headerlink" title="爬虫优化第五式：解析优化"></a>爬虫优化第五式：解析优化</h3>
<p>智能解析算法</p>
<h3 id="爬虫优化第六式：数据持久化优化"><a href="#爬虫优化第六式：数据持久化优化" class="headerlink" title="爬虫优化第六式：数据持久化优化"></a>爬虫优化第六式：数据持久化优化</h3>
<p>一次插入多条</p>
<p>异步插入多条</p>
<p>MQ</p>
<h3 id="爬虫优化第七式：多数据源"><a href="#爬虫优化第七式：多数据源" class="headerlink" title="爬虫优化第七式：多数据源"></a>爬虫优化第七式：多数据源</h3>
<p>单一的数据源难免由于并发量过大，给目标网站造成DDos攻击。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
<p>分别从分布式爬虫，抓取策略、请求优化、网络优化、解析优化、与多数据源方面进行考虑。希望对你能够有所启发</p>
<p>最后在开启超大规模的爬虫建议计算对方的带宽压力，不要抓取太过分了。抓取归抓取，但不要影响对方网站正常运营。</p>
<div style="text-align: center;">以上便是鄙人所知所用的爬虫方法论，希望能帮助到你。</div>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Crawler</category>
        <category>Web Spider</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>Web Spider</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Golang操作文件的那些事儿</title>
    <url>/1627.html</url>
    <content><![CDATA[<h2 id="Golang-文件操作"><a href="#Golang-文件操作" class="headerlink" title="Golang 文件操作"></a>Golang 文件操作</h2>
<p>Os模块的使用与源码研究</p>
<p>文件：计算机中的文件是存储在外部介质（通常是磁盘）上的数据集合，文件分为文本文件和二进制文件。例如咱们常见的文件后缀名<code>.exe</code>,<code>.txt</code>,’.word’…等等</p>
<p>文件的基本操作可简单分为<code>增</code>、<code>删</code>两类，也就是咱们所说的CURD(增删改查)，也是基于此两类操作。可简单理解为<code>打开文件夹</code>、<code>CURD</code>、关闭文件夹。结束～</p>
<p>golang对于文件基本上都是基于Golang的<code>os</code>模块，那让我们一起了解一下，那么Golang是如何对文件进行操作呢。Let’s Go~</p>
<a id="more"></a>
<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3>
<p>Golang中打开文件使用<code>os.Open</code>模块,官方os.open部分源码如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// os.Open</span></span><br><span class="line"><span class="comment">// Open opens the named file for reading. If successful, methods on</span></span><br><span class="line"><span class="comment">// the returned file can be used for reading; the associated file</span></span><br><span class="line"><span class="comment">// descriptor has mode O_RDONLY.</span></span><br><span class="line"><span class="comment">// If there is an error, it will be of type *PathError.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(*File, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> OpenFile(name, O_RDONLY, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>Open打开命名文件以供读取。如果成功，则可以使用返回文件上的方法进行读取；关联的文件。描述符的模式为O_RDONLY。 如果有错误，它将是* PathError类型。</p>
    <p>它接收一个string 类型的变量<code>name</code>,返回两个值，File的指针和错误error。那么我们使用它打开文件的的时候就需要这样做</p>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">fileObj, err := os.Open(name <span class="keyword">string</span>)</span><br><span class="line"><span class="comment">// 其中os.Open中的name为路径Path</span></span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<p>基础使用的介绍暂且为止，其实我们更应该关心的应该是<code>OpenFile(name, O_RDONLY, 0)</code>，这个函数到底干了啥，我们追踪一下这个函数(在GoLang编辑器中， mac可以直接使用command + 鼠标左键直接进入，Win可以使用ctrl + 鼠标左键)，如下:</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(name <span class="keyword">string</span>, flag <span class="keyword">int</span>, perm FileMode)</span> <span class="params">(*File, error)</span></span> &#123;</span><br><span class="line">	testlog.Open(name)</span><br><span class="line">	f, err := openFileNolog(name, flag, perm)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	f.appendMode = flag&amp;O_APPEND != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> f, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OpenFile是广义的open调用；大多数用户将使用Open 或Create代替。它打开带有指定标志的命名文件（O_RDONLY等）。如果该文件不存在，并且传递了O_CREATE标志，则会使用模式perm（在umask之前）创建该文件。如果成功，返回文件上的方法可以用于I / O。 如果有错误，它将是* PathError类型。</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这个文件全部内容还是有点分量的，有信息的伙伴，可以详细的阅读一下全部内容。暂且为止</p>
<p>那让我们实践一下，使用Golang打开文件，如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开此文件，./main.go为相对路径。在这里是此文件</span></span><br><span class="line">	fileObj, err := os.Open(<span class="string">"./main.go"</span>)</span><br><span class="line">	<span class="comment">// 异常处理</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Open File Error Message:%#v\n"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 尝试打印(此处输出的为地址值)</span></span><br><span class="line">	fmt.Println(&amp;fileObj)</span><br><span class="line">	<span class="comment">// defer 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl44ct0b29j31fu0u07d6.jpg" alt=""></p>
<p>以防忘记关闭文件，造成bug，我们在这里使用defer + 关闭。</p>
<blockquote>
    <p>注意：在编辑器中并不建议直接使用鼠标右键运行，这样可能会导致路径错误。大部分的编辑器都并不是只运行此文件!!!</p>
    <figure class="highlight sh">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">Open File Error Message:&amp;os.PathError&#123;Op:<span class="string">"open"</span>, Path:<span class="string">"./main.go"</span>, Err:0x2&#125;</span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>如果你遇见了类似的错误，你可以直接在终端中，切换到当前路径。使用<code>go run main.go</code>，直接运行。这样就可以直接得到正确的结果啦</p>
</blockquote>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3>
<p>打开文件之后，那么我们可以就可以对他们进行操作了，我们在这里主要演示一下读取文件的操作。还是老样子，先看一下主要的相关源码，如下:</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// FileObj.Read()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := f.checkValid(<span class="string">"read"</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	n, e := f.read(b)</span><br><span class="line">	<span class="keyword">return</span> n, f.wrapErr(<span class="string">"read"</span>, e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f.read(b)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span> <span class="title">read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">	n, err = f.pfd.Read(b)</span><br><span class="line">	runtime.KeepAlive(f)</span><br><span class="line">	<span class="keyword">return</span> n, err</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>FileObj.Read()</p>
    <p>示例化接受文件的地址值(也就是咱们前面打开获取到的结果)，接受切片的字节，返回读取的内容，以及错误</p>
    <p>在此函数中首先检查是否为有效的读取，然后在进行f.read(b)的操作,接受其返回结果。</p>
    <p>f.read(b)</p>
    <p>在这里，主要检测是否在读取，如果是那么返回本次的读取内容</p>
</blockquote>
<p>从以上我们不难看出，其实读取文件是读取文件内部的字节</p>
<p>那么更具FileObj.Read()，我们可以了解它基本的使用方法，如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>读取部分的示例代码如下：</p>
<p>在这里我们需要考虑：是否能够正常读取？是否读完了？具体请看异常处理部分</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">	<span class="comment">// 定义每次读取的大小</span></span><br><span class="line">	<span class="comment">//var tmp = make([]byte, 128)</span></span><br><span class="line">	<span class="keyword">var</span> tmp  [<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// n:从开始到结尾的内容</span></span><br><span class="line">	n, err := fileObj.Read(tmp[:])</span><br><span class="line">	<span class="comment">// 异常处理</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Read of File Error, ErrorMessage:%#v\n"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">		fmt.Println(<span class="string">"文件读完了"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"读取了%d个字节\n"</span>, n)</span><br><span class="line">	fmt.Printf(<span class="string">"读取到的内容：\n%s"</span>,tmp[:])</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>输出结果如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl453fvstjj30su0fg75h.jpg" alt=""></p>
<p>以上很明显是并没有读完的仅读取了部分，原始的全部代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开此文件，./main.go为相对路径。在这里是此文件</span></span><br><span class="line">	fileObj, err := os.Open(<span class="string">"./main.go"</span>)</span><br><span class="line">	<span class="comment">// 异常处理</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Open of File Error, ErrorMessage:%#v\n"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 尝试打印(此处输出的为地址值)</span></span><br><span class="line">	fmt.Println(&amp;fileObj)</span><br><span class="line">	<span class="comment">// defer 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> fileObj.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取文件</span></span><br><span class="line">	<span class="comment">// 定义每次读取的大小</span></span><br><span class="line">	<span class="comment">//var tmp = make([]byte, 128)</span></span><br><span class="line">	<span class="keyword">var</span> tmp  [<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// n:从开始到结尾的内容</span></span><br><span class="line">	n, err := fileObj.Read(tmp[:])</span><br><span class="line">	<span class="comment">// 异常处理</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Read of File Error, ErrorMessage:%#v\n"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">		fmt.Println(<span class="string">"文件读完了"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"读取了%d个字节\n"</span>, n)</span><br><span class="line">	fmt.Printf(<span class="string">"读取到的内容：\n%s"</span>,tmp[:])</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="完整读取"><a href="#完整读取" class="headerlink" title="完整读取"></a>完整读取</h3>
<h4 id="for无线循环读取"><a href="#for无线循环读取" class="headerlink" title="for无线循环读取"></a>for无线循环读取</h4>
<p>由于以上我们并没有读取完整个文件，那么我需要读取全部的该怎么办呢？一个方法是不断的读取下去，然后和在一起就是完整的内容了，示例代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开此文件，./main.go为相对路径。在这里是此文件</span></span><br><span class="line">	fileObj, err := os.Open(<span class="string">"./main.go"</span>)</span><br><span class="line">	<span class="comment">// 异常处理</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Open of File Error, ErrorMessage:%#v\n"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 尝试打印(此处输出的为地址值)</span></span><br><span class="line">	fmt.Println(&amp;fileObj)</span><br><span class="line">	<span class="comment">// defer 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">	<span class="comment">// 循环读取文件</span></span><br><span class="line">	<span class="keyword">var</span> content []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">128</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		n, err := fileObj.Read(tmp)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			fmt.Println(<span class="string">"文件读完了"</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"Read of File Error, ErrorMessage:%#v\n"</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		content = <span class="built_in">append</span>(content, tmp[:n]...)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(content))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>主要的思路为：无限循环去读取，读完了之后break掉。然后把读取的内容合并起来</p>
<p>这种读取虽然可行，不过是否有点太麻烦了，那么有什么更简便的方式呢？答案当然是有的，bufio读取</p>
<h4 id="bufio读取"><a href="#bufio读取" class="headerlink" title="bufio读取"></a>bufio读取</h4>
<p>bufio是在file的基础上封装了一层API，支持更多的功能。</p>
<p>主要的部分源码如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// bufio.NewReader</span></span><br><span class="line"><span class="comment">// NewReader returns a new Reader whose buffer has the default size.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span> *<span class="title">Reader</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> NewReaderSize(rd, defaultBufSize)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewReaderSize</span></span><br><span class="line"><span class="comment">// NewReaderSize returns a new Reader whose buffer has at least the specified</span></span><br><span class="line"><span class="comment">// size. If the argument io.Reader is already a Reader with large enough</span></span><br><span class="line"><span class="comment">// size, it returns the underlying Reader.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReaderSize</span><span class="params">(rd io.Reader, size <span class="keyword">int</span>)</span> *<span class="title">Reader</span></span> &#123;</span><br><span class="line">	<span class="comment">// Is it already a Reader?</span></span><br><span class="line">	b, ok := rd.(*Reader)</span><br><span class="line">	<span class="keyword">if</span> ok &amp;&amp; <span class="built_in">len</span>(b.buf) &gt;= size &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> size &lt; minReadBufferSize &#123;</span><br><span class="line">		size = minReadBufferSize</span><br><span class="line">	&#125;</span><br><span class="line">	r := <span class="built_in">new</span>(Reader)</span><br><span class="line">	r.reset(<span class="built_in">make</span>([]<span class="keyword">byte</span>, size), rd)</span><br><span class="line">	<span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>它简便的原因是因为已经帮我们定义了文件的指针，以及它还定义了缓冲区，这样我们使用它来读取更加的快与便捷。</p>
<p> bufio.NewReader语法格式</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span> *<span class="title">Reader</span></span> </span><br><span class="line"><span class="comment">// 其中rd为我们打开文件的对象</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>使用如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"bufio"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开此文件，./main.go为相对路径。在这里是此文件</span></span><br><span class="line">	fileObj, err := os.Open(<span class="string">"./main.go"</span>)</span><br><span class="line">	<span class="comment">// 异常处理</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Open of File Error, ErrorMessage:%#v\n"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 尝试打印(此处输出的为地址值)</span></span><br><span class="line">	fmt.Println(&amp;fileObj)</span><br><span class="line">	<span class="comment">// defer 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">	<span class="comment">// bufio读取</span></span><br><span class="line">	reader := bufio.NewReader(fileObj)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		line, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">//注意是字符</span></span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">0</span> &#123;</span><br><span class="line">				fmt.Println(line)</span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Println(<span class="string">"文件读完了"</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"read file failed, err:"</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Print(line)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>输入结果如上，略。。。</p>
<p>搞了这么多，就没有一键读取的么？当然也是有的，让我们来了体验一下<code>ioutil</code>读取整个文件的愉悦。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ioutil.ReadFile读取整个文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(<span class="string">"./main.go"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"read file failed, err:"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(content))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>其内部的实现原理，先预测整个文件的大小。然后一次性全部读取。当然需要做好异常的准备哦</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// ReadFile reads the file named by filename and returns the contents.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadFile</span></span><br><span class="line"><span class="comment">// reads the whole file, it does not treat an EOF from Read as an error</span></span><br><span class="line"><span class="comment">// to be reported.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">	f, err := os.Open(filename)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	<span class="comment">// It's a good but not certain bet that FileInfo will tell us exactly how much to</span></span><br><span class="line">	<span class="comment">// read, so let's try it but be prepared for the answer to be wrong.</span></span><br><span class="line">	<span class="keyword">var</span> n <span class="keyword">int64</span> = bytes.MinRead</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> fi, err := f.Stat(); err == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// As initial capacity for readAll, use Size + a little extra in case Size</span></span><br><span class="line">		<span class="comment">// is zero, and to avoid another allocation after Read has filled the</span></span><br><span class="line">		<span class="comment">// buffer. The readAll call will read into its allocated internal buffer</span></span><br><span class="line">		<span class="comment">// cheaply. If the size was wrong, we'll either waste some space off the end</span></span><br><span class="line">		<span class="comment">// or reallocate as needed, but in the overwhelmingly common case we'll get</span></span><br><span class="line">		<span class="comment">// it just right.</span></span><br><span class="line">		<span class="keyword">if</span> size := fi.Size() + bytes.MinRead; size &gt; n &#123;</span><br><span class="line">			n = size</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> readAll(f, n)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="文件写入操作"><a href="#文件写入操作" class="headerlink" title="文件写入操作"></a>文件写入操作</h3>
<p><code>os.OpenFile()</code>函数能够以指定模式打开文件，从而实现文件写入相关功能。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(name <span class="keyword">string</span>, flag <span class="keyword">int</span>, perm FileMode)</span> <span class="params">(*File, error)</span></span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>其中：</p>
<p><code>name</code>：要打开的文件名 <code>flag</code>：打开文件的模式。 模式有以下几种：</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">模式</th>
                <th style="text-align:center">含义</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center"><code>os.O_WRONLY</code></td>
                <td style="text-align:center">只写</td>
            </tr>
            <tr>
                <td style="text-align:center"><code>os.O_CREATE</code></td>
                <td style="text-align:center">创建文件</td>
            </tr>
            <tr>
                <td style="text-align:center"><code>os.O_RDONLY</code></td>
                <td style="text-align:center">只读</td>
            </tr>
            <tr>
                <td style="text-align:center"><code>os.O_RDWR</code></td>
                <td style="text-align:center">读写</td>
            </tr>
            <tr>
                <td style="text-align:center"><code>os.O_TRUNC</code></td>
                <td style="text-align:center">清空</td>
            </tr>
            <tr>
                <td style="text-align:center"><code>os.O_APPEND</code></td>
                <td style="text-align:center">追加</td>
            </tr>
        </tbody>
    </table>
</div>
<p><code>perm</code>：文件权限，一个八进制数。r（读）04，w（写）02，x（执行）01。</p>
<h4 id="Write和WriteString"><a href="#Write和WriteString" class="headerlink" title="Write和WriteString"></a>Write和WriteString</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(test.txt<span class="string">", os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0666)</span></span><br><span class="line"><span class="string">	if err != nil &#123;</span></span><br><span class="line"><span class="string">		fmt.Println("</span>open file failed, err:<span class="string">", err)</span></span><br><span class="line"><span class="string">		return</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	defer file.Close()</span></span><br><span class="line"><span class="string">	str := "</span>hello<span class="string">"</span></span><br><span class="line"><span class="string">	file.Write([]byte(str))       //写入字节切片数据</span></span><br><span class="line"><span class="string">	file.WriteString("</span>hello<span class="string">") //直接写入字符串数据</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="bufio-NewWriter"><a href="#bufio-NewWriter" class="headerlink" title="bufio.NewWriter"></a>bufio.NewWriter</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(<span class="string">"xx.txt"</span>, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"open file failed, err:"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	writer := bufio.NewWriter(file)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		writer.WriteString(<span class="string">"hello"</span>) <span class="comment">//将数据先写入缓存</span></span><br><span class="line">	&#125;</span><br><span class="line">	writer.Flush() <span class="comment">//将缓存中的内容写入文件</span></span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h4 id="ioutil-WriteFile"><a href="#ioutil-WriteFile" class="headerlink" title="ioutil.WriteFile"></a>ioutil.WriteFile</h4>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">"hello"</span></span><br><span class="line">	err := ioutil.WriteFile(<span class="string">"./asd.txt"</span>, []<span class="keyword">byte</span>(str), <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"write file failed, err:"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>so cool～</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>盘点go并发那些事儿</title>
    <url>/9672.html</url>
    <content><![CDATA[<h2 id="盘点Golang并发那些事儿之一"><a href="#盘点Golang并发那些事儿之一" class="headerlink" title="盘点Golang并发那些事儿之一"></a>盘点Golang并发那些事儿之一</h2>
<blockquote>
    <p>一生很短，Let’s Go</p>
    <p>人生苦短，我用Python</p>
</blockquote>
<p>Golang、Golang、Golang 真的够浪，今天我们一起盘点一下<code>Golang</code>并发那些事儿，准确来说是<code>goroutine</code>,关于多线程并发，咱们暂时先放一放(主要是俺现在还不太会，不敢出来瞎搞)。关于<code>golang</code>优点如何，咱们也不扯那些虚的。反正都是大佬在说，俺只是个吃瓜群众，偶尔打打酱油，逃～。</p>
<a id="more"></a>
<p>说到并发，等等一系列的骚概念就出来了，为了做个照顾一下自己的菜，顺便复习一下</p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3>
<h4 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h4>
<p><strong>进程</strong>（英语：process），是指计算机中已运行的<code>程序</code>。进程曾经是<code>`分时系统</code>的基本运作单位。在面向进程设计的系统（如早期的<code>UNIX</code>，<code>Linux 2.4</code>及更早的版本）中，进程是程序的基本执行实体；在面向线程设计的系统（如当代多数操作系统、<code>Linux</code> 2.6及更新的版本）中，进程本身不是基本运行单位，而是<strong>线程</strong>的容器。</p>
<p>程序本身只是指令、数据及其组织形式的描述，相当于一个名词，进程才是程序（那些指令和数据）的真正运行实例，可以想像说是现在进行式。若干进程有可能与同一个程序相关系，且每个进程皆可以同步或<strong>异步</strong>的方式独立运行。现代<strong>计算机系统</strong>可在同一段时间内以进程的形式将多个程序加载到存储器中，并借由时间共享（或称<strong>时分复用</strong>），以在一个<strong>处理器</strong>上表现出同时<strong>平行性</strong>运行的感觉。同样的，使用多线程技术（多线程即每一个线程都代表一个进程内的一个独立执行上下文）的操作系统或计算机体系结构，同样程序的<strong>平行</strong>线程，可在多CPU主机或网络上真正<strong>同时</strong>运行（在不同的CPU上）。</p>
<h4 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h4>
<p>操作系统需要有一种方式来创建进程。</p>
<p>以下4种主要事件会创建进程</p>
<ol>
    <li>系统初始化 （简单可理解为关机后的开机）</li>
    <li>正在运行的程序执行了创建进程的系统调用（例如：朋友发了一个网址，你点击后开启浏览器进入网页中）</li>
    <li>用户请求创建一个新进程（例如：打开一个程序，打开QQ、微信）</li>
    <li>一个批量作业的初始化</li>
</ol>
<h4 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h4>
<p>进程在创建后，开始运行与处理相关任务。但并不会永恒存在，终究会完成或退出。那么以下四种情况会发生进程的终止</p>
<ol>
    <li>正常退出（自愿）</li>
    <li>错误退出（自愿）</li>
    <li>崩溃退出（非自愿）</li>
    <li>被其他杀死（非自愿）</li>
</ol>
<p>正常退出：你退出浏览器，你点了一下它<img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9kz2montj301i01aa9t.jpg" alt=""></p>
<p>错误退出：你此时正在津津有味的看着电视剧，突然程序内部发生bug，导致退出<img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9l4ovbrdj31u70u0jsv.jpg" alt=""></p>
<p>崩溃退出：你程序崩溃了<img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9ldqess0j31ds0sogmr.jpg" alt=""></p>
<p>被其他杀死：例如在windows上，使用任务管理器关闭进程</p>
<h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4>
<ol>
    <li>运行态(实际占用CPU)</li>
    <li>就绪态(可运行、但其他进程正在运行而暂停)</li>
    <li>阻塞态(除非某种外部的时间发生，否则进程不能运行)</li>
</ol>
<p>前两种状态在逻辑上是类似的。处于这两种状态的进程都可以运行，只是对于第二种状态暂时没有分配CPU，一旦分配到了CPU即可运行</p>
<p>第三种状态与前两种不同，处于该状态的进程不能运行，即是CPU空闲也不行。</p>
<blockquote>
    <p>如有兴趣，可进一步了解进程的实现、多进程设计模型</p>
</blockquote>
<h4 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h4>
<p>进程池技术的应用至少由以下两部分组成：</p>
<p><strong>资源进程</strong></p>
<p>预先创建好的空闲进程，管理进程会把工作分发到空闲进程来处理。</p>
<p><strong>管理进程</strong></p>
<p>管理进程负责创建资源进程，把工作交给空闲资源进程处理，回收已经处理完工作的资源进程。</p>
<p>资源进程跟管理进程的概念很好理解，管理进程如何有效的管理资源进程，分配任务给资源进程，回收空闲资源进程，管理进程要有效的管理资源进程，那么管理进程跟资源进程间必然需要交互，通过IPC，信号，<a href="https://baike.baidu.com/item/信号量" target="_blank" rel="noopener">信号量</a>，<a href="https://baike.baidu.com/item/消息队列" target="_blank" rel="noopener">消息队列</a>，管道等进行交互。</p>
<blockquote>
    <p>进程池：准确来说它并不实际存在于我们的操作系统中，而是IPC，信号，<a href="https://baike.baidu.com/item/信号量" target="_blank" rel="noopener">信号量</a>，<a href="https://baike.baidu.com/item/消息队列" target="_blank" rel="noopener">消息队列</a>，管道等对多进程进行管理，从而减少不断的开启、关闭等操作。以求达到减少不必要的资源损耗</p>
</blockquote>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4>
<p><strong>线程</strong>（英语：thread）是<strong>操作系统</strong>能够进行运算<strong>调度</strong>的最小单位。大部分情况下，它被包含在<strong>进程</strong>之中，是<strong>进程</strong>中的实际运作单位。一条线程指的是<strong>进程</strong>中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在<strong>Unix System V</strong>及<strong>SunOS</strong>中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。</p>
<p>线程是独立调度和分派的基本单位。线程可以为操作系统内核调度的内核线程</p>
<p>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，<strong>文件描述符</strong>和<strong>信号处理</strong>等等。但同一进程中的多个线程有各自的<code>调用栈</code>（call stack），自己的<code>寄存器环境</code>（register context），自己的线程本地存储（thread-local storage）。</p>
<p>一个进程可以有很多线程来处理，每条线程并行执行不同的任务。如果进程要完成的任务很多，这样需很多线程，也要调用很多核心，在多核或多<strong>CPU</strong>，或支持<strong>Hyper-threading</strong>的CPU上使用多线程程序设计的好处是显而易见的，即提高了程序的执行吞吐率。以人工作的样子想像，核心相当于人，人越多则能同时处理的事情越多，而线程相当于手，手越多则工作效率越高。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，虽然多任务比不上多核，但因为具备多线程的能力，从而提高了程序的执行效率。</p>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4>
<p><strong>线程池</strong>（英语：thread pool）：一种<a href="https://zh.wikipedia.org/wiki/线程" target="_blank" rel="noopener">线程</a>使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配可并发执行的任务。这避免了在处理短时间任务时创建与销毁线程的代价。线程池不仅能够保证内核的充分利用，还能防止过分调度。可用线程数量应该取决于可用的并发处理器、处理器内核、内存、网络sockets等的数量。 例如，线程数一般取cpu数量+2比较合适，线程数过多会导致额外的线程切换开销。</p>
<p>任务调度以执行线程的常见方法是使用同步队列，称作任务队列。池中的线程等待队列中的任务，并把执行完的任务放入完成队列中。</p>
<p>线程池模式一般分为两种：HS/HA半同步/半异步模式、L/F领导者与跟随者模式。 </p>
<ul>
    <li>半同步/半异步模式又称为生产者消费者模式，是比较常见的实现方式，比较简单。分为同步层、队列层、异步层三层。同步层的主线程处理工作任务并存入工作队列，工作线程从工作队列取出任务进行处理，如果工作队列为空，则取不到任务的工作线程进入挂起状态。由于线程间有数据通信，因此不适于大数据量交换的场合。</li>
    <li>领导者跟随者模式，在线程池中的线程可处在3种状态之一：领导者leader、追随者follower或工作者processor。任何时刻线程池只有一个领导者线程。事件到达时，领导者线程负责消息分离，并从处于追随者线程中选出一个来当继任领导者，然后将自身设置为工作者状态去处置该事件。处理完毕后工作者线程将自身的状态置为追随者。这一模式实现复杂，但避免了线程间交换任务数据，提高了CPU cache相似性。在<a href="https://zh.wikipedia.org/wiki/ACE自适配通信环境" target="_blank" rel="noopener">ACE</a>(Adaptive Communication Environment)中，提供了领导者跟随者模式实现。</li>
</ul>
<p>线程池的<strong>伸缩性</strong>对性能有较大的影响。</p>
<ul>
    <li>创建太多线程，将会浪费一定的资源，有些线程未被充分使用。</li>
    <li>销毁太多线程，将导致之后浪费时间再次创建它们。</li>
    <li>创建线程太慢，将会导致长时间的等待，性能变差。</li>
    <li>销毁线程太慢，导致其它线程<strong>资源</strong>饥饿。</li>
</ul>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3>
<p>协程，英文叫作 Coroutine，又称微线程、纤程，协程是一种用户态的轻量级线程。</p>
<p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。</p>
<p>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。</p>
<h3 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h3>
<p>多个任务，执行完毕后再执行另一个。</p>
<p>例如：吃完饭后散步(先坐下吃饭、吃完后去散步)</p>
<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3>
<p>多个任务、交替执行</p>
<p>例如：做饭，一会放水洗菜、一会吸收(菜比较脏，洗下菜写下手，傲娇～)</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3>
<p>共同出发</p>
<p>边吃饭、边看电视</p>
<h3 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h3>
<h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4>
<p>阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。</p>
<p>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正处理事情，它们也会被阻塞。如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。</p>
<h4 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h4>
<p>程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的。</p>
<p>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</p>
<p>非阻塞的存在是因为阻塞存在，正因为某个操作阻塞导致的耗时与效率低下，我们才要把它变成非阻塞的。</p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3>
<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4>
<p>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。</p>
<p>例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。</p>
<p>简言之，同步意味着有序。</p>
<h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4>
<p>为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。</p>
<p>例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。</p>
<h2 id="可异步与不可异步"><a href="#可异步与不可异步" class="headerlink" title="可异步与不可异步"></a>可异步与不可异步</h2>
<p>经过以上了解，又是进程、又是线程、等等一系列的骚东西，那是真的难受。不过相信你已经有个初步的概率，那么这里我们将更加深入的去了解<code>可异步</code>与<code>不可异步</code>。</p>
<p>在此之前先总结一下，以上各种演进的路线，其实加速无非就是一句话，提高效率。（废话～）</p>
<p>那么提高效率的是两大因素，增加投入以求增加产出、尽可能避免不必要的损耗（例如：减少上下文切换等等）。</p>
<p>如何区分它是可异步代码还是不可异步呢，其实很简单那就是，它是否能够自主完成不需要我们参与的部分。</p>
<p>我们从结果反向思考，</p>
<p>例如我们发送一个网络请求，这之间拥有网络I/O阻塞，那么测试我们将它挂起、转而去做其他事情，等他响应了，我们在进行此阶段的下一步的操作。那么这个是可异步的</p>
<p>另外：写作业与上洗手间，我此时正在写着作业，突然，我想上洗手间了，走。上完洗手间后又回来继续写作业，在我去洗手间这段时间作业是不会有任何进展，所以我们可以理解为这是非异步</p>
<h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2>
<p>东扯一句，西扯一句，终于该上真家伙了，废话不多说。</p>
<p>如何实现只需定义很多个任务，让系统去帮助我们把这些任务分配到CPU上实现并发执行。</p>
<p>Go语言中的<code>goroutine</code>就是这样一种机制，<code>goroutine</code>的概念类似于线程，但 <code>goroutine</code>是由Go的运行时（runtime）调度和管理的。Go程序会智能地将 goroutine 中的任务合理地分配给每个CPU。Go语言之所以被称为现代化的编程语言，就是因为它在语言层面已经内置了调度和上下文切换的机制。</p>
<p>在Go语言编程中你不需要去自己写进程、线程、协程，你的技能包里只有一个技能–<code>goroutine</code>，当你需要让某个任务并发执行的时候，你只需要把这个任务包装成一个函数，开启一个<code>goroutine</code>去执行这个函数就可以了</p>
<h2 id="goroutine与线程"><a href="#goroutine与线程" class="headerlink" title="goroutine与线程"></a>goroutine与线程</h2>
<h3 id="可增长的栈"><a href="#可增长的栈" class="headerlink" title="可增长的栈"></a>可增长的栈</h3>
<p>OS线程（操作系统线程）一般都有固定的栈内存（通常为2MB）,一个<code>goroutine</code>的栈在其生命周期开始时只有很小的栈（典型情况下2KB），<code>goroutine</code>的栈不是固定的，他可以按需增大和缩小，<code>goroutine</code>的栈大小限制可以达到1GB，虽然极少会用到这么大。所以在Go语言中一次创建十万左右的<code>goroutine</code>也是可以的。</p>
<h3 id="goroutine模型"><a href="#goroutine模型" class="headerlink" title="goroutine模型"></a>goroutine模型</h3>
<p><code>GPM</code>是Go语言运行时（runtime）层面的实现，是go语言自己实现的一套调度系统。区别于操作系统调度OS线程。</p>
<ul>
    <li><code>G</code>很好理解，就是个goroutine的，里面除了存放本goroutine信息外 还有与所在P的绑定等信息。</li>
    <li><code>P</code>管理着一组goroutine队列，P里面会存储当前goroutine运行的上下文环境（函数指针，堆栈地址及地址边界），P会对自己管理的goroutine队列做一些调度（比如把占用CPU时间较长的goroutine暂停、运行后续的goroutine等等）当自己的队列消费完了就去全局队列里取，如果全局队列里也消费完了会去其他P的队列里抢任务。</li>
    <li><code>M（machine）</code>是Go运行时（runtime）对操作系统内核线程的虚拟， M与内核线程一般是一一映射的关系， 一个groutine最终是要放到M上执行的；</li>
</ul>
<p>P与M一般也是一一对应的。他们关系是： P管理着一组G挂载在M上运行。当一个G长久阻塞在一个M上时，runtime会新建一个M，阻塞G所在的P会把其他的G 挂载在新建的M上。当旧的G阻塞完成或者认为其已经死掉时 回收旧的M。</p>
<p>P的个数是通过<code>runtime.GOMAXPROCS</code>设定（最大256），Go1.5版本之后默认为物理线程数。 在并发量大的时候会增加一些P和M，但不会太多，切换太频繁的话得不偿失。</p>
<p>单从线程调度讲，Go语言相比起其他语言的优势在于OS线程是由OS内核来调度的，<code>goroutine</code>则是由Go运行时（runtime）自己的调度器调度的，这个调度器使用一个称为m:n调度的技术（复用/调度m个goroutine到n个OS线程）。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变），成本比调度OS线程低很多。 另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，以上种种保证了go调度方面的性能。</p>
<h3 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h3>
<p>Go运行时的调度器使用<code>GOMAXPROCS</code>参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的CPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上（GOMAXPROCS是m:n调度中的n）。</p>
<p>Go语言中可以通过<code>runtime.GOMAXPROCS()</code>函数设置当前程序并发时占用的CPU逻辑核心数。</p>
<p>Go1.5版本之前，默认使用的是单核心执行。Go1.5版本之后，默认使用全部的CPU逻辑核心数。</p>
<h2 id="goroutine的创建"><a href="#goroutine的创建" class="headerlink" title="goroutine的创建"></a>goroutine的创建</h2>
<p>使用<code>goroutine</code>非常简单，只需要在调用函数的时在函数名前面加上<code>go</code>关键字，就可以为一个函数创建一个<code>goroutine</code>。</p>
<p>一个<code>goroutine</code>必定对应一个函数，当然也可以创建多个<code>goroutine</code>去执行相同的函数。</p>
<p>语法如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> 函数()[普通函数和匿名函数即可]</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果你此时兴致勃勃的想立马试试，我只想和你说，“少侠，请稍等～”，我话还没说完。以上我只说了如何创建<code>goroutine</code>，可没说这样就是这样用的。嘻嘻～</p>
<p>首先我们先看看不用<code>goroutine</code>的代码，示例如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># example</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">//fmt.Println("HelloWord~, stamp is", i)</span></span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	startTime := time.Now()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		example(i)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"Main~"</span>)</span><br><span class="line">	spendTime := time.Since(startTime)</span><br><span class="line">	fmt.Println(<span class="string">"Spend Time:"</span>, spendTime)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>输入结果如下</p>
    <p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnalxc9lv8j31hk0oet9n.jpg" alt=""></p>
</blockquote>
<p>那么我们来使用<code>goroutine</code>，运行</p>
<p>示例代码如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"HelloWord~, stamp is"</span>, i)</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	startTime := time.Now()</span><br><span class="line">	<span class="comment">// 创建十个goroutine</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> example(i)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"Main~"</span>)</span><br><span class="line">	spendTime := time.Since(startTime)</span><br><span class="line">	fmt.Println(<span class="string">"Spend Time:"</span>, spendTime)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>输出如下</p>
    <p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnalzq72m1j30zk0u0q56.jpg" style="zoom:50%;" /></p>
</blockquote>
<p>乍一看，好家伙速度提升了简直不是一个量级啊，秒啊～</p>
<p>仔细看你会发现，7,9 跑去哪儿呢？不见了，盯～</p>
<p>谜底在下一篇揭晓～</p>
<p>期待下一篇，盘点Golang并发那些事儿之二，<code>goroutine</code>并发控制得心应手</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>基于ssh-key实现服务器免密登陆</title>
    <url>/34306.html</url>
    <content><![CDATA[<p>远程连接Linux服务器，通常有两种方式，<br>第一种就是ssh直接远程连接， 第二种就是采用第三方的工具进行连接。<br>那么我本人是十分习惯以及喜欢终端（terminal）直接连接的。<br>一是因为快捷键更熟悉，另一方面是相对更安全。但采用ssh直接连接难免是有很多不便，<br>例如每次输入密码，例如每次输入远程ip地址。<br>密码我个人是喜欢设置成非常难以记忆的密码，保存在本地一个记事本或者文档里面，ip更不用说。记自然是不可能记的。那么如何实现ssh免密登陆以及ip的代号呢</p>
<a id="more"></a>
<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ssh-keygen -t rsa -C "your_email@youremailhost.com"</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="上传公钥到服务器"><a href="#上传公钥到服务器" class="headerlink" title="上传公钥到服务器"></a>上传公钥到服务器</h2>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@host</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="初次密码验证"><a href="#初次密码验证" class="headerlink" title="初次密码验证"></a>初次密码验证</h3>
<p>输入密码</p>
<p>下次直接使用ssh登陆即可实现免密登陆</p>
<figure class="highlight shell">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ssh user@host</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3>
<p>远程登录的ip一般来说都是没有规律的，也十分的难记。那么如何才能给他一个好记的名字来替代，但又好区分呢。方法也非常的简单。只需要将<code>/etc/host</code> 进行配置本地的域名解析映射即可。在<code>/etc/hots</code>下配置如下内容。</p>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">172.168.146.95		s2</span><br><span class="line">172.168.146.35		s1</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>下次ssh 连接<code>172.168.146.95</code> 的时候，直接使用<code>ssh root@s2</code>,即可达到<code>ssh root@172.168.146.95</code>一样的效果</p>
<p>·</p>
]]></content>
      <categories>
        <category>ssh</category>
        <category>Linux</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>盘点go并发那些事儿之二-并发控制得心应手</title>
    <url>/37640.html</url>
    <content><![CDATA[<h2 id="盘点Golang并发那些事儿之二"><a href="#盘点Golang并发那些事儿之二" class="headerlink" title="盘点Golang并发那些事儿之二"></a>盘点Golang并发那些事儿之二</h2>
<p>上一节提到，golang中直接使用关键字<code>go</code>创建<code>goroutine</code>,无法满足我们的需求。主要问题如下</p>
<ul>
    <li>无法有效的并发执行完成</li>
    <li>无法有效的控制并发</li>
</ul>
<p>首先我们再来看看下面这个栗子，代码如下</p>
<a id="more"></a>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// example-goroutine anonymous</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anonymous1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	startTime := time.Now()</span><br><span class="line">	<span class="comment">// 创建十个goroutine</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"HelloWord~, stamp is"</span>, i)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"Main~"</span>)</span><br><span class="line">	spendTime := time.Since(startTime)</span><br><span class="line">	fmt.Println(<span class="string">"Spend Time:"</span>, spendTime)</span><br><span class="line">	<span class="comment">// 防止goroutine提前退出</span></span><br><span class="line">	<span class="comment">// time.Sleep(time.Second)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// goroutine anonymous</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	anonymous2()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbcfbzjn2j31890u0wgd.jpg" style="zoom:25%;" /></p>
<p>此时你会发现有些任务被多次执行了，但有些任务却又没有被执行。以上例子虽加速了运行，但带来的损失却也是巨大的。例如银行转账等，一旦出现以上情况多次付款也随之而来了。弊大于利</p>
<p>首先我们来分析以上代码，为什么会出现此种情况？虽然是个废品，但也是俺辛辛苦苦的写的不是，让俺做个明白鬼。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbcxvhqt1j30oc0s0q33.jpg" style="zoom:50%;" /></p>
<p>我们从里面往外分析<code>anonymous1</code>首先他是个匿名函数 + 立即执行函数，且变量<code>i</code>并不是传递的参数，而是外部循环带进来的。由上图，我们知道，执行流程为先创建goroutine，执行逻辑，返回结果。</p>
<blockquote>
    <p>请思考：</p>
    <p>goroutine，越多越好么？为什么</p>
    <p>如何避免以上情景？如何避免提前退出？</p>
</blockquote>
<h2 id="信道-Channel"><a href="#信道-Channel" class="headerlink" title="信道-Channel"></a>信道-Channel</h2>
<p>信道的英文是channel，在golang当中的关键字是chan。它的用途是用来<strong>在goroutine之间传输数据</strong>，这里你可能要问了，为什么一定得是goroutine之间传输数据呢，函数之间传递不行吗？</p>
<p>因为正常的传输数据直接以参数的形式传递就可以了，只有在并发场景当中，多个线程彼此隔离的情况下，才需要一个特殊的结构传输数据。</p>
<p>Go语言的并发模型是<code>CSP（Communicating Sequential Processes）</code>，提倡<strong>通过通信共享内存</strong>而不是<strong>通过共享内存而实现通信</strong>。</p>
<p>如果说<code>goroutine</code>是Go程序并发的执行体，<code>channel</code>就是它们之间的连接。<code>channel</code>是可以让一个<code>goroutine</code>发送特定值到另一个<code>goroutine</code>的通信机制。</p>
<p>Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。</p>
<blockquote>
    <p>channel底层的实现为互斥锁</p>
</blockquote>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> 变量 <span class="keyword">chan</span> 元素类型</span><br><span class="line"><span class="comment">// example-var</span></span><br><span class="line"><span class="comment">// 只声明</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">chan</span> []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">chan</span> []<span class="keyword">int</span></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">a = <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//example-2(推荐使用)</span></span><br><span class="line">管道名称 := <span class="built_in">make</span>(<span class="keyword">chan</span> 数据类型 [缓冲区size])</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="无缓冲channel"><a href="#无缓冲channel" class="headerlink" title="无缓冲channel"></a>无缓冲channel</h3>
<p>示例代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(intCh &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello, Gopher. I am stamp[Id]"</span>, &lt;-intCh)</span><br><span class="line">	time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	startTime := time.Now()</span><br><span class="line">	<span class="keyword">const</span> jobNumber = <span class="number">100</span> * <span class="number">100</span></span><br><span class="line">	<span class="comment">// create chan</span></span><br><span class="line">	intCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= jobNumber; i++ &#123;</span><br><span class="line">		<span class="comment">// create goroutine same number for jobNumber</span></span><br><span class="line">		<span class="keyword">go</span> hello(intCh)</span><br><span class="line">		intCh &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"Completed, Spend Time :"</span>, time.Since(startTime))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbiwoqycdj312e0u0mzi.jpg" style="zoom:50%;" /></p>
<p>这速度可谓是非常的快啊</p>
<h3 id="带缓冲Channel"><a href="#带缓冲Channel" class="headerlink" title="带缓冲Channel"></a>带缓冲Channel</h3>
<p>带缓冲的 channel(buffered channel) 是一种在被接收前能存储一个或者多个值的通道。这种类型的通道并不强制要求 goroutine 之间必须同时完成发送和接收。通道会阻塞发送和接收动作的条件也会不同。只有在通道中没有要接收的值时，接收动作才会阻塞。只有在通道没有可用缓冲区容纳被发送的值时，发送动作才会阻塞。这导致有缓冲的通道和无缓冲的通道之间的一个很大的不同：</p>
<p><strong>无缓冲的通道保证进行发送和接收的 goroutine 会在同一时间进行数据交换；有缓冲的通道没有这种保证</strong></p>
<p>来段代码压压惊</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(intCh &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello, Gopher. I am stamp[Id]"</span>, &lt;-intCh)</span><br><span class="line">	time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello1</span><span class="params">(intCh &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello, Gopher1. I am stamp[Id]"</span>, &lt;-intCh)</span><br><span class="line">	time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	startTime := time.Now()</span><br><span class="line">	<span class="keyword">const</span> jobNumber = <span class="number">100</span> * <span class="number">100</span></span><br><span class="line">	<span class="comment">// create chan</span></span><br><span class="line">	intCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= jobNumber; i++ &#123;</span><br><span class="line">		<span class="comment">// create goroutine same number for jobNumber</span></span><br><span class="line">		<span class="keyword">go</span> hello(intCh)</span><br><span class="line">		<span class="keyword">go</span> hello1(intCh)</span><br><span class="line">		intCh &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"Completed, Spend Time :"</span>, time.Since(startTime))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>运行效果如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbjwzeu0mj31bn0u0q55.jpg" style="zoom:50%;" /></p>
<p>这速度杠杠滴哈，别急，同时也让我和你说执行流程，老规矩，上图</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbk988aw2j30o00oajrf.jpg" style="zoom:50%;" /></p>
<p>首先开始执行把需要传递的数据打到channle里面，然后goroutine去取，执行。那么有留下几个问题</p>
<blockquote>
    <p>还可以加速么？</p>
    <p>加速的方法？</p>
    <p>可能带来什么新的问题？</p>
    <p>如何解决？</p>
</blockquote>
<h3 id="单向-channel"><a href="#单向-channel" class="headerlink" title="单向 channel"></a>单向 channel</h3>
<p>有时候，我们有一些特殊的业务需求，比如限制一个 channel 只可以接收但是不能发送，或者限制一个 channel 只能发送但不能接收，这种 channel 称为单向 channel。</p>
<p>单向 channel 的声明也很简单，只需要在声明的时候带上 &lt;- 操作符即可，如下面的代码所示：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">onlySend := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span><br><span class="line">onlyReceive:=<span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>使用单向 channel 的较多场景一般在函数参数中使用较多，这样可以防止一些操作影响了 channel。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">//example channel</span></span><br><span class="line">onlySend := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span><br><span class="line">onlyReceive:=<span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//example function</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exs</span><span class="params">(accept &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, recipient <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> result := <span class="keyword">range</span> accept &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Received only sent channel a:"</span>, result)</span><br><span class="line">		recipient &lt;- result + <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//fmt.Println("Send Only", recipient)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> processNumber = <span class="number">100</span></span><br><span class="line">	sender := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, processNumber)</span><br><span class="line">	recipient := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, processNumber)</span><br><span class="line">	<span class="keyword">for</span> e := <span class="number">0</span>; e &lt; <span class="number">10</span>; e++ &#123;</span><br><span class="line">		<span class="keyword">go</span> exs(sender, recipient)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> s := <span class="number">0</span>; s &lt; processNumber; s++ &#123;</span><br><span class="line">		sender &lt;- s</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> r := <span class="number">0</span>; r &lt; processNumber; r++ &#123;</span><br><span class="line">		<span class="comment">//&lt;-recipient</span></span><br><span class="line">		fmt.Println(<span class="string">"recipient"</span>, &lt;-recipient)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>小技巧：箭头该谁指谁?这可把我整的不好了，别慌，我告诉你，到底该谁指谁。其实很简单</p>
    <p>箭头一致向左指</p>
    <figure class="highlight clean">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">a &lt;- chan &lt;- b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存入</span></span><br><span class="line">chan &lt;- b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出</span></span><br><span class="line">a := &lt;- chan </span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>Chan其实就是起到一个中间人的作用，箭头指向chan，那就是放入，chan指出去 就是拿出来。</p>
    <p>相信你应该记住了吧，反正我记住了</p>
</blockquote>
<h3 id="多路复用Channel"><a href="#多路复用Channel" class="headerlink" title="多路复用Channel"></a>多路复用Channel</h3>
<p>假设要从网上下载一个文件，启动了 5个 goroutine 进行下载，并把结果发送到 5 个 channel 中。其中，哪个先下载好，就会使用哪个 channel 的结果。</p>
<p>在这种情况下，如果我们尝试获取第一个 channel 的结果，程序就会被阻塞，无法获取剩下4个 channel 的结果，也无法判断哪个先下载好。这个时候就需要用到多路复用操作了，在 Go 语言中，通过 select 语句可以实现多路复用，其语句格式如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> data := &lt;-ch2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> ch3&lt;-data:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        默认操作</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>整体结构和 switch 非常像，都有 case 和 default，只不过 select 的 case 是一个个可以操作的 channel。</p>
<blockquote>
    <p>小提示：多路复用可以简单地理解为，N 个 channel 中，任意一个 channel 有数据产生，select 都可以监听到，然后执行相应的分</p>
    <p>支，接收数据并处理。</p>
    <p>使用<code>select</code>语句能提高代码的可读性。</p>
    <ul>
        <li>可处理一个或多个channel的发送/接收操作。</li>
        <li>如果多个<code>case</code>同时满足，<code>select</code>会随机选择一个。</li>
        <li>对于没有<code>case</code>的<code>select{}</code>会一直等待，可用于阻塞main函数。</li>
    </ul>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// example select</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">        c1 &lt;- <span class="string">"one"</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">        c2 &lt;- <span class="string">"two"</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;-c1:</span><br><span class="line">            fmt.Println(<span class="string">"received"</span>, msg1)</span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;-c2:</span><br><span class="line">            fmt.Println(<span class="string">"received"</span>, msg2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>小结：关于数据流动、传递等情况的优先使用<code>channle</code>， 它是并发安全的，且性能优异</p>
<h2 id="Sync深入并发控制"><a href="#Sync深入并发控制" class="headerlink" title="Sync深入并发控制"></a>Sync深入并发控制</h2>
<h3 id="sync-waitGroup"><a href="#sync-waitGroup" class="headerlink" title="sync.waitGroup"></a>sync.waitGroup</h3>
<p>在此之前我们先去，解决一个开启<code>goroutine</code>，提前退出的例子</p>
<p>示例代码如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="comment">//"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> exampleOut(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exampleOut</span><span class="params">(i <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello, Gopher, I am [Id]"</span>, i)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbroyfdoyj319q0u00ue.jpg" style="zoom:50%;" /></p>
<p>仔细看，你会发现根本就没有输出，原因是它开启<code>goroutine</code>，也需要时间。main函数并会等待，当然我们也可以手动添加一个停止，但这个并不能有效的阻止(你我都知道需要多久才能把<code>goroutine</code>执行完成),那有没有办法。。。</p>
<p>答案当然是有滴，它就是<code>sync.WaitGroup</code></p>
<blockquote>
    <p>WaitGroup等待goroutine的集合完成。主goroutine调用添加以设置要等待的goroutine的数量。然后，每个goroutine都会运行并在完成后调用Done。同时，可以使用Wait来阻塞，直到所有goroutine完成。</p>
    <p>你可以理解为计数器</p>
</blockquote>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// `sync.WaitGroup`一共有三个方法,他们分别是：</span></span><br><span class="line">Add(delta <span class="keyword">int</span>)</span><br><span class="line"><span class="comment">//Add将可能为负数的增量添加到WaitGroup计数器中。如果计数器为零，则释放等待时阻塞的所有goroutine</span></span><br><span class="line">Done()</span><br><span class="line"><span class="comment">// 完成将WaitGroup计数器减一。</span></span><br><span class="line"> Wait()</span><br><span class="line"><span class="comment">// 等待块，直到WaitGroup计数器为零。</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>example</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// WaitGroup</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明WaitGroup</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="comment">// WaitGroup 计数器 + 1</span></span><br><span class="line">		<span class="comment">// 其delta为你开启的`groutine`数量</span></span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> exampleOut(i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 等待 WaitGroup 计数器为0</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exampleOut</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// WaitGroup 计数器 - 1</span></span><br><span class="line">	wg.Done()</span><br><span class="line">	fmt.Println(<span class="string">"Hello, Gopher, I am [Id]"</span>, i)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h3>
<p>无论是前面的<code>channle</code>还是sync都是为了干一件事，那就是并发控制，也许你也和我一样有以下几个问题</p>
<ul>
    <li>我们为什么需要并发控制，不要可以么？</li>
    <li>并发控制到底是控制什么？</li>
    <li>并发控制有哪几种方案，他们分别适用于哪种场景？</li>
    <li>如何做好并发控制呢？</li>
</ul>
<p>以上几点就是我们此节需要了解、以及解决的问题</p>
<p>首先解决我们一起探究第一个问题，为什么需要并发控制？</p>
<p>首先有这么一个问题、以及相关的解决措施，绝对不是脱裤子放屁，多此一举。需要并发控制的原因有很多，总结一句话那就是资源竞争</p>
<blockquote>
    <p>资源竞争</p>
    <p>在一个 goroutine 中，如果分配的内存没有被其他 goroutine 访问，只在该 goroutine 中被使用，那么不存在资源竞争的问题。</p>
    <p>但如果同一块内存被多个 goroutine 同时访问，就会产生不知道谁先访问也无法预料最后结果的情况。这就是资源竞争，这块内存可以称为共享的资源</p>
    <p>还记得在channel中，我讲到 Go语言的并发模型是<code>CSP（Communicating Sequential Processes）</code>，提倡<strong>通过通信共享内存</strong>而不是<strong>通过共享内存而实现通信</strong>，这点尤为重要需要我们去记住与掌握</p>
</blockquote>
<p>首先我们来看一个累加求和的例子，代码如下所示</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x <span class="keyword">int64</span></span><br><span class="line">	wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++ &#123;</span><br><span class="line">		x = x + <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg.Add(<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>期待输出值为<code>25000</code>，sum + 10 加和 5000次,执行五次，我们口算答案是<code>5000</code>,可输出结果却是<code>3048</code>,而且每次答案还不一样。好家伙</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbt36anhqj319i0u0q43.jpg" style="zoom:50%;" /></p>
<p>这是为什么呢?,靓仔疑惑～</p>
<p>其根本的原因就是资源恶意竞争</p>
<blockquote>
    <p>精囊妙计：</p>
    <p>使用 go build、go run、go test 这些 Go 语言工具链提供的命令时，添加 -race 标识可以帮你检查 Go 语言代码是否存在资源竞争。</p>
    <figure class="highlight go">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">go</span> run -race demo3.<span class="keyword">go</span></span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
</blockquote>
<p>那么该怎么解决呢？</p>
<p><code>sync.Mutex</code>互斥锁，顾名思义，指的是在同一时刻只有一个<code>goroutine</code>执行某段代码，其他<code>goroutine</code>都要等待该<code>goroutine</code>执行完毕后才能继续执行。</p>
<p>在下面的示例中，我声明了一个互斥锁 mutex，然后修改 add 函数，对 sum+=i 这段代码加锁保护。这样这段访问共享资源的代码片段就并发安全了，可以得到正确的结果</p>
<p><code>sync.Mutex</code>为我们提供了两个方法，加锁与解锁,修改时先获取锁，修改后释放锁</p>
<p>代码修改如下</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x    <span class="keyword">int64</span></span><br><span class="line">	lock sync.Mutex</span><br><span class="line">	wg   sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		lock.Lock() <span class="comment">// 加锁</span></span><br><span class="line">		x += <span class="number">1</span></span><br><span class="line">		lock.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg.Add(<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>女少啊～</p>
<blockquote>
    <p>在以上示例代码中<code>x += 1</code>，部分被称之为临界区</p>
    <p>在同步的程序设计中，临界区段指的是一个访问共享资源的程序片段，而这些共享资源又有无法同时被多个<code>goroutine</code>访问的特性。 当有协程进入临界区段时，其他协程必须等待，这样就保证了临界区的并发安全。</p>
</blockquote>
<h3 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h3>
<p>互斥锁是完全互斥的，但是有很多实际的场景下是读多写少的，当我们并发的去读取一个资源不涉及资源修改的时候是没有必要加锁的，这种场景下使用读写锁是更好的一种选择。读写锁在Go语言中使用<code>sync</code>包中的<code>RWMutex</code>类型。</p>
<p>读写锁分为两种：读锁和写锁。当一个goroutine获取读锁之后，其他的<code>goroutine</code>如果是获取读锁会继续获得锁，如果是获取写锁就会等待；当一个<code>goroutine</code>获取写锁之后，其他的<code>goroutine</code>无论是获取读锁还是写锁都会等待。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x      <span class="keyword">int64</span></span><br><span class="line">	wg     sync.WaitGroup</span><br><span class="line">	lock   sync.Mutex</span><br><span class="line">	rwlock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// lock.Lock()   											// 加互斥锁</span></span><br><span class="line">	rwlock.Lock() 												<span class="comment">// 加写锁</span></span><br><span class="line">	x = x + <span class="number">1</span></span><br><span class="line">	time.Sleep(<span class="number">10</span> * time.Millisecond) 		<span class="comment">// 假设读操作耗时10毫秒</span></span><br><span class="line">	rwlock.Unlock()                   		<span class="comment">// 解写锁</span></span><br><span class="line">	<span class="comment">// lock.Unlock()                      // 解互斥锁</span></span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// lock.Lock()                  			// 加互斥锁</span></span><br><span class="line">	rwlock.RLock()               					<span class="comment">// 加读锁</span></span><br><span class="line">	time.Sleep(<span class="number">1</span>) 												<span class="comment">// 假设读操作耗时1秒</span></span><br><span class="line">	rwlock.RUnlock()             					<span class="comment">// 解读锁</span></span><br><span class="line">	<span class="comment">// lock.Unlock()                			// 解互斥锁</span></span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> write()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> read()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">	end := time.Now()</span><br><span class="line">	fmt.Println(end.Sub(start))</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>现在我们解决了多个 goroutine 同时读写的资源竞争问题，但是又遇到另外一个问题——性能。因为每次读写共享资源都要加锁，所以性能低下，这该怎么解决呢？</p>
<p>现在我们分析读写这个特殊场景，有以下几种情况：</p>
<ol>
    <li>写的时候不能同时读，因为这个时候读取的话可能读到脏数据（不正确的数据）；</li>
    <li>读的时候不能同时写，因为也可能产生不可预料的结果；</li>
    <li>读的时候可以同时读，因为数据不会改变，所以不管多少个 goroutine 读都是并发安全的。</li>
</ol>
<p>所以就可以通过读写锁 sync.RWMutex 来优化这段代码，提升性能。</p>
<h3 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h3>
<p>在实际的工作中，你可能会有这样的需求：让代码只执行一次，哪怕是在高并发的情况下，比如创建一个单例。</p>
<p>针对这种情形，Go 语言为我们提供了 sync.Once 来保证代码只执行一次，例如只加载一次配置文件、只关闭一次通道等。</p>
<p>Go语言中的<code>sync</code>包中提供了一个针对只执行一次场景的解决方案–<code>sync.Once</code>。</p>
<p><code>sync.Once</code>只有一个<code>Do</code>方法，其签名如下：</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 如果要执行的函数f需要传递参数就需要搭配闭包来使用。</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>这是 Go 语言自带的一个示例，虽然启动了 10 个<code>goroutine</code>来执行 onceBody 函数，但是因为用了 once.Do 方法，所以函数 onceBody 只会被执行一次。也就是说在高并发的情况下，sync.Once 也会保证 onceBody 函数只执行一次。</p>
<p>sync.Once 适用于创建某个对象的单例、只加载一次的资源等只执行一次的场景。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   doOnce()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doOnce</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> once sync.Once</span><br><span class="line">   onceBody := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"Only once"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//用于等待`goroutine`执行完毕</span></span><br><span class="line">   done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   <span class="comment">//启动10个协程执行once.Do(onceBody)</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="comment">//把要执行的函数(方法)作为参数传给once.Do方法即可</span></span><br><span class="line">         once.Do(onceBody)</span><br><span class="line">         done &lt;- <span class="literal">true</span></span><br><span class="line">      &#125;()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      &lt;-done</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> m[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(key <span class="keyword">string</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	m[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			key := strconv.Itoa(n)</span><br><span class="line">			set(key, n)</span><br><span class="line">			fmt.Printf(<span class="string">"k=:%v,v:=%v\n"</span>, key, get(key))</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>上面的代码开启少量几个<code>goroutine</code>的时候可能没什么问题，当并发多了之后执行上面的代码就会报错误。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnbtrqdjtaj31ak0u0gng.jpg" alt=""></p>
<p>像这种场景下就需要为map加锁来保证并发的安全性了，Go语言的<code>sync</code>包中提供了一个开箱即用的并发安全版map–<code>sync.Map</code>。开箱即用表示不用像内置的map一样使用make函数初始化就能直接使用。同时<code>sync.Map</code>内置了诸如<code>Store</code>、<code>Load</code>、<code>LoadOrStore</code>、<code>Delete</code>、<code>Range</code>等操作方法。</p>
<p>一个简单的例子</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">var</span> m = sync.Map&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			key := strconv.Itoa(n)</span><br><span class="line">			m.Store(key, n)</span><br><span class="line">			value, _ := m.Load(key)</span><br><span class="line">			fmt.Printf(<span class="string">"k=:%v,v:=%v\n"</span>, key, value)</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3>
<p>代码中的加锁操作因为涉及内核态的上下文切换会比较耗时、代价比较高。针对基本数据类型我们还可以使用原子操作来保证并发安全，因为原子操作是Go语言提供的方法它在用户态就可以完成，因此性能比加锁操作更好。Go语言中原子操作由内置的标准库<code>sync/atomic</code>提供。</p>
<h4 id="atomic包"><a href="#atomic包" class="headerlink" title="atomic包"></a>atomic包</h4>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">方法</th>
                <th style="text-align:center">解释</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">func LoadInt32(addr <em>int32) (val int32) func LoadInt64(addr </em>int64) (val int64) func LoadUint32(addr <em>uint32) (val uint32) func LoadUint64(addr </em>uint64) (val uint64) func LoadUintptr(addr <em>uintptr) (val uintptr) func LoadPointer(addr </em>unsafe.Pointer) (val unsafe.Pointer)</td>
                <td style="text-align:center">读取操作</td>
            </tr>
            <tr>
                <td style="text-align:center">func StoreInt32(addr <em>int32, val int32) func StoreInt64(addr </em>int64, val int64) func StoreUint32(addr <em>uint32, val uint32) func StoreUint64(addr </em>uint64, val uint64) func StoreUintptr(addr <em>uintptr, val uintptr) func StorePointer(addr </em>unsafe.Pointer, val unsafe.Pointer)</td>
                <td style="text-align:center">写入操作</td>
            </tr>
            <tr>
                <td style="text-align:center">func AddInt32(addr <em>int32, delta int32) (new int32) func AddInt64(addr </em>int64, delta int64) (new int64) func AddUint32(addr <em>uint32, delta uint32) (new uint32) func AddUint64(addr </em>uint64, delta uint64) (new uint64) func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)</td>
                <td style="text-align:center">修改操作</td>
            </tr>
            <tr>
                <td style="text-align:center">func SwapInt32(addr <em>int32, new int32) (old int32) func SwapInt64(addr </em>int64, new int64) (old int64) func SwapUint32(addr <em>uint32, new uint32) (old uint32) func SwapUint64(addr </em>uint64, new uint64) (old uint64) func SwapUintptr(addr <em>uintptr, new uintptr) (old uintptr) func SwapPointer(addr </em>unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)</td>
                <td style="text-align:center">交换操作</td>
            </tr>
            <tr>
                <td style="text-align:center">func CompareAndSwapInt32(addr <em>int32, old, new int32) (swapped bool) func CompareAndSwapInt64(addr </em>int64, old, new int64) (swapped bool) func CompareAndSwapUint32(addr <em>uint32, old, new uint32) (swapped bool) func CompareAndSwapUint64(addr </em>uint64, old, new uint64) (swapped bool) func CompareAndSwapUintptr(addr <em>uintptr, old, new uintptr) (swapped bool) func CompareAndSwapPointer(addr </em>unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)</td>
                <td style="text-align:center">比较并交换操作</td>
            </tr>
        </tbody>
    </table>
</div>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4>
<p>我们填写一个示例来比较下互斥锁和原子操作的性能。</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"sync/atomic"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Counter <span class="keyword">interface</span> &#123;</span><br><span class="line">	Inc()</span><br><span class="line">	Load() <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通版</span></span><br><span class="line"><span class="keyword">type</span> CommonCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">	counter <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c CommonCounter)</span> <span class="title">Inc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c.counter++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c CommonCounter)</span> <span class="title">Load</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁版</span></span><br><span class="line"><span class="keyword">type</span> MutexCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">	counter <span class="keyword">int64</span></span><br><span class="line">	lock    sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MutexCounter)</span> <span class="title">Inc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m.lock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.lock.Unlock()</span><br><span class="line">	m.counter++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MutexCounter)</span> <span class="title">Load</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	m.lock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.lock.Unlock()</span><br><span class="line">	<span class="keyword">return</span> m.counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作版</span></span><br><span class="line"><span class="keyword">type</span> AtomicCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">	counter <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AtomicCounter)</span> <span class="title">Inc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	atomic.AddInt64(&amp;a.counter, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AtomicCounter)</span> <span class="title">Load</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> atomic.LoadInt64(&amp;a.counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(c Counter)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	start := time.Now()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			c.Inc()</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">	end := time.Now()</span><br><span class="line">	fmt.Println(c.Load(), end.Sub(start))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c1 := CommonCounter&#123;&#125; <span class="comment">// 非并发安全</span></span><br><span class="line">	test(c1)</span><br><span class="line">	c2 := MutexCounter&#123;&#125; <span class="comment">// 使用互斥锁实现并发安全</span></span><br><span class="line">	test(&amp;c2)</span><br><span class="line">	c3 := AtomicCounter&#123;&#125; <span class="comment">// 并发安全且比互斥锁效率更高</span></span><br><span class="line">	test(&amp;c3)</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><code>atomic</code>包提供了底层的原子级内存操作，对于同步算法的实现很有用。这些函数必须谨慎地保证正确使用。除了某些特殊的底层应用，使用通道或者sync包的函数/类型实现同步更好。</p>
<h3 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h3>
<blockquote>
    <p>Cond实现了一个条件变量，它是goroutines等待或宣布事件发生的集合点。每个Cond都有一个关联的Locker L（通常是Mutex或RWMutex），在更改条件和调用Wait方法时必须将其保留。第一次使用后，不得复制条件</p>
</blockquote>
<p>在 Go 语言中，sync.WaitGroup 用于最终完成的场景，关键点在于一定要等待所有<code>goroutine</code>都执行完毕。</p>
<p>而 sync.Cond 可以用于发号施令，一声令下所有<code>goroutine</code>都可以开始执行，关键点在于<code>goroutine</code>开始的时候是等待的，要等待 sync.Cond 唤醒才能执行。</p>
<p>sync.Cond 从字面意思看是条件变量，它具有阻塞协程和唤醒协程的功能，所以可以在满足一定条件的情况下唤醒协程，但条件变量只是它的一种使用场景。</p>
<p>sync.Cond 有三个方法，它们分别是：</p>
<ol>
    <li><strong>Wait</strong>，Wait原子地解锁c.L并中止调用goroutine的执行。稍后恢复执行后，等待锁定c.L才返回。与其他系统不同，等待不会返回，除非被广播或信号唤醒。</li>
    <li><strong>Signal</strong>，信号唤醒一个等待在c的goroutin</li>
    <li><strong>Broadcast</strong>，唤醒所有等待c的goroutine</li>
</ol>
<p>示例</p>
<figure class="highlight go">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//10个人赛跑，1个裁判发号施令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">race</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cond := sync.NewCond(&amp;sync.Mutex&#123;&#125;)</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	wg.Add(<span class="number">11</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			fmt.Println(num, <span class="string">"号已经就位"</span>)</span><br><span class="line">			cond.L.Lock()</span><br><span class="line">			cond.Wait() <span class="comment">//等待发令枪响</span></span><br><span class="line">			fmt.Println(num, <span class="string">"号开始跑……"</span>)</span><br><span class="line">			cond.L.Unlock()</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//等待所有goroutine都进入wait状态</span></span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> wg.Done()</span><br><span class="line">		fmt.Println(<span class="string">"裁判已经就位，准备发令枪"</span>)</span><br><span class="line">		fmt.Println(<span class="string">"比赛开始，大家准备跑"</span>)</span><br><span class="line">		cond.Broadcast() <span class="comment">//发令枪响</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">//防止函数提前返回退出</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>这一节我们巴拉巴拉搞了很多，到底什么情况用哪个。相信你也可能和我一样半懵半醒，那么我们来总结一下。他们的使用场景,啥是啥？</p>
<p>需知：<strong>goroutine与线程</strong></p>
<ul>
    <li>Go语言的并发模型是<code>CSP（Communicating Sequential Processes）</code>，提倡<strong>通过通信共享内存</strong>而不是<strong>通过共享内存而实现通信</strong>。</li>
</ul>
<figure class="highlight tp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">可增长的栈</span><br><span class="line">OS线程（操作系统线程）一般都有固定的栈内存（通常为<span class="number">2</span>MB）,一个goroutine的栈在其生命周期开始时只有很小的栈（典型情况下<span class="number">2</span>KB），goroutine的栈不是固定的，他可以按需增大和缩小，goroutine的栈大小限制可以达到<span class="number">1</span>GB，虽然极少会用到这么大。所以在Go语言中一次创建十万左右的goroutine也是可以的。</span><br><span class="line"></span><br><span class="line">goroutine调度</span><br><span class="line">GPM是Go语言运行时（runtime）层面的实现，是go语言自己实现的一套调度系统。区别于操作系统调度OS线程。</span><br><span class="line"></span><br><span class="line">G很好理解，就是个goroutine的，里面除了存放本goroutine信息外 还有与所在<span class="keyword">P</span>的绑定等信息。</span><br><span class="line"><span class="keyword">P</span>管理着一组goroutine队列，<span class="keyword">P</span>里面会存储当前goroutine运行的上下文环境（函数指针，堆栈地址及地址边界），<span class="keyword">P</span>会对自己管理的goroutine队列做一些调度（比如把占用CPU时间较长的goroutine暂停、运行后续的goroutine等等）当自己的队列消费完了就去全局队列里取，如果全局队列里也消费完了会去其他<span class="keyword">P</span>的队列里抢任务。</span><br><span class="line">M（machine）是Go运行时（runtime）对操作系统内核线程的虚拟， M与内核线程一般是一一映射的关系， 一个groutine最终是要放到M上执行的；</span><br><span class="line"><span class="keyword">P</span>与M一般也是一一对应的。他们关系是： <span class="keyword">P</span>管理着一组G挂载在M上运行。当一个G长久阻塞在一个M上时，runtime会新建一个M，阻塞G所在的<span class="keyword">P</span>会把其他的G 挂载在新建的M上。当旧的G阻塞完成或者认为其已经死掉时 回收旧的M。</span><br><span class="line"></span><br><span class="line"><span class="keyword">P</span>的个数是通过runtime.GOMAXPROCS设定（最大<span class="number">256</span>），Go<span class="number">1</span><span class="number">.5</span>版本之后默认为物理线程数。 在并发量大的时候会增加一些<span class="keyword">P</span>和M，但不会太多，切换太频繁的话得不偿失。</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><strong>使用场景</strong></p>
<ul>
    <li>Channel:关于数据流动、传递等情况的优先使用<code>channle</code>， 它是并发安全的，且性能优异, channel底层的实现为互斥锁</li>
    <li>
        <p>sync.Once：让代码只执行一次，哪怕是在高并发的情况下，比如创建一个单例。</p>
    </li>
    <li>
        <p>Sync.WaitGroup:用于最终完成的场景，关键点在于一定要等待所有协程都执行完毕。有了它我们再也不用为了等待协程执行完成而添加<code>time.sleep</code>了</p>
    </li>
    <li>Sync.Mutew: 当资源发现竞争时，我们可以使用<code>Sync.Mutew</code>，加互斥锁保证并发安全</li>
    <li>Sync.RWMutew: <code>Sync.Mutew</code>进阶使用，当读多写少的时候，可以使用读写锁来保证并发安全，同时也提高了并发效率</li>
    <li>sync.Map:高并发的情况下，原始的map并不安全，使用sync.Map可用让我们的map在并发情况下也保证安全</li>
    <li>sync.Cond:sync.Cond 可以用于发号施令，一声令下所有<code>goroutine</code>都可以开始执行，关键点在于<code>goroutine</code>开始的时候是等待的，要等待 sync.Cond 唤醒才能执行。</li>
</ul>
<p>说了这么多，这么多花里胡哨的，注意一点，Sync.Mutew，互斥锁，所有的锁的爸爸，原子操作。互斥锁的叔叔。</p>
<p>感谢您的阅读，如果感觉不错。也可以点赞、收藏、在读、当然推荐给身边的哥们也是不错的选择，同时欢迎关注我。一起从0到1</p>
<p>期待下一章节，铁索连环-context</p>
<p>以及下下章节：并发模式</p>
<p>我会在<code>并发模式</code>中与你探讨：</p>
<p><code>channle</code>缓存区多大比较合适,</p>
<p>Goroutine Work Pool，减少<code>Goroutine</code>过多重复的创建与销毁</p>
<p>Pipeline 模式：流水线工作模式，对任务中的部分进行剖析</p>
<p>扇出和扇入模式：对流水线工作模式进行优化，实现更高效的<code>扇出和扇入模式</code></p>
<p>Futures 模式:未来模式，主协程不用等待子协程返回的结果，可以先去做其他事情，等未来需要子协程结果的时候再来取</p>
<p>同时再一次去搞一下，到底什么是可异步、并发的代码，并加以分析与优化</p>
<p>未来已来。Let‘s Go～</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>粗谈Redis事物</title>
    <url>/22168.html</url>
    <content><![CDATA[<h2 id="Redis-事务是什么东东"><a href="#Redis-事务是什么东东" class="headerlink" title="Redis 事务是什么东东"></a>Redis 事务是什么东东</h2>
<p>一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
<blockquote>
    <p>简单来说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。　</p>
</blockquote>
<a id="more"></a>
<h2 id="Redis事务解析"><a href="#Redis事务解析" class="headerlink" title="Redis事务解析"></a>Redis事务解析</h2>
<h3 id="Redis事务的三个阶段："><a href="#Redis事务的三个阶段：" class="headerlink" title="Redis事务的三个阶段："></a>Redis事务的三个阶段：</h3>
<ul>
    <li>开始事务</li>
    <li>命令入队</li>
    <li>执行事务</li>
</ul>
<h3 id="Redis事务相关命令："><a href="#Redis事务相关命令：" class="headerlink" title="Redis事务相关命令："></a><strong>Redis事务相关命令：</strong></h3>
<p>watch key1 key2 … : 监视一或多个key,如果在事务执行之前，被监视的key被其他命令改动，则事务被打断 （ 类似乐观锁 ）</p>
<p>multi : 标记一个事务块的开始（ queued ）</p>
<p>exec : 执行所有事务块的命令 （ 一旦执行exec后，之前加的监控锁都会被取消掉 ）　</p>
<p>discard : 取消事务，放弃事务块中的所有命令</p>
<p>unwatch : 取消watch对所有key的监控</p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2>
<p>说到Redis事物，那么便不得不谈一下它的锁,</p>
<p>悲观锁：很悲观，认为什么时候都会出现问题，无论做什么都会加锁</p>
<p>乐观锁：很乐观，认为什么时候都不会出现问题，所以不会上锁。更新数据的时候会去判断一下在此期间是否被修改此数据</p>
<ul>
    <li>获取version</li>
    <li>比较version</li>
    <li>更新</li>
</ul>
<figure class="highlight bash">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH money 			<span class="comment"># 监视money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI				  		<span class="comment"># 开始执行事物 </span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRby money 50		<span class="comment"># 用掉50  </span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 50		 	<span class="comment"># 减少50</span></span><br><span class="line">QUEUED	</span><br><span class="line">127.0.0.1:6379&gt; EXEC							<span class="comment"># 执行</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 950</span><br><span class="line">2) (<span class="built_in">integer</span>) 50</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>执行期间数据money未改变，事物正常执行</p>
<blockquote>
    <p>此处的watch 相当于乐观锁</p>
</blockquote>
<h2 id="Redis事务注意点："><a href="#Redis事务注意点：" class="headerlink" title="Redis事务注意点："></a>Redis事务注意点：</h2>
<p><strong>Redis事务没有隔离级别的概念</strong></p>
<p>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到</p>
<p><strong>Redis不保证原子性</strong></p>
<p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>一但执行 EXEC 开启事务的执行后，无论事务使用执行成功， WARCH 对变量的监控都将被取消。故当事务执行失败后，需重新执行WATCH命令对变量进行监控，并开启新的事务进行操作。</p>
<p>watch指令类似于乐观锁，在事务提交时，如果watch监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用EXEC执行事务时，事务队列将不会被执行，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。</p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>NoSQL</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>网页调试之JSHook</title>
    <url>/33650.html</url>
    <content><![CDATA[<h2 id="网页调试之JSHook"><a href="#网页调试之JSHook" class="headerlink" title="网页调试之JSHook"></a>网页调试之JSHook</h2>
<h3 id="什么是Hook？"><a href="#什么是Hook？" class="headerlink" title="什么是Hook？"></a>什么是Hook？</h3>
<p>Hook 又叫作钩子技术，它就是在程序运行的过程中，对其中的某个方法进行重写，在原有的方法前后自定义的代码。相当于在系统没有调用该函数之前，钩子程序就先捕获该消息，可以先得到控制权，这时钩子函数便可以加工处理（改变）该函数的执行行为。执行函数后释放控制权限，继续运行原有逻辑。</p>
<a id="more"></a>
<h3 id="Hook执行流程图"><a href="#Hook执行流程图" class="headerlink" title="Hook执行流程图"></a>Hook执行流程图</h3>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqxgrt9q3sj30kv0j3wej.jpg" alt=""></p>
<h3 id="Hook思路"><a href="#Hook思路" class="headerlink" title="Hook思路"></a>Hook思路</h3>
<ol>
    <li>寻找hook点</li>
    <li>hook</li>
    <li>伪装hooker</li>
    <li>调试(堆栈)</li>
</ol>
<h3 id="Hook公式"><a href="#Hook公式" class="headerlink" title="Hook公式"></a>Hook公式</h3>
<figure class="highlight javascript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 函数hooker</span></span><br><span class="line"><span class="keyword">var</span> func_copy = func</span><br><span class="line">func = <span class="function"><span class="keyword">function</span>(<span class="params">argument</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// hooker</span></span><br><span class="line">  <span class="keyword">return</span> func.apply(obj,argument)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性hooker</span></span><br><span class="line"><span class="keyword">var</span> attr_copy = obj.attr</span><br><span class="line"><span class="built_in">Object</span>.defineProprety(obj, <span class="string">'attr'</span> &#123;</span><br><span class="line">  <span class="keyword">get</span>:function() &#123;</span><br><span class="line">		<span class="comment">// your code</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span>:function() &#123;</span><br><span class="line">		<span class="comment">// your code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Hook实例"><a href="#Hook实例" class="headerlink" title="Hook实例"></a>Hook实例</h3>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// hook btoa</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    alert(<span class="string">'Start Hooking ...'</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> func = obj[attr]</span><br><span class="line">        obj[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hooked'</span>, obj, attr, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">var</span> ret = func.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">debugger</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'result'</span>, ret)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Disguise the prototype</span></span><br><span class="line">        attr.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"function btoa() &#123; [native code] &#125;"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        attr.length = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hook(<span class="built_in">window</span>, <span class="string">'btoa'</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook eval</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Start Hooking ...'</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Hooker</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> func = obj[attr]</span><br><span class="line">        obj[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hooked'</span>, obj, attr, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">var</span> result = func.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'result'</span>, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Disguise the prototype</span></span><br><span class="line">        attr.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"function eval() &#123; [native code] &#125;"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        attr.length = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Hooker(<span class="built_in">window</span>, <span class="string">'eval'</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hook document.cookie</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h3 id="Hook-优与劣"><a href="#Hook-优与劣" class="headerlink" title="Hook 优与劣"></a>Hook 优与劣</h3>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4>
<ol>
    <li>快速定位函数，方便调试</li>
    <li>注入，不影响原本逻辑</li>
</ol>
<h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4>
<ol>
    <li>新手难以有效的hook</li>
    <li>反hook往往需要分析与绕过（类似于包装类、浏览器指纹、内部类等）</li>
</ol>
<h4 id="Hook伪装"><a href="#Hook伪装" class="headerlink" title="Hook伪装"></a>Hook伪装</h4>
<blockquote>
    <p>函数hook伪装</p>
</blockquote>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// Disguise the prototype</span></span><br><span class="line">attr.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"function btoa() &#123; [native code] &#125;"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">attr.length = <span class="number">1</span>;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1grgwa9ysgcj31d00bcjv6.jpg" alt=""></p>
<h3 id="更底层的Hook-原型链Hook"><a href="#更底层的Hook-原型链Hook" class="headerlink" title="更底层的Hook(原型链Hook)"></a>更底层的Hook(原型链Hook)</h3>
<p>在以上，我们对于函数进行了hook的总结，但若需要hook更加底层的函数该如何？</p>
<p>如果想要hook 例如 字符串的split方法,match方法。该如何？使用以上的方法将无法有效的实现hook。</p>
<p>示例：</p>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">func = <span class="string">"需Hook处"</span></span><br><span class="line"></span><br><span class="line"># 常规hook思路(错误示例)</span><br><span class="line"><span class="number">1.</span>保存改写函数</span><br><span class="line"><span class="number">2.</span>重写hook函数</span><br><span class="line"><span class="number">3.</span>下<span class="keyword">debugger</span>或其他调试逻辑</span><br><span class="line"></span><br><span class="line">split = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs2rfrdgp1j307p04dq2t.jpg" alt=""></p>
<p>可正常操作</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs2rhklerfj30830493yd.jpg" alt=""></p>
<p>无法实现对于split的hook，常规方案无法实现hook。</p>
<blockquote>
    <p>思考：为什么无法hook split -&gt; 没有hook到split</p>
    <p>为什么无法hook split？ -&gt; 没有hook到split</p>
    <p>Split 的“原函数”在哪里？-&gt; 原型链 -&gt; String的方法</p>
</blockquote>
<p>所以如果需要hook，就需要从原型链处进行入手,发现其实as.split 与 String.prototype 是同一个东西</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs2rrew34wj307a029a9v.jpg" alt=""></p>
<p>那么我们直接对于进行如下操作,在控制台（console）中输入</p>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">as</span> = “hook mark”;</span><br><span class="line"></span><br><span class="line"># rewrite</span><br><span class="line"><span class="built_in">String</span>.prototype.split = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'val'</span>);</span><br><span class="line">		<span class="keyword">debugger</span>;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>此时调用split函数，就会发现已经完成对split的hook</p>
<p><img src="/Users/stringle-004/Library/Application Support/typora-user-images/image-20210702181800770.png" alt="image-20210702181800770"></p>
<p>随之而来的又是一个新问题，hook的为只要字符串调用split方法就都会被debugger到。显然并不适合在实践中进行调试。如下给出完整的hook split的代码</p>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// create split cache from proto</span></span><br><span class="line"><span class="built_in">String</span>.prototype.split_cache = <span class="built_in">String</span>.prototype.split</span><br><span class="line"><span class="built_in">String</span>.prototype.split = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Gets the variable of the current scope</span></span><br><span class="line">    str = <span class="keyword">this</span>.String();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Arguments:'</span>, val)</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">    <span class="keyword">return</span> str.split_cache(val);</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>如果感觉不明白为什么需要这样写的，或许需要复习一下js 原型链相关知识</p>
</blockquote>
<h3 id="Hook失败原因归纳"><a href="#Hook失败原因归纳" class="headerlink" title="Hook失败原因归纳"></a>Hook失败原因归纳</h3>
<p>Hook函数有时也会出现hook失败或者hook失效的情况，个人总结如下：</p>
<ol>
    <li>函数hook一般情况下Hook不会失败，若失败一定是对于该函数的<code>__proto__</code>进行检测，此时只需要对<code>__proto__</code>,进行伪装即可</li>
    <li>当目标网站的所有逻辑都采用了<code>Object.defineProperty</code>时，属性Hook就会失效</li>
    <li>当Hook的函数为“内部”函数时，需要特殊的手段进行处理。例如将该函数加入到内存中。（当未加载页面，也会造成Hook失效）</li>
</ol>
<h3 id="常用Hook逻辑"><a href="#常用Hook逻辑" class="headerlink" title="常用Hook逻辑"></a>常用Hook逻辑</h3>
<p>具体示例请参考：<a href="https://github.com/Payne-Wu/JsHookScript" target="_blank" rel="noopener">https://github.com/Payne-Wu/JsHookScript</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>调试</category>
        <category>Hook</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>JS</tag>
        <tag>浏览器</tag>
        <tag>调试</tag>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>网站防护总结之pc</title>
    <url>/63974.html</url>
    <content><![CDATA[<h2 id="为什么需要数据防护？"><a href="#为什么需要数据防护？" class="headerlink" title="为什么需要数据防护？"></a>为什么需要数据防护？</h2>
<p>当今如今大数据时代，数据重要不言而喻，网页和 App 作为主流的数据载体，如果其数据没有任何的保护措施，在爬虫工程师解决了一些基本的反爬如User-Agent、cookies、验证码等的防护措施之后，那么数据依旧可被轻易的获取。</p>
<h2 id="数据防护主要体现在何处？"><a href="#数据防护主要体现在何处？" class="headerlink" title="数据防护主要体现在何处？"></a>数据防护主要体现在何处？</h2>
<a id="more"></a>
<p>数据防护可简略的划分为请求防护、数据内容防护、验证码</p>
<h3 id="请求防护"><a href="#请求防护" class="headerlink" title="请求防护"></a>请求防护</h3>
<ul>
    <li>User-Agent</li>
    <li>Cookie</li>
    <li>签名验证</li>
    <li>握手验证</li>
    <li>协议</li>
    <li>
        <p>。。。</p>
        <h3 id="数据内容防护"><a href="#数据内容防护" class="headerlink" title="数据内容防护"></a>数据内容防护</h3>
    </li>
    <li>
        <p>CSS字体偏移</p>
    </li>
    <li>SVG字体映射</li>
    <li>图片数据</li>
    <li>。。。<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3>
    </li>
</ul>
<p>个人总结为以下几种类型，具体体现不在过多赘述。（注，几者之间无明显的分割标准，在此以侧重点划分）</p>
<ul>
    <li>识别点选或输入型</li>
    <li>滑轨、滑块型</li>
    <li>短信或语音验证型<h2 id="思"><a href="#思" class="headerlink" title="思"></a>思</h2>
    </li>
</ul>
<p>实现这一切的一切，这些究竟是基于什么实现的？这一切绝可能是凭空出现！！！</p>
<p>其实无论是ajax，User-Agent、还是Cookie等等大部分都是基于Javascript实现。而且由于JavaScript在客户端中为完全透明，用户可以随意的查看与调试，这无异于代码裸奔。虽然以上的反爬虫虽然不错，但如果仔细分析的，这难度也仅是“工作量”的问题。</p>
<h2 id="Javascript防护分类"><a href="#Javascript防护分类" class="headerlink" title="Javascript防护分类"></a>Javascript防护分类</h2>
<p>完全透明的JS代码，虽然可以有效的防止。但这还不够，其根本原因还是JavaScript为明文。而这一切的一切都是“治标不治本”，虽然可以但还不够。也正因为对JavaScript的各种防护，所以才让这些加密“动”起来，无法轻易的分析。对JavaScript“加密”可分为如下几种大类</p>
<h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3>
<p>JavaScript 压缩是指去除 JavaScript 代码中的不必要的空格、换行等内容，或者将一些可能公用的代码进行处理实现共享，最后输出的结果都被压缩为几行内容，代码可读性变差，提高分析难度同时也能提高网站加载速度。</p>
<p>整体来说，压缩技术只能在很小的程度上起到防护作用，要想真正提高防护效果还得依靠混淆与加密技术。</p>
<h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3>
<p>代码混淆是增加分析难度而牺牲部分性能的一种方案，此方案大部分是体现在通过逻辑转换换等方式将代码转化为难以分析的代码。难以分析是混淆的目的，等价转换是需要确保混淆前后的代码需不影响运行的功能。对于混淆可以又分为如下四种：布局混淆、数据混淆、控制混淆、预防混淆</p>
<h4 id="布局混淆"><a href="#布局混淆" class="headerlink" title="布局混淆"></a>布局混淆</h4>
<p>布局混淆指在源代码中删除原有无用代码，处理常量名、变量名函数名等标识符，增加对于代码的阅读与分析。</p>
<p>无用代码：注释、调试信息、缩进、换行、无用函数与数据等</p>
<p>处理常量名、变量名函数名等标识符：</p>
<ul>
    <li>标识重命名：将原有代码重命名为无具体意义的字符，例如 将name 重命名为a</li>
</ul>
<p>注意点：</p>
<ul>
    <li>作用域内标识符碰撞情况</li>
</ul>
<p><strong>小结</strong></p>
<p>布局混淆并不会影响执行的过程、内存开销，甚至代码体积反而减少了。</p>
<h4 id="数据混淆"><a href="#数据混淆" class="headerlink" title="数据混淆"></a>数据混淆</h4>
<p>JS拥有常见的7种数据类型，number、string、boolean、unfined、null、Object</p>
<p><strong>数字混淆</strong></p>
<p>数据混淆有常见：进制转换、数字分治、其他</p>
<ul>
    <li>进制转换</li>
</ul>
<p>将十进制转化为二进制、八进制、十六进制等，从而达到“混淆”的目的</p>
<ul>
    <li><strong>数学分治</strong></li>
</ul>
<p>简而言之就是将数拆开，例如 2 = 1 + 1，再辅以数学公式等</p>
<ul>
    <li>
        <p>其他</p>
        <p>重新赋值等</p>
    </li>
</ul>
<p><strong>字符串混淆</strong></p>
<p>字符串混淆常见的有编码转换、加密。常见的有hash、base64、md5等</p>
<p><strong>boolean</strong></p>
<p>我们都知道Boolean值为True、False。根据对boolean的处理，变成难以显示阅读的代码。例如![] = False, !![] = True.</p>
<p><strong>控制混淆</strong></p>
<p>控制混淆是指对程序的控制流进行转换变化，常见的方式有插入僵尸代码、控制流平坦化</p>
<p>插入僵尸代码：插入僵尸代码即插入无用的代码，增强调试难度</p>
<p>控制流平坦化：控制流平坦化,将原本的的执行流程平坦化。具体可自行搜索</p>
<p><strong>预防混淆</strong></p>
<p>主要体现在 提高反混淆的难度或检测现有混淆器中的漏洞设计</p>
<h3 id="代码混淆总结"><a href="#代码混淆总结" class="headerlink" title="代码混淆总结"></a>代码混淆总结</h3>
<p>万变不离其宗，无论是代码压缩、代码混淆都离不开一个宗旨，在不改变原有的<strong>结果</strong>情况下对代码（这里指JS）进行处理。处理的方式包含但不限于，等值转换、运算分割。</p>
<h2 id="设备指纹防护"><a href="#设备指纹防护" class="headerlink" title="设备指纹防护"></a>设备指纹防护</h2>
<p>设备指纹通过收集客户端设备的特征信息对用户与“机器人”进行甄别。web设备指纹主要包含：</p>
<p>浏览器端环境检测</p>
<p>浏览器设别标识</p>
<p>特征识别Hook</p>
<p>JS特征识别</p>
<p>做爬虫的朋友一定使用过NodeJs，这个工具。也时常借用与Nodejs来模拟JS，但Nodejs的api和指纹浏览器有不一样。如果服务端获取到客户端，那么就可以对指纹不一致的机器人，进行防范。</p>
<p>正如你我所知的那般，知道的越多，不知道的越多。</p>
<h2 id="推荐阅读与了解"><a href="#推荐阅读与了解" class="headerlink" title="推荐阅读与了解"></a>推荐阅读与了解</h2>
<p>风控要略：互联网业务反欺诈之路</p>
<p>Jsfuck（github）：<a href="https://github.com/aemkei/jsfuck" target="_blank" rel="noopener">https://github.com/aemkei/jsfuck</a></p>
<p>基于控制混淆和布局混淆的代码混淆系统-王岩（论文）</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>调试</category>
        <category>Hook</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>JS</tag>
        <tag>浏览器</tag>
        <tag>调试</tag>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>认识设备指纹</title>
    <url>/15990.html</url>
    <content><![CDATA[<h2 id="认识指纹"><a href="#认识指纹" class="headerlink" title="认识指纹"></a>认识指纹</h2>
<h3 id="什么是指纹"><a href="#什么是指纹" class="headerlink" title="什么是指纹"></a>什么是指纹</h3>
<p>设备指纹、浏览器指纹也是同理根据软硬件信息，设备版本、设备操作系统等差异性从而生成唯一的设备指纹。</p>
<blockquote>
    <p>人的手有手指、手掌握纹，通过凹凸规则、分布状态的差异造就了<strong>相对</strong>其独一无二的特征。</p>
</blockquote>
<a id="more"></a>
<h3 id="指纹是怎么产生"><a href="#指纹是怎么产生" class="headerlink" title="指纹是怎么产生"></a>指纹是怎么产生</h3>
<p>手机的操作系统、浏览器厂商为了方便用户与开发者获取用户的设备信息预留了一些API供程序使用，用户和开发者可以通过这些API获取客户端相关的软硬件信息</p>
<p>这些信息因人而异通过部分信息来产生<strong>相对差异</strong>的信息来生成生成相对独立的设备ID。</p>
<blockquote>
    <p>简单理解就是软件信息（部分或全部）、硬件信息（部分或全部）+ 指纹生成算法=生成指纹</p>
</blockquote>
<p>辨识度的信息可以是系统信息、软件信息、地理位置、时区、语言等等，所给予的信息决定了浏览器指纹的准确性。</p>
<h3 id="设备指纹究竟是如何区分的“唯一”"><a href="#设备指纹究竟是如何区分的“唯一”" class="headerlink" title="设备指纹究竟是如何区分的“唯一”"></a>设备指纹究竟是如何区分的“唯一”</h3>
<p>在一般情况下单一维度的差异性并不能形成标识设备的稳定特性，但可以经过收集大量的隐形特征通过数据分析、建模等方式等组合使用，可以更加精准的区分唯一</p>
<blockquote>
    <p>例如：我们常见的双胞胎，它们长相相似、声音神似但根据以上两种特征无法有效的区分，但却可以根据更深层的习惯、喜好，甚至是某种条件反射的特殊因子，还是可以较为有效的降低“指纹”的碰撞率</p>
</blockquote>
<h3 id="什么信息是不能包含作为设备指纹？"><a href="#什么信息是不能包含作为设备指纹？" class="headerlink" title="什么信息是不能包含作为设备指纹？"></a>什么信息是不能包含作为设备指纹？</h3>
<p>根据国家法律要求，以下信息不能被作为指纹的因素</p>
<ul>
    <li>手机号</li>
    <li>通话记录</li>
    <li>短信</li>
    <li>通讯录</li>
    <li>身份证号</li>
    <li>等</li>
</ul>
<blockquote>
    <p>虽然这些信息有非常强的一致性，可以非常有效的提高设备指纹的准确性</p>
    <p>但是涉猎个人隐私的数据都是不可触碰的信息。网上绝非法外之地</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3>
<p>设备指纹相同，很大概率上是同一设备或用户；但设备指纹不同时，不一定不是同一设备或用户</p>
<h2 id="设备指纹实现原理与检测"><a href="#设备指纹实现原理与检测" class="headerlink" title="设备指纹实现原理与检测"></a>设备指纹实现原理与检测</h2>
<p>采集设备指纹需要满足两大特征：较为稳定的环境、篡改监测</p>
<h3 id="手机之Android设备指纹"><a href="#手机之Android设备指纹" class="headerlink" title="手机之Android设备指纹"></a>手机之Android设备指纹</h3>
<p>设备的Id需要兼具稳定性、唯一性，但Android系统的开源和碎片化导致API函数实现不尽相同。下表是Android系统比较稳定的设备参数</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">采集项</th>
                <th style="text-align:center">中文含义</th>
                <th style="text-align:center">特征</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">Android ID</td>
                <td style="text-align:center">设备首次启动时自动随机生成的设备ID</td>
                <td style="text-align:center">1.不需要授权，相同信号的手机小概率碰撞<br />2.恢复出厂设置将被重置</td>
            </tr>
            <tr>
                <td style="text-align:center">IMEI/MEID</td>
                <td style="text-align:center">设备码<br />移动、联通获取IMEI<br />电信获取MEID</td>
                <td style="text-align:center">1.唯一性质较好，还是存在小概率碰撞<br />2.需要READ_PHONE_STATE权限<br />3.未含有卡槽的设备无法获取</td>
            </tr>
            <tr>
                <td style="text-align:center">IMSI</td>
                <td style="text-align:center">手机SIM卡识别</td>
                <td style="text-align:center">1.需要READ_PHONE_STATE权限<br />2.更换手机卡会改变</td>
            </tr>
            <tr>
                <td style="text-align:center">WI-FI MAC</td>
                <td style="text-align:center">网卡MAC地址</td>
                <td style="text-align:center">1.当未连接WI-FI时，有概率获取失败<br />2.个别只读存储器恢复出厂设置会被重置</td>
            </tr>
            <tr>
                <td style="text-align:center">Bluetooth MAC</td>
                <td style="text-align:center">蓝牙MAC地址</td>
                <td style="text-align:center">高版本Android系统无法获取（约8.0以上）</td>
            </tr>
            <tr>
                <td style="text-align:center">Serial</td>
                <td style="text-align:center">设备串号</td>
                <td style="text-align:center">同类型号的手机碰撞概率高</td>
            </tr>
            <tr>
                <td style="text-align:center">Fingerprint</td>
                <td style="text-align:center">设备多个硬件编号统称</td>
                <td style="text-align:center">同类型号的手机碰撞概率高</td>
            </tr>
            <tr>
                <td style="text-align:center">Storage</td>
                <td style="text-align:center">内存、磁盘空间</td>
                <td style="text-align:center">同类型号的手机碰撞概率高</td>
            </tr>
            <tr>
                <td style="text-align:center">Adverting ID</td>
                <td style="text-align:center">Google Play广告ID</td>
                <td style="text-align:center">仅限于Google服务用户使用</td>
            </tr>
        </tbody>
    </table>
</div>
<p>Android设备所有采集的项都是Android公开的API，采集项被大面积篡改的情况下不能保持设备ID不变，通常有效的方式就是<strong>检测和监控运行环境</strong>，针对Android设备指纹检测可归纳为</p>
<ol>
    <li>通过安装安装包检测安装环境</li>
    <li>通过特定的特征识别root环境</li>
    <li>通过多种方案采集同一字段信息检测环境是否<strong>异常</strong></li>
    <li>通过通用的修改方式识别（例如中间人攻击、注入、Hook、重放攻击等），从而达到检测环境的效果</li>
    <li>通过特定特征识别（例如Xpose、Frida、模拟器等）检测</li>
</ol>
<h3 id="手机之IOS设备指纹"><a href="#手机之IOS设备指纹" class="headerlink" title="手机之IOS设备指纹"></a>手机之IOS设备指纹</h3>
<p>IOS相对开源的Android系统权限更加严格，且手机型号、系统版本较与Android更单一。由于权限等影响IOS能够获取的设备参数较少。如下表列举了较稳定的IOS设备参数</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">采集项</th>
                <th style="text-align:center">中文含义</th>
                <th style="text-align:center">特征</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">DeviceName</td>
                <td style="text-align:center">设备名称</td>
                <td style="text-align:center">1.用户可以自行修改，默认值存在很大的碰撞<br />2.自定义值有较强的特征</td>
            </tr>
            <tr>
                <td style="text-align:center">WI-FI MAC</td>
                <td style="text-align:center">网卡MAC地址</td>
                <td style="text-align:center">唯一性好，高版本手机不能稳定性采集</td>
            </tr>
            <tr>
                <td style="text-align:center">Boot time</td>
                <td style="text-align:center">系统开机时间（μs微秒）</td>
                <td style="text-align:center">1.存在少量碰撞，重启会发生改变<br />2.采集多次可能会发生变化</td>
            </tr>
            <tr>
                <td style="text-align:center">Storage</td>
                <td style="text-align:center">内存、磁盘空间</td>
                <td style="text-align:center">同类型号的手机碰撞概率高</td>
            </tr>
            <tr>
                <td style="text-align:center">IDFV</td>
                <td style="text-align:center">厂商标识符</td>
                <td style="text-align:center">1.不能跨合作方<br />2.删除本合作方APP后重新安装发生改变</td>
            </tr>
            <tr>
                <td style="text-align:center">IDFA</td>
                <td style="text-align:center">广告标识符</td>
                <td style="text-align:center">1.需要广告权限<br />2。用户可以限制广告追踪</td>
            </tr>
        </tbody>
    </table>
</div>
<p>IOS大部分篡改都是基于Hook进行改机，以及模拟器。</p>
<blockquote>
    <p>IOS模拟器其本质为在X86_64架构上运行iPhone自带的模拟器，同时APP需要页数适配才能被安装</p>
</blockquote>
<p>IOS采集指纹检测可分为如下</p>
<ul>
    <li>通过通用的Hook原理进行识别</li>
    <li>通过特定的工具特征识别</li>
    <li>寻找特定空间存储设备标识进行识别</li>
    <li>对抗备份、抹机，进行识别</li>
</ul>
<h3 id="Web设备指纹"><a href="#Web设备指纹" class="headerlink" title="Web设备指纹"></a>Web设备指纹</h3>
<p>Web设备指纹（浏览器指纹）是指用户硬件、软件信息综合计算产生标识</p>
<h4 id="Web指纹特点"><a href="#Web指纹特点" class="headerlink" title="Web指纹特点"></a>Web指纹特点</h4>
<p>通过Javascript采集信息生成对应设备ID，与传统的Cookie技术相比较，Web设备指纹更加稳定</p>
<p>稳定浏览器版本采集参数，如下表所示</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th style="text-align:center">采集项</th>
                <th style="text-align:center">中文含义</th>
                <th style="text-align:center">特征</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align:center">UserAgent</td>
                <td style="text-align:center">浏览器客户端标识</td>
                <td style="text-align:center">可以任意伪装与修改</td>
            </tr>
            <tr>
                <td style="text-align:center">Gpu</td>
                <td style="text-align:center">设备GPU特征</td>
                <td style="text-align:center">1.碰撞率高<br />2.可跨浏览器</td>
            </tr>
            <tr>
                <td style="text-align:center">Canvas</td>
                <td style="text-align:center">2D指纹</td>
                <td style="text-align:center">唯一性好（不同浏览器的指纹不同）</td>
            </tr>
            <tr>
                <td style="text-align:center">Webgl</td>
                <td style="text-align:center">3D指纹</td>
                <td style="text-align:center">1.碰撞率高<br />2.可跨浏览器</td>
            </tr>
            <tr>
                <td style="text-align:center">Plugin List</td>
                <td style="text-align:center">浏览器自带插件列表</td>
                <td style="text-align:center">当用户安装特殊插件，相同浏览器碰撞率高</td>
            </tr>
            <tr>
                <td style="text-align:center">FontList</td>
                <td style="text-align:center">字体列表</td>
                <td style="text-align:center">当用户安装特殊字体，相同浏览器碰撞率高</td>
            </tr>
            <tr>
                <td style="text-align:center">IP</td>
                <td style="text-align:center">内网IP/外网IP</td>
                <td style="text-align:center">1.切换网络会改变<br />2.内网采集局限性大</td>
            </tr>
            <tr>
                <td style="text-align:center">TCP</td>
                <td style="text-align:center">网络协议</td>
                <td style="text-align:center">1. 不同操作系统协议差异大<br />2.不易被修改<br />3.用户无感知<br />4.碰撞率极高</td>
            </tr>
            <tr>
                <td style="text-align:center">Navigator</td>
                <td style="text-align:center">有关浏览器的信息</td>
                <td style="text-align:center">相同系统、相同版本碰撞率极大</td>
            </tr>
        </tbody>
    </table>
</div>
<p>Web指纹采集检测可如下</p>
<ol>
    <li>识别浏览器异常环境</li>
    <li>特征检测（原型链）检测Hook</li>
    <li>特定特征识别JS是否调试与检测（控制台、debugger等）</li>
    <li>特殊方式存储浏览器设备标识（如localStorage）</li>
</ol>
<p>Web指纹采集检测原理可如下</p>
<p><strong>无头浏览器识别</strong></p>
<ul>
    <li>UA识别：检测/Headless Chrome/.test(Navigator.userAgent)</li>
    <li>Webdriver检测: Webdriver是否在 navigator</li>
    <li>selenium检测：检测<code>window.seleium</code></li>
    <li>PhantomJS\nightmare-JS 检测</li>
    <li>等</li>
</ul>
<p><strong>隐身模式识别</strong></p>
<p>Chrome：在隐身模式下，FileSystem API禁止，使用报异常</p>
<p>Firefox：在隐身模式下，IndexedDB执行Open报异常</p>
<p>Safari：在隐身模式下，localStorage对象存在，但运行setItem方法报异常</p>
<p><strong>控制台检测</strong><br>设备<br>隐式调用元素Id</p>
<p>隐式调用Regexp等toString</p>
<p><strong>Hook检测</strong></p>
<p>自定义Hook检测：在定义函数时将函数整体作为参数生成Hash值在执行该函数时校验Hash值</p>
<p>函数检测：采集调用toString方法对内容进行校验（伪造toString方法即可绕过）</p>
<p>对象检测：通过<code>Object.defineProperty</code>方法修改属性是不可更改的（可复写debugger即可）</p>
<p>其他检测：</p>
<p>SSL/TLS检测（产品：akamai）</p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2>
<p>浏览器指纹在线检测：<a href="http://f.vision/" target="_blank" rel="noopener">http://f.vision/</a></p>
<p>修改浏览器指纹：<a href="https://www.cnblogs.com/68xi/p/13353140.html" target="_blank" rel="noopener">https://www.cnblogs.com/68xi/p/13353140.html</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>调试</category>
        <category>Hook</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>JS</tag>
        <tag>浏览器</tag>
        <tag>调试</tag>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>网页调试之debugger原理与绕过</title>
    <url>/2477.html</url>
    <content><![CDATA[<h2 id="网页调试之debugger原理与绕过"><a href="#网页调试之debugger原理与绕过" class="headerlink" title="网页调试之debugger原理与绕过"></a>网页调试之debugger原理与绕过</h2>
<p>debugger 语句用于停止执行 JavaScript(以下简称JS)，并调用 (如果可用) 调试函数。</p>
<p>使用 debugger 语句类似于在代码中设置断点。</p>
<a id="more"></a>
<p><strong>注意：</strong> <strong>如果调试工具不可用，则调试语句将无法工作。</strong></p>
<h3 id="实现debugger功能"><a href="#实现debugger功能" class="headerlink" title="实现debugger功能"></a>实现debugger功能</h3>
<h4 id="直接使用书写debugger"><a href="#直接使用书写debugger" class="headerlink" title="直接使用书写debugger"></a>直接使用书写debugger</h4>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Example DEBUGGER&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>当我们使用浏览器打开Devtools即执行debugger；如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1grbr2fe8bsj30wp05hq32.jpg" alt=""></p>
<h4 id="eval配合debugger"><a href="#eval配合debugger" class="headerlink" title="eval配合debugger"></a>eval配合debugger</h4>
<blockquote>
    <p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</p>
    <p>如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。</p>
</blockquote>
<figure class="highlight xml">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example DEBUGGER<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">eval</span>(<span class="string">"var 1 = 1;debugger"</span>)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>当使用eval执行时，将会在虚拟机中执行，也就是说非同一作用域。</p>
    <p>同时也由于<code>将字符串当作表达式来执行</code>，那么里面常常伴随着代码混淆</p>
</blockquote>
<h4 id="函数内执行debugger"><a href="#函数内执行debugger" class="headerlink" title="函数内执行debugger"></a>函数内执行debugger</h4>
<figure class="highlight javascript">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Example DEBUGGER&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="built_in">Date</span>();</span><br><span class="line">            alert(data);</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;())</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>因为以上三种体现形式，在debugger上所设计的方案十分多。例如常见的无限制debugger、配合settimeout延迟debugger、代码混淆+debugger等等。</p>
<p>设置debugger的原理去对抗反爬，其核心原理就是<code>如果调试工具可用，则调试语句将执行</code>.也就是经常一打开就跳出debugger。</p>
<blockquote>
    <p>无限debugger，其实是一种泛指的概念，无限泛指多，而非真的无限</p>
    <p>其基于debugger之上，在此加入多次执行debugger的语句从而实现“无限debugger”。“反正只要chrome Devtools不开debugger便不会执行”.（经过调试是这样的，如果不准确请自行完善哦）</p>
</blockquote>
<h3 id="debugger绕过原理"><a href="#debugger绕过原理" class="headerlink" title="debugger绕过原理"></a>debugger绕过原理</h3>
<p>debugger的绕过也很简单，我个人总结共有两种大的方向。它们分别是替换、掠过。其原理都是不让debugger执行。个人并不推荐新手使用替换法中的方法</p>
<ul>
    <li>替换法<ul>
            <li>JS注入</li>
            <li>重写(Hook)</li>
        </ul>
    </li>
    <li>掠过法<ul>
            <li>Never pause here</li>
            <li>条件断点</li>
        </ul>
    </li>
</ul>
<h4 id="JS注入"><a href="#JS注入" class="headerlink" title="JS注入"></a>JS注入</h4>
<p>实现js注入的方式有很多，例如chrome Devtools的overrides、fiddler autoresponse、 mitmproxy、Charles的map local等等。若有兴趣自行搜索其使用方式</p>
<h4 id="Never-pause-here"><a href="#Never-pause-here" class="headerlink" title="Never pause here"></a>Never pause here</h4>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1grfmlz26gtj30gk04hmxb.jpg" alt=""></p>
<p>找到debugger前面的行号，鼠标右键点击该行号，点击Never pause here。便会跳过此断点</p>
<h4 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h4>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1grfmohbkekj30b7029wee.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1grfmqch8l2j30gz02j3yd.jpg" alt=""></p>
<p>找到debugger前面的行号，鼠标右键点击该行号，点击 Add conditional breakpoint，直接写false。回车即可</p>
<h4 id="Deactivate-breakpoints"><a href="#Deactivate-breakpoints" class="headerlink" title="Deactivate breakpoints"></a>Deactivate breakpoints</h4>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gro1s7b06wj30a401m0si.jpg" alt=""></p>
<p>打开这个图标如下图所示（高亮为打开）</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gro1somwu8j301w01aa9t.jpg" alt=""></p>
<p>当遇见breakpoints时会执行一次断点，鼠标单击如下图标</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gro1svh0onj301m01c3y9.jpg" alt=""></p>
<p>即可直接跳过breakpoints。</p>
<blockquote>
    <p>小技巧：Deactivate breakpoints可以配合xhr、dom、Script等断点使用，便于调试</p>
</blockquote>
<h4 id="Hook绕过"><a href="#Hook绕过" class="headerlink" title="Hook绕过"></a>Hook绕过</h4>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">eval</span>(<span class="string">"debugger"</span>);</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight clojure">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">(<span class="name">function</span>() &#123;</span><br><span class="line">    var eval_cache = eval;</span><br><span class="line">    eval = function(<span class="name">obj</span>) &#123;</span><br><span class="line">        if (<span class="name">obj.indexof</span>(<span class="name">'debugger'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">            eval_cache(<span class="name">obj</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>此方法有局限性，若在此函数(在这里指函数a)若没有借用相关函数（eval），那么就无法使用此方法绕过</p>
</blockquote>
<h4 id="函数滞空法"><a href="#函数滞空法" class="headerlink" title="函数滞空法"></a>函数滞空法</h4>
<p>当遇见断点时，回退一次堆栈。将对应函数滞空即可,例如遇见如下的debugger</p>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">	<span class="built_in">eval</span>(<span class="string">"debugger"</span>);</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>直接在控制台输入如下内容即可。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gro22wyydqj30zk06qt8s.jpg" alt=""></p>
<blockquote>
    <p>此方法有局限性，若在此函数中还参杂了关键代码，将可能无法访问或调试等</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>Debugger绕过其实并不难，但在调试中仅仅是一道“开胃菜”，本节总结了debugger的实现方式，以及触发机制。当然也总结了几种我已知的所有绕过方案。</p>
<h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3>
<p>如何hook“变量”debugger？如果可以实现那么就可以实现反调试的debugger“通杀”，当然目前我也有在探究此方案。在加到hook函数中，那么调试便可以近似于一步到位。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>调试</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>JS</tag>
        <tag>浏览器</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>调试与反调试</title>
    <url>/30883.html</url>
    <content><![CDATA[<h1 id="调试与反调试"><a href="#调试与反调试" class="headerlink" title="调试与反调试"></a>调试与反调试</h1>
<p>相信各位如果从事爬虫开发、反爬虫开发、逆向工程师及相关岗位的开发，一定逃不开调试、反调试。那调试与反调是什么呢？以下为浏览器为例</p>
<p>调试：自然就是为了分析获取某关键加密参数，便对于目标网站的JS进行分析。</p>
<p>反调试：为了参数更加安全，更加难以破解。在合适处增加障碍增强调试难度</p>
<p>简单来说调试就是为了获取对应的加密参数，而反调试是为了不那么容易调试，增加调试难度。</p>
<p>反调试可以分为调试检测、调试陷阱，而反反调试是伪装，是绕过。</p>
<a id="more"></a>
<h2 id="反调试常见手段"><a href="#反调试常见手段" class="headerlink" title="反调试常见手段"></a>反调试常见手段</h2>
<p>反调试无论具体实现何种方法进行反调试 如无限debugger、内存爆破、投毒、删文件、脏话等。这都离不开一入口—— <strong>调试检测</strong>，反过来思考反调试是为了区分正常用户与开发者人员都一种方式，那么如果可以检测到开发者调试那么就可以对其进行相关的操作。</p>
<h3 id="调试检测"><a href="#调试检测" class="headerlink" title="调试检测"></a>调试检测</h3>
<p>调试检测的方案有很多，只要一经出发便可反制调试者。常用的检测方案如下</p>
<h4 id="控制台检测"><a href="#控制台检测" class="headerlink" title="控制台检测"></a>控制台检测</h4>
<h5 id="检测控制台检测的原理"><a href="#检测控制台检测的原理" class="headerlink" title="检测控制台检测的原理"></a>检测控制台检测的原理</h5>
<ul>
    <li>
        <p>隐式的调用元素id</p>
    </li>
    <li>
        <p>隐式的调用RegExp的tostring方法</p>
    </li>
    <li>
        <p>console，打开控制台console运行，否则不执行</p>
    </li>
    <li>
        <p>浏览器窗口内外高度差</p>
    </li>
</ul>
<blockquote>
    <p>打开内置的chrome devtools 将造成高度差不一致</p>
</blockquote>
<h4 id="格式化检测"><a href="#格式化检测" class="headerlink" title="格式化检测"></a>格式化检测</h4>
<p>格式化检测也很实现原理也很简单，调用RegExp匹配相关部分代码</p>
<blockquote>
    <p> 一般情况下目标服务器下发的JS为经过压缩。而调试者为了便于调试一般会对代码进行格式化，一旦检测点被格式化便可被RegExp检测</p>
</blockquote>
<h3 id="Hook检测"><a href="#Hook检测" class="headerlink" title="Hook检测"></a>Hook检测</h3>
<p>函数检测：采集调用 toString 方法对内容进行校验（伪造 toString 方法即可绕过）</p>
<p>对象检测：通过 <code>Object.defineProperty</code> 方法修改属性是不可更改的（可复写 debugger 即可）</p>
<h3 id="浏览器与浏览器指纹检测"><a href="#浏览器与浏览器指纹检测" class="headerlink" title="浏览器与浏览器指纹检测"></a>浏览器与浏览器指纹检测</h3>
<p>浏览器与浏览器指纹检测可检测的范围更广，更细致。具体请参考浏览器的相关api。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4>
<p>调用时间差检测</p>
<blockquote>
    <p>调试离不开debugger、断点，调用时间过长可视为被调试</p>
</blockquote>
<p>栈检测(在浏览器中可以使用caller获取调用栈)</p>
<blockquote>
    <p>调试会打乱原有的调用栈</p>
</blockquote>
<p>tostings检测</p>
<blockquote>
    <p>调试的时候难免遇到函数，习惯性的将鼠标放置在上面。hook Function toString可实现检测</p>
</blockquote>
<p>一切与“正常”执行相悖的都可作为检测点，也就是经常说的埋雷</p>
<h4 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h4>
<p><strong>蜜罐</strong> 也就是咱们所常听见的蜜罐。简单来说就是给予或引导调试者进入虚假的环境</p>
<p>蜜罐相对较于以上<strong>被动的检测</strong>拥有更多的灵活性，相对来说更加主动，更加激进。且蜜罐更一种实现思路，具体实现具体情况具体分析</p>
<h2 id="调试陷阱"><a href="#调试陷阱" class="headerlink" title="调试陷阱"></a>调试陷阱</h2>
<p>当检测到开发者正在调试，那么下一步就是抵御。实现思路一般有三种</p>
<ol>
    <li>拦截：</li>
</ol>
<h3 id="预防调试"><a href="#预防调试" class="headerlink" title="预防调试"></a>预防调试</h3>
<p>主要目的为防止调试者继续或者进入下一步调试，常见的方式有引入僵尸代码、控制流等方式。</p>
<h3 id="阻断调试"><a href="#阻断调试" class="headerlink" title="阻断调试"></a>阻断调试</h3>
<p>较于拦截，阻断调试更加简单粗暴。常常伴随着无限循环。常见的实现方式有</p>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"># while</span><br><span class="line"><span class="keyword">while</span>(ture)</span><br><span class="line"><span class="keyword">while</span>(大于<span class="number">0</span>的数)</span><br><span class="line"><span class="keyword">while</span>(!![])</span><br><span class="line">  </span><br><span class="line"># for</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>递归</p>
<p>多函数死循环互调等实现内存爆破</p>
<h3 id="破坏调试"><a href="#破坏调试" class="headerlink" title="破坏调试"></a>破坏调试</h3>
<p>相对于阻断调试，会更加极端的手段，一方面对调试者信息进行采集、攻击调试者。例如删除文件、重置电脑、甚至释放病毒等</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>本节详细了解了检测与反调试，检测核心原理为区分代码运行环境是否一致、是否合理从而区分为正常运行还是调试运行。检测到后进行反调试，反调试一般主要体现在预防、阻断、破坏。而绕过的方案自然从检测入手，模拟环境、模拟运行时，从而进行绕过。</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>调试与反调试</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>调试与反调试</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈生活中那些与学习的事儿</title>
    <url>/32262.html</url>
    <content><![CDATA[<p>前几天有个公众号的小伙伴找到我，问到我<code>大佬大佬，你是怎么学习的啊</code>，我的回答是<code>老大哥，俺也不知道啊。应该是先这样在这样然后在这样</code>(男性同胞啊)。那到底那样啊？说实话我真不知道，我还真的不晓得什么样的学习方法、为人处事，等等是正确的。如果你问我“有没有一招KO所有”，那我只能回答你“想啥呢？如果真的有为什么只能你会，对不对？”。有时候选择比努力更加重要，方法比努力重要。没有方向所有的风都是逆风，一个个的大佬叫着，说真的很多时候我比谁都尴尬，如履薄冰。害怕你问的问题，我也不会。毕竟俺也是挺平凡的一个靓仔(“呸，丑东西～”)</p>
<a id="more"></a>
<p>偏了偏了，咱们回到正题上其实说到学习方法、高效率有什么非常非常好的方法，说真的似乎还真的有。不过我想将我现目前所认知的所有告诉你，</p>
<p>说到这些我按照我目前所认知的归纳为三大部分，<code>高效率</code>、<code>时间管理</code>、<code>学习方法</code>、<code>如何分析</code>，来吧来吧，看看我到底想对你说些什么呢？</p>
<h2 id="谈谈高效率"><a href="#谈谈高效率" class="headerlink" title="谈谈高效率"></a>谈谈高效率</h2>
<blockquote>
    <p>你所浪费的今天，是昨天死去的人奢望的明天。</p>
    <p>你所厌恶的现在，正是未来的你回不去的曾经。</p>
</blockquote>
<p>时间总是公平的，你我的一天都只有24hour，一分不多一秒不少，如何合理的利用，高效的利用。高额的产出就成了我们都想突破思考的问题。那位独秀同学请先坐下，哥的容貌就比你帅一点点。这个是认真的，嘻嘻～。</p>
<p>首先我们来看这样的一个物理公式，效率 = 输入功除以输出功，也就是投入与产出的比值。理论上讲一分耕耘一分收获。但实际上却并不一定是这样。阻挡我们“高产”的东西有很多，例如生活中的各种琐事、各种朋友圈、短视频、等等等等都耗费着那宝贵的时间</p>
<h4 id="全身心投入是高效率的开始"><a href="#全身心投入是高效率的开始" class="headerlink" title="全身心投入是高效率的开始"></a>全身心投入是高效率的开始</h4>
<p>说到全身心的投入，那自然离不开控制自己了。正因为生活中的琐事等等真的非常的多，以至于我们无法较为投入。我分享我几个感觉不错的建议</p>
<ul>
    <li>放下手机</li>
    <li>安静的环境</li>
    <li>适宜的氛围</li>
</ul>
<p>放下手机，很好理解。手机静音，把手机放在不太容易看的见的地方，从而抑制看手机、玩手机的想法。将思维定在此时此刻想做的事上。朋友圈上隔壁王阿姨家的猫又生了几个崽，等下又去吃什么好吃的。微信上又有个小姐姐好漂亮，好可爱，怎么办，怎么办好喜欢，怎么办。关你什么事儿？做到雨女无瓜。对吧，有这样的感觉就nice。</p>
<p>选择、制造安静的环境，很多朋友啊真的是稍微有点动静就心猿意马，然后一大堆的想法就出来了。然后就似脱缰野马，未有归途。然后就没有然后了呗。脑子一想，这几分钟就过去了，眼睛一睁一闭着一天就过去了，眼睛一睁不闭这辈子就过去了。不知道你们是不是这样的，我就是了。所以控制不住自己受环境所影响的，那就选择，或者制造相对应的环境。让自己能够全身心投入那伟大神圣的事业</p>
<h3 id="人脑规律是高效率的进阶"><a href="#人脑规律是高效率的进阶" class="headerlink" title="人脑规律是高效率的进阶"></a>人脑规律是高效率的进阶</h3>
<p>说到这个真的是玄之又玄的东西，早晨记忆力更好，下午思维逻辑更清晰。不知道你们是什么样的情况。我的脑子基本是符合这个神圣的定律。就比如我早晨的时候会看一些，技术文档、大佬的公众号、等等这些。效果真的非常不错。下午的话我会去攻克难题，无论上是项目上的，还是等等。如果在这“最清醒”的状态都搞不出来，那么平时也别想。当然每个人都情况会有所不同，具体视情况而定</p>
<h3 id="手脚并用是高效率的高阶"><a href="#手脚并用是高效率的高阶" class="headerlink" title="手脚并用是高效率的高阶"></a>手脚并用是高效率的高阶</h3>
<p>这个其实说’五到’会更加适合，而并不是仅仅是手脚并用。你以为跑步呢。腿撒开跑，手撒开摇。这个并不是这样的。借用鲁迅先生的思想“五到”，眼到，口到，心到，手到，脑到。其实最重要的还是人到（手动狗头～）</p>
<p>眼到：集中在目标，不可看别处。</p>
<p>口到：认真读书，有感情。</p>
<p>心到：最重要便是心，用心去看去学，不可三心二意。</p>
<p>手到：做做批注，实际操作一下，在有感受后旁边写上自己的体会。</p>
<p>脑到：提出不懂的问题，善于思考,追根求源。</p>
<h2 id="谈谈学习方法"><a href="#谈谈学习方法" class="headerlink" title="谈谈学习方法"></a>谈谈学习方法</h2>
<p>说到非常可行的学习方法，其实真的很简单。相信大家也都听说过无数次了。<code>预习</code>，<code>学习</code>，<code>复习</code>。是不是so easy？哇唔，大道至简，我会了。</p>
<blockquote>
    <p>屌丝逆袭，赢取白富美，出任CEO，走向人生巅峰的小手在向我召唤。我等下一不小心就成功了怎么办？</p>
    <p>那我又只能告诉你，快醒醒。你以为你是万年难得一见的骨骼惊奇，头铁是吧？这才哪到哪啊，八字还没一撇呢，更别说捺了</p>
</blockquote>
<p>其实做到以上三点并不看起来的那么简单，真的是那种咫尺天涯，知易行难。</p>
<p>那么怎么样的学习方法才是较为正确，且高效率的呢？接下来让我们去了解一下“十步学习法”，真真实实的将预习、学习、复习精准落实起来。我个人感觉挺高效的，不过事先说明“十步学习法”并不是我发现、我创建的。不过我确实从中受益良多，话不多见，开干～</p>
<h3 id="十步学习法"><a href="#十步学习法" class="headerlink" title="十步学习法"></a>十步学习法</h3>
<p><img src="https://img-blog.csdnimg.cn/20201025051513142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDcwODE=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>对于“十步学习法”的前六个步骤，我们需要集中精力完成足够多的前期调研，确保自己明确知道要学哪些内容，以及如何确认自己已达成目标。这六个步骤只需要针对将要学习的每个主题做一次。第 7 步到第 10 步则要针对在第 5 步所制定的学习计划中的每个模块重复。</p>
<p>虽然前六个步骤只需要做一次，但它们却是最重要的，因为它们将对我们未来的成败起决定性作用。在这六个步骤中，我们需要为自己实际的学习主题做好一切准备。</p>
<h4 id="第一步：了解全局"><a href="#第一步：了解全局" class="headerlink" title="第一步：了解全局"></a>第一步：了解全局</h4>
<p>我们要做的就是了解将要学习的主题的全局。这个主题宏观上是什么样的？</p>
<p>我们能够从中学到足够丰富的知识以了解自己认知以外的, 以及我们自己认知之外的有多少？</p>
<p>要完成这一步，对想要学的内容做一些基础性了解。</p>
<blockquote>
    <p>关键词:广泛</p>
</blockquote>
<h4 id="第二步：确定范围"><a href="#第二步：确定范围" class="headerlink" title="第二步：确定范围"></a>第二步：确定范围</h4>
<p>当我们对自己所要学习的主题及其相关的知识都有了一个大致的了解后，此时需要集中精力去明确自己到底要学什么?</p>
<p>明确具体的范围是至关重要的，唯有这样才能了解项目的全局，以求做好相应的准备。</p>
<blockquote>
    <p>关键词: 深度</p>
</blockquote>
<h4 id="第三步：定义目标"><a href="#第三步：定义目标" class="headerlink" title="第三步：定义目标"></a>第三步：定义目标</h4>
<p>在开始学习前，明确“成功”的 含义极为重要。如果不知道成功是什么，很难找准目标，也很难知道自己什么时候已经真正达到目标。在尝试学习任何东西之前，我们都应该清晰清除的明白,完成之后我能完成什么样的事情? 当知道自己的目标是什么的时候，就可以更轻松地使用倒推的方式，明确实现目标所需的步骤。</p>
<p>这一步的目标是形成一份简明清晰的陈述，勾勒出学习后的成功图景。好的成功标准应该是具体的，无二义性的. 根据一\二步制定,绘出自己<code>成功</code>将能达到的实际效果.</p>
<blockquote>
    <p>关键词: 具体</p>
</blockquote>
<h4 id="第四步：寻找资源"><a href="#第四步：寻找资源" class="headerlink" title="第四步：寻找资源"></a>第四步：寻找资源</h4>
<p>要尝试收集到多种多样的资源以帮助我们学习，以求更加深入的了解此知识或技术</p>
<p>需要找到尽可能多的与自己所选主题相关的资源，此时可无需考虑这些资源的质量。</p>
<p>信息来源(不分先后)：</p>
<ul>
    <li>
        <p>专家</p>
    </li>
    <li>
        <p>图书</p>
    </li>
    <li>源代码</li>
    <li>示例项目</li>
    <li>博客文章</li>
    <li>在线视频</li>
    <li>在线文档</li>
    <li>… …</li>
</ul>
<blockquote>
    <p>关键词: 尋找</p>
</blockquote>
<h4 id="第五步：创建学习计划"><a href="#第五步：创建学习计划" class="headerlink" title="第五步：创建学习计划"></a>第五步：创建学习计划</h4>
<p>此時需创建相對應学习規劃。可以把学习路径类比成写书时的<strong>大纲</strong>。</p>
<p>打造自己的学习计划，一个好办法就是观察别人是如何教我们感兴趣的主题的。可以参考在第四步中搜集到的图书目录，如果 5 位 以上的作者都把内容分解为相同的模块和顺序，那么就可以遵循这样的方法制订自己的学习计划。</p>
<blockquote>
    <p>关键词: 大綱</p>
</blockquote>
<h4 id="第六步：筛选资源"><a href="#第六步：筛选资源" class="headerlink" title="第六步：筛选资源"></a>第六步：筛选资源</h4>
<p>此時已经知道了要学什么及以什么顺序学，</p>
<p>將第四步中收集的全部资源瀏覽\篩選，找出哪些内容能够覆盖我们的学习计划，还应当看看评论，试着找出品质最高的资源。</p>
<blockquote>
    <p>关键词: 篩選</p>
</blockquote>
<h4 id="第七步：开始学习，浅尝辄止"><a href="#第七步：开始学习，浅尝辄止" class="headerlink" title="第七步：开始学习，浅尝辄止"></a>第七步：开始学习，浅尝辄止</h4>
<p>大多数情況下在过程中会犯两类相對错误：</p>
<ul>
    <li>第一类错误是在知之不多的情况下就盲目开始，即行动太快；</li>
    <li>第二类错误是在行动之前准备太多，即行动太晚。</li>
</ul>
<p>要想在这两者之间取得平衡，我们掌握的知识要恰到好处，足以能够开始学习，但又不会多到让人无力探索，这样的学习效果是最佳的。</p>
<p>目标為获得足够多与所学主题相关的信息，从而能让我们可以开始学习，并在下一步中动手操作。</p>
<blockquote>
    <p>关键词: 節奏</p>
</blockquote>
<h4 id="第八步：动手操作，边玩边学"><a href="#第八步：动手操作，边玩边学" class="headerlink" title="第八步：动手操作，边玩边学"></a>第八步：动手操作，边玩边学</h4>
<p>这一步中我们无需提前了解全部内容，要做的首要的一件事就是亲自操作和亲身体验。采用这种方法，可以通过探索和实践进行学习。</p>
<p>在操作过程中，我们的大脑自然地会产生各种问题：</p>
<ul>
    <li>
        <p>它是如何工作的？</p>
    </li>
    <li>
        <p>如果我这么做，可能会发生什么？</p>
    </li>
    <li>
        <p>我该如何解决这个问题？</p>
    </li>
</ul>
<p>这些问题能够引导我们走向真正重要的方向。当我们回过头寻找问题的答案时，不只是这些问题迎刃而解，而且我们记得的东西要比学习的东西多很多.</p>
<blockquote>
    <p>关键词: 思考</p>
</blockquote>
<h4 id="第九步：全面掌握，学以致用"><a href="#第九步：全面掌握，学以致用" class="headerlink" title="第九步：全面掌握，学以致用"></a>第九步：全面掌握，学以致用</h4>
<p>好奇心是学习特别是自学的重要组成部分。</p>
<p>这一步的目标就是让我们找回好奇心驱动的学习。在这一步，我们依然没有必要把收集到的所有资料都仔细地看一遍。只需要阅读或观看与当前所学相关的知识。最后，试着把自己正在学习的内容与最终目标关联起来。我们掌握的每个模块，都应该以某种方式推动你向着终极目标前进。</p>
<blockquote>
    <p>關鍵詞:全面</p>
</blockquote>
<h4 id="第十步：乐为人师，融会贯通"><a href="#第十步：乐为人师，融会贯通" class="headerlink" title="第十步：乐为人师，融会贯通"></a>第十步：乐为人师，融会贯通</h4>
<p>三人行,必有我師</p>
<p>走出自己的舒适区，将所学到的教给别人,爭取教會。要想确定你确实掌握了某些知识，这是唯一的办法；同时，在将自己所学介绍给他人时，这也是查缺补漏的好办法。</p>
<blockquote>
    <p>關鍵詞: 學教</p>
</blockquote>
<h2 id="谈谈描述问题与解决问题"><a href="#谈谈描述问题与解决问题" class="headerlink" title="谈谈描述问题与解决问题"></a>谈谈描述问题与解决问题</h2>
<p>其实描述问题我这个“八何分析法”是个非常不错的思路结构，如果你能够清晰的描述你的问题，无论是对于自己还是需要得到有效的帮助去解决问题都会事半功倍</p>
<h3 id="描述问题-八何分析法"><a href="#描述问题-八何分析法" class="headerlink" title="描述问题(八何分析法)"></a>描述问题(八何分析法)</h3>
<p>What，Where，When，Who，Why，How，How much，How feel</p>
<ul>
    <li>
        <p>Why：为何——为什么要做？为什么要如此做（有没有更好的办法）？（做这项工作的原因或理由）</p>
    </li>
    <li>
        <p>What：何事——什么事？做什么？准备什么？（即明确工作的内容和要达成的目标）</p>
    </li>
    <li>
        <p>Where：何处——在何处着手进行最好？在哪里做？（工作发生的地点）？</p>
    </li>
    <li>
        <p>When：何时——什么时候开始？什么时候完成？ 什么时候检查？（时间）</p>
    </li>
    <li>
        <p>Who：何人——谁去做？ （由谁来承担、执行？）谁负责？谁来完成？（参加人、负责人）？</p>
    </li>
    <li>
        <p>How：如何——如何做？如何提高效率？如何实施？方法怎样？（用什么方法进行）？</p>
    </li>
    <li>
        <p>How much：何价——成本如何？达到怎样的效果（做到什么程度）？ 数量如果？质量水平如何？费用产出如何？</p>
    </li>
    <li>
        <p>How feel：感觉—体验如何？开发者、使用者、领导最终的体验是否满意？</p>
    </li>
</ul>
<p>概括：即为什么？是什么？何处？何时？由谁做？怎样做？成本多少？结果会怎样？也就是：要明确工作/任务的原因、内容、空间位置、时间、执行对象、方法、成本。加上工作结果（how do you feel）：工作结果预测，就成为5W3H。</p>
<p>这样可能会更加符合人脑记忆，时间(when)、地点（where）、人物（who）、what、why，How，How much，How feel</p>
<h3 id="问题分割及解决之道"><a href="#问题分割及解决之道" class="headerlink" title="问题分割及解决之道"></a>问题分割及解决之道</h3>
<p>在能够清晰的描述问题之后，相信你对于问题出现的地方就有个大概的定位，那么接下来就是分割问题。剖析大问题成一个个小问题，解决一个个最后这个问题就能能够轻松的被解决。同时找到最佳解决方案。</p>
<p>比如我需要做个简单的学生管理系统，那么我们就可以分解出这样几个小问题。</p>
<ol>
    <li>学生信息</li>
    <li>管理账号</li>
    <li>菜单栏目</li>
    <li>实现功能<ol>
            <li>查看</li>
            <li>添加</li>
            <li>修改</li>
            <li>删除</li>
            <li>退出</li>
        </ol>
    </li>
</ol>
<p>这样是不是比完成学生管理系统好实现的多。那么我们只需要一个个实现以上几个功能就可以实现一个简单的学生管理系统了。so easy。当然这样还不足以上线，只能在本地跑一跑，玩一玩。那么如果真的做成项目的话。只需要一个个扩宽就可以了。</p>
<p>比如</p>
<p>学生信息,那么我们自然而然的想到数据库，又由于这写之间的关系。我个人是建议使用SQL数据库。后面数据量大了之后在进行分库分表，甚至SQL集群等等。这项目不就慢慢起来了么</p>
<p>菜单栏，这个就是个展示的面板嘛，抛到前端(主要是前端了)。然后在分割成什么主页啊，信息页啊。等等，这样是不是越来越大了</p>
<p>然后顺着这种思路，自然而然的从一个小的case到项目了</p>
<h2 id="谈谈如何规划"><a href="#谈谈如何规划" class="headerlink" title="谈谈如何规划"></a>谈谈如何规划</h2>
<p>说了那么多终于到了这里也终于到了取舍分离的阶段，一生中有很多事，大事小事。等等，那么如果做个区分，相信你我在未来的道路上会更加清晰明了。那么我们谈谈该如何规划、制定吧。</p>
<p>说到这个就不得不提一下，“四象限分析法”，如下图所示</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm7j0i3g5jj30cs0cs3yf.jpg" alt=""></p>
<h3 id="界限"><a href="#界限" class="headerlink" title="界限"></a>界限</h3>
<p>第一象限</p>
<p>这个象限包含的是一些紧急而重要的事情，这一类的事情具有时间的紧迫性和影响的重要性，无法回避也不能拖延，必须首先处理优先解决。它表现为重大项目的谈判，重要的会议工作等。</p>
<p>第二象限</p>
<p>第二象限包含的事件是那些紧急但不重要的事情，这些事情很紧急但并不重要，因此这一象限的事件具有很大的欺骗性。很多人认识上有误区，认为紧急的事情都显得重要，实际上，像无谓的电话、附和别人期望的事、打麻将三缺一等事件都并不重要。这些不重要的事件往往因为它紧急，就会占据人们的很多宝贵时间。</p>
<p>第三象限</p>
<p>第三象限的事件大多是些琐碎的杂事，没有时间的紧迫性，没有任何的重要性，这种事件与时间的结合纯粹是在扼杀时间，是在浪费生命。发呆、上网、闲聊、游逛，这是饱食终日无所事事的人的生活方式。</p>
<p>第四象限</p>
<p>第四象限不同于第一象限，这一象限的事件不具有时间上的紧迫性，但是，它具有重大的影响，对于个人或者企业的存在和发展以及周围环境的建立维护，都具有重大的意义。</p>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3>
<p>1.优先解决第一象限</p>
<p>首先要有准确的判断能力，确定是既紧急又重要的事情，然后优先处理。</p>
<p>2.区分一二象限</p>
<p>第一象限和第二象限难以区分，第二象限对人们的欺骗性是最大的，它很紧急的事实造成了它很重要的假象，耗费了人们大量的时间。依据紧急与否是很难区分这两个象限的，要区分它们就必须借助另一标准，看这件事是否重要。也就是按照自己的人生目标和人生规划来衡量这件事的重要性。如果它重要就属于第一象限的内容；如果它不重要，就属于第二象限的内容。</p>
<p>3.投资第四象限</p>
<p>第一象限的事情重要而且紧急，由于时间原因人们往往不能做得很好。第四象限的事情很重要，而且会有充足的时间去准备，有充足的时间去做好。可见，投资第四象限，它的回报才是最大的。</p>
<p>4.放弃第三象限</p>
<p>第三象限都是既不重要也不紧急的琐事，但它们往往使人们难以脱身，所以人们经常会跌进第三象限而无法自拔。例如，玩游戏、看娱乐视频等，只要一玩起来就很难脱身，而且要耗费很长的时间才能达成结果。</p>
<h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3>
<ol>
    <li>马上做：如果你总是有紧急又重要的事情要做，说明你在时间管理上存在问题，设法减少它。</li>
    <li>计划做：尽可能地把时间花在重要但不紧急（第四象限）的事情上，这样才能减少第一象限的工作量。</li>
    <li>授权做：对于紧急但不重要的事情的处理原则是授权，让别人去做。</li>
    <li>减少做：不重要也不紧急的事情尽量少做。</li>
</ol>
<p>其实说实话，很多东西都不是自己的，自己也是做一个总结吧。希望你我在人生的道路上一路高歌猛进，加油～</p>
<p>积跬Coder敬上<br>致辞</p>
]]></content>
      <categories>
        <category>技术人生</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>网页调试干扰总结</title>
    <url>/14277.html</url>
    <content><![CDATA[<h2 id="网页反调试总结"><a href="#网页反调试总结" class="headerlink" title="网页反调试总结"></a>网页反调试总结</h2>
<p>网站除了对代码进行加密进行保护，还时常携带了反调试手段。例如无限debugger；内存爆破，控制台检测。</p>
<p>相关无限debugger进行反调试阻挠请参考上文，不在此过多赘述。本节主要学习内存爆破原理与绕过思想、控制台检测原理与绕过，</p>
<a id="more"></a>
<h3 id="内存爆破"><a href="#内存爆破" class="headerlink" title="内存爆破"></a>内存爆破</h3>
<p>通俗来理解是通过“特殊手段”不断开辟新内存，造成内存存储不足，从而使程序或电脑宕机。内存爆破并没有一种具体的实现方式，如果实现了内存爆破的效果都可以称之为内存爆破。</p>
<blockquote>
    <p>当我们在编程的时候，每当声明一个变量、初始化一个函数。都会在开辟一块内存。</p>
</blockquote>
<h4 id="内存爆破实现的流程"><a href="#内存爆破实现的流程" class="headerlink" title="内存爆破实现的流程"></a>内存爆破实现的流程</h4>
<p>检测环境</p>
<p>实现内存爆破</p>
<blockquote>
    <p>此处的环境为泛指，当与正常用户访问相悖或有差异均可以以此为为“入口”，开始内存爆破</p>
</blockquote>
<h4 id="内存爆破常见入口点"><a href="#内存爆破常见入口点" class="headerlink" title="内存爆破常见入口点"></a>内存爆破常见入口点</h4>
<p>hook检测</p>
<blockquote>
    <p>监听函数情况，当函数被hook，且未完善的伪装hook时。</p>
</blockquote>
<p>代码格式化检测</p>
<blockquote>
    <p>正常情况下，代码被压缩成一行或几行。但在运行时不符。</p>
</blockquote>
<p>浏览器指纹检测</p>
<blockquote>
    <p>当运行环境与所规定的环境不同时</p>
</blockquote>
<p>控制台检测</p>
<blockquote>
    <p>监听控制台，当控制台被打开时。</p>
</blockquote>
<h4 id="内存爆破特征"><a href="#内存爆破特征" class="headerlink" title="内存爆破特征"></a>内存爆破特征</h4>
<ol>
    <li>检测环境</li>
    <li>与预期环境不符合，死循环；符合，正常退出</li>
</ol>
<figure class="highlight js">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="comment">// 内存爆破示例代码</span></span><br><span class="line">h = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"正常执行"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">// 进入陷阱</span></span><br><span class="line">        <span class="keyword">while</span> (!![]) &#123;</span><br><span class="line">            c = <span class="keyword">new</span> <span class="built_in">Array</span>().push(<span class="keyword">void</span> <span class="number">0</span>);;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"内存爆破， 危！！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在浏览器中执行<strong>内存爆破示例代码</strong>， 如下图所示</p>
<p>符合预期，正常情况下：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs44y083cmj310o0pm75b.jpg" alt=""></p>
<p>不符合，触发内存爆破</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gs450veqckj31lk0u0n1b.jpg" alt=""></p>
<p>过了一小会，你就会发现，崩溃了！！！</p>
<h4 id="内存爆破总结"><a href="#内存爆破总结" class="headerlink" title="内存爆破总结"></a>内存爆破总结</h4>
<p>内存爆破，更像一种陷阱。如果触发了该陷阱，有了这个“入口”，便开始内存爆破。</p>
<h4 id="如何绕过内存爆破？"><a href="#如何绕过内存爆破？" class="headerlink" title="如何绕过内存爆破？"></a>如何绕过内存爆破？</h4>
<p>由于内存爆破的“入口”并不一致，所以内存爆破也并没有通用的解决方案。可提供的思路为“阻断”进入内存爆破，便为绕过。</p>
<p>例如</p>
<p>hook检测，伪装hook原型链即可</p>
<p>代码格式化检测，在检测处进行处理即可</p>
<p>浏览器指纹检测，伪装浏览器指纹，保持一致即可</p>
<p>控制台检测，处理检测代码即可。</p>
<h2 id="控制台检测原理与绕过"><a href="#控制台检测原理与绕过" class="headerlink" title="控制台检测原理与绕过"></a>控制台检测原理与绕过</h2>
<p>不知你也是否和我一样遇见过这种情况，当打开控制台时。浏览器就直接崩溃，获取其他情况。</p>
<h4 id="控制台检测原理"><a href="#控制台检测原理" class="headerlink" title="控制台检测原理"></a>控制台检测原理</h4>
<p>检测原理为与“正常”浏览网站有差异</p>
<p>当打开控制台的时候,会触发如下两种情况</p>
<ol>
    <li>debugger可执行了</li>
    <li>div会自动获取id属性</li>
</ol>
<p>第一种也就是我们常说的debugger调试干扰，</p>
<blockquote>
    <p>只要控制台打开，debugger便会执行。一直相关联的无限deugger便会随之而来（如果有）</p>
</blockquote>
<p>第二种，当浏览器有使用<code>document.createElement</code>创建标签时，会创建该标签。<strong>当控制台打开会自动获取其id属性</strong>。</p>
<p>如果在绑定他，在对他进行内存爆破等操作。那么就。。。</p>
<h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4>
<p>滞空该标签即可</p>
<p>pass</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>调试</category>
        <category>Hook</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Crawler</tag>
        <tag>JS</tag>
        <tag>浏览器</tag>
        <tag>调试</tag>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>论优化</title>
    <url>/1564497082.html</url>
    <content><![CDATA[<p>时代高速发展，技术日新月异。各司左手分布式，右手高并发。嘴上骂骂咧咧动不动优化的卷王，近日出现的可真不少。</p>
<p>他卷任他卷，躺平治百痛，吾可被累死，但也要卷死尔等。</p>
<p>那么今天咱们也聊聊“优化”？</p>
<p>优化字面意思加以改变或选择使优良，简单来说就是越来越好嘛。没毛病，那么所常见到的一般有几大方向</p>
<ul>
    <li>
        <p>架构优化</p>
    </li>
    <li>
        <p>存储</p>
        <ul>
            <li>数据库优化</li>
        </ul>
    </li>
    <li>
        <p>编码</p>
        <ul>
            <li>
                <p>编码规范化</p>
            </li>
            <li>
                <p>代码优化</p>
            </li>
        </ul>
    </li>
</ul>
]]></content>
      <categories>
        <category>c1</category>
        <category>c2</category>
        <category>c3</category>
      </categories>
      <tags>
        <tag>t1</tag>
      </tags>
  </entry>
  <entry>
    <title>详探Redis.conf</title>
    <url>/12856.html</url>
    <content><![CDATA[<blockquote>
    <p>Redis版本：6.0.10</p>
    <p>redis.conf 默认路径：/opt/redis-6.0.10 路径下（如果为自定制安装，则在您设置的redis路径下）</p>
</blockquote>
<p>还记得我刚入行的时候，我的师傅就经常告诉我们<code>配置比开发更重要</code>，因为很多时候就是由于配置不当，而造成后期的难以预想的各种问题，<br>以至于项目难以维护等等由于配置。进入一个公司首先的也是看相关项目的文档。so，如果需要对于redis有更深入的了解，与使用配置文件不可不读。<br>为CURD，但不止于CURD。那么接下来我们对于<code>redis.conf</code>有个了解，话不多说，开干。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Redis configuration file example.</span><br><span class="line"></span><br><span class="line">Note that in order to read the configuration file, Redis must be</span><br><span class="line">started with the file path as first argument:</span><br><span class="line"></span><br><span class="line">./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line">Note on units: when memory size is needed, it is possible to specify</span><br><span class="line">it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line"></span><br><span class="line"><span class="attr">1k</span> =&gt; <span class="number">1000</span> bytes</span><br><span class="line"><span class="attr">1kb</span> =&gt; <span class="number">1024</span> bytes</span><br><span class="line"><span class="attr">1m</span> =&gt; <span class="number">1000000</span> bytes</span><br><span class="line"><span class="attr">1mb</span> =&gt; <span class="number">1024</span>*<span class="number">1024</span> bytes</span><br><span class="line"><span class="attr">1g</span> =&gt; <span class="number">1000000000</span> bytes</span><br><span class="line"><span class="attr">1gb</span> =&gt; <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span> bytes</span><br><span class="line"></span><br><span class="line">units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Redis启动必须指定配置文件路径(如果没有则使用默认的配置文件)，</p>
<blockquote>
    <p>说明如果我们把<code>默认的</code>配置文件给删除了，是无法启动redis的。</p>
    <p>同理既然可以指定路径，那么我们也可以参考默认配置文件，定制化配置Redis</p>
</blockquote>
<p>需要使用内存大小时，可以指定单位，通常是以 k,gb,m的形式出现，并且<strong>单位不区分大小写</strong>。</p>
<p>仔细看你会发现它只支持<code>bytes</code>类型，不支持<code>`bit</code>等类型</p>
<h2 id="INCLUDES"><a href="#INCLUDES" class="headerlink" title="INCLUDES"></a>INCLUDES</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Include one or more other config files here.  This is useful if you</span><br><span class="line">have a standard template that goes to all Redis servers but also need</span><br><span class="line">to customize a few per-server settings.  Include files can include</span><br><span class="line">other files, so use this wisely.</span><br><span class="line"><span class="comment"># 在此处包括一个或多个其他配置文件。如果您具有可用于所有Redis服务器的标准模板，但还需要自定义一些每台服务器设置，则此功能很有用。包含文件可以包含其他文件，因此请明智地使用它</span></span><br><span class="line">Note that option "include" won't be rewritten by command "CONFIG REWRITE"</span><br><span class="line">from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="line">line as value of a configuration directive, you'd better put includes</span><br><span class="line">at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="line"><span class="comment"># 请注意，选项“ include”将不会被admin或Redis Sentinel中的命令“ CONFIG REWRITE”重写。由于Redis始终使用最后处理的行作为配置指令的值，因此最好将include放在此文件的开头，以避免在运行时覆盖配置更改</span></span><br><span class="line">If instead you are interested in using includes to override configuration</span><br><span class="line">options, it is better to use include as the last line.</span><br><span class="line"><span class="comment"># 相反，如果您有兴趣使用include覆盖配置选项，则最好使用include作为最后一行</span></span><br><span class="line">include /path/to/local.conf</span><br><span class="line">include /path/to/other.conf</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>我们知道Redis只有一个配置文件，如果多个人进行开发维护，那么就需要多个这样的配置文件，这时候多个配置文件就可以在此通过 include /path/to/local.conf 配置进来，而原本的 redis.conf 配置文件就作为一个总闸。</p>
<p>另外需要注意的时，如果将此配置写在redis.conf 文件的开头，那么后面的配置会覆盖引入文件的配置，如果想以引入文件的配置为主，那么需要将 include 配置写在 redis.conf 文件的末尾。</p>
<h2 id="MODULES"><a href="#MODULES" class="headerlink" title="MODULES"></a>MODULES</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Load modules at startup. If the server is not able to load modules</span><br><span class="line">it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="line"></span><br><span class="line">loadmodule /path/to/my_module.so</span><br><span class="line">loadmodule /path/to/other_module.so</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>通过这里的 loadmodule 配置将引入自定义模块来新增一些功能。</p>
<h2 id="NETWORK-重要"><a href="#NETWORK-重要" class="headerlink" title="NETWORK(重要)"></a>NETWORK(重要)</h2>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">By default, if no "bind" configuration directive is specified, Redis listens</span><br><span class="line">for connections from all available network interfaces on the host machine.</span><br><span class="line">It is possible to listen to just one or multiple selected interfaces using</span><br><span class="line">the "bind" configuration directive, followed by one or more IP addresses.</span><br><span class="line"><span class="comment"># 默认情况下，如果未指定“ bind”配置指令，则Redis侦听主机上所有可用网络接口的连接。可以使用“ bind”配置指令仅侦听一个或多个所选接口，然后侦听一个或多个IP地址</span></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">bind 192.168.1.100 10.0.0.1</span><br><span class="line">bind 127.0.0.1 ::1</span><br><span class="line"></span><br><span class="line">~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><span class="line">internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line">instance to everybody on the internet. So by default we uncomment the</span><br><span class="line">following bind directive, that will force Redis to listen only on the</span><br><span class="line">IPv4 loopback interface address (this means Redis will only be able to</span><br><span class="line">accept client connections from the same host that it is running on).</span><br><span class="line"><span class="comment"># ~~~警告~~~如果运行Redis的计算机直接暴露于Internet，则绑定到所有接口都是很危险的，并且会将实例暴露给Internet上的所有人。因此，默认情况下，我们取消注释以下bind指令，这将强制Redis仅在IPv4环回接口地址上侦听（这意味着Redis将只能接受来自其运行所在主机的客户端连接）</span></span><br><span class="line">IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line">JUST COMMENT OUT THE FOLLOWING LINE.</span><br><span class="line"><span class="comment"># 如果您确定要立即侦听所有接口，只需在后续行中注明即可。</span></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">bind 127.0.0.1 ::1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line">Redis instances left open on the internet are accessed and exploited.</span><br><span class="line"><span class="comment"># 保护模式是安全保护的一层，目的是避免访问和利用Internet上打开的Redis实例。</span></span><br><span class="line">When protected mode is on and if:</span><br><span class="line"><span class="comment"># 当保护模式开启时，如果</span></span><br><span class="line">1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">"bind" directive.</span><br><span class="line"><span class="comment"># 服务器未使用“ bind”指令显式绑定到一组地址</span></span><br><span class="line">2) No password is configured.</span><br><span class="line"><span class="comment"># 没有配置密码</span></span><br><span class="line">The server only accepts connections from clients connecting from the</span><br><span class="line">IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line">sockets.</span><br><span class="line"><span class="comment"># 服务器仅接受来自客户端的连接，这些客户端从IPv4和IPv6回送地址127.0.0.1和:: 1以及Unix域套接字连接</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>bind:绑定redis服务器网卡IP，默认为127.0.0.1,即本地回环地址。这样的话，访问redis服务只能通过本机的客户端连接，而无法通过远程连接。如果bind选项为空的话，那会接受所有来自于可用网络接口的连接。</p>
<p>同时需要注意的是 如果注释掉<code>bind</code>后面的内容，运行Redis的计算机将直接暴露于在internet上，绑定到所有接口是危险的，并且会暴露向互联网上的每个人提供实例。需谨慎选择</p>
<blockquote>
    <p>至少也得加个密码(见下文)</p>
</blockquote>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">By<span class="built_in"> default </span>protected mode is enabled. You should <span class="builtin-name">disable</span> it only <span class="keyword">if</span></span><br><span class="line">you are sure you want clients <span class="keyword">from</span> other hosts <span class="keyword">to</span> connect <span class="keyword">to</span> Redis</span><br><span class="line">even <span class="keyword">if</span> <span class="literal">no</span> authentication is configured, nor a specific <span class="builtin-name">set</span> of interfaces</span><br><span class="line">are explicitly listed using the <span class="string">"bind"</span> directive.</span><br><span class="line"><span class="comment"># 默认情况下启用保护模式。仅当您确定您希望其他主机的客户端连接到Redis时，即使未配置身份验证，也不要使用“ bind”指令显式列出一组特定的接口，才应禁用它</span></span><br><span class="line">protected-mode <span class="literal">yes</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>默认情况下，启用保护模式。只有当您确定希望来自其他主机的客户端连接到Redis时才应该禁用它，即使没有配置身份验证，也没有使用“bind”指令显式列出一组特定的接口。</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Accept connections on the specified port,<span class="built_in"> default </span>is 6379 (IANA 815344).</span><br><span class="line"><span class="keyword">If</span><span class="built_in"> port </span>0 is specified Redis will <span class="keyword">not</span> listen on a TCP socket.</span><br><span class="line"><span class="comment"># 接受指定端口上的连接，默认为6379（IANA 815344）。如果指定了端口0，则Redis将不会在TCP套接字上侦听</span></span><br><span class="line">port 6379</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>接受指定端口上的连接，默认值为6379。如果指定了端口0，Redis将不会侦听TCP套接字。由于Redis是单线程模型，因此单机开多个Redis进程的时候需要修改端口。</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">TCP listen() backlog.</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> high requests-per-second environments you need a high backlog <span class="keyword">in</span> order</span><br><span class="line"><span class="keyword">to</span> avoid slow clients<span class="built_in"> connection </span>issues.<span class="built_in"> Note </span>that the Linux kernel</span><br><span class="line">will silently truncate it <span class="keyword">to</span> the value of /proc/sys/net/core/somaxconn so</span><br><span class="line">make sure <span class="keyword">to</span> raise both the value of somaxconn <span class="keyword">and</span> tcp_max_syn_backlog</span><br><span class="line"><span class="keyword">in</span> order <span class="keyword">to</span> <span class="builtin-name">get</span> the desired effect.</span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line">在每秒高请求的环境中，您需要一个高积压工作，以避免客户端连接速度慢的问题。请注意，Linux内核将静默地将其截断为/proc/sys/net/core/somaxconn so的值</span><br><span class="line">确保同时提高somaxconn和tcp\u max\u syn\u backlog的值以获得所需的效果</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>默认值 511<br>tcp-backlog：511</p>
    <p>此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。</p>
    <p>建议修改为 2048<br>修改somaxconn</p>
    <p>该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。</p>
    <p>echo 2048 &gt; /proc/sys/net/core/somaxconn 但是这样系统重启后保存不了</p>
    <p>在/etc/sysctl.conf中添加如下</p>
    <p>net.core.somaxconn = 2048</p>
    <p>然后在终端中执行</p>
    <p>sysctl -p</p>
</blockquote>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Unix socket.</span><br><span class="line"></span><br><span class="line">Specify the path <span class="keyword">for</span> the Unix socket that will be used <span class="keyword">to</span> listen <span class="keyword">for</span></span><br><span class="line">incoming connections. There is <span class="literal">no</span> default, so Redis will <span class="keyword">not</span> listen</span><br><span class="line">on a unix socket when <span class="keyword">not</span> specified.</span><br><span class="line"></span><br><span class="line">unixsocket /tmp/redis.sock</span><br><span class="line">unixsocketperm 700</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>指定用于侦听传入连接的Unix套接字的路径。没有默认值，因此Redis在未指定时不会侦听unix套接字。</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Close the<span class="built_in"> connection </span>after a<span class="built_in"> client </span>is idle <span class="keyword">for</span> N seconds (0 <span class="keyword">to</span> disable)</span><br><span class="line">timeout 0</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>客户端空闲N秒后关闭连接（0表示禁用）</p>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">TCP keepalive.</span><br><span class="line"></span><br><span class="line">If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><br><span class="line">of communication. This is useful for two reasons:</span><br><span class="line"><span class="comment"># 如果不为零，请在没有通信的情况下使用SO_KEEPALIVE向客户端发送TCP ACK。这很有用，有两个原因：</span></span><br><span class="line">1) Detect dead peers.   # 检测死者</span><br><span class="line">2) Force network equipment in the middle to consider the connection to be</span><br><span class="line">alive.                  # 强制中间的网络设备考虑连接处于活动状态。</span><br><span class="line"></span><br><span class="line">On Linux, the specified value (in seconds) is the period used to send ACKs.</span><br><span class="line">Note that to close the connection the double of the time is needed.</span><br><span class="line">On other kernels the period depends on the kernel configuration.</span><br><span class="line"><span class="comment"># 在Linux上，指定的值（以秒为单位）是用于发送ACK的时间段。请注意，关闭连接需要两倍的时间。在其他内核上，周期取决于内核配置</span></span><br><span class="line">A reasonable value for this option is 300 seconds, which is the new</span><br><span class="line">Redis default starting with Redis 3.2.1.</span><br><span class="line"><span class="comment"># 此选项的合理值是300秒，这是从Redis 3.2.1开始的新Redis默认值。</span></span><br><span class="line">tcp-keepalive 300</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>TCP保持连接。</p>
<p>如果非零，则在没有通信的情况下，使用SO_KEEPALIVE向客户端发送TCP确认。这有两个原因：</p>
<p>1） 检测死掉的同伴。</p>
<p>2） 强制中间的网络设备认为连接是活动的。</p>
<p>在Linux上，指定的值（以秒为单位）是用于发送ACK的时间段。请注意，要关闭连接，需要两倍的时间。</p>
<p>在其他内核上，周期取决于内核配置。</p>
<p>这个选项的合理值是300秒，这是从redis3.2.1开始的新Redis默认值。</p>
<p>tcp保持300</p>
<h2 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS/SSL"></a>TLS/SSL</h2>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">By default, TLS/SSL is disabled. <span class="keyword">To</span> <span class="builtin-name">enable</span> it, the <span class="string">"tls-port"</span> configuration</span><br><span class="line">directive can be used <span class="keyword">to</span> define TLS-listening ports. <span class="keyword">To</span> <span class="builtin-name">enable</span> TLS on the</span><br><span class="line">default port, use:</span><br><span class="line"><span class="comment"># 默认情况下，TLSSSL被禁用。要启用它，可以使用“ tls-port”配置指令来定义TLS侦听端口。要在默认端口上启用TLS，请使用</span></span><br><span class="line">port 0</span><br><span class="line">tls-port 6379</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>默认情况下，TLS/SSL处于禁用状态。要启用它，“tls端口”配置</p>
<p>指令可用于定义TLS侦听端口。</p>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Configure a X.509 certificate and private key to use for authenticating the</span><br><span class="line">server to connected clients, masters or cluster peers.  These files should be</span><br><span class="line">PEM formatted.</span><br><span class="line"><span class="comment"># 配置X.509证书和私钥，用于对连接的客户端，主服务器或集群对等服务器进行身份验证。这些文件应为PEM格式</span></span><br><span class="line">tls-cert-file redis.crt </span><br><span class="line">tls-key-file redis.key</span><br><span class="line"></span><br><span class="line">Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange:</span><br><span class="line"></span><br><span class="line">tls-dh-params-file redis.dh</span><br><span class="line"></span><br><span class="line">Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL</span><br><span class="line">clients and peers.  Redis requires an explicit configuration of at least one</span><br><span class="line">of these, and will not implicitly use the system wide configuration.</span><br><span class="line"></span><br><span class="line">tls-ca-cert-file ca.crt</span><br><span class="line">tls-ca-cert-dir /etc/ssl/certs</span><br><span class="line"></span><br><span class="line">By default, clients (including replica servers) on a TLS port are required</span><br><span class="line">to authenticate using valid client side certificates.</span><br><span class="line"><span class="comment"># 默认情况下，要求TLS端口上的客户端（包括副本服务器）使用有效的客户端证书进行身份验证</span></span><br><span class="line">If "no" is specified, client certificates are not required and not accepted.</span><br><span class="line">If "optional" is specified, client certificates are accepted and must be</span><br><span class="line">valid if provided, but are not required.</span><br><span class="line"><span class="comment"># 如果指定“否”，则不需要也不接受客户端证书。如果指定了“可选”，则接受客户端证书，并且如果提供的话，客户端证书必须有效，但不是必需的</span></span><br><span class="line">tls-auth-clients no</span><br><span class="line">tls-auth-clients optional</span><br><span class="line"></span><br><span class="line">By default, a Redis replica does not attempt to establish a TLS connection</span><br><span class="line">with its master.</span><br><span class="line"><span class="comment"># 默认情况下，Redis副本不会尝试与其主服务器建立TLS连接</span></span><br><span class="line">Use the following directive to enable TLS on replication links.</span><br><span class="line"><span class="comment"># 使用以下指令在复制链接上启用TLS</span></span><br><span class="line">tls-replication yes</span><br><span class="line"></span><br><span class="line">By default, the Redis Cluster bus uses a plain TCP connection. To enable</span><br><span class="line">TLS for the bus protocol, use the following directive:</span><br><span class="line"></span><br><span class="line">tls-cluster yes</span><br><span class="line"></span><br><span class="line">Explicitly specify TLS versions to support. Allowed values are case insensitive</span><br><span class="line">and include "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3" (OpenSSL &gt;= 1.1.1) or</span><br><span class="line">any combination. To enable only TLSv1.2 and TLSv1.3, use:</span><br><span class="line"></span><br><span class="line">tls-protocols "TLSv1.2 TLSv1.3"</span><br><span class="line"></span><br><span class="line">Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information</span><br><span class="line">about the syntax of this string.</span><br><span class="line"></span><br><span class="line">Note: this configuration applies only to &lt;= TLSv1.2.</span><br><span class="line"></span><br><span class="line">tls-ciphers DEFAULT:!MEDIUM</span><br><span class="line"></span><br><span class="line">Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more</span><br><span class="line">information about the syntax of this string, and specifically for TLSv1.3</span><br><span class="line">ciphersuites.</span><br><span class="line"></span><br><span class="line">tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><br><span class="line"></span><br><span class="line">When choosing a cipher, use the server's preference instead of the client</span><br><span class="line">preference. By default, the server follows the client's preference.</span><br><span class="line"></span><br><span class="line">tls-prefer-server-ciphers yes</span><br><span class="line"></span><br><span class="line">By default, TLS session caching is enabled to allow faster and less expensive</span><br><span class="line">reconnections by clients that support it. Use the following directive to disable</span><br><span class="line">caching.</span><br><span class="line"></span><br><span class="line">tls-session-caching no</span><br><span class="line"></span><br><span class="line">Change the default number of TLS sessions cached. A zero value sets the cache</span><br><span class="line">to unlimited size. The default size is 20480.</span><br><span class="line"></span><br><span class="line">tls-session-cache-size 5000</span><br><span class="line"></span><br><span class="line">Change the default timeout of cached TLS sessions. The default timeout is 300</span><br><span class="line">seconds.</span><br><span class="line"></span><br><span class="line">tls-session-cache-timeout 60</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="GENERAL"><a href="#GENERAL" class="headerlink" title="GENERAL"></a>GENERAL</h2>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">By<span class="built_in"> default </span>Redis does <span class="keyword">not</span> <span class="builtin-name">run</span> as a daemon. Use <span class="string">'yes'</span> <span class="keyword">if</span> you need it.</span><br><span class="line">Note that Redis will write a pid file <span class="keyword">in</span> /usr/local/var/run/redis.pid when daemonized.</span><br><span class="line">daemonize <span class="literal">no</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>　daemonize:设置为yes表示指定Redis以守护进程的方式启动（即后台启动）。默认值为 no</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">If</span> you <span class="builtin-name">run</span> Redis <span class="keyword">from</span> upstart <span class="keyword">or</span> systemd, Redis can interact with your</span><br><span class="line">supervision tree. Options:</span><br><span class="line">supervised <span class="literal">no</span>      - <span class="literal">no</span> supervision interaction</span><br><span class="line">supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><span class="line">                    requires <span class="string">"expect stop"</span> <span class="keyword">in</span> your upstart job config</span><br><span class="line">supervised systemd - signal systemd by writing <span class="attribute">READY</span>=1 <span class="keyword">to</span> <span class="variable">$NOTIFY_SOCKET</span></span><br><span class="line">supervised auto    - detect upstart <span class="keyword">or</span> systemd method based on</span><br><span class="line">                    UPSTART_JOB <span class="keyword">or</span> NOTIFY_SOCKET environment variables</span><br><span class="line">Note: these supervision methods only signal <span class="string">"process is ready."</span></span><br><span class="line">   They <span class="keyword">do</span> <span class="keyword">not</span> <span class="builtin-name">enable</span> continuous pings back <span class="keyword">to</span> your supervisor.</span><br><span class="line">supervised <span class="literal">no</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>如果你使用系统的<code>upstart</code>或者<code>systemd</code>运行redis。他们可以管理监控redis。默认不启用</p>
<p>参数</p>
<p>supervised no： - no supervision interaction（无监督-无监督互动）</p>
<p>supervised upstart - 监督upstart-通过将Redis置于SIGSTOP模式来发出upstart信号在upstart作业配置中需要“expect stop”</p>
<p>supervised systemd - 受监控的systemd-通过写入READY=1到$NOTIFY\u SOCKET发送信号systemd</p>
<p>supervised auto - 基于upstart\u JOB或NOTIFY\u SOCKET环境变量检测upstart或systemd方法</p>
<blockquote>
    <p>注意：这些监督方法仅表示“过程准备就绪”，它们不支持连续ping返回到您的主管。</p>
</blockquote>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"></span><br><span class="line"><span class="keyword">If</span> a pid file is specified, Redis writes it where specified at startup</span><br><span class="line"><span class="keyword">and</span> removes it at exit.</span><br><span class="line"></span><br><span class="line">When the<span class="built_in"> server </span>runs non daemonized, <span class="literal">no</span> pid file is created <span class="keyword">if</span> none is</span><br><span class="line">specified <span class="keyword">in</span> the configuration. When the<span class="built_in"> server </span>is daemonized, the pid file</span><br><span class="line">is used even <span class="keyword">if</span> <span class="keyword">not</span> specified, defaulting <span class="keyword">to</span> <span class="string">"/usr/local/var/run/redis.pid"</span>.</span><br><span class="line"></span><br><span class="line">Creating a pid file is best effort: <span class="keyword">if</span> Redis is <span class="keyword">not</span> able <span class="keyword">to</span> create it</span><br><span class="line"><span class="literal">nothing</span> bad happens, the<span class="built_in"> server </span>will start <span class="keyword">and</span> <span class="builtin-name">run</span> normally.</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>　pidfile: 配置PID文件路径，当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/redis/run/redis_6379.pid 文件里面</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Specify the<span class="built_in"> server </span>verbosity level.</span><br><span class="line">This can be one of:</span><br><span class="line"><span class="builtin-name">debug</span> (a lot of information, useful <span class="keyword">for</span> development/testing)</span><br><span class="line">verbose (many rarely useful info, but <span class="keyword">not</span> a mess like the <span class="builtin-name">debug</span> level)</span><br><span class="line">notice (moderately verbose, what you want <span class="keyword">in</span> production probably)</span><br><span class="line"><span class="builtin-name">warning</span> (only very important / critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">Specify the log file name. Also the empty string can be used <span class="keyword">to</span> force</span><br><span class="line">Redis <span class="keyword">to</span> log on the standard output.<span class="built_in"> Note </span>that <span class="keyword">if</span> you use standard</span><br><span class="line">output <span class="keyword">for</span><span class="built_in"> logging </span>but daemonize, logs will be sent <span class="keyword">to</span> /dev/<span class="literal">null</span></span><br><span class="line">logfile <span class="string">""</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>　loglevel ：定义日志级别。默认值为notice，有如下4种取值：</p>
<blockquote>
    <p>debug（大量信息，对开发/测试有用）</p>
    <p>verbose（许多很少有用的信息，但不像调试级别那样混乱）</p>
    <p>notice（适度冗长，可能是生产中需要的内容）</p>
    <p>warning（只记录非常重要/关键的消息）</p>
</blockquote>
<p>logfile ：配置log文件地址,默认打印在命令行终端的窗口上</p>
<figure class="highlight routeros">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">To</span> <span class="builtin-name">enable</span><span class="built_in"> logging </span><span class="keyword">to</span> the<span class="built_in"> system </span>logger, just <span class="builtin-name">set</span> <span class="string">'syslog-enabled'</span> <span class="keyword">to</span> <span class="literal">yes</span>,</span><br><span class="line"><span class="keyword">and</span> optionally update the other syslog parameters <span class="keyword">to</span> suit your needs.</span><br><span class="line">syslog-enabled <span class="literal">no</span></span><br><span class="line"></span><br><span class="line">Specify the syslog identity.</span><br><span class="line">syslog-ident redis</span><br><span class="line"></span><br><span class="line">Specify the syslog facility. Must be<span class="built_in"> USER </span><span class="keyword">or</span> between LOCAL0-LOCAL7.</span><br><span class="line">syslog-facility local0</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">Set</span> the number of databases. The<span class="built_in"> default </span>database is DB 0, you can select</span><br><span class="line">a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line">dbid is a number between 0 <span class="keyword">and</span> <span class="string">'databases'</span>-1</span><br><span class="line">databases 16</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>databases：设置数据库的数目。默认的数据库是DB 0 ，可以在每个连接上使用select <dbid> 命令选择一个不同的数据库，dbid是一个介于0到databases - 1 之间的数值。默认值是 16，也就是说默认Redis有16个数据库。</p>
<figure class="highlight pgsql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"><span class="keyword">By</span> <span class="keyword">default</span> Redis shows an ASCII art logo <span class="keyword">only</span> <span class="keyword">when</span> started <span class="keyword">to</span> <span class="keyword">log</span> <span class="keyword">to</span> the</span><br><span class="line">standard output <span class="keyword">and</span> <span class="keyword">if</span> the standard output <span class="keyword">is</span> a TTY. Basically this means</span><br><span class="line">that normally a logo <span class="keyword">is</span> displayed <span class="keyword">only</span> <span class="keyword">in</span> interactive sessions.</span><br><span class="line"></span><br><span class="line">However it <span class="keyword">is</span> possible <span class="keyword">to</span> force the pre<span class="number">-4.0</span> behavior <span class="keyword">and</span> <span class="keyword">always</span> <span class="keyword">show</span> a</span><br><span class="line">ASCII art logo <span class="keyword">in</span> startup logs <span class="keyword">by</span> setting the <span class="keyword">following</span> <span class="keyword">option</span> <span class="keyword">to</span> yes.</span><br><span class="line"><span class="keyword">always</span>-<span class="keyword">show</span>-logo yes</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="SNAPSHOTTING（快照，重要！！！）"><a href="#SNAPSHOTTING（快照，重要！！！）" class="headerlink" title="SNAPSHOTTING（快照，重要！！！）"></a>SNAPSHOTTING（快照，重要！！！）</h2>
<figure class="highlight livecodeserver">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Save <span class="keyword">the</span> DB <span class="keyword">on</span> <span class="title">disk</span>:</span><br><span class="line"></span><br><span class="line">save &lt;<span class="built_in">seconds</span>&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">Will save <span class="keyword">the</span> DB <span class="keyword">if</span> both <span class="keyword">the</span> given <span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">seconds</span> <span class="keyword">and</span> <span class="keyword">the</span> given</span><br><span class="line"><span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">write</span> operations against <span class="keyword">the</span> DB occurred.</span><br><span class="line"></span><br><span class="line">In <span class="keyword">the</span> example below <span class="keyword">the</span> behavior will be <span class="built_in">to</span> save:</span><br><span class="line"><span class="keyword">after</span> <span class="number">900</span> <span class="built_in">sec</span> (<span class="number">15</span> <span class="built_in">min</span>) <span class="keyword">if</span> <span class="keyword">at</span> least <span class="number">1</span> key changed</span><br><span class="line"><span class="keyword">after</span> <span class="number">300</span> <span class="built_in">sec</span> (<span class="number">5</span> <span class="built_in">min</span>) <span class="keyword">if</span> <span class="keyword">at</span> least <span class="number">10</span> <span class="built_in">keys</span> changed</span><br><span class="line"><span class="keyword">after</span> <span class="number">60</span> <span class="built_in">sec</span> <span class="keyword">if</span> <span class="keyword">at</span> least <span class="number">10000</span> <span class="built_in">keys</span> changed</span><br><span class="line"></span><br><span class="line">Note: you can disable saving completely <span class="keyword">by</span> commenting out all <span class="string">"save"</span> <span class="keyword">lines</span>.</span><br><span class="line"></span><br><span class="line">It is also possible <span class="built_in">to</span> remove all <span class="keyword">the</span> previously configured save</span><br><span class="line">points <span class="keyword">by</span> adding <span class="keyword">a</span> save directive <span class="keyword">with</span> <span class="keyword">a</span> single <span class="literal">empty</span> <span class="keyword">string</span> argument</span><br><span class="line">like <span class="keyword">in</span> <span class="keyword">the</span> following example:</span><br><span class="line"></span><br><span class="line">save <span class="string">""</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>save 900 1<br>save 300 10<br>save 60 10000</p>
<p>save：这里是用来配置触发 Redis的持久化条件，也就是什么时候将内存中的数据保存到硬盘。默认如下配置：</p>
<figure class="highlight lsl">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">save <span class="number">900</span> <span class="number">1</span>：表示<span class="number">900</span> 秒内如果至少有 <span class="number">1</span> 个 <span class="type">key</span> 的值变化，则保存</span><br><span class="line">save <span class="number">300</span> <span class="number">10</span>：表示<span class="number">300</span> 秒内如果至少有 <span class="number">10</span> 个 <span class="type">key</span> 的值变化，则保存</span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span>：表示<span class="number">60</span> 秒内如果至少有 <span class="number">10000</span> 个 <span class="type">key</span> 的值变化，则保存</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <figure class="highlight routeros">
        <table>
            <tr>
                <td class="gutter">
                    <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>
                </td>
                <td class="code">
                    <pre><span class="line">By<span class="built_in"> default </span>Redis will stop accepting writes <span class="keyword">if</span> RDB snapshots are enabled</span><br><span class="line"> (at least one save point) <span class="keyword">and</span> the latest background save failed.</span><br><span class="line"> This will make the<span class="built_in"> user </span>aware (<span class="keyword">in</span> a hard way) that data is <span class="keyword">not</span> persisting</span><br><span class="line"> on disk properly, otherwise chances are that <span class="literal">no</span> one will notice <span class="keyword">and</span> some</span><br><span class="line"> disaster will happen.</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">If</span> the background saving process will start working again Redis will</span><br><span class="line"> automatically allow writes again.</span><br><span class="line"> </span><br><span class="line">  However <span class="keyword">if</span> you have setup your proper monitoring of the Redis server</span><br><span class="line"> <span class="keyword">and</span> persistence, you may want <span class="keyword">to</span> <span class="builtin-name">disable</span> this feature so that Redis will</span><br><span class="line"> continue <span class="keyword">to</span> work as usual even <span class="keyword">if</span> there are problems with disk,</span><br><span class="line"> permissions, <span class="keyword">and</span> so forth.</span><br><span class="line">stop-writes-on-bgsave-<span class="builtin-name">error</span> <span class="literal">yes</span></span><br></pre>
                </td>
            </tr>
        </table>
    </figure>
    <p>默认情况下，如果启用RDB快照，Redis将停止接受写操作</p>
    <p>（至少一个保存点）和最新的后台保存失败。</p>
    <p>这将使用户意识到（以一种困难的方式）数据没有持久化</p>
    <p>在磁盘上正确，否则很可能没有人会注意到和一些</p>
    <p>灾难就会发生。</p>
    <p>如果后台保存过程将重新开始工作，Redis将自动允许再次写入。但是，如果您已经设置了对Redis服务器的适当监视</p>
    <p>和持久性，您可能希望禁用此功能，以便Redis</p>
    <p>即使磁盘、权限等出现问题，也要继续正常工作。</p>
</blockquote>
<figure class="highlight vbnet">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Compress <span class="built_in">string</span> objects <span class="keyword">using</span> LZF <span class="keyword">when</span> dump .rdb databases?</span><br><span class="line"><span class="keyword">By</span> <span class="keyword">default</span> compression <span class="keyword">is</span> enabled <span class="keyword">as</span> it<span class="comment">'s almost always a win.</span></span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> save some CPU <span class="keyword">in</span> the saving child <span class="keyword">set</span> it <span class="keyword">to</span> <span class="comment">'no' but</span></span><br><span class="line">the dataset will likely be bigger <span class="keyword">if</span> you have compressible values <span class="keyword">or</span> keys.</span><br><span class="line">rdbcompression yes</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>转储.rdb数据库时使用LZF压缩字符串对象？</p>
<p>默认情况下，压缩是启用的，因为它几乎总是一个胜利。</p>
<p>如果您想在保存子进程中保存一些CPU，请将其设置为“否”，但是</p>
<p>如果有可压缩的值或键，数据集可能会更大。</p>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><br><span class="line">This makes the format more resistant to corruption but there is a performance</span><br><span class="line">hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span><br><span class="line">for maximum performances.</span><br><span class="line"></span><br><span class="line">RDB files created with checksum disabled have a checksum of zero that will</span><br><span class="line">tell the loading code to skip the check.</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line">由于RDB版本5，CRC64校验和放在文件的末尾。这使格式更能抵抗损坏，但在保存和加载RDB文件时，性能会受到影响（约10%），因此可以禁用它以获得最大性能。在禁用校验和的情况下创建的RDB文件的校验和为零，这将告诉加载代码跳过检查。</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">将数据库转储到的文件名</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"></span><br><span class="line">Remove RDB files used by replication in instances without persistence</span><br><span class="line">enabled. By default this option is disabled, however there are environments</span><br><span class="line">where for regulations or other security concerns, RDB files persisted on</span><br><span class="line">disk by masters in order to feed replicas, or stored on disk by replicas</span><br><span class="line">in order to load them for the initial synchronization, should be deleted</span><br><span class="line">ASAP. Note that this option ONLY WORKS in instances that have both AOF</span><br><span class="line">and RDB persistence disabled, otherwise is completely ignored.</span><br><span class="line"></span><br><span class="line">An alternative (and sometimes better) way to obtain the same effect is</span><br><span class="line">to use diskless replication on both master and replicas instances. However</span><br><span class="line">in the case of replicas, diskless is not always an option.</span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"></span><br><span class="line">The working directory.</span><br><span class="line"></span><br><span class="line">The DB will be written inside this directory, with the filename specified</span><br><span class="line">above using the 'dbfilename' configuration directive.</span><br><span class="line"></span><br><span class="line">The Append Only File will also be created inside this directory.</span><br><span class="line"></span><br><span class="line">Note that you must specify a directory here, not a file name.</span><br><span class="line"></span><br><span class="line">dir /usr/local/var/db/redis/</span><br><span class="line"></span><br><span class="line">在没有持久性的实例中删除复制使用的RDB文件启用。默认情况下，此选项处于禁用状态，但是在某些环境中，出于管理法规或其他安全考虑，应尽快删除由主服务器保留在磁盘上以馈送副本的RDB文件，或由副本存储在磁盘上以加载它们以进行初始同步。请注意，此选项仅适用于同时禁用AOF和RDB持久性的实例，否则将完全忽略。</span><br><span class="line">另一种（有时更好）获得相同效果的方法是在主实例和副本实例上使用无盘复制。但是，对于副本，无磁盘并不是一种好的选择。</span><br><span class="line">rdb del同步文件编号</span><br><span class="line">工作目录。</span><br><span class="line">数据库将被写入这个目录，并指定文件名</span><br><span class="line">使用“dbfilename”配置指令。</span><br><span class="line">只附加的文件也将在这个目录中创建。</span><br><span class="line">请注意，必须在此处指定目录，而不是文件名。</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>　dbfilename ：设置快照的文件名，默认是 dump.rdb</p>
<p>　　⑥、dir：设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。使用上面的 dbfilename 作为保存的文件名。</p>
<h2 id="REPLICATION（主从复制）"><a href="#REPLICATION（主从复制）" class="headerlink" title="REPLICATION（主从复制）"></a>REPLICATION（主从复制）</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">REPLICATION </span><br><span class="line"></span><br><span class="line">Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><span class="line">another Redis server. A few things to understand ASAP about Redis replication.</span><br><span class="line"></span><br><span class="line">+------------------+      +---------------+</span><br><span class="line">|      Master      | ---&gt; |    Replica    |</span><br><span class="line">| (receive writes) |      |  (exact copy) |</span><br><span class="line">+------------------+      +---------------+</span><br><span class="line"></span><br><span class="line">1) Redis replication is asynchronous, but you can configure a master to</span><br><span class="line">stop accepting writes if it appears to be not connected with at least</span><br><span class="line">a given number of replicas.</span><br><span class="line"><span class="comment"># Redis复制是异步的，但是您可以配置一个主机，如果它看起来没有连接到至少给定数量的副本，那么它就停止接受写操作。</span></span><br><span class="line">2) Redis replicas are able to perform a partial resynchronization with the</span><br><span class="line">master if the replication link is lost for a relatively small amount of</span><br><span class="line">time. You may want to configure the replication backlog size (see the next</span><br><span class="line">sections of this file) with a sensible value depending on your needs.</span><br><span class="line"><span class="comment"># 如果复制链路丢失的时间相对较短，Redis复制副本可以执行与主机的部分重新同步。您可能需要根据需要使用合理的值来配置复制积压工作大小（请参阅本文件的下一节）。</span></span><br><span class="line">3) Replication is automatic and does not need user intervention. After a</span><br><span class="line">network partition replicas automatically try to reconnect to masters</span><br><span class="line">and resynchronize with them.</span><br><span class="line"><span class="comment"># 复制是自动的，不需要用户干预。在网络分区之后，复制副本会自动尝试重新连接到主机并与它们重新同步。</span></span><br><span class="line"></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line">If the master is password protected (using the "requirepass" configuration</span><br><span class="line">directive below) it is possible to tell the replica to authenticate before</span><br><span class="line">starting the replication synchronization process, otherwise the master will</span><br><span class="line">refuse the replica request.</span><br><span class="line"><span class="comment"># 如果主机受密码保护（使用下面的“requirepass”配置指令），则可以在启动复制同步过程之前通知复制副本进行身份验证，否则主机将拒绝副本请求。</span></span><br><span class="line"></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">However this is not enough if you are using Redis ACLs (for Redis version</span><br><span class="line">6 or greater), and the default user is not capable of running the PSYNC</span><br><span class="line">command and/or other commands needed for replication. In this case it's</span><br><span class="line">better to configure a special user to use with replication, and specify the</span><br><span class="line">masteruser configuration as such:</span><br><span class="line"><span class="comment"># 但是，如果您正在使用Redis ACL（用于Redis版本6或更高版本），并且默认用户无法运行PSYNC命令和/或其他复制所需的命令，这还不够。在这种情况下，最好配置一个特殊用户以用于复制</span></span><br><span class="line">masteruser &lt;username&gt;</span><br><span class="line"></span><br><span class="line">When masteruser is specified, the replica will authenticate against its</span><br><span class="line">master using the new AUTH form: AUTH &lt;username&gt; &lt;password&gt;.</span><br><span class="line"><span class="comment"># 指定masteruser时，副本将使用新的AUTH表单针对其主服务器进行身份验证</span></span><br><span class="line">When a replica loses its connection with the master, or when the replication</span><br><span class="line">is still in progress, the replica can act in two different ways:</span><br><span class="line"><span class="comment"># 当副本失去与主数据库的连接时，或者仍在进行复制时，副本可以采取两种不同的方式进行操作</span></span><br><span class="line">1) if replica-serve-stale-data is set to 'yes' (the default) the replica will</span><br><span class="line">still reply to client requests, possibly with out of date data, or the</span><br><span class="line">data set may just be empty if this is the first synchronization.</span><br><span class="line"><span class="comment"># 如果复制副本服务过时数据设置为“是”（默认值），则复制副本仍将回复客户端请求，可能包含过期数据，或者如果这是第一次同步，则数据集可能只是空的。</span></span><br><span class="line">2) If replica-serve-stale-data is set to 'no' the replica will reply with</span><br><span class="line">an error "SYNC with master in progress" to all commands except:</span><br><span class="line">INFO, REPLICAOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,</span><br><span class="line">UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,</span><br><span class="line">HOST and LATENCY.</span><br><span class="line"><span class="comment"># 如果将replica-serve-stale-data设置为“ no”，则该副本将对所有命令（“ INFO，REPLICAOF，AUTH，PING，SHUTDOWN，REPLCONF，ROLE，CONFIG，SUBSCRIBE）进行错误答复” ，退订，PSUBSCRIBE，PUNSUBSCRIBE，PUBLISH，PUBSUB，COMMAND，POST，HOST和LATENCY。</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line">You can configure a replica instance to accept writes or not. Writing against</span><br><span class="line">a replica instance may be useful to store some ephemeral data (because data</span><br><span class="line">written on a replica will be easily deleted after resync with the master) but</span><br><span class="line">may also cause problems if clients are writing to it because of a</span><br><span class="line">misconfiguration.</span><br><span class="line"><span class="comment"># 您可以配置副本实例以接受或不接受写入。针对副本实例进行写操作可能对存储一些临时数据很有用（因为与主实例重新同步后，写入副本上的数据将很容易删除），但是如果客户端由于配置错误而向其进行写操作，也会导致问题。</span></span><br><span class="line">Since Redis 2.6 by default replicas are read-only.</span><br><span class="line"></span><br><span class="line">Note: read only replicas are not designed to be exposed to untrusted clients</span><br><span class="line">on the internet. It's just a protection layer against misuse of the instance.</span><br><span class="line">Still a read only replica exports by default all the administrative commands</span><br><span class="line">such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><br><span class="line">security of read only replicas using 'rename-command' to shadow all the</span><br><span class="line">administrative / dangerous commands.</span><br><span class="line"><span class="comment"># 只读副本并非旨在向Internet上不受信任的客户端公开。它只是防止实例滥用的保护层。默认情况下，只读副本仍会导出所有管理命令，例如CONFIG，DEBUG等。在一定程度上，您可以使用'rename-command'隐藏所有管理危险命令来提高只读副本的安全性</span></span><br><span class="line">replica-read-only yes</span><br><span class="line">Replication SYNC strategy: disk or socket.</span><br><span class="line"></span><br><span class="line">New replicas and reconnecting replicas that are not able to continue the</span><br><span class="line">replication process just receiving differences, need to do what is called a</span><br><span class="line">"full synchronization". An RDB file is transmitted from the master to the</span><br><span class="line">replicas.</span><br><span class="line"><span class="comment"># 仅仅接受差异就无法继续复制过程的新副本和重新连接的副本需要进行所谓的“完全同步”。 RDB文件从主数据库传输到副本数据库</span></span><br><span class="line">The transmission can happen in two different ways:</span><br><span class="line"></span><br><span class="line">1) Disk-backed: The Redis master creates a new process that writes the RDB</span><br><span class="line">             file on disk. Later the file is transferred by the parent</span><br><span class="line">             process to the replicas incrementally.</span><br><span class="line">2) Diskless: The Redis master creates a new process that directly writes the</span><br><span class="line">          RDB file to replica sockets, without touching the disk at all.</span><br><span class="line"></span><br><span class="line">With disk-backed replication, while the RDB file is generated, more replicas</span><br><span class="line">can be queued and served with the RDB file as soon as the current child</span><br><span class="line">producing the RDB file finishes its work. With diskless replication instead</span><br><span class="line">once the transfer starts, new replicas arriving will be queued and a new</span><br><span class="line">transfer will start when the current one terminates.</span><br><span class="line"><span class="comment"># 使用磁盘支持的复制，当生成RDB文件时，只要生成RDB文件的当前子级完成工作，就可以将更多副本排入队列并与RDB文件一起使用。如果使用无盘复制，则一旦传输开始，新的副本将排队，并且当当前副本终止时将开始新的传输</span></span><br><span class="line">When diskless replication is used, the master waits a configurable amount of</span><br><span class="line">time (in seconds) before starting the transfer in the hope that multiple</span><br><span class="line">replicas will arrive and the transfer can be parallelized.</span><br><span class="line"><span class="comment"># 使用无盘复制时，主服务器在开始传输之前等待一段可配置的时间（以秒为单位），以希望多个副本可以到达并且传输可以并行化</span></span><br><span class="line">With slow disks and fast (large bandwidth) networks, diskless replication</span><br><span class="line">works better.</span><br><span class="line"><span class="comment"># 对于慢速磁盘和快速（大带宽）网络，无盘复制效果更好</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line">When diskless replication is enabled, it is possible to configure the delay</span><br><span class="line">the server waits in order to spawn the child that transfers the RDB via socket</span><br><span class="line">to the replicas.</span><br><span class="line"><span class="comment"># 启用无盘复制后，可以配置服务器等待的延迟，以便生成通过套接字将RDB传输到副本的子代。</span></span><br><span class="line">This is important since once the transfer starts, it is not possible to serve</span><br><span class="line">new replicas arriving, that will be queued for the next RDB transfer, so the</span><br><span class="line">server waits a delay in order to let more replicas arrive.</span><br><span class="line"><span class="comment"># 这一点很重要，因为一旦传输开始，就无法为到达下一个RDB传输的新副本提供服务，因此服务器会等待一段时间才能让更多副本到达。</span></span><br><span class="line">The delay is specified in seconds, and by default is 5 seconds. To disable</span><br><span class="line">it entirely just set it to 0 seconds and the transfer will start ASAP.</span><br><span class="line"><span class="comment"># 延迟以秒为单位指定，默认情况下为5秒。要完全禁用它，只需将其设置为0秒，传输就会尽快开始。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">WARNING: RDB diskless load is experimental. Since in this setup the replica</span><br><span class="line">does not immediately store an RDB on disk, it may cause data loss during</span><br><span class="line">failovers. RDB diskless load + Redis modules not handling I/O reads may also</span><br><span class="line">cause Redis to abort in case of I/O errors during the initial synchronization</span><br><span class="line">stage with the master. Use only if your do what you are doing.</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 警告：RDB无盘加载是实验性的。因为在此设置中，副本不会立即在磁盘上存储RDB，所以它可能会导致故障转移期间的数据丢失。在与主机的初始同步阶段，如果IO错误，则RDB无盘负载+ Redis模块不处理IO读取也可能导致Redis中止。仅在执行自己的操作时使用</span></span><br><span class="line">Replica can load the RDB it reads from the replication link directly from the</span><br><span class="line">socket, or store the RDB to a file and read that file after it was completely</span><br><span class="line">received from the master.</span><br><span class="line"><span class="comment"># 副本可以直接从套接字加载从复制链接读取的RDB，也可以将RDB存储到文件中，并在从主服务器完全接收到该文件后读取该文件。</span></span><br><span class="line">In many cases the disk is slower than the network, and storing and loading</span><br><span class="line">the RDB file may increase replication time (and even increase the master's</span><br><span class="line">Copy on Write memory and salve buffers).</span><br><span class="line">However, parsing the RDB file directly from the socket may mean that we have</span><br><span class="line">to flush the contents of the current database before the full rdb was</span><br><span class="line">received. For this reason we have the following options:</span><br><span class="line"><span class="comment"># 在许多情况下，磁盘的速度比网络慢，并且存储和加载RDB文件可能会增加复制时间（甚至会增加主服务器的“写时复制”内存和从属缓冲区）。但是，直接从套接字解析RDB文件可能意味着我们必须在收到完整的rdb之前刷新当前数据库的内容。因此，我们有以下选择</span></span><br><span class="line">"disabled"    - Don't use diskless load (store the rdb file to the disk first)</span><br><span class="line"><span class="comment"># 不要使用无盘负载（首先将rdb文件存储到磁盘）</span></span><br><span class="line">"on-empty-db" - Use diskless load only when it is completely safe.</span><br><span class="line"><span class="comment"># 仅在完全安全的情况下使用无盘加载</span></span><br><span class="line">"swapdb"      - Keep a copy of the current db contents in RAM while parsin </span><br><span class="line">the data directly from the socket. note that this requires sufficient memory, if you don't have it, you risk an OOM kill.</span><br><span class="line"><span class="comment"># 直接从套接字解析数据时，将当前数据库内容的副本保留在RAM中。请注意，这需要足够的内存，如果没有足够的内存，则可能会杀死OOM</span></span><br><span class="line">repl-diskless-load disabled</span><br><span class="line"></span><br><span class="line">Replicas send PINGs to server in a predefined interval. It's possible to</span><br><span class="line">change this interval with the repl_ping_replica_period option. The default</span><br><span class="line">value is 10 seconds.</span><br><span class="line"><span class="comment"># 副本以预定义的时间间隔将PING发送到服务器。可以使用repl_ping_replica_period选项更改此间隔。默认值为10秒</span></span><br><span class="line">repl-ping-replica-period 10</span><br><span class="line"></span><br><span class="line">The following option sets the replication timeout for:</span><br><span class="line"><span class="comment"># 以下选项设置了复制超时</span></span><br><span class="line">1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><br><span class="line"><span class="comment"># 从副本的角度来看，在SYNC期间进行批量传输IO。</span></span><br><span class="line">2) Master timeout from the point of view of replicas (data, pings).</span><br><span class="line"><span class="comment"># 从副本（数据，ping）的角度来看主超时</span></span><br><span class="line">3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span><br><span class="line"><span class="comment"># 从主服务器角度来看副本超时（REPLCONF ACK ping）</span></span><br><span class="line">It is important to make sure that this value is greater than the value</span><br><span class="line">specified for repl-ping-replica-period otherwise a timeout will be detected</span><br><span class="line">every time there is low traffic between the master and the replica. The default</span><br><span class="line">value is 60 seconds.</span><br><span class="line"><span class="comment"># 重要的是要确保该值大于为repl-ping-replica-period指定的值，否则，每当主机和副本之间的通信量较低时，就会检测到超时。默认值为60秒。</span></span><br><span class="line">repl-timeout 60</span><br><span class="line"></span><br><span class="line">Disable TCP_NODELAY on the replica socket after SYNC?</span><br><span class="line"><span class="comment"># 同步后在副本套接字上禁用TCP_NODELAY</span></span><br><span class="line"></span><br><span class="line">If you select "yes" Redis will use a smaller number of TCP packets and</span><br><span class="line">less bandwidth to send data to replicas. But this can add a delay for</span><br><span class="line">the data to appear on the replica side, up to 40 milliseconds with</span><br><span class="line">Linux kernels using a default configuration.</span><br><span class="line"><span class="comment"># 如果选择“是”，则Redis将使用更少的TCP数据包和更少的带宽将数据发送到副本。但这会增加数据在副本端显示的延迟，对于使用默认配置的Linux内核，此延迟最多40毫秒</span></span><br><span class="line">If you select "no" the delay for data to appear on the replica side will</span><br><span class="line">be reduced but more bandwidth will be used for replication.</span><br><span class="line"><span class="comment"># 如果选择“否”，则将减少数据在副本侧出现的延迟，但将使用更多带宽进行复制</span></span><br><span class="line">By default we optimize for low latency, but in very high traffic conditions</span><br><span class="line">or when the master and replicas are many hops away, turning this to "yes" may</span><br><span class="line">be a good idea.</span><br><span class="line"><span class="comment"># 默认情况下，我们会针对低延迟进行优化，但是在流量非常高的情况下，或者当主服务器和副本距离很多跳时，将其设置为“是”可能是个好主意</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line">Set the replication backlog size. The backlog is a buffer that accumulates</span><br><span class="line">replica data when replicas are disconnected for some time, so that when a</span><br><span class="line">replica wants to reconnect again, often a full resync is not needed, but a</span><br><span class="line">partial resync is enough, just passing the portion of data the replica</span><br><span class="line">missed while disconnected.</span><br><span class="line"><span class="comment"># 设置复制积压大小。待办事项是一个缓冲区，当副本断开连接一段时间后，该缓冲区将累积副本数据，因此，当副本要重新连接时，通常不需要完全重新同步，但是部分重新同步就足够了，只需传递副本中的部分数据断开连接时错过</span></span><br><span class="line">The bigger the replication backlog, the longer the replica can endure the</span><br><span class="line">disconnect and later be able to perform a partial resynchronization.</span><br><span class="line"><span class="comment"># 复制积压量越大，副本可以承受断开连接并随后能够执行部分重新同步的时间越长</span></span><br><span class="line">The backlog is only allocated if there is at least one replica connected.</span><br><span class="line"><span class="comment"># 仅在连接至少一个副本时分配积压</span></span><br><span class="line">repl-backlog-size 1mb</span><br><span class="line"></span><br><span class="line">After a master has no connected replicas for some time, the backlog will be</span><br><span class="line">freed. The following option configures the amount of seconds that need to</span><br><span class="line">elapse, starting from the time the last replica disconnected, for the backlog</span><br><span class="line">buffer to be freed.</span><br><span class="line"><span class="comment"># 主服务器在一段时间内没有连接的副本后，积压的订单将被释放。以下选项配置了从断开最后一个副本的时间开始，释放待办事项缓冲区所需的秒数</span></span><br><span class="line">Note that replicas never free the backlog for timeout, since they may be</span><br><span class="line">promoted to masters later, and should be able to correctly "partially</span><br><span class="line">resynchronize" with other replicas: hence they should always accumulate backlog.</span><br><span class="line"><span class="comment"># 请注意，副本永远不会释放积压的超时，因为它们可能稍后会升级为主副本，并且应该能够与其他副本正确“部分重新同步”：因此，它们应始终累积积压。</span></span><br><span class="line">A value of 0 means to never release the backlog.</span><br><span class="line"><span class="comment"># 值为0表示永不释放积压</span></span><br><span class="line">repl-backlog-ttl 3600</span><br><span class="line"></span><br><span class="line">The replica priority is an integer number published by Redis in the INFO</span><br><span class="line">output. It is used by Redis Sentinel in order to select a replica to promote</span><br><span class="line">into a master if the master is no longer working correctly.</span><br><span class="line"><span class="comment"># 副本优先级是Redis在INFO输出中发布的整数。如果主服务器不再正常工作，Redis Sentinel会使用它来选择要升级为主服务器的副本</span></span><br><span class="line">A replica with a low priority number is considered better for promotion, so</span><br><span class="line">for instance if there are three replicas with priority 10, 100, 25 Sentinel</span><br><span class="line">will pick the one with priority 10, that is the lowest.</span><br><span class="line"><span class="comment"># 优先级数字低的副本被认为更适合升级，例如，如果有三个副本的优先级分别为10、100和25，Sentinel将选择优先级为10的副本，这是最低的</span></span><br><span class="line">However a special priority of 0 marks the replica as not able to perform the</span><br><span class="line">role of master, so a replica with priority of 0 will never be selected by</span><br><span class="line">Redis Sentinel for promotion.</span><br><span class="line"><span class="comment"># 但是，特殊优先级0会将副本标记为不能执行主角色，因此Redis Sentinel永远不会选择优先级为0的副本进行升级，默认情况下，优先级为100</span></span><br><span class="line">By default the priority is 100.</span><br><span class="line">replica-priority 100</span><br><span class="line"></span><br><span class="line">It is possible for a master to stop accepting writes if there are less than</span><br><span class="line">N replicas connected, having a lag less or equal than M seconds.</span><br><span class="line"><span class="comment"># 如果连接的副本少于N个，且延迟小于或等于M秒，则主服务器可能会停止接受写入</span></span><br><span class="line">The N replicas need to be in "online" state.</span><br><span class="line"><span class="comment"># N个副本需要处于“联机”状态</span></span><br><span class="line">The lag in seconds, that must be &lt;= the specified value, is calculated from</span><br><span class="line">the last ping received from the replica, that is usually sent every second.</span><br><span class="line"><span class="comment"># 延迟（以秒为单位）必须小于等于指定值，该延迟是从副本接收到的最后一次ping计算得出的，通常每秒钟发送一次</span></span><br><span class="line">This option does not GUARANTEE that N replicas will accept the write, but</span><br><span class="line">will limit the window of exposure for lost writes in case not enough replicas</span><br><span class="line">are available, to the specified number of seconds.</span><br><span class="line"><span class="comment"># 此选项不能保证N个副本将接受写操作，但是如果没有足够的副本可用，则会将丢失写操作的暴露窗口限制为指定的秒数</span></span><br><span class="line">For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><br><span class="line"><span class="comment"># 例如，要求至少3个副本的延迟&lt;= 10秒，请使用</span></span><br><span class="line">min-replicas-to-write 3</span><br><span class="line">min-replicas-max-lag 10</span><br><span class="line"></span><br><span class="line">Setting one or the other to 0 disables the feature.</span><br><span class="line"><span class="comment"># 将一个或另一个设置为0将禁用该功能</span></span><br><span class="line">By default min-replicas-to-write is set to 0 (feature disabled) and</span><br><span class="line">min-replicas-max-lag is set to 10.</span><br><span class="line"><span class="comment"># 默认情况下，将要写入的最小副本设置为0（禁用功能），并且将最小副本最大延迟设置为10</span></span><br><span class="line">A Redis master is able to list the address and port of the attached</span><br><span class="line">replicas in different ways. For example the "INFO replication" section</span><br><span class="line">offers this information, which is used, among other tools, by</span><br><span class="line">Redis Sentinel in order to discover replica instances.</span><br><span class="line">Another place where this info is available is in the output of the</span><br><span class="line">"ROLE" command of a master.</span><br><span class="line"><span class="comment"># Redis主服务器能够以不同方式列出附加副本的地址和端口。例如，“ INFO复制”部分提供了此信息，Redis Sentinel使用此信息以及其他工具来发现副本实例。该信息可用的另一个位置是主服务器的“ ROLE”命令的输出</span></span><br><span class="line">The listed IP address and port normally reported by a replica is</span><br><span class="line">obtained in the following way:</span><br><span class="line"><span class="comment"># 副本通常报告的列出的IP地址和端口可以通过以下方式获得</span></span><br><span class="line">IP: The address is auto detected by checking the peer address</span><br><span class="line">of the socket used by the replica to connect with the master.</span><br><span class="line"><span class="comment"># IP：通过检查副本用来与主服务器连接的套接字的对等地址来自动检测该地址</span></span><br><span class="line">Port: The port is communicated by the replica during the replication</span><br><span class="line">handshake, and is normally the port that the replica is using to</span><br><span class="line">listen for connections.</span><br><span class="line"><span class="comment"># 端口：端口在复制握手期间由副本进行通信，通常是副本用来侦听连接的端口。</span></span><br><span class="line">However when port forwarding or Network Address Translation (NAT) is</span><br><span class="line">used, the replica may actually be reachable via different IP and port</span><br><span class="line">pairs. The following two options can be used by a replica in order to</span><br><span class="line">report to its master a specific set of IP and port, so that both INFO</span><br><span class="line">and ROLE will report those values.</span><br><span class="line"><span class="comment"># 但是，当使用端口转发或网络地址转换（NAT）时，实际上可以通过不同的IP和端口对访问该副本。副本可以使用以下两个选项，以便向其主服务器报告特定的IP和端口集，以便INFO和ROLE都将报告这些值</span></span><br><span class="line">There is no need to use both the options if you need to override just</span><br><span class="line">the port or the IP address.</span><br><span class="line"><span class="comment"># 如果只需要覆盖端口或IP地址，则无需使用这两个选项。</span></span><br><span class="line">replica-announce-ip 5.5.5.5</span><br><span class="line">replica-announce-port 1234</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>①、slave-serve-stale-data：默认值为yes。当一个 slave 与 master 失去联系，或者复制正在进行的时候，slave 可能会有两种表现：</p>
<p>　　　　1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，或者数据可能是空的在第一次同步的时候 </p>
<p>　　　　2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，slave 都将返回一个 “SYNC with master in progress” 的错误</p>
<p>②、slave-read-only：配置Redis的Slave实例是否接受写操作，即Slave是否为只读Redis。默认值为yes。</p>
<p>③、repl-diskless-sync：主从数据复制是否使用无硬盘复制功能。默认值为no。</p>
<p>④、repl-diskless-sync-delay：当启用无硬盘备份，服务器等待一段时间后才会通过套接字向从站传送RDB文件，这个等待时间是可配置的。 这一点很重要，因为一旦传送开始，就不可能再为一个新到达的从站服务。从站则要排队等待下一次RDB传送。因此服务器等待一段 时间以期更多的从站到达。延迟时间以秒为单位，默认为5秒。要关掉这一功能，只需将它设置为0秒，传送会立即启动。默认值为5。</p>
<p>⑤、repl-disable-tcp-nodelay：同步之后是否禁用从站上的TCP_NODELAY 如果你选择yes，redis会使用较少量的TCP包和带宽向从站发送数据。但这会导致在从站增加一点数据的延时。 Linux内核默认配置情况下最多40毫秒的延时。如果选择no，从站的数据延时不会那么多，但备份需要的带宽相对较多。默认情况下我们将潜在因素优化，但在高负载情况下或者在主从站都跳的情况下，把它切换为yes是个好主意。默认值为no。</p>
<h2 id="KEYS-TRACKING"><a href="#KEYS-TRACKING" class="headerlink" title="KEYS TRACKING"></a>KEYS TRACKING</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">KEYS TRACKING </span><br><span class="line"><span class="comment"># Redis为客户端的值缓存实现服务器辅助的支持。这是使用无效表实现的，该无效表使用1600万个插槽记住哪些客户端可能具有某些键子集。依次将其用于向客户端发送无效消息</span></span><br><span class="line">Redis implements server assisted support for client side caching of values.</span><br><span class="line">This is implemented using an invalidation table that remembers, using</span><br><span class="line">16 millions of slots, what clients may have certain subsets of keys. In turn</span><br><span class="line">this is used in order to send invalidation messages to clients. Please</span><br><span class="line">check this page to understand more about the feature:</span><br><span class="line"></span><br><span class="line">https://redis.io/topics/client-side-caching</span><br><span class="line"></span><br><span class="line">When tracking is enabled for a client, all the read only queries are assumed</span><br><span class="line">to be cached: this will force Redis to store information in the invalidation</span><br><span class="line">table. When keys are modified, such information is flushed away, and</span><br><span class="line">invalidation messages are sent to the clients. However if the workload is</span><br><span class="line">heavily dominated by reads, Redis could use more and more memory in order</span><br><span class="line">to track the keys fetched by many clients.</span><br><span class="line"><span class="comment"># 为客户端启用跟踪时，假定所有只读查询都已缓存：这将强制Redis将信息存储在失效表中。修改密钥后，将清除此类信息，并将无效消息发送给客户端。但是，如果工作负载主要由读取控制，则Redis可能会使用越来越多的内存来跟踪许多客户端获取的密钥</span></span><br><span class="line">For this reason it is possible to configure a maximum fill value for the</span><br><span class="line">invalidation table. By default it is set to 1M of keys, and once this limit</span><br><span class="line">is reached, Redis will start to evict keys in the invalidation table</span><br><span class="line">even if they were not modified, just to reclaim memory: this will in turn</span><br><span class="line">force the clients to invalidate the cached values. Basically the table</span><br><span class="line">maximum size is a trade off between the memory you want to spend server</span><br><span class="line">side to track information about who cached what, and the ability of clients</span><br><span class="line">to retain cached objects in memory.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果将值设置为0，则表示没有限制，Redis将在失效表中保留所需数量的键。在“统计信息”信息部分中，您可以找到有关每个给定时刻失效表中的键数的信息。</span></span><br><span class="line">If you set the value to 0, it means there are no limits, and Redis will</span><br><span class="line">retain as many keys as needed in the invalidation table.</span><br><span class="line">In the "stats" INFO section, you can find information about the number of</span><br><span class="line">keys in the invalidation table at every given moment.</span><br><span class="line"></span><br><span class="line">Note: when key tracking is used in broadcasting mode, no memory is used</span><br><span class="line">in the server side so this setting is useless.</span><br><span class="line"></span><br><span class="line">tracking-table-max-keys 1000000</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="SECURITY-重要"><a href="#SECURITY-重要" class="headerlink" title="SECURITY(重要)"></a>SECURITY(重要)</h2>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SECURITY </span><br><span class="line"></span><br><span class="line">Warning: since Redis is pretty fast, an outside user can try up to</span><br><span class="line">1 million passwords per second against a modern box. This means that you</span><br><span class="line">should use very strong passwords, otherwise they will be very easy to break.</span><br><span class="line">Note that because the password is really a shared secret between the client</span><br><span class="line">and the server, and should not be memorized by any human, the password</span><br><span class="line">can be easily a long string from /dev/urandom or whatever, so by using a</span><br><span class="line">long and unguessable password no brute force attack will be possible.</span><br><span class="line"><span class="comment"># 警告：由于Redis的速度非常快，因此外部用户每秒可以在一个现代机器上尝试最多100万个密码。这意味着您应该使用非常安全的密码，否则密码很容易破解。</span></span><br><span class="line"><span class="comment"># 请注意，由于该密码实际上是客户端和服务器之间的共享机密，并且不应被任何人记住，因此该密码可以很容易地是来自devurandom或其他任何形式的长字符串，因此使用长而毫无疑问的密码不会造成暴力攻击是可能的</span></span><br><span class="line">Redis ACL users are defined in the following format:</span><br><span class="line"></span><br><span class="line">user &lt;username&gt; ... acl rules ...</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</span><br><span class="line"></span><br><span class="line">The special username "default" is used for new connections. If this user</span><br><span class="line">has the "nopass" rule, then new connections will be immediately authenticated</span><br><span class="line">as the "default" user without the need of any password provided via the</span><br><span class="line">AUTH command. Otherwise if the "default" user is not flagged with "nopass"</span><br><span class="line">the connections will start in not authenticated state, and will require</span><br><span class="line">AUTH (or the HELLO command AUTH option) in order to be authenticated and</span><br><span class="line">start to work.</span><br><span class="line"><span class="comment"># 特殊的用户名“默认”用于新连接。如果该用户具有“ nopass”规则，则新连接将立即被认证为“默认”用户，而不需要通过AUTH命令提供的任何密码。否则，如果未将“默认”用户标记为“ nopass”，则连接将以未认证状态启动，并且需要AUTH（或HELLO命令AUTH选项）才能进行认证并开始工作</span></span><br><span class="line">The ACL rules that describe what a user can do are the following:</span><br><span class="line"></span><br><span class="line">on           Enable the user: it is possible to authenticate as this user.</span><br><span class="line">off          Disable the user: it's no longer possible to authenticate</span><br><span class="line">           with this user, however the already authenticated connections</span><br><span class="line">           will still work.</span><br><span class="line">+&lt;command&gt;   Allow the execution of that command</span><br><span class="line">-&lt;command&gt;   Disallow the execution of that command</span><br><span class="line">+@&lt;category&gt; Allow the execution of all the commands in such category</span><br><span class="line">           with valid categories are like @admin, @set, @sortedset, ...</span><br><span class="line">           and so forth, see the full list in the server.c file where</span><br><span class="line">           the Redis command table is described and defined.</span><br><span class="line">           The special category @all means all the commands, but currently</span><br><span class="line">           present in the server, and that will be loaded in the future</span><br><span class="line">           via modules.</span><br><span class="line">+&lt;command&gt;|subcommand    Allow a specific subcommand of an otherwise</span><br><span class="line">                       disabled command. Note that this form is not</span><br><span class="line">                       allowed as negative like -DEBUG|SEGFAULT, but</span><br><span class="line">                       only additive starting with "+".</span><br><span class="line">allcommands  Alias for +@all. Note that it implies the ability to execute</span><br><span class="line">           all the future commands loaded via the modules system.</span><br><span class="line">nocommands   Alias for -@all.</span><br><span class="line">~&lt;pattern&gt;   Add a pattern of keys that can be mentioned as part of</span><br><span class="line">           commands. For instance ~* allows all the keys. The pattern</span><br><span class="line">           is a glob-style pattern like the one of KEYS.</span><br><span class="line">           It is possible to specify multiple patterns.</span><br><span class="line">allkeys      Alias for ~*</span><br><span class="line">resetkeys    Flush the list of allowed keys patterns.</span><br><span class="line">&gt;&lt;password&gt;  Add this password to the list of valid password for the user.</span><br><span class="line">           For example &gt;mypass will add "mypass" to the list.</span><br><span class="line">           This directive clears the "nopass" flag (see later).</span><br><span class="line">&lt;&lt;password&gt;  Remove this password from the list of valid passwords.</span><br><span class="line">nopass       All the set passwords of the user are removed, and the user</span><br><span class="line">           is flagged as requiring no password: it means that every</span><br><span class="line">           password will work against this user. If this directive is</span><br><span class="line">           used for the default user, every new connection will be</span><br><span class="line">           immediately authenticated with the default user without</span><br><span class="line">           any explicit AUTH command required. Note that the "resetpass"</span><br><span class="line">           directive will clear this condition.</span><br><span class="line">resetpass    Flush the list of allowed passwords. Moreover removes the</span><br><span class="line">           "nopass" status. After "resetpass" the user has no associated</span><br><span class="line">           passwords and there is no way to authenticate without adding</span><br><span class="line">           some password (or setting it as "nopass" later).</span><br><span class="line">reset        Performs the following actions: resetpass, resetkeys, off,</span><br><span class="line">           -@all. The user returns to the same state it has immediately</span><br><span class="line">           after its creation.</span><br><span class="line"></span><br><span class="line">ACL rules can be specified in any order: for instance you can start with</span><br><span class="line">passwords, then flags, or key patterns. However note that the additive</span><br><span class="line">and subtractive rules will CHANGE MEANING depending on the ordering.</span><br><span class="line">For instance see the following example:</span><br><span class="line"></span><br><span class="line">user alice on +@all -DEBUG ~* &gt;somepassword</span><br><span class="line"></span><br><span class="line">This will allow "alice" to use all the commands with the exception of the</span><br><span class="line">DEBUG command, since +@all added all the commands to the set of the commands</span><br><span class="line">alice can use, and later DEBUG was removed. However if we invert the order</span><br><span class="line">of two ACL rules the result will be different:</span><br><span class="line"><span class="comment"># 这将允许“ alice”使用除DEBUG命令之外的所有命令，因为+ @ all将所有命令添加到了alice可以使用的命令集中，并且后来删除了DEBUG。但是，如果我们颠倒两个ACL规则的顺序，结果将有所不同</span></span><br><span class="line">user alice on -DEBUG +@all ~* &gt;somepassword</span><br><span class="line"></span><br><span class="line">Now DEBUG was removed when alice had yet no commands in the set of allowed</span><br><span class="line">commands, later all the commands are added, so the user will be able to</span><br><span class="line">execute everything.</span><br><span class="line"></span><br><span class="line">Basically ACL rules are processed left-to-right.</span><br><span class="line"></span><br><span class="line">For more information about ACL configuration please refer to</span><br><span class="line">the Redis web site at https://redis.io/topics/acl</span><br><span class="line"></span><br><span class="line">ACL LOG</span><br><span class="line"></span><br><span class="line">The ACL Log tracks failed commands and authentication events associated</span><br><span class="line">with ACLs. The ACL Log is useful to troubleshoot failed commands blocked </span><br><span class="line">by ACLs. The ACL Log is stored in memory. You can reclaim memory with </span><br><span class="line">ACL LOG RESET. Define the maximum entry length of the ACL Log below.</span><br><span class="line">acllog-max-len 128</span><br><span class="line"><span class="comment"># ACL日志跟踪与ACL关联的失败命令和身份验证事件。 ACL日志可用于对ACL阻止的失败命令进行故障排除。 ACL日志存储在内存中。您可以使用ACL LOG RESET回收内存。在下面定义ACL日志的最大输入长度。 acllog-max-len 128</span></span><br><span class="line">Using an external ACL file</span><br><span class="line"></span><br><span class="line">Instead of configuring users here in this file, it is possible to use</span><br><span class="line">a stand-alone file just listing users. The two methods cannot be mixed:</span><br><span class="line">if you configure users here and at the same time you activate the external</span><br><span class="line">ACL file, the server will refuse to start.</span><br><span class="line"><span class="comment"># 除了在此文件中配置用户之外，还可以使用仅列出用户的独立文件。两种方法不能混用：如果您在此处配置用户并同时激活外部ACL文件，则服务器将拒绝启动</span></span><br><span class="line">The format of the external ACL user file is exactly the same as the</span><br><span class="line">format that is used inside redis.conf to describe users.</span><br><span class="line"></span><br><span class="line">aclfile /etc/redis/users.acl</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTE: starting with Redis 6 "requirepass" is just a compatibility</span><br><span class="line">layer on top of the new ACL system. The option effect will be just setting</span><br><span class="line">the password for the default user. Clients will still authenticate using</span><br><span class="line">AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span><br><span class="line">if they follow the new protocol: both will work.</span><br><span class="line"><span class="comment"># 重要说明：从Redis 6开始，“ requirepass”只是新ACL系统之上的兼容性层。选项效果将只是为默认用户设置密码。客户端仍将照常使用AUTH &lt;password&gt;进行身份验证，如果遵循新协议，则仍将使用AUTH default &lt;password&gt;进行更明确的身份验证</span></span><br><span class="line">requirepass foobared</span><br><span class="line"></span><br><span class="line">Command renaming (DEPRECATED).</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">WARNING: avoid using this option if possible. Instead use ACLs to remove</span><br><span class="line">commands from the default user, and put them only in some admin user you</span><br><span class="line">create for administrative purposes.</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 警告：尽可能避免使用此选项。而是使用ACL从默认用户中删除命令，并将其仅放置在您出于管理目的而创建的某些admin用户中</span></span><br><span class="line">It is possible to change the name of dangerous commands in a shared</span><br><span class="line">environment. For instance the CONFIG command may be renamed into something</span><br><span class="line">hard to guess so that it will still be available for internal-use tools</span><br><span class="line">but not available for general clients.</span><br><span class="line"><span class="comment"># 可以在共享环境中更改危险命令的名称。例如，CONFIG命令可能会重命名为一些难以猜测的名称，因此它仍可用于内部使用的工具，但不适用于一般客户</span></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line"></span><br><span class="line">It is also possible to completely kill a command by renaming it into</span><br><span class="line">an empty string:</span><br><span class="line"></span><br><span class="line">rename-command CONFIG ""</span><br><span class="line"></span><br><span class="line">Please note that changing the name of commands that are logged into the</span><br><span class="line">AOF file or transmitted to replicas may cause problems.</span><br><span class="line"><span class="comment"># 注意，更改登录到AOF文件或传输到副本的命令的名称可能会导致问题</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>rename-command：命令重命名，对于一些危险命令例如：</p>
<ul>
    <li>
        <p>flushdb（清空数据库）</p>
    </li>
    <li>
        <p>flushall（清空所有记录）</p>
    </li>
    <li>
        <p>config（客户端连接后可配置服务器）</p>
    </li>
    <li>
        <p>keys（客户端连接后可查看所有存在的键） </p>
    </li>
</ul>
<blockquote>
    <p>作为服务端redis-server，常常需要禁用以上命令来使得服务器更加安全，禁用的具体做法是是：</p>
    <p>rename-command FLUSHALL “”</p>
</blockquote>
<p>也可以保留命令但是不能轻易使用，重命名这个命令即可：</p>
<ul>
    <li>rename-command FLUSHALL abcdefg 这样，重启服务器后则需要使用新命令来执行操作，否则服务器会报错unknown command。</li>
</ul>
<p><strong>requirepass:设置redis连接密码</strong></p>
<p>　　比如: requirepass 123456 表示redis的连接密码为123456.</p>
<h2 id="CLIENTS"><a href="#CLIENTS" class="headerlink" title="CLIENTS"></a>CLIENTS</h2>
<figure class="highlight sql">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">CLIENTS </span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> the <span class="keyword">max</span> <span class="built_in">number</span> <span class="keyword">of</span> connected clients <span class="keyword">at</span> the same time. <span class="keyword">By</span> <span class="keyword">default</span></span><br><span class="line">this <span class="keyword">limit</span> <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="number">10000</span> clients, however <span class="keyword">if</span> the Redis <span class="keyword">server</span> <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">able <span class="keyword">to</span> configure the process <span class="keyword">file</span> <span class="keyword">limit</span> <span class="keyword">to</span> <span class="keyword">allow</span> <span class="keyword">for</span> the specified <span class="keyword">limit</span></span><br><span class="line">the <span class="keyword">max</span> <span class="built_in">number</span> <span class="keyword">of</span> allowed clients <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> the <span class="keyword">current</span> <span class="keyword">file</span> <span class="keyword">limit</span></span><br><span class="line"><span class="keyword">minus</span> <span class="number">32</span> (<span class="keyword">as</span> Redis reserves a few <span class="keyword">file</span> descriptors <span class="keyword">for</span> internal uses).</span><br><span class="line"><span class="comment"># 同时设置最大连接客户端数。默认情况下，此限制设置为10000个客户端，但是，如果Redis服务器无法将进程文件限制配置为允许指定的限制，则允许的最大客户端数设置为当前文件限制减去32（因为Redis保留了内部使用的几个文件描述符）</span></span><br><span class="line">Once the <span class="keyword">limit</span> <span class="keyword">is</span> reached Redis will <span class="keyword">close</span> <span class="keyword">all</span> the <span class="keyword">new</span> connections sending</span><br><span class="line">an <span class="keyword">error</span> <span class="string">'max number of clients reached'</span>.</span><br><span class="line"><span class="comment"># 达到限制后，Redis将关闭所有新连接，并发送错误消息“已达到最大客户端数”。</span></span><br><span class="line">IMPORTANT: <span class="keyword">When</span> Redis Cluster <span class="keyword">is</span> used, the <span class="keyword">max</span> <span class="built_in">number</span> <span class="keyword">of</span> connections <span class="keyword">is</span> also</span><br><span class="line"><span class="keyword">shared</span> <span class="keyword">with</span> the cluster bus: every node <span class="keyword">in</span> the cluster will <span class="keyword">use</span> two</span><br><span class="line">connections, one incoming <span class="keyword">and</span> another outgoing. It <span class="keyword">is</span> important <span class="keyword">to</span> <span class="keyword">size</span> the</span><br><span class="line"><span class="keyword">limit</span> accordingly <span class="keyword">in</span> <span class="keyword">case</span> <span class="keyword">of</span> very <span class="keyword">large</span> clusters.</span><br><span class="line"><span class="comment"># 重要信息：使用Redis群集时，最大连接数也与群集总线共享：群集中的每个节点将使用两个连接，一个进入，另一个向外。在群集非常大的情况下，相应地调整限制大小非常重要</span></span><br><span class="line">maxclients <span class="number">10000</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>maxclients ：设置客户端最大并发连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件。 描述符数-32（redis server自身会使用一些），如果设置 maxclients为0 。表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p>
<h2 id="MEMORY-MANAGEMENT"><a href="#MEMORY-MANAGEMENT" class="headerlink" title="MEMORY MANAGEMENT"></a>MEMORY MANAGEMENT</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">MEMORY MANAGEMENT </span><br><span class="line"></span><br><span class="line">Set a memory usage limit to the specified amount of bytes.</span><br><span class="line">When the memory limit is reached Redis will try to remove keys</span><br><span class="line">according to the eviction policy selected (see maxmemory-policy).</span><br><span class="line"><span class="comment"># 将内存使用限制设置为指定的字节数。当达到内存限制时，Redis将尝试根据所选的逐出策略来删除密钥</span></span><br><span class="line">If Redis can't remove keys according to the policy, or if the policy is</span><br><span class="line">set to 'noeviction', Redis will start to reply with errors to commands</span><br><span class="line">that would use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="line">to reply to read-only commands like GET.</span><br><span class="line"><span class="comment"># 如果Redis无法根据该策略删除密钥，或者如果该策略设置为'noeviction'，则Redis将开始对将使用更多内存的命令（例如SET，LPUSH等）进行错误答复，并将继续回复诸如GET之类的只读命令</span></span><br><span class="line">This option is usually useful when using Redis as an LRU or LFU cache, or to</span><br><span class="line">set a hard memory limit for an instance (using the 'noeviction' policy).</span><br><span class="line"><span class="comment"># 当将Redis用作LRU或LFU缓存，或为实例设置硬盘限制时，此选项通常很有用</span></span><br><span class="line">WARNING: If you have replicas attached to an instance with maxmemory on,</span><br><span class="line">the size of the output buffers needed to feed the replicas are subtracted</span><br><span class="line">from the used memory count, so that network problems / resyncs will</span><br><span class="line">not trigger a loop where keys are evicted, and in turn the output</span><br><span class="line">buffer of replicas is full with DELs of keys evicted triggering the deletion</span><br><span class="line">of more keys, and so forth until the database is completely emptied.</span><br><span class="line"><span class="comment"># 警告：如果您将副本附加到实例上且maxmemory处于打开状态，则从使用的内存计数中减去提供副本所需的输出缓冲区的大小，以便网络问题重新同步将不会触发逐出密钥的循环。使副本的输出缓冲区已满，其中有被驱逐的键DEL触发了更多键的删除，依此类推，直到数据库完全清空</span></span><br><span class="line">In short... if you have replicas attached it is suggested that you set a lower</span><br><span class="line">limit for maxmemory so that there is some free RAM on the system for replica</span><br><span class="line">output buffers (but this is not needed if the policy is 'noeviction').</span><br><span class="line"><span class="comment"># 简而言之...如果您附加了副本，建议您为maxmemory设置一个下限，以便系统上有一些可用的RAM用于副本输出缓冲区（但是如果策略为“ noeviction”，则不需要这样做）</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line">MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line">is reached. You can select one from the following behaviors:</span><br><span class="line"><span class="comment"># MAXMEMORY POLICY：达到maxmemory后，Redis将如何选择要删除的内容。您可以从以下行为中选择一种</span></span><br><span class="line">volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span><br><span class="line">allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="line">volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.    # 使用近似的LRU驱逐，仅使用已过期的密钥</span><br><span class="line">allkeys-lfu -&gt; Evict any key using approximated LFU.                           # 使用近似的LFU退出任何密钥</span><br><span class="line">volatile-random -&gt; Remove a random key having an expire set.                   # 删除具有过期设置的随机密钥</span><br><span class="line">allkeys-random -&gt; Remove a random key, any key.                                # 删除随机密钥，任何密钥</span><br><span class="line">volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)        # 取出最接近到期时间（较小的TTL）的密钥</span><br><span class="line">noeviction -&gt; Don't evict anything, just return an error on write operations.  # 不驱逐任何东西，仅在写操作时返回错误</span><br><span class="line"></span><br><span class="line">LRU means Least Recently Used       # LRU表示最近最少使用   LFU表示最少使用</span><br><span class="line">LFU means Least Frequently Used</span><br><span class="line"></span><br><span class="line">Both LRU, LFU and volatile-ttl are implemented using approximated</span><br><span class="line">randomized algorithms. </span><br><span class="line"><span class="comment"># LRU，LFU和volatile-ttl均使用近似随机算法实现</span></span><br><span class="line"></span><br><span class="line">Note: with any of the above policies, Redis will return an error on write</span><br><span class="line">   operations, when there are no suitable keys for eviction.</span><br><span class="line"></span><br><span class="line">   At the date of writing these commands are: set setnx setex append</span><br><span class="line">   incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line">   sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line">   zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line">   getset mset msetnx exec sort</span><br><span class="line"><span class="comment"># 注意：使用上述任何策略时，如果没有合适的退出键，Redis将在写入操作中返回错误。在撰写本文时，这些命令是：</span></span><br><span class="line"><span class="comment"># set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd interinterstore sunion </span></span><br><span class="line"><span class="comment"># sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby mcrby deby byby</span></span><br><span class="line">The default is:</span><br><span class="line"></span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line">LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="line">algorithms (in order to save memory), so you can tune it for speed or</span><br><span class="line">accuracy. By default Redis will check five keys and pick the one that was</span><br><span class="line">used least recently, you can change the sample size using the following</span><br><span class="line">configuration directive.</span><br><span class="line"><span class="comment"># LRU，LFU和最小TTL算法不是精确算法，而是近似算法（以节省内存），因此您可以针对速度或准确性进行调整。默认情况下，Redis将检查五个键并选择最近使用最少的键，您可以使用以下配置指令更改样本大小</span></span><br><span class="line">The default of 5 produces good enough results. 10 Approximates very closely</span><br><span class="line">true LRU but costs more CPU. 3 is faster but not very accurate.</span><br><span class="line"><span class="comment"># 默认值为5会产生足够好的结果。 10非常接近真实的LRU，但是会花费更多的CPU。 3更快但不是很准确</span></span><br><span class="line">maxmemory-samples 5</span><br><span class="line"></span><br><span class="line">Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><br><span class="line">(unless it is promoted to master after a failover or manually). It means</span><br><span class="line">that the eviction of keys will be just handled by the master, sending the</span><br><span class="line">DEL commands to the replica as keys evict in the master side.</span><br><span class="line"><span class="comment"># 从Redis 5开始，默认情况下，副本将忽略其maxmemory设置（除非在故障转移后或手动提升为主副本）。这意味着密钥的移出将仅由主服务器处理，将DEL命令作为副本在主计算机侧逐出，将DEL命令发送到副本</span></span><br><span class="line">This behavior ensures that masters and replicas stay consistent, and is usually</span><br><span class="line">what you want, however if your replica is writable, or you want the replica</span><br><span class="line">to have a different memory setting, and you are sure all the writes performed</span><br><span class="line">to the replica are idempotent, then you may change this default (but be sure</span><br><span class="line">to understand what you are doing).</span><br><span class="line"><span class="comment"># 此行为可确保主副本和副本始终保持一致，这通常是您想要的，但是，如果副本是可写的，或者您希望副本具有不同的内存设置，并且您确定对副本执行的所有写操作都是幂等的，那么您可以更改此默认设置（但请务必了解您在做什么）</span></span><br><span class="line">Note that since the replica by default does not evict, it may end using more</span><br><span class="line">memory than the one set via maxmemory (there are certain buffers that may</span><br><span class="line">be larger on the replica, or data structures may sometimes take more memory</span><br><span class="line">and so forth). So make sure you monitor your replicas and make sure they</span><br><span class="line">have enough memory to never hit a real out-of-memory condition before the</span><br><span class="line">master hits the configured maxmemory setting.</span><br><span class="line"><span class="comment"># 请注意，由于默认情况下该副本不会退出，因此它可能会结束使用比通过maxmemory设置的内存更多的内存（某些缓冲区在副本上可能会更大，或者数据结构有时会占用更多的内存，依此类推）。因此，请确保您监视副本，并确保副本具有足够的内存，以便在主副本达到配置的最大内存设置之前永远不会遇到真正的内存不足情况</span></span><br><span class="line">replica-ignore-maxmemory yes</span><br><span class="line"></span><br><span class="line">Redis reclaims expired keys in two ways: upon access when those keys are</span><br><span class="line">found to be expired, and also in background, in what is called the</span><br><span class="line">"active expire key". The key space is slowly and interactively scanned</span><br><span class="line">looking for expired keys to reclaim, so that it is possible to free memory</span><br><span class="line">of keys that are expired and will never be accessed again in a short time.</span><br><span class="line"><span class="comment"># Redis通过两种方式回收过期的密钥：访问时发现这些密钥已过期，以及在后台，称为“活动的过期密钥”。缓慢地，交互地扫描密钥空间，以查找要回收的过期密钥，以便可以释放已过期且不久之后将不再访问的密钥的内存</span></span><br><span class="line">The default effort of the expire cycle will try to avoid having more than</span><br><span class="line">ten percent of expired keys still in memory, and will try to avoid consuming</span><br><span class="line">more than 25% of total memory and to add latency to the system. However</span><br><span class="line">it is possible to increase the expire "effort" that is normally set to</span><br><span class="line">"1", to a greater value, up to the value "10". At its maximum value the</span><br><span class="line">system will use more CPU, longer cycles (and technically may introduce</span><br><span class="line">more latency), and will tolerate less already expired keys still present</span><br><span class="line">in the system. It's a tradeoff between memory, CPU and latency.</span><br><span class="line"><span class="comment"># 到期周期的默认工作将尝试避免在内存中保留超过百分之十的过期密钥，并且将尝试避免消耗超过总内存的25％并增加系统延迟。但是，可以将通常设置为“ 1”的过期“努力”增加到更大的值，直到值“ 10”。系统将以其最大值使用更多的CPU，更长的周期（并且从技术上讲可能会引入更多的延迟），并且将容忍更少的系统中仍然存在的已过期密钥。在内存，CPU和延迟之间进行权衡</span></span><br><span class="line">active-expire-effort 1</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<blockquote>
    <p>LRU是Least Recently Used的缩写，即最近最少使用<br>LFU（Least Frequently Used ，最近最少使用算法）也是一种常见的缓存算法</p>
</blockquote>
<p>maxmemory：设置Redis的最大内存，如果设置为0 。表示不作限制。通常是配合下面介绍的maxmemory-policy参数一起使用。</p>
<p>maxmemory-policy ：当内存使用达到maxmemory设置的最大值时，redis使用的内存清除策略。有以下几种可以选择：</p>
<p>　　　　1）volatile-lru 利用LRU算法移除设置过过期时间的key </p>
<p>　　　　2）allkeys-lru 利用LRU算法移除任何key </p>
<p>　　　　3）volatile-random 移除设置过过期时间的随机key </p>
<p>　　　　4）allkeys-random 移除随机ke</p>
<p>　　　　5）volatile-ttl 移除即将过期的key(minor TTL) </p>
<p>　　　　6）noeviction noeviction 不移除任何key，只是返回一个写错误 ，默认选项</p>
<p>maxmemory-samples ：LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)。随意你可以选择样本大小进行检，redis默认选择5个样本进行检测，你可以通过maxmemory-samples进行设置样本数。</p>
<h2 id="LAZY-FREEING"><a href="#LAZY-FREEING" class="headerlink" title="LAZY FREEING"></a>LAZY FREEING</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">LAZY FREEING </span><br><span class="line"></span><br><span class="line">Redis has two primitives to delete keys. One is called DEL and is a blocking</span><br><span class="line">deletion of the object. It means that the server stops processing new commands</span><br><span class="line">in order to reclaim all the memory associated with an object in a synchronous</span><br><span class="line">way. If the key deleted is associated with a small object, the time needed</span><br><span class="line">in order to execute the DEL command is very small and comparable to most other</span><br><span class="line">O(1) or O(log_N) commands in Redis. However if the key is associated with an</span><br><span class="line">aggregated value containing millions of elements, the server can block for</span><br><span class="line">a long time (even seconds) in order to complete the operation.</span><br><span class="line"><span class="comment"># Redis有两个删除键的原语。一种称为DEL，它是对象的阻塞删除。这意味着服务器停止处理新命令，以便以同步方式回收与对象关联的所有内存。如果删除的键与一个小对象相关联，则执行DEL命令所需的时间非常短，可与Redis中的大多数其他O（1）或O（log_N）命令相提并论。但是，如果键与包含数百万个元素的聚合值相关联，则服务器可能会阻塞很长时间（甚至几秒钟）以完成操作</span></span><br><span class="line">For the above reasons Redis also offers non blocking deletion primitives</span><br><span class="line">such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><br><span class="line">FLUSHDB commands, in order to reclaim memory in background. Those commands</span><br><span class="line">are executed in constant time. Another thread will incrementally free the</span><br><span class="line">object in the background as fast as possible.</span><br><span class="line"><span class="comment"># 由于上述原因，Redis还提供了非阻塞删除原语，例如UNLINK（非阻塞DEL）以及FLUSHALL和FLUSHDB命令的ASYNC选项，以便在后台回收内存。这些命令在固定时间内执行。另一个线程将尽可能快地在后台逐渐释放对象</span></span><br><span class="line">DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><br><span class="line">It's up to the design of the application to understand when it is a good</span><br><span class="line">idea to use one or the other. However the Redis server sometimes has to</span><br><span class="line">delete keys or flush the whole database as a side effect of other operations.</span><br><span class="line">Specifically Redis deletes objects independently of a user call in the</span><br><span class="line">following scenarios:</span><br><span class="line"><span class="comment"># 用户可以控制FLUSHALL和FLUSHDB的DEL，UNLINK和ASYNC选项。由应用程序的设计来决定何时使用一个或另一个是一个好主意。但是，Redis服务器有时必须删除键或刷新整个数据库，这是其他操作的副作用。特别是在以下情况下，Redis会独立于用户调用而删除对象</span></span><br><span class="line">1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><br><span class="line">in order to make room for new data, without going over the specified</span><br><span class="line">memory limit.</span><br><span class="line">2) Because of expire: when a key with an associated time to live (see the</span><br><span class="line">EXPIRE command) must be deleted from memory.</span><br><span class="line">3) Because of a side effect of a command that stores data on a key that may</span><br><span class="line">already exist. For example the RENAME command may delete the old key</span><br><span class="line">content when it is replaced with another one. Similarly SUNIONSTORE</span><br><span class="line">or SORT with STORE option may delete existing keys. The SET command</span><br><span class="line">itself removes any old content of the specified key in order to replace</span><br><span class="line">it with the specified string.</span><br><span class="line">4) During replication, when a replica performs a full resynchronization with</span><br><span class="line">its master, the content of the whole database is removed in order to</span><br><span class="line">load the RDB file just transferred.</span><br><span class="line"></span><br><span class="line">In all the above cases the default is to delete objects in a blocking way,</span><br><span class="line">like if DEL was called. However you can configure each case specifically</span><br><span class="line">in order to instead release memory in a non-blocking way like if UNLINK</span><br><span class="line">was called, using the following configuration directives.</span><br><span class="line"><span class="comment"># 在上述所有情况下，默认设置都是以阻塞方式删除对象，就像调用DEL一样。但是，可以使用以下配置指令专门配置每种情况，以便以非阻塞方式释放内存，例如是否调用了UNLINK。</span></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line">It is also possible, for the case when to replace the user code DEL calls</span><br><span class="line">with UNLINK calls is not easy, to modify the default behavior of the DEL</span><br><span class="line">command to act exactly like UNLINK, using the following configuration</span><br><span class="line">directive:</span><br><span class="line"><span class="comment"># 对于用UNLINK调用替换用户代码DEL调用不容易的情况，也可以使用以下配置指令将DEL命令的默认行为修改为与UNLINK完全一样</span></span><br><span class="line">lazyfree-lazy-user-del no</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="THREADED-I-O"><a href="#THREADED-I-O" class="headerlink" title="THREADED I/O"></a>THREADED I/O</h2>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">THREADED I/O </span><br><span class="line"></span><br><span class="line">Redis is mostly single threaded, however there are certain threaded</span><br><span class="line">operations such as UNLINK, slow I/O accesses and other things that are</span><br><span class="line">performed on side threads.</span><br><span class="line"><span class="comment"># Redis大多是单线程的，但是有一些线程操作，例如UNLINK，缓慢的IO访问和其他在侧线程上执行的操作</span></span><br><span class="line">Now it is also possible to handle Redis clients socket reads and writes</span><br><span class="line">in different I/O threads. Since especially writing is so slow, normally</span><br><span class="line">Redis users use pipelining in order to speed up the Redis performances per</span><br><span class="line">core, and spawn multiple instances in order to scale more. Using I/O</span><br><span class="line">threads it is possible to easily speedup two times Redis without resorting</span><br><span class="line">to pipelining nor sharding of the instance.</span><br><span class="line"><span class="comment"># 现在，还可以在不同的IO线程中处理Redis客户端套接字的读写。由于特别慢的写入速度，通常Redis用户使用流水线来加快每个内核的Redis性能，并生成多个实例以扩展规模。使用IO线程，可以轻松地将Redis加速两次，而无需求助于实例的流水线处理或分片</span></span><br><span class="line">By default threading is disabled, we suggest enabling it only in machines</span><br><span class="line">that have at least 4 or more cores, leaving at least one spare core.</span><br><span class="line">Using more than 8 threads is unlikely to help much. We also recommend using</span><br><span class="line">threaded I/O only if you actually have performance problems, with Redis</span><br><span class="line">instances being able to use a quite big percentage of CPU time, otherwise</span><br><span class="line">there is no point in using this feature.</span><br><span class="line"><span class="comment"># 默认情况下，线程是禁用的，我们建议仅在具有至少4个或更多内核的计算机上启用它，而至少保留一个备用内核。使用8个以上的线程不太可能有很大帮助。我们还建议仅在实际存在性能问题时才使用线程IO，Redis实例可以使用很大一部分CPU时间，否则使用此功能毫无意义。</span></span><br><span class="line">So for instance if you have a four cores boxes, try to use 2 or 3 I/O</span><br><span class="line">threads, if you have a 8 cores, try to use 6 threads. In order to</span><br><span class="line">enable I/O threads use the following configuration directive:</span><br><span class="line"><span class="comment"># 因此，例如，如果您有四个核的盒子，请尝试使用2个或3个IO线程，如果您有8个核，请尝试使用6个线程。为了启用IO线程，请使用以下配置指令</span></span><br><span class="line">io-threads 4</span><br><span class="line"></span><br><span class="line">Setting io-threads to 1 will just use the main thread as usual.</span><br><span class="line">When I/O threads are enabled, we only use threads for writes, that is</span><br><span class="line">to thread the write(2) syscall and transfer the client buffers to the</span><br><span class="line">socket. However it is also possible to enable threading of reads and</span><br><span class="line">protocol parsing using the following configuration directive, by setting</span><br><span class="line">it to yes:</span><br><span class="line"><span class="comment"># 将io-threads设置为1只会照常使用主线程。启用IO线程后，我们仅使用线程进行写操作，即对write（2）系统调用进行线程化，并将客户端缓冲区传输到套接字。但是，也可以使用以下配置指令，通过将其设置为yes，来启用读取线程和协议解析</span></span><br><span class="line">io-threads-do-reads no</span><br><span class="line"></span><br><span class="line">Usually threading reads doesn't help much.</span><br><span class="line"><span class="comment"># 通常线程读取并没有多大帮助</span></span><br><span class="line">NOTE 1: This configuration directive cannot be changed at runtime via</span><br><span class="line">CONFIG SET. Aso this feature currently does not work when SSL is</span><br><span class="line">enabled.</span><br><span class="line"><span class="comment"># 注意1：无法在运行时通过CONFIG SET更改此配置指令。启用SSL后，该功能目前也无法使用。</span></span><br><span class="line">NOTE 2: If you want to test the Redis speedup using redis-benchmark, make</span><br><span class="line">sure you also run the benchmark itself in threaded mode, using the</span><br><span class="line">--threads option to match the number of Redis threads, otherwise you'll not</span><br><span class="line">be able to notice the improvements.</span><br><span class="line"><span class="comment"># 注意2：如果要使用redis-benchmark测试Redis加速，请确保还使用--threads选项匹配Redis线程数，在线程模式下运行基准测试本身，否则将无法注意改进</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="KERNEL-OOM-CONTROL"><a href="#KERNEL-OOM-CONTROL" class="headerlink" title="KERNEL OOM CONTROL"></a>KERNEL OOM CONTROL</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">KERNEL OOM CONTROL # 内核OOM控制</span><br><span class="line"></span><br><span class="line">On Linux, it is possible to hint the kernel OOM killer on what processes</span><br><span class="line">should be killed first when out of memory.</span><br><span class="line"><span class="comment"># 在Linux上，可以向内核OOM杀手提示内存不足时应首先终止哪些进程</span></span><br><span class="line">Enabling this feature makes Redis actively control the oom_score_adj value</span><br><span class="line">for all its processes, depending on their role. The default scores will</span><br><span class="line">attempt to have background child processes killed before all others, and</span><br><span class="line">replicas killed before masters.</span><br><span class="line"><span class="comment"># 启用此功能可使Redis根据其进程主动控制其所有进程的oom_score_adj值。默认分数将尝试使后台子进程在所有其他进程之前被杀死，副本在主数据库之前被杀死</span></span><br><span class="line">oom-score-adj no</span><br><span class="line"></span><br><span class="line">When oom-score-adj is used, this directive controls the specific values used</span><br><span class="line">for master, replica and background child processes. Values range -1000 to</span><br><span class="line">1000 (higher means more likely to be killed).</span><br><span class="line"><span class="comment"># 使用oom-score-adj时，此伪指令控制用于主，副本和后台子进程的特定值。值范围-1000至1000（值越高，表示被杀死的可能性越高）</span></span><br><span class="line">Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)</span><br><span class="line">can freely increase their value, but not decrease it below its initial</span><br><span class="line">settings.</span><br><span class="line"><span class="comment"># 无特权的进程（不是root进程，并且没有CAP_SYS_RESOURCE功能）可以自由地增加其值，但不能将其降低到其初始设置以下</span></span><br><span class="line">Values are used relative to the initial value of oom_score_adj when the server</span><br><span class="line">starts. Because typically the initial value is 0, they will often match the</span><br><span class="line">absolute values.</span><br><span class="line"></span><br><span class="line">oom-score-adj-values 0 200 800</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="APPEND-ONLY-MODE-重要"><a href="#APPEND-ONLY-MODE-重要" class="headerlink" title="APPEND ONLY MODE(重要)"></a>APPEND ONLY MODE(重要)</h2>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">APPEND ONLY MODE </span><br><span class="line"></span><br><span class="line">By default Redis asynchronously dumps the dataset on disk. This mode is</span><br><span class="line">good enough in many applications, but an issue with the Redis process or</span><br><span class="line">a power outage may result into a few minutes of writes lost (depending on</span><br><span class="line">the configured save points).</span><br><span class="line"><span class="comment"># 服务器启动时，使用相对于oom_score_adj初始值的值。因为通常初始值为0，所以它们通常会与绝对值匹配。</span></span><br><span class="line">The Append Only File is an alternative persistence mode that provides</span><br><span class="line">much better durability. For instance using the default data fsync policy</span><br><span class="line">(see later in the config file) Redis can lose just one second of writes in a</span><br><span class="line">dramatic event like a server power outage, or a single write if something</span><br><span class="line">wrong with the Redis process itself happens, but the operating system is</span><br><span class="line">still running correctly.</span><br><span class="line"><span class="comment"># 仅附加文件是一种替代的持久性模式，可提供更好的持久性。例如，使用默认数据fsync策略（请参阅配置文件中的稍后内容），Redis在严重的事件（例如服务器断电）中仅会丢失一秒钟的写入，如果Redis进程本身发生问题，则可能会丢失一次写入，但是操作系统仍在正常运行</span></span><br><span class="line">AOF and RDB persistence can be enabled at the same time without problems.</span><br><span class="line">If the AOF is enabled on startup Redis will load the AOF, that is the file</span><br><span class="line">with the better durability guarantees.</span><br><span class="line"><span class="comment"># 可以同时启用AOF和RDB持久性，而不会出现问题。如果在启动时启用了AOF，则Redis将加载AOF，即具有更好持久性的文件</span></span><br><span class="line">Please check http://redis.io/topics/persistence for more information.</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line">The name of the append only file (default: "appendonly.aof")</span><br><span class="line"></span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"></span><br><span class="line">The fsync() call tells the Operating System to actually write data on disk</span><br><span class="line">instead of waiting for more data in the output buffer. Some OS will really flush</span><br><span class="line">data on disk, some other OS will just try to do it ASAP.</span><br><span class="line"><span class="comment"># fsync（）调用告诉操作系统将数据实际写入磁盘，而不是等待输出缓冲区中的更多数据。某些操作系统确实会刷新磁盘上的数据，而另一些操作系统会尽快尝试</span></span><br><span class="line">Redis supports three different modes:</span><br><span class="line"></span><br><span class="line">no: don't fsync, just let the OS flush the data when it wants. Faster.</span><br><span class="line">always: fsync after every write to the append only log. Slow, Safest.</span><br><span class="line">everysec: fsync only one time every second. Compromise.</span><br><span class="line"></span><br><span class="line">The default is "everysec", as that's usually the right compromise between</span><br><span class="line">speed and data safety. It's up to you to understand if you can relax this to</span><br><span class="line">"no" that will let the operating system flush the output buffer when</span><br><span class="line">it wants, for better performances (but if you can live with the idea of</span><br><span class="line">some data loss consider the default persistence mode that's snapshotting),</span><br><span class="line">or on the contrary, use "always" that's very slow but a bit safer than</span><br><span class="line">everysec.</span><br><span class="line"></span><br><span class="line">More details please check the following article:</span><br><span class="line">http://antirez.com/post/redis-persistence-demystified.html</span><br><span class="line"></span><br><span class="line">If unsure, use "everysec".</span><br><span class="line"></span><br><span class="line">appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line">appendfsync no</span><br><span class="line"></span><br><span class="line">When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="line">saving process (a background save or AOF log background rewriting) is</span><br><span class="line">performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="line">Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="line">this currently, as even performing fsync in a different thread will block</span><br><span class="line">our synchronous write(2) call.</span><br><span class="line"><span class="comment"># 当AOF fsync策略设置为always或everysec，并且后台保存进程（后台保存或AOF日志后台重写）对磁盘执行大量IO时，在某些Linux配置中，Redis可能会在fsync上阻塞太长时间（ ）致电。请注意，目前尚无此修复程序，因为即使在其他线程中执行fsync也将阻塞我们的同步write（2）调用</span></span><br><span class="line">In order to mitigate this problem it's possible to use the following option</span><br><span class="line">that will prevent fsync() from being called in the main process while a</span><br><span class="line">BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="line"><span class="comment"># 为了减轻此问题，可以使用以下选项来防止在BGSAVE或BGREWRITEAOF进行时在主进程中调用fsync（）</span></span><br><span class="line">This means that while another child is saving, the durability of Redis is</span><br><span class="line">the same as "appendfsync none". In practical terms, this means that it is</span><br><span class="line">possible to lose up to 30 seconds of log in the worst scenario (with the</span><br><span class="line">default Linux settings).</span><br><span class="line"><span class="comment"># 这意味着当另一个子线程正在保存时，Redis的持久性与“ appendfsync none”相同。实际上，这意味着在最坏的情况下（使用默认的Linux设置）可能会丢失多达30秒的日志</span></span><br><span class="line">If you have latency problems turn this to "yes". Otherwise leave it as</span><br><span class="line">"no" that is the safest pick from the point of view of durability.</span><br><span class="line"><span class="comment"># 如果您有延迟问题，请将其设置为“是”。否则，从耐用性的角度出发，将其保留为“ no”是最安全的选择</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">Automatic rewrite of the append only file.</span><br><span class="line">Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="line">BGREWRITEAOF when the AOF log size grows by the specified percentage.</span><br><span class="line"><span class="comment"># 自动重写仅附加文件。当AOF日志大小增加指定百分比时，Redis能够自动重写日志文件，隐式调用BGREWRITEAOF</span></span><br><span class="line">This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="line">latest rewrite (if no rewrite has happened since the restart, the size of</span><br><span class="line">the AOF at startup is used).</span><br><span class="line"><span class="comment"># 它是这样工作的：Redis在最近一次重写之后会记住AOF文件的大小（如果自重新启动以来未发生任何重写，则使用启动时AOF的大小）。</span></span><br><span class="line">This base size is compared to the current size. If the current size is</span><br><span class="line">bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="line">you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="line">is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="line">is reached but it is still pretty small.</span><br><span class="line"><span class="comment"># 将此基本大小与当前大小进行比较。如果当前大小大于指定的百分比，则触发重写。另外，您需要指定要重写的AOF文件的最小大小，这对于避免重写AOF文件很有用，即使达到百分比增加，但它仍然很小</span></span><br><span class="line">Specify a percentage of zero in order to disable the automatic AOF</span><br><span class="line">rewrite feature.</span><br><span class="line"><span class="comment"># 指定零百分比以禁用自动AOF重写功能</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">An AOF file may be found to be truncated at the end during the Redis</span><br><span class="line">startup process, when the AOF data gets loaded back into memory.</span><br><span class="line">This may happen when the system where Redis is running</span><br><span class="line">crashes, especially when an ext4 filesystem is mounted without the</span><br><span class="line"><span class="attr">data</span>=ordered option (however this can<span class="string">'t happen when Redis itself</span></span><br><span class="line"><span class="string">crashes or aborts but the operating system still works correctly).</span></span><br><span class="line"><span class="string"># 当AOF数据重新加载回内存时，在Redis启动过程中可能会发现AOF文件在末尾被截断。当运行Redis的系统崩溃时，尤其是在没有data = ordered选项的情况下挂载ext4文件系统时，可能会发生这种情况（但是，当Redis本身崩溃或中止，但操作系统仍然可以正常运行时，就不会发生这种情况）</span></span><br><span class="line"><span class="string">Redis can either exit with an error when this happens, or load as much</span></span><br><span class="line"><span class="string">data as possible (the default now) and start if the AOF file is found</span></span><br><span class="line"><span class="string">to be truncated at the end. The following option controls this behavior.</span></span><br><span class="line"><span class="string"># 发生这种情况时，Redis可能会退出并显示错误，也可以加载尽可能多的数据（当前为默认值），如果发现AOF文件最后被截断，则Redis会开始。以下选项控制此行为</span></span><br><span class="line"><span class="string">If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></span><br><span class="line"><span class="string">the Redis server starts emitting a log to inform the user of the event.</span></span><br><span class="line"><span class="string">Otherwise if the option is set to no, the server aborts with an error</span></span><br><span class="line"><span class="string">and refuses to start. When the option is set to no, the user requires</span></span><br><span class="line"><span class="string">to fix the AOF file using the "redis-check-aof" utility before to restart</span></span><br><span class="line"><span class="string">the server.</span></span><br><span class="line"><span class="string"># 如果aof-load-truncated设置为yes，则将加载截短的AOF文件，并且Redis服务器将开始发出日志以将事件通知用户。否则，如果该选项设置为no，则服务器将中止并显示错误并拒绝启动。如果该选项设置为no，则用户需要在重新启动服务器之前使用“ redis-check-aof”实用程序修复AOF文件</span></span><br><span class="line"><span class="string">Note that if the AOF file will be found to be corrupted in the middle</span></span><br><span class="line"><span class="string">the server will still exit with an error. This option only applies when</span></span><br><span class="line"><span class="string">Redis will try to read more data from the AOF file but not enough bytes</span></span><br><span class="line"><span class="string">will be found.</span></span><br><span class="line"><span class="string"># 请注意，如果在中间发现AOF文件已损坏，则服务器仍将退出并出现错误。仅当Redis尝试从AOF文件读取更多数据但找不到足够的字节时，此选项才适用。</span></span><br><span class="line"><span class="string">aof-load-truncated yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></span><br><span class="line"><span class="string">AOF file for faster rewrites and recoveries. When this option is turned</span></span><br><span class="line"><span class="string">on the rewritten AOF file is composed of two different stanzas:</span></span><br><span class="line"><span class="string"># 重写AOF文件时，Redis可以使用AOF文件中的RDB前同步码来更快地进行重写和恢复。启用此选项后，重写的AOF文件由两个不同的节组成</span></span><br><span class="line"><span class="string">[RDB file] [AOF tail]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">When loading, Redis recognizes that the AOF file starts with the "REDIS"</span></span><br><span class="line"><span class="string">string and loads the prefixed RDB file, then continues loading the AOF</span></span><br><span class="line"><span class="string">tail.</span></span><br><span class="line"><span class="string"># 加载时，Redis会识别AOF文件以“ REDIS”字符串开头并加载带前缀的RDB文件，然后继续加载AOF尾部。</span></span><br><span class="line"><span class="string">aof-use-rdb-preamble yes</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>appendonly（AOF）是一种替代的持久性模式，可提供更好的持久性。例如，使用默认数据fsync策略（请参阅配置文件中的稍后内容），Redis在严重的事件（例如服务器断电）中仅会丢失一秒钟的写入，如果Redis进程本身发生问题，则可能会丢失一次写入，但是操作系统仍在正常运行</p>
<p>可以同时启用AOF和RDB持久性，而不会出现问题。如果在启动时启用了AOF，则Redis将加载AOF，即具有更好持久性的文件</p>
<p>appendonly（AOF）默认是关闭的，我们可以<code>appendonly yes</code>打开，默认文件名为<code>appendonly.aof</code></p>
<blockquote>
    <p>默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式， 可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入appendonly.aof文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。默认值为no</p>
</blockquote>
<p>appendonly（AOF）的启动参数有三个：默认使用appendfsync everysec</p>
<blockquote>
    <p>appendfsync always<br>appendfsync everysec<br>appendfsync no</p>
    <p>aof持久化策略的配置；no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快；always表示每次写入都执行fsync，以保证数据同步到磁盘；everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</p>
</blockquote>
<p>在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。 设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。默认值为no。</p>
<blockquote>
    <p>如果您有延迟问题，请将其设置为“是”。否则，从耐用性的角度出发，将其保留为“ no”是最安全的选择</p>
</blockquote>
<p>auto-aof-rewrite-percentage：默认值为100。aof自动重写配置，当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候，Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</p>
<p>auto-aof-rewrite-min-size：64mb。设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写。</p>
<p>aof-load-truncated：aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项，出现这种现象 redis宕机或者异常终止不会造成尾部不完整现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。默认值为 yes</p>
<h2 id="LUA-SCRIPTING"><a href="#LUA-SCRIPTING" class="headerlink" title="LUA SCRIPTING"></a>LUA SCRIPTING</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line"></span><br><span class="line">LUA SCRIPTING  </span><br><span class="line"></span><br><span class="line">Max execution time of a Lua script in milliseconds.</span><br><span class="line"><span class="comment"># Lua脚本的最大执行时间（以毫秒为单位）。</span></span><br><span class="line">If the maximum execution time is reached Redis will log that a script is</span><br><span class="line">still in execution after the maximum allowed time and will start to</span><br><span class="line">reply to queries with an error.</span><br><span class="line"><span class="comment"># 如果达到了最大执行时间，Redis将记录脚本在允许的最大时间后仍在执行中，并将开始以错误答复查询</span></span><br><span class="line">When a long running script exceeds the maximum execution time only the</span><br><span class="line">SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span><br><span class="line">used to stop a script that did not yet call any write commands. The second</span><br><span class="line">is the only way to shut down the server in the case a write command was</span><br><span class="line">already issued by the script but the user doesn't want to wait for the natural</span><br><span class="line">termination of the script.</span><br><span class="line"><span class="comment"># 如果长时间运行的脚本超过了最大执行时间，则只有“ SCRIPT KILL”和“ SHUTDOWN NOSAVE”命令可用。第一个可用于停止尚未调用任何写命令的脚本。第二种是在脚本已经发出写命令但用户不想等待脚本自然终止的情况下关闭服务器的唯一方法</span></span><br><span class="line">Set it to 0 or a negative value for unlimited execution without warnings.</span><br><span class="line"><span class="comment"># 将其设置为0或负值可无警告地无限执行</span></span><br><span class="line">lua-time-limit 5000</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>lua-time-limit：一个lua脚本执行的最大时间，单位为ms。默认值为5000</p>
<h2 id="REDIS-CLUSTER-重要"><a href="#REDIS-CLUSTER-重要" class="headerlink" title="REDIS CLUSTER(重要)"></a>REDIS CLUSTER(重要)</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">REDIS CLUSTER  </span><br><span class="line"></span><br><span class="line">Normal Redis instances can't be part of a Redis Cluster; only nodes that are</span><br><span class="line">started as cluster nodes can. In order to start a Redis instance as a</span><br><span class="line">cluster node enable the cluster support uncommenting the following:</span><br><span class="line"><span class="comment"># 普通Redis实例不能属于Redis集群；只有作为群集节点启动的节点可以。为了将Redis实例启动为集群节点，请启用集群支持</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">Every cluster node has a cluster configuration file. This file is not</span><br><span class="line">intended to be edited by hand. It is created and updated by Redis nodes.</span><br><span class="line">Every Redis Cluster node requires a different cluster configuration file.</span><br><span class="line">Make sure that instances running in the same system do not have</span><br><span class="line">overlapping cluster configuration file names.</span><br><span class="line"><span class="comment"># 每个群集节点都有一个群集配置文件。该文件不适合手工编辑。它由Redis节点创建和更新。每个Redis群集节点都需要一个不同的群集配置文件。确保在同一系统上运行的实例没有重叠的集群配置文件名</span></span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line"></span><br><span class="line">Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><span class="line">for it to be considered in failure state.</span><br><span class="line">Most other internal time limits are a multiple of the node timeout.</span><br><span class="line"><span class="comment"># 群集节点超时是一个节点必须不可达的毫秒数，才能将其视为故障状态。其他大多数内部时间限制是节点超时的倍数</span></span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line"></span><br><span class="line">A replica of a failing master will avoid to start a failover if its data</span><br><span class="line">looks too old.</span><br><span class="line"><span class="comment"># 如果发生故障的主副本的数据看起来太旧，它将避免启动故障转移。</span></span><br><span class="line">There is no simple way for a replica to actually have an exact measure of</span><br><span class="line">its "data age", so the following two checks are performed:</span><br><span class="line"><span class="comment"># 没有一种简单的方法可以使副本实际上具有其“数据年龄”的准确度量，因此执行以下两项检查</span></span><br><span class="line">1) If there are multiple replicas able to failover, they exchange messages</span><br><span class="line">in order to try to give an advantage to the replica with the best</span><br><span class="line">replication offset (more data from the master processed).</span><br><span class="line">Replicas will try to get their rank by offset, and apply to the start</span><br><span class="line">of the failover a delay proportional to their rank.</span><br><span class="line"><span class="comment"># # 如果存在多个能够进行故障转移的副本，则它们会交换消息，以便尝试利用具有最佳复制偏移量的副本（已处理来自主数据库的更多数据）来获得优势。副本将尝试按偏移量获得其排名，并将故障切换延迟按其排名成比例地应用于故障转移的开始</span></span><br><span class="line">2) Every single replica computes the time of the last interaction with</span><br><span class="line">its master. This can be the last ping or command received (if the master</span><br><span class="line">is still in the "connected" state), or the time that elapsed since the</span><br><span class="line">disconnection with the master (if the replication link is currently down).</span><br><span class="line">If the last interaction is too old, the replica will not try to failover</span><br><span class="line">at all.</span><br><span class="line"><span class="comment"># 每个单个副本都会计算与其主副本之间最后一次交互的时间。这可以是最后收到的ping或命令（如果主服务器仍处于“已连接”状态），也可以是自从与主服务器断开连接以来经过的时间（如果复制链接当前已关闭）。如果最后一次交互太旧，则副本将完全不会尝试故障转移</span></span><br><span class="line">The point "2" can be tuned by user. Specifically a replica will not perform</span><br><span class="line">the failover if, since the last interaction with the master, the time</span><br><span class="line">elapsed is greater than:</span><br><span class="line"><span class="comment"># 用户可以调整点“ 2”。特别是，如果自从上次与主服务器进行交互以来，如果经过的时间大于或等于一个副本，则副本将不执行故障转移。</span></span><br><span class="line">(node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span><br><span class="line"><span class="comment"># （节点超时 * 集群副本有效性因子）+ 复制周期</span></span><br><span class="line">So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor</span><br><span class="line">is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><span class="line">replica will not try to failover if it was not able to talk with the master</span><br><span class="line">for longer than 310 seconds.</span><br><span class="line"><span class="comment"># 因此，例如，如果节点超时为30秒，并且集群副本有效期因子为10，并且假设默认的repl-ping-replica-period为10秒，则副本将无法尝试进行故障转移，如果它不能与主人交谈超过310秒</span></span><br><span class="line">A large cluster-replica-validity-factor may allow replicas with too old data to failover</span><br><span class="line">a master, while a too small value may prevent the cluster from being able to</span><br><span class="line">elect a replica at all.</span><br><span class="line"><span class="comment"># 较大的群集副本有效性因素可能会使数据过旧的副本无法对主副本进行故障转移，而值太小可能会使群集根本无法选择副本</span></span><br><span class="line">For maximum availability, it is possible to set the cluster-replica-validity-factor</span><br><span class="line">to a value of 0, which means, that replicas will always try to failover the</span><br><span class="line">master regardless of the last time they interacted with the master.</span><br><span class="line">(However they'll always try to apply a delay proportional to their</span><br><span class="line">offset rank).</span><br><span class="line"><span class="comment"># 为了获得最大可用性，可以将cluster-replica-validity-factor设置为0，这意味着，无论副本上次与主服务器交互是什么，副本将始终尝试对主服务器进行故障转移。 （但是，他们将始终尝试按与其偏移等级成比例的方式应用延迟）</span></span><br><span class="line">Zero is the only value able to guarantee that when all the partitions heal</span><br><span class="line">the cluster will always be able to continue.</span><br><span class="line"><span class="comment"># 零是唯一能够确保当所有分区恢复正常时群集将始终能够继续运行的值</span></span><br><span class="line">cluster-replica-validity-factor 10</span><br><span class="line"></span><br><span class="line">Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><span class="line">that are left without working replicas. This improves the cluster ability</span><br><span class="line">to resist to failures as otherwise an orphaned master can't be failed over</span><br><span class="line">in case of failure if it has no working replicas.</span><br><span class="line"><span class="comment"># 群集副本能够迁移到孤立的主数据库，即那些没有工作副本的主数据库。这提高了群集抵抗故障的能力，否则如果孤立的主节点没有可用的副本，则该主节点在发生故障的情况下无法进行故障转移</span></span><br><span class="line">Replicas migrate to orphaned masters only if there are still at least a</span><br><span class="line">given number of other working replicas for their old master. This number</span><br><span class="line">is the "migration barrier". A migration barrier of 1 means that a replica</span><br><span class="line">will migrate only if there is at least 1 other working replica for its master</span><br><span class="line">and so forth. It usually reflects the number of replicas you want for every</span><br><span class="line">master in your cluster.</span><br><span class="line"><span class="comment"># 仅当旧的主副本仍存在至少给定数量的其他工作副本时，副本副本才会迁移到孤立的主副本。这个数字是“移民壁垒”。迁移屏障为1意味着，仅当副本数据库的主副本中至少有1个其他工作副本时，副本副本才会迁移。它通常反映出集群中每个主数据库所需的副本数</span></span><br><span class="line">Default is 1 (replicas migrate only if their masters remain with at least</span><br><span class="line">one replica). To disable migration just set it to a very large value.</span><br><span class="line">A value of 0 can be set but is useful only for debugging and dangerous</span><br><span class="line">in production.</span><br><span class="line"><span class="comment"># 缺省值为1（仅当其主副本保留至少一个副本副本时，副本副本才会迁移）。要禁用迁移，只需将其设置为非常大的值即可。可以设置为0，但仅用于调试和生产危险</span></span><br><span class="line">cluster-migration-barrier 1</span><br><span class="line"></span><br><span class="line">By default Redis Cluster nodes stop accepting queries if they detect there</span><br><span class="line">is at least a hash slot uncovered (no available node is serving it).</span><br><span class="line">This way if the cluster is partially down (for example a range of hash slots</span><br><span class="line">are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><span class="line">It automatically returns available as soon as all the slots are covered again.</span><br><span class="line"><span class="comment"># 默认情况下，如果Redis Cluster节点检测到至少发现一个哈希槽（没有可用的节点正在为其提供服务），它们将停止接受查询。这样，如果集群部分关闭（例如，不再覆盖哈希槽范围），则所有集群最终将变得不可用。再次覆盖所有插槽后，它将自动返回可用状态</span></span><br><span class="line">However sometimes you want the subset of the cluster which is working,</span><br><span class="line">to continue to accept queries for the part of the key space that is still</span><br><span class="line">covered. In order to do so, just set the cluster-require-full-coverage</span><br><span class="line">option to no.</span><br><span class="line"><span class="comment"># 但是，有时您希望正在运行的集群子集继续接受对仍覆盖的部分键空间的查询。为此，只需将cluster-require-full-coverage选项设置为no</span></span><br><span class="line"></span><br><span class="line">cluster-require-full-coverage yes</span><br><span class="line"></span><br><span class="line">This option, when set to yes, prevents replicas from trying to failover its</span><br><span class="line">master during master failures. However the master can still perform a</span><br><span class="line">manual failover, if forced to do so.</span><br><span class="line"><span class="comment"># 设置为yes时，此选项可防止副本在主服务器发生故障时尝试对其主服务器进行故障转移。但是，主服务器仍然可以执行手动故障转移（如果被迫执行）</span></span><br><span class="line">This is useful in different scenarios, especially in the case of multiple</span><br><span class="line">data center operations, where we want one side to never be promoted if not</span><br><span class="line">in the case of a total DC failure.</span><br><span class="line"><span class="comment"># 这在不同的情况下很有用，尤其是在多个数据中心操作的情况下，在这种情况下，如果完全DC失败，我们希望不升级一侧。</span></span><br><span class="line">cluster-replica-no-failover no</span><br><span class="line"></span><br><span class="line">This option, when set to yes, allows nodes to serve read traffic while the</span><br><span class="line">the cluster is in a down state, as long as it believes it owns the slots. </span><br><span class="line"><span class="comment"># 设置为yes时，此选项允许节点在群集处于关闭状态时为其提供读取流量，只要它认为自己拥有插槽即可</span></span><br><span class="line">This is useful for two cases.  The first case is for when an application </span><br><span class="line">doesn't require consistency of data during node failures or network partitions.</span><br><span class="line">One example of this is a cache, where as long as the node has the data it</span><br><span class="line">should be able to serve it. </span><br><span class="line"><span class="comment"># 这对于两种情况很有用。第一种情况是在节点故障或网络分区期间应用程序不需要数据一致性时。一个示例是高速缓存，只要节点具有数据，它就应该能够为其服务</span></span><br><span class="line">The second use case is for configurations that don't meet the recommended  </span><br><span class="line">three shards but want to enable cluster mode and scale later. A </span><br><span class="line">master outage in a 1 or 2 shard configuration causes a read/write outage to the</span><br><span class="line">entire cluster without this option set, with it set there is only a write outage.</span><br><span class="line">Without a quorum of masters, slot ownership will not change automatically. </span><br><span class="line"><span class="comment"># 第二个用例是针对不符合建议的三个分片但希望启用集群模式并在以后扩展的配置。如果没有设置此选项，则在1或2分片配置中的主服务器中断会导致整个集群的读写中断。如果没有法定人数的主持人，则插槽所有权不会自动更改</span></span><br><span class="line">cluster-allow-reads-when-down no</span><br><span class="line"></span><br><span class="line">In order to setup your cluster make sure to read the documentation</span><br><span class="line">available at http://redis.io web site.</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>cluster-enabled：集群开关，默认是不开启集群模式。</p>
<p>cluster-config-file：集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。 这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件。请确保与实例运行的系统中配置文件名称不冲突。默认配置为nodes-6379.conf</p>
<p>cluster-node-timeout ：可以配置值为15000。节点互连超时的阀值，集群节点超时毫秒数</p>
<p>cluster-slave-validity-factor ：可以配置值为10。在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了， 导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。</p>
<blockquote>
    <p>判断方法是：比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period 如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移</p>
</blockquote>
<p>cluster-migration-barrier ：可以配置值为1。master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</p>
<p>cluster-require-full-coverage：默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。 设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。</p>
<h2 id="CLUSTER-DOCKER-NAT-support"><a href="#CLUSTER-DOCKER-NAT-support" class="headerlink" title="CLUSTER DOCKER/NAT support"></a>CLUSTER DOCKER/NAT support</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">CLUSTER DOCKER/NAT support  </span><br><span class="line"></span><br><span class="line">In certain deployments, Redis Cluster nodes address discovery fails, because</span><br><span class="line">addresses are NAT-ted or because ports are forwarded (the typical case is</span><br><span class="line">Docker and other containers).</span><br><span class="line"><span class="comment"># 在某些部署中，Redis群集节点地址发现失败，这是因为地址经过NAT限制或端口已转发（典型情况是Docker和其他容器）</span></span><br><span class="line">In order to make Redis Cluster working in such environments, a static</span><br><span class="line">configuration where each node knows its public address is needed. The</span><br><span class="line">following two options are used for this scope, and are:</span><br><span class="line"><span class="comment"># 为了使Redis Cluster在这样的环境中工作，需要一个静态配置，其中每个节点都知道其公共地址。以下两个选项用于此范围，分别是</span></span><br><span class="line">* cluster-announce-ip</span><br><span class="line">* cluster-announce-port</span><br><span class="line">* cluster-announce-bus-port</span><br><span class="line"></span><br><span class="line">Each instructs the node about its address, client port, and cluster message</span><br><span class="line">bus port. The information is then published in the header of the bus packets</span><br><span class="line">so that other nodes will be able to correctly map the address of the node</span><br><span class="line">publishing the information.</span><br><span class="line"><span class="comment"># 每个节点都向节点指示其地址，客户端端口和群集消息总线端口。然后将信息发布在总线数据包的标题中，以便其他节点将能够正确映射发布信息的节点的地址</span></span><br><span class="line">If the above options are not used, the normal Redis Cluster auto-detection</span><br><span class="line">will be used instead.</span><br><span class="line"><span class="comment"># 如果未使用上述选项，则将使用常规的Redis群集自动检测</span></span><br><span class="line">Note that when remapped, the bus port may not be at the fixed offset of</span><br><span class="line">clients port + 10000, so you can specify any port and bus-port depending</span><br><span class="line">on how they get remapped. If the bus-port is not set, a fixed offset of</span><br><span class="line">10000 will be used as usual.</span><br><span class="line"><span class="comment"># 请注意，重新映射时，总线端口可能不在客户端端口+ 10000的固定偏移处，因此您可以根据重新映射的方式指定任何端口和总线端口。如果未设置总线端口，则将照常使用10000的固定偏移量</span></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">cluster-announce-ip 10.1.1.5</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 6380</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>在某些部署中，Redis群集节点寻址失败，这是因为地址经过NAT限制或端口已转发（典型情况是Docker和其他容器），为了使Redis Cluster在这样的环境中工作，需要一个静态配置，其中每个节点都知道其公共地址。以下两个选项用于此范围，分别是</p>
<ul>
    <li>cluster-announce-ip</li>
    <li>cluster-announce-port</li>
    <li>cluster-announce-bus-port</li>
</ul>
<h2 id="SLOW-LOG"><a href="#SLOW-LOG" class="headerlink" title="SLOW LOG"></a>SLOW LOG</h2>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">SLOW LOG </span><br><span class="line"></span><br><span class="line">The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="line">execution time. The execution time does not include the I/O operations</span><br><span class="line">like talking with the client, sending the reply and so forth,</span><br><span class="line">but just the time needed to actually execute the command (this is the only</span><br><span class="line">stage of command execution where the thread is blocked and can not serve</span><br><span class="line">other requests in the meantime).</span><br><span class="line"><span class="comment"># Redis Slow Log是一个用于记录超过指定执行时间的查询的系统。执行时间不包括与客户端交谈，发送回复等IO操作，而仅包括实际执行命令所需的时间（这是命令执行的唯一阶段，在该阶段线程被阻塞并且无法服务同时提出其他要求）</span></span><br><span class="line">You can configure the slow log with two parameters: one tells Redis</span><br><span class="line">what is the execution time, in microseconds, to exceed in order for the</span><br><span class="line">command to get logged, and the other parameter is the length of the</span><br><span class="line">slow log. When a new command is logged the oldest one is removed from the</span><br><span class="line">queue of logged commands.</span><br><span class="line"><span class="comment"># 您可以使用以下两个参数配置慢速日志：一个告诉Redis，为了使命令被记录下来，执行时间要超过多少微秒，而另一个参数是慢速日志的长度。记录新命令时，最早的命令将从记录的命令队列中删除</span></span><br><span class="line">The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="line">to one second. Note that a negative number disables the slow log, while</span><br><span class="line">a value of zero forces the logging of every command.</span><br><span class="line"><span class="comment"># 时间以微秒为单位，因此1000000等于一秒。请注意，负数将禁用慢速日志记录，而零值将强制记录每个命令</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line">There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="line">You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="line">slowlog-max-len 128</span><br><span class="line"><span class="comment"># 该长度没有限制。请注意，它将消耗内存。您可以使用SLOWLOG RESET回收慢日志使用的内存</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>Slowlog-log-slower-than: 默认值为10000，其中1000000等于1秒（负数将禁用慢速日志记录，而零值将强制记录每个命令）</p>
<p>slowlog-max-len: 日志的长度默认值为128，新日志将追加。就日志将从前删除。</p>
<h2 id="LATENCY-MONITOR"><a href="#LATENCY-MONITOR" class="headerlink" title="LATENCY MONITOR"></a>LATENCY MONITOR</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">LATENCY MONITOR </span><br><span class="line"></span><br><span class="line">The Redis latency monitoring subsystem samples different operations</span><br><span class="line">at runtime in order to collect data related to possible sources of</span><br><span class="line">latency of a Redis instance.</span><br><span class="line"><span class="comment"># Redis延迟监视子系统在运行时对不同的操作进行采样，以便收集与Redis实例的潜在延迟源相关的数据</span></span><br><span class="line">Via the LATENCY command this information is available to the user that can</span><br><span class="line">print graphs and obtain reports.</span><br><span class="line"><span class="comment"># 通过LATENCY命令，该信息可供打印，获取报告的用户使用</span></span><br><span class="line">The system only logs operations that were performed in a time equal or</span><br><span class="line">greater than the amount of milliseconds specified via the</span><br><span class="line">latency-monitor-threshold configuration directive. When its value is set</span><br><span class="line">to zero, the latency monitor is turned off.</span><br><span class="line"><span class="comment"># 系统仅记录在等于或大于通过delay-monitor-threshold配置指令指定的毫秒量的时间内执行的操作。当其值设置为零时，等待时间监视器将关闭</span></span><br><span class="line">By default latency monitoring is disabled since it is mostly not needed</span><br><span class="line">if you don't have latency issues, and collecting data has a performance</span><br><span class="line">impact, that while very small, can be measured under big load. Latency</span><br><span class="line">monitoring can easily be enabled at runtime using the command</span><br><span class="line">"CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;" if needed.</span><br><span class="line"><span class="comment"># 默认情况下，延迟监视是禁用的，因为如果您没有延迟问题，通常不需要它，并且收集数据会对性能产生影响，尽管影响很小，但是可以在大负载下进行测量。如果需要，可以在运行时使用命令“ CONFIG SET delay-monitor-threshold &lt;milliseconds&gt;”轻松启用延迟监视</span></span><br><span class="line">latency-monitor-threshold 0</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="EVENT-NOTIFICATION"><a href="#EVENT-NOTIFICATION" class="headerlink" title="EVENT NOTIFICATION"></a>EVENT NOTIFICATION</h2>
<figure class="highlight ini">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">EVENT NOTIFICATION </span><br><span class="line"></span><br><span class="line">Redis can notify Pub/Sub clients about events happening in the key space.</span><br><span class="line">This feature is documented at http://redis.io/topics/notifications</span><br><span class="line"><span class="comment"># Redis可以通知PubSub客户端关键空间中发生的事件</span></span><br><span class="line">For instance if keyspace events notification is enabled, and a client</span><br><span class="line">performs a DEL operation on key "foo" stored in the Database 0, two</span><br><span class="line">messages will be published via Pub/Sub:</span><br><span class="line"><span class="comment"># 例如，如果启用了键空间事件通知，并且客户端对存储在数据库0中的键“ foo”执行了DEL操作，则将通过PubSub发布两条消息</span></span><br><span class="line">PUBLISH __keyspace@0__:foo del</span><br><span class="line">PUBLISH __keyevent@0__:del foo</span><br><span class="line"></span><br><span class="line">It is possible to select the events that Redis will notify among a set</span><br><span class="line">of classes. Every class is identified by a single character:</span><br><span class="line"><span class="comment"># 可以在一组类中选择Redis将通知的事件。每个类别都由单个字符标识</span></span><br><span class="line">K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.             # 空键事件，以__keyspace @ &lt;db&gt; __前缀发布</span><br><span class="line">E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.             # 按键事件，以__keyevent @ &lt;db&gt; __前缀发布</span><br><span class="line">g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...    # 通用命令（非类型专用），例如DEL，EXPIRE，RENAME</span><br><span class="line">$     String commands                                                       # 字符串命令</span><br><span class="line">l     List commands                                                         # 列表命令</span><br><span class="line">s     Set commands                                                          # 集合命令</span><br><span class="line">h     Hash commands                                                         # 哈希命令</span><br><span class="line">z     Sorted set commands                                                   # 有序集合命令</span><br><span class="line">x     Expired events (events generated every time a key expires)            # 过期事件（每次密钥过期时生成的事件）</span><br><span class="line">e     Evicted events (events generated when a key is evicted for maxmemory) # 驱逐事件（将密钥驱逐到最大内存时生成的事件）</span><br><span class="line">t     Stream commands                                                       # 流命令</span><br><span class="line">m     Key-miss events (Note: It is not included in the 'A' class)           # 键丢失事件（注意：它不包含在“ A”类中）</span><br><span class="line">A     Alias for g$lshzxet, so that the "AKE" string means all the events    # glshzxet的别名，因此“ AKE”字符串表示所有事件</span><br><span class="line">    (Except key-miss events which are excluded from 'A' due to their</span><br><span class="line">     unique nature).</span><br><span class="line"></span><br><span class="line">The "notify-keyspace-events" takes as argument a string that is composed</span><br><span class="line">of zero or multiple characters. The empty string means that notifications</span><br><span class="line">are disabled.</span><br><span class="line"><span class="comment"># “ notify-keyspace-events”将由零个或多个字符组成的字符串作为参数。空字符串表示已禁用通知</span></span><br><span class="line">Example: to enable list and generic events, from the point of view of the</span><br><span class="line">       event name, use:</span><br><span class="line"></span><br><span class="line">notify-keyspace-events Elg</span><br><span class="line"></span><br><span class="line">Example 2: to get the stream of the expired keys subscribing to channel</span><br><span class="line">         name __keyevent@0__:expired use:</span><br><span class="line"></span><br><span class="line">notify-keyspace-events Ex</span><br><span class="line"></span><br><span class="line">By default all notifications are disabled because most users don't need</span><br><span class="line">this feature and the feature has some overhead. Note that if you don't</span><br><span class="line">specify at least one of K or E, no events will be delivered.</span><br><span class="line">notify-keyspace-events ""</span><br><span class="line"><span class="comment"># 默认情况下，所有通知都被禁用，因为大多数用户不需要此功能，并且该功能有一些开销。请注意，如果您未指定K或E中的至少一个，则不会传递任何事件。 notify-keyspace-events</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="GOPHER-SERVER"><a href="#GOPHER-SERVER" class="headerlink" title="GOPHER SERVER"></a>GOPHER SERVER</h2>
<figure class="highlight tp">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">GOPHER SERVER </span><br><span class="line"></span><br><span class="line">Redis contains an implementation of the Gopher protocol, as specified in</span><br><span class="line">the RFC <span class="number">1436</span> (https:<span class="comment">//www.ietf.org/rfc/rfc1436.txt).</span></span><br><span class="line"><span class="comment"># Redis包含RFC 1436（https：www.ietf.orgrfcrfc1436.txt）中指定的Gopher协议的实现。</span></span><br><span class="line"><span class="comment">The Gopher protocol was very popular in the late '90s. It is an alternative</span></span><br><span class="line"><span class="comment">to the web, and the implementation both server and client side is so simple</span></span><br><span class="line"><span class="comment">that the Redis server has just 100 lines of code in order to implement this</span></span><br><span class="line"><span class="comment">support.</span></span><br><span class="line"><span class="comment"># Gopher协议在90年代后期非常流行。它是Web的替代方法，服务器和客户端的实现是如此简单，以至于Redis服务器只有100行代码才能实现这种支持</span></span><br><span class="line"><span class="comment">What do you do with Gopher nowadays? Well Gopher never *really* died, and</span></span><br><span class="line"><span class="comment">lately there is a movement in order for the Gopher more hierarchical content</span></span><br><span class="line"><span class="comment">composed of just plain text documents to be resurrected. Some want a simpler</span></span><br><span class="line"><span class="comment">internet, others believe that the mainstream internet became too much</span></span><br><span class="line"><span class="comment">controlled, and it's cool to create an alternative space for people that</span></span><br><span class="line"><span class="comment">want a bit of fresh air.</span></span><br><span class="line"><span class="comment"># 您现在如何使用Gopher？好吧，Gopher从未真正死过，最近出现了一种运动，目的是使Gopher具有更多层次的内容（由纯文本文档组成）得以复活。有些人想要一个更简单的互联网，另一些人则认为主流互联网变得过于受控，为想要一点新鲜空气的人们创造一个替代空间很酷。</span></span><br><span class="line"><span class="comment">Anyway for the 10nth birthday of the Redis, we gave it the Gopher protocol</span></span><br><span class="line"><span class="comment">as a gift.</span></span><br><span class="line"><span class="comment"># 无论如何，在Redis十岁生日的时候，我们给了它Gopher协议作为礼物</span></span><br><span class="line"><span class="comment">--- HOW IT WORKS? ---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Redis Gopher support uses the inline protocol of Redis, and specifically</span></span><br><span class="line"><span class="comment">two kind of inline requests that were anyway illegal: an empty request</span></span><br><span class="line"><span class="comment">or any request that starts with "/" (there are no Redis commands starting</span></span><br><span class="line"><span class="comment">with such a slash). Normal RESP2/RESP3 requests are completely out of the</span></span><br><span class="line"><span class="comment">path of the Gopher protocol implementation and are served as usual as well.</span></span><br><span class="line"><span class="comment"># Redis Gopher支持使用Redis的内联协议，特别是两种仍然非法的内联请求：空请求或任何以“”开头的请求（没有以这样的斜杠开头的Redis命令）。正常的RESP2RESP3请求完全超出了Gopher协议实现的路径，并且也照常使用</span></span><br><span class="line"><span class="comment">If you open a connection to Redis when Gopher is enabled and send it</span></span><br><span class="line"><span class="comment">a string like "/foo", if there is a key named "/foo" it is served via the</span></span><br><span class="line"><span class="comment">Gopher protocol.</span></span><br><span class="line"><span class="comment"># 如果在启用Gopher时打开与Redis的连接，并向其发送“ foo”之类的字符串，则如果存在名为“ foo”的密钥，则会通过Gopher协议为其提供服务</span></span><br><span class="line"><span class="comment">In order to create a real Gopher "hole" (the name of a Gopher site in Gopher</span></span><br><span class="line"><span class="comment">talking), you likely need a script like the following:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">https://github.com/antirez/gopher2redis</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--- SECURITY WARNING ---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If you plan to put Redis on the internet in a publicly accessible address</span></span><br><span class="line"><span class="comment">to server Gopher pages MAKE SURE TO SET A PASSWORD to the instance.</span></span><br><span class="line"><span class="comment">Once a password is set:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. The Gopher server (when enabled, not by default) will still serve</span></span><br><span class="line"><span class="comment">  content via Gopher.</span></span><br><span class="line"><span class="comment">2. However other commands cannot be called before the client will</span></span><br><span class="line"><span class="comment">  authenticate.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">So use the 'requirepass' option to protect your instance.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note that Gopher is not currently supported when 'io-threads-do-reads'</span></span><br><span class="line"><span class="comment">is enabled.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">To enable Gopher support, uncomment the following line and set the option</span></span><br><span class="line"><span class="comment">from no (the default) to yes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">gopher-enabled no</span></span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="ADVANCED-CONFIG"><a href="#ADVANCED-CONFIG" class="headerlink" title="ADVANCED CONFIG"></a>ADVANCED CONFIG</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ADVANCED CONFIG </span><br><span class="line"></span><br><span class="line">Hashes are encoded using a memory efficient data structure when they have a</span><br><span class="line">small number of entries, and the biggest entry does not exceed a given</span><br><span class="line">threshold. These thresholds can be configured using the following directives.</span><br><span class="line"><span class="comment"># 当哈希条目只有少量条目且最大条目未超过给定阈值时，将使用内存高效的数据结构对其进行编码。可以使用以下指令配置这些阈值</span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line">Lists are also encoded in a special way to save a lot of space.</span><br><span class="line">The number of entries allowed per internal list node can be specified</span><br><span class="line">as a fixed maximum size or a maximum number of elements.</span><br><span class="line"><span class="comment"># 列表也以特殊方式编码，以节省大量空间。每个内部列表节点允许的条目数可以指定为固定的最大大小或最大元素数</span></span><br><span class="line">For a fixed maximum size, use -5 through -1, meaning:</span><br><span class="line"><span class="comment"># 对于固定的最大大小，请使用-5到-1，表示</span></span><br><span class="line">-5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><br><span class="line">-4: max size: 32 Kb  &lt;-- not recommended</span><br><span class="line">-3: max size: 16 Kb  &lt;-- probably not recommended</span><br><span class="line">-2: max size: 8 Kb   &lt;-- good</span><br><span class="line">-1: max size: 4 Kb   &lt;-- good</span><br><span class="line">Positive numbers mean store up to _exactly_ that number of elements</span><br><span class="line">per list node.</span><br><span class="line"><span class="comment"># 正数表示每个列表节点最多可存储_exactly_个元素</span></span><br><span class="line">The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><br><span class="line">but if your use case is unique, adjust the settings as necessary.</span><br><span class="line"><span class="comment"># 最高性能的选项通常是-2（8 Kb大小）或-1（4 Kb大小），但是如果您的用例是唯一的，请根据需要调整设置</span></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"></span><br><span class="line">Lists may also be compressed.   # 列表也可以被压缩。</span><br><span class="line">Compress depth is the number of quicklist ziplist nodes from *each* side of</span><br><span class="line">the list to *exclude* from compression.  The head and tail of the list</span><br><span class="line">are always uncompressed for fast push/pop operations.  Settings are:</span><br><span class="line"><span class="comment"># 压缩深度是列表的每侧要从压缩中排除的快速列表ziplist节点的数量。列表的开头和结尾始终是未压缩的，以便快速进行pushpop操作。设置是</span></span><br><span class="line">0: disable all list compression # 禁用所有列表压缩</span><br><span class="line">1: depth 1 means "don't start compressing until after 1 node into the list,</span><br><span class="line">going from either the head or tail" # 深度1表示“直到列表中有1个节点之后，才开始压缩，从头到尾</span><br><span class="line">So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><br><span class="line">[head], [tail] will always be uncompressed; inner nodes will compress.</span><br><span class="line">2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><br><span class="line">2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,</span><br><span class="line">but compress all nodes between them.</span><br><span class="line">3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><br><span class="line">etc.</span><br><span class="line">list-compress-depth 0</span><br><span class="line"></span><br><span class="line">Sets have a special encoding in just one case: when a set is composed</span><br><span class="line">of just strings that happen to be integers in radix 10 in the range</span><br><span class="line">of 64 bit signed integers.</span><br><span class="line">The following configuration setting sets the limit in the size of the</span><br><span class="line">set in order to use this special memory saving encoding.</span><br><span class="line"><span class="comment"># 在仅一种情况下，集合具有特殊的编码：当集合仅由恰好是基数10中整数（在64位有符号整数范围内）的字符串组成时。以下配置设置设置了大小限制，以便使用此特殊的内存节省编码</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line">Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="line">order to save a lot of space. This encoding is only used when the length and</span><br><span class="line">elements of a sorted set are below the following limits:</span><br><span class="line"><span class="comment"># 与哈希表和列表类似，对排序集也进行了特殊编码，以节省大量空间。仅当排序集的长度和元素低于以下限制时，才使用此编码</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line">HyperLogLog sparse representation bytes limit. The limit includes the</span><br><span class="line">16 bytes header. When an HyperLogLog using the sparse representation crosses</span><br><span class="line">this limit, it is converted into the dense representation.</span><br><span class="line"><span class="comment"># HyperLogLog稀疏表示形式的字节数限制。限制包括16个字节的标头。当使用稀疏表示的HyperLogLog超过此限制时，它将转换为密集表示</span></span><br><span class="line">A value greater than 16000 is totally useless, since at that point the</span><br><span class="line">dense representation is more memory efficient.</span><br><span class="line"><span class="comment"># 大于16000的值是完全没有用的，因为在那一点上，密集表示的存储效率更高</span></span><br><span class="line">The suggested value is ~ 3000 in order to have the benefits of</span><br><span class="line">the space efficient encoding without slowing down too much PFADD,</span><br><span class="line">which is O(N) with the sparse encoding. The value can be raised to</span><br><span class="line">~ 10000 when CPU is not a concern, but space is, and the data set is</span><br><span class="line">composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span><br><span class="line"><span class="comment"># 建议值约为3000，以便在不减慢过多PFADD的情况下获得节省空间编码的好处，而PFADD的稀疏编码为O（N）。当不关心CPU但有空间时，该值可以提高到10000，并且数据集由基数在0-15000范围内的许多HyperLogLog组成</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line">Streams macro node max size / items. The stream data structure is a radix</span><br><span class="line">tree of big nodes that encode multiple items inside. Using this configuration</span><br><span class="line">it is possible to configure how big a single node can be in bytes, and the</span><br><span class="line">maximum number of items it may contain before switching to a new node when</span><br><span class="line">appending new stream entries. If any of the following settings are set to</span><br><span class="line">zero, the limit is ignored, so for instance it is possible to set just a</span><br><span class="line">max entires limit by setting max-bytes to 0 and max-entries to the desired</span><br><span class="line">value.</span><br><span class="line"><span class="comment"># 流宏节点最大大小的项目。流数据结构是一个大节点的基数树，它对内部的多个项目进行编码。使用此配置，可以配置单个节点的大小（以字节为单位），以及在添加新的流条目时切换到新节点之前它可能包含的最大项目数。如果以下任何设置被设置为零，则该限制将被忽略，例如，可以通过将max-bytes设置为0并将max-entries设置为所需的值来仅设置最大整数限制</span></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"></span><br><span class="line">Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="line">order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="line">keys to values). The hash table implementation Redis uses (see dict.c)</span><br><span class="line">performs a lazy rehashing: the more operation you run into a hash table</span><br><span class="line">that is rehashing, the more rehashing "steps" are performed, so if the</span><br><span class="line">server is idle the rehashing is never complete and some more memory is used</span><br><span class="line">by the hash table.</span><br><span class="line"><span class="comment"># 活动重新哈希处理每100毫秒CPU时间使用1毫秒，以帮助重新哈希主Redis哈希表（将顶级键映射到值的一个哈希表）。 Redis使用的哈希表实现（请参阅dict.c）执行一次懒惰的重新哈希处理：您在要进行哈希处理的哈希表中运行的操作越多，执行的哈希处理“步骤”就越多，因此，如果服务器空闲，则哈希处理将永远不会完成哈希表使用了更多的内存</span></span><br><span class="line">The default is to use this millisecond 10 times every second in order to</span><br><span class="line">actively rehash the main dictionaries, freeing memory when possible.</span><br><span class="line"><span class="comment"># 默认值是每秒使用10毫秒的毫秒数来主动重新哈希主字典，并在可能的情况下释放内存</span></span><br><span class="line">If unsure:</span><br><span class="line">use "activerehashing no" if you have hard latency requirements and it is</span><br><span class="line">not a good thing in your environment that Redis can reply from time to time</span><br><span class="line">to queries with 2 milliseconds delay.</span><br><span class="line"><span class="comment"># 如果不确定：如果您有严格的延迟要求，则使用“ activehashing no”，并且在您的环境中，Redis可以不时地以2毫秒的延迟答复查询不是一件好事</span></span><br><span class="line"></span><br><span class="line">use "activerehashing yes" if you don't have such hard requirements but</span><br><span class="line">want to free memory asap when possible.</span><br><span class="line"><span class="comment"># 如果您没有如此严格的要求，但想在可能的情况下尽快释放内存，请使用“ activerehashing yes”</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">The client output buffer limits can be used to force disconnection of clients</span><br><span class="line">that are not reading data from the server fast enough for some reason (a</span><br><span class="line">common reason is that a Pub/Sub client can't consume messages as fast as the</span><br><span class="line">publisher can produce them).</span><br><span class="line"><span class="comment"># 客户端输出缓冲区限制可用于出于某些原因强制断开那些没有足够快地从服务器读取数据的客户端（常见原因是PubSub客户端不能像发布者产生消息那样快地消耗消息）</span></span><br><span class="line">The limit can be set differently for the three different classes of clients:</span><br><span class="line"><span class="comment"># 可以为三种不同类别的客户设置不同的限制</span></span><br><span class="line">normal -&gt; normal clients including MONITOR clients  # 普通客户，包括MONITOR客户</span><br><span class="line">replica  -&gt; replica clients                         # 复制客户端</span><br><span class="line">pubsub -&gt; clients subscribed to at least one pubsub channel or pattern  # 客户订阅了至少一个pubsub频道或模式</span><br><span class="line"></span><br><span class="line">The syntax of every client-output-buffer-limit directive is the following:</span><br><span class="line"><span class="comment"># 每个client-output-buffer-limit指令的语法如下</span></span><br><span class="line">client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="line"></span><br><span class="line">A client is immediately disconnected once the hard limit is reached, or if</span><br><span class="line">the soft limit is reached and remains reached for the specified number of</span><br><span class="line">seconds (continuously).</span><br><span class="line">So for instance if the hard limit is 32 megabytes and the soft limit is</span><br><span class="line">16 megabytes / 10 seconds, the client will get disconnected immediately</span><br><span class="line">if the size of the output buffers reach 32 megabytes, but will also get</span><br><span class="line">disconnected if the client reaches 16 megabytes and continuously overcomes</span><br><span class="line">the limit for 10 seconds.</span><br><span class="line"><span class="comment"># 一旦达到硬限制，或者达到软限制并在指定的秒数内（连续）保持达到此限制，客户端将立即断开连接。因此，例如，如果硬限制为32兆字节，软限制为16兆字节10秒，则如果输出缓冲区的大小达到32兆字节，客户端将立即断开连接，但是如果客户端达到16兆字节并连续不断，连接也会断开连接超过极限10秒</span></span><br><span class="line">By default normal clients are not limited because they don't receive data</span><br><span class="line">without asking (in a push way), but just after a request, so only</span><br><span class="line">asynchronous clients may create a scenario where data is requested faster</span><br><span class="line">than it can read.</span><br><span class="line"><span class="comment"># 默认情况下，普通客户端不受限制，因为它们不会在不询问的情况下（以推送方式）接收数据，而是在请求之后才接收数据，因此，只有异步客户端才可能创建这样的场景：请求数据的速度比读取数据的速度快</span></span><br><span class="line">Instead there is a default limit for pubsub and replica clients, since</span><br><span class="line">subscribers and replicas receive data in a push fashion.</span><br><span class="line"><span class="comment"># 而是对pubsub和副本客户端有默认限制，因为订阅者和副本以推送方式接收数据</span></span><br><span class="line">Both the hard or the soft limit can be disabled by setting them to zero.</span><br><span class="line"><span class="comment"># 硬限制或软限制都可以通过将其设置为零来禁用</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line">Client query buffers accumulate new commands. They are limited to a fixed</span><br><span class="line">amount by default in order to avoid that a protocol desynchronization (for</span><br><span class="line">instance due to a bug in the client) will lead to unbound memory usage in</span><br><span class="line">the query buffer. However you can configure it here if you have very special</span><br><span class="line">needs, such us huge multi/exec requests or alike.</span><br><span class="line"><span class="comment"># 客户端查询缓冲区会累积新命令。默认情况下，它们被限制为固定数量，以避免协议不同步（例如，由于客户端中的错误）将导致查询缓冲区中的未绑定内存使用。但是，如果您有非常特殊的需求（例如我们巨大的multiexec请求等），则可以在此处进行配置。</span></span><br><span class="line">client-query-buffer-limit 1gb</span><br><span class="line"></span><br><span class="line">In the Redis protocol, bulk requests, that are, elements representing single</span><br><span class="line">strings, are normally limited to 512 mb. However you can change this limit</span><br><span class="line">here, but must be 1mb or greater</span><br><span class="line"><span class="comment"># 在Redis协议中，批量请求（即表示单个字符串的元素）通常限制为512 mb。但是，您可以在此处更改此限制，但必须为1mb或更大</span></span><br><span class="line">proto-max-bulk-len 512mb</span><br><span class="line"></span><br><span class="line">Redis calls an internal function to perform many background tasks, like</span><br><span class="line">closing connections of clients in timeout, purging expired keys that are</span><br><span class="line">never requested, and so forth.</span><br><span class="line"><span class="comment"># Redis调用内部函数来执行许多后台任务，例如在超时时关闭客户端连接，清除从未请求的过期密钥等</span></span><br><span class="line">Not all tasks are performed with the same frequency, but Redis checks for</span><br><span class="line">tasks to perform according to the specified "hz" value.</span><br><span class="line"><span class="comment"># 并非所有任务都以相同的频率执行，但是Redis会根据指定的“ hz”值检查要执行的任务</span></span><br><span class="line">By default "hz" is set to 10. Raising the value will use more CPU when</span><br><span class="line">Redis is idle, but at the same time will make Redis more responsive when</span><br><span class="line">there are many keys expiring at the same time, and timeouts may be</span><br><span class="line">handled with more precision.</span><br><span class="line"><span class="comment"># 默认情况下，“ hz”设置为10。提高该值将在Redis空闲时使用更多的CPU，但是同时当有多个键同时到期时，它将使Redis的响应速度更快，并且可以使用更多的超时来处理精确</span></span><br><span class="line">The range is between 1 and 500, however a value over 100 is usually not</span><br><span class="line">a good idea. Most users should use the default of 10 and raise this up to</span><br><span class="line">100 only in environments where very low latency is required.</span><br><span class="line"><span class="comment"># 范围在1到500之间，但是值通常不超过100。大多数用户应该使用默认值10，并且仅在要求非常低延迟的环境中才将其提高到100</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line">Normally it is useful to have an HZ value which is proportional to the</span><br><span class="line">number of clients connected. This is useful in order, for instance, to</span><br><span class="line">avoid too many clients are processed for each background task invocation</span><br><span class="line">in order to avoid latency spikes.</span><br><span class="line"><span class="comment"># 通常，具有与连接的客户端数量成比例的HZ值很有用。例如，这有助于避免每次后台任务调用处理过多的客户端，从而避免延迟高峰</span></span><br><span class="line">Since the default HZ value by default is conservatively set to 10, Redis</span><br><span class="line">offers, and enables by default, the ability to use an adaptive HZ value</span><br><span class="line">which will temporarily raise when there are many connected clients.</span><br><span class="line"><span class="comment"># 由于默认的默认HZ值保守地设置为10，因此Redis提供并默认启用了使用自适应HZ值的能力，当有许多连接的客户端时，该值会暂时升高</span></span><br><span class="line">When dynamic HZ is enabled, the actual configured HZ will be used</span><br><span class="line">as a baseline, but multiples of the configured HZ value will be actually</span><br><span class="line">used as needed once more clients are connected. In this way an idle</span><br><span class="line">instance will use very little CPU time while a busy instance will be</span><br><span class="line">more responsive.</span><br><span class="line"><span class="comment"># 启用动态HZ后，实际配置的HZ将用作基准，但是一旦连接了更多客户端，实际将使用配置的HZ值的倍数。这样，空闲实例将占用很少的CPU时间，而忙碌的实例将具有更快的响应能力</span></span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line">When a child rewrites the AOF file, if the following option is enabled</span><br><span class="line">the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="line">in order to commit the file to the disk more incrementally and avoid</span><br><span class="line">big latency spikes.</span><br><span class="line"><span class="comment"># 当孩子重写AOF文件时，如果启用了以下选项，则每生成32 MB的数据，文件就会进行同步处理。这对于将文件更多地提交到磁盘并避免大的延迟峰值很有用。</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line">When redis saves RDB file, if the following option is enabled</span><br><span class="line">the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="line">in order to commit the file to the disk more incrementally and avoid</span><br><span class="line">big latency spikes.</span><br><span class="line"><span class="comment"># 当redis保存RDB文件时，如果启用以下选项，则每生成32 MB数据将对文件进行fsync处理。这对于将文件更多地提交到磁盘并避免大的延迟峰值很有用。</span></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line">Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><br><span class="line">idea to start with the default settings and only change them after investigating</span><br><span class="line">how to improve the performances and how the keys LFU change over time, which</span><br><span class="line">is possible to inspect via the OBJECT FREQ command.</span><br><span class="line"><span class="comment"># 可以调整Redis LFU逐出（请参阅maxmemory设置）。但是，最好从默认设置开始，仅在研究了如何提高性能以及LFU密钥随时间变化后才进行更改，可以通过OBJECT FREQ命令进行检查。</span></span><br><span class="line">There are two tunable parameters in the Redis LFU implementation: the</span><br><span class="line">counter logarithm factor and the counter decay time. It is important to</span><br><span class="line">understand what the two parameters mean before changing them.</span><br><span class="line"><span class="comment"># Redis LFU实现中有两个可调参数：计数器对数因子和计数器衰减时间。重要的是在更改它们之前了解两个参数的含义</span></span><br><span class="line">The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis</span><br><span class="line">uses a probabilistic increment with logarithmic behavior. Given the value</span><br><span class="line">of the old counter, when a key is accessed, the counter is incremented in</span><br><span class="line">this way:</span><br><span class="line"><span class="comment"># LFU计数器每个密钥只有8位，最大值是255，因此Redis使用具有对数行为的概率增量。给定旧计数器的值，当访问键时，计数器以这种方式递增</span></span><br><span class="line">1. A random number R between 0 and 1 is extracted.</span><br><span class="line">2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><br><span class="line">3. The counter is incremented only if R &lt; P.</span><br><span class="line"></span><br><span class="line">The default lfu-log-factor is 10. This is a table of how the frequency</span><br><span class="line">counter changes with a different number of accesses with different</span><br><span class="line">logarithmic factors:</span><br><span class="line"></span><br><span class="line">+--------+------------+------------+------------+------------+------------+</span><br><span class="line">| factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><br><span class="line">+--------+------------+------------+------------+------------+------------+</span><br><span class="line">| 0      | 104        | 255        | 255        | 255        | 255        |</span><br><span class="line">+--------+------------+------------+------------+------------+------------+</span><br><span class="line">| 1      | 18         | 49         | 255        | 255        | 255        |</span><br><span class="line">+--------+------------+------------+------------+------------+------------+</span><br><span class="line">| 10     | 10         | 18         | 142        | 255        | 255        |</span><br><span class="line">+--------+------------+------------+------------+------------+------------+</span><br><span class="line">| 100    | 8          | 11         | 49         | 143        | 255        |</span><br><span class="line">+--------+------------+------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line">NOTE: The above table was obtained by running the following commands:</span><br><span class="line"></span><br><span class="line">redis-benchmark -n 1000000 incr foo</span><br><span class="line">redis-cli object freq foo</span><br><span class="line"></span><br><span class="line">NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><br><span class="line">to accumulate hits.</span><br><span class="line"></span><br><span class="line">The counter decay time is the time, in minutes, that must elapse in order</span><br><span class="line">for the key counter to be divided by two (or decremented if it has a value</span><br><span class="line">less &lt;= 10).</span><br><span class="line"></span><br><span class="line">The default value for the lfu-decay-time is 1. A special value of 0 means to</span><br><span class="line">decay the counter every time it happens to be scanned.</span><br><span class="line"></span><br><span class="line">lfu-log-factor 10</span><br><span class="line">lfu-decay-time 1</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<h2 id="ACTIVE-DEFRAGMENTATION"><a href="#ACTIVE-DEFRAGMENTATION" class="headerlink" title="ACTIVE DEFRAGMENTATION"></a>ACTIVE DEFRAGMENTATION</h2>
<figure class="highlight">
    <table>
        <tr>
            <td class="gutter">
                <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre>
            </td>
            <td class="code">
                <pre><span class="line">ACTIVE DEFRAGMENTATION </span><br><span class="line"></span><br><span class="line">What is active defragmentation?</span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">Active (online) defragmentation allows a Redis server to compact the</span><br><span class="line">spaces left between small allocations and deallocations of data in memory,</span><br><span class="line">thus allowing to reclaim back memory.</span><br><span class="line"><span class="comment"># 通过主动（在线）碎片整理，Redis服务器可以压缩内存中小量分配和释放数据之间剩余的空间，从而允许回收内存</span></span><br><span class="line">Fragmentation is a natural process that happens with every allocator (but</span><br><span class="line">less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><br><span class="line">restart is needed in order to lower the fragmentation, or at least to flush</span><br><span class="line">away all the data and create it again. However thanks to this feature</span><br><span class="line">implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span><br><span class="line">in a "hot" way, while the server is running.</span><br><span class="line"><span class="comment"># 碎片是每个分配器（幸运的是，Jemalloc发生的情况）和某些工作负载都会发生的自然过程。通常，需要重新启动服务器以减少碎片，或者至少清除所有数据并重新创建。但是，由于Oran Agra为Redis 4.0实现了此功能，因此在服务器运行时，此过程可以在运行时以“热”方式进行</span></span><br><span class="line">Basically when the fragmentation is over a certain level (see the</span><br><span class="line">configuration options below) Redis will start to create new copies of the</span><br><span class="line">values in contiguous memory regions by exploiting certain specific Jemalloc</span><br><span class="line">features (in order to understand if an allocation is causing fragmentation</span><br><span class="line">and to allocate it in a better place), and at the same time, will release the</span><br><span class="line">old copies of the data. This process, repeated incrementally for all the keys</span><br><span class="line">will cause the fragmentation to drop back to normal values.</span><br><span class="line"><span class="comment"># 基本上，当碎片超过一定级别时（请参阅下面的配置选项），Redis将开始通过利用某些特定的Jemalloc功能在连续的内存区域中创建值的新副本（以便了解分配是否导致碎片并进行分配更好的位置），同时将释放数据的旧副本。对于所有键，以增量方式重复此过程将导致碎片恢复到正常值</span></span><br><span class="line">Important things to understand:</span><br><span class="line"></span><br><span class="line">1. This feature is disabled by default, and only works if you compiled Redis</span><br><span class="line">to use the copy of Jemalloc we ship with the source code of Redis.</span><br><span class="line">This is the default with Linux builds.</span><br><span class="line"><span class="comment"># 默认情况下，此功能是禁用的，并且仅当您编译Redis以使用我们随Redis的源代码提供的Jemalloc副本时才可用。这是Linux构建的默认设置</span></span><br><span class="line">2. You never need to enable this feature if you don't have fragmentation</span><br><span class="line">issues.</span><br><span class="line"><span class="comment"># 如果没有碎片问题，则无需启用此功能</span></span><br><span class="line">3. Once you experience fragmentation, you can enable this feature when</span><br><span class="line">needed with the command "CONFIG SET activedefrag yes".</span><br><span class="line"><span class="comment"># 遇到碎片之后，可以在需要时使用命令“ CONFIG SET activedefrag yes”启用此功能。</span></span><br><span class="line">The configuration parameters are able to fine tune the behavior of the</span><br><span class="line">defragmentation process. If you are not sure about what they mean it is</span><br><span class="line">a good idea to leave the defaults untouched.</span><br><span class="line"><span class="comment"># 配置参数能够微调碎片整理过程的行为。如果您不确定它们的含义，最好不要更改默认值</span></span><br><span class="line">Enabled active defragmentation</span><br><span class="line">activedefrag no</span><br><span class="line"></span><br><span class="line">Minimum amount of fragmentation waste to start active defrag</span><br><span class="line"><span class="comment"># 启动主动碎片整理的最小碎片废物量</span></span><br><span class="line">active-defrag-ignore-bytes 100mb</span><br><span class="line"></span><br><span class="line">Minimum percentage of fragmentation to start active defrag</span><br><span class="line"><span class="comment"># 启动主动碎片整理的最小碎片百分比</span></span><br><span class="line">active-defrag-threshold-lower 10</span><br><span class="line"></span><br><span class="line">Maximum percentage of fragmentation at which we use maximum effort</span><br><span class="line"><span class="comment"># 我们在最大程度地使用碎片的最大百分比</span></span><br><span class="line">active-defrag-threshold-upper 100</span><br><span class="line"></span><br><span class="line">Minimal effort for defrag in CPU percentage, to be used when the lower</span><br><span class="line">threshold is reached</span><br><span class="line"><span class="comment"># 达到下限阈值时使用的最小的CPU碎片整理工作</span></span><br><span class="line">active-defrag-cycle-min 1</span><br><span class="line"></span><br><span class="line">Maximal effort for defrag in CPU percentage, to be used when the upper</span><br><span class="line">threshold is reached</span><br><span class="line"><span class="comment"># 达到上限时使用的最大的CPU碎片整理工作</span></span><br><span class="line">active-defrag-cycle-max 25</span><br><span class="line"></span><br><span class="line">Maximum number of set/hash/zset/list fields that will be processed from</span><br><span class="line">the main dictionary scan</span><br><span class="line"><span class="comment"># 主字典扫描将处理的sethashzsetlist字段的最大数目</span></span><br><span class="line">active-defrag-max-scan-fields 1000</span><br><span class="line"></span><br><span class="line">Jemalloc background thread for purging will be enabled by default</span><br><span class="line"><span class="comment"># 默认情况下，将启用用于清除的Jemalloc后台线程</span></span><br><span class="line">jemalloc-bg-thread yes</span><br><span class="line"></span><br><span class="line">It is possible to pin different threads and processes of Redis to specific</span><br><span class="line">CPUs in your system, in order to maximize the performances of the server.</span><br><span class="line">This is useful both in order to pin different Redis threads in different</span><br><span class="line">CPUs, but also in order to make sure that multiple Redis instances running</span><br><span class="line">in the same host will be pinned to different CPUs.</span><br><span class="line"><span class="comment"># 可以将Redis的不同线程和进程固定到系统中的特定CPU，以最大化服务器的性能。这不仅有助于将不同的Redis线程固定在不同的CPU中，而且还可以确保将在同一主机中运行的多个Redis实例固定到不同的CPU。</span></span><br><span class="line"></span><br><span class="line">Normally you can do this using the "taskset" command, however it is also</span><br><span class="line">possible to this via Redis configuration directly, both in Linux and FreeBSD.</span><br><span class="line"><span class="comment"># 通常，您可以使用“ taskset”命令来执行此操作，但是在Linux和FreeBSD中，也可以直接通过Redis配置来执行此操作</span></span><br><span class="line">You can pin the server/IO threads, bio threads, aof rewrite child process, and</span><br><span class="line">the bgsave child process. The syntax to specify the cpu list is the same as</span><br><span class="line">the taskset command:</span><br><span class="line"><span class="comment"># 您可以固定serverIO线程，bio线程，aof重写子进程和bgsave子进程。指定cpu列表的语法与taskset命令相同</span></span><br><span class="line">Set redis server/io threads to cpu affinity 0,2,4,6:</span><br><span class="line">server_cpulist 0-7:2</span><br><span class="line"></span><br><span class="line">Set bio threads to cpu affinity 1,3:</span><br><span class="line"><span class="comment"># 将生物线程设置为cpu亲和力1,3</span></span><br><span class="line">bio_cpulist 1,3</span><br><span class="line"></span><br><span class="line">Set aof rewrite child process to cpu affinity 8,9,10,11:</span><br><span class="line"><span class="comment"># 将aof重写子进程设置为cpu亲和力8,9,10,11</span></span><br><span class="line">aof_rewrite_cpulist 8-11</span><br><span class="line"></span><br><span class="line">Set bgsave child process to cpu affinity 1,10,11</span><br><span class="line"><span class="comment"># 将bgsave子进程设置为cpu亲和力1,10,11</span></span><br><span class="line">bgsave_cpulist 1,10-11</span><br></pre>
            </td>
        </tr>
    </table>
</figure>
<p>基本上，当碎片超过一定级别时（请参阅下面的配置选项），Redis将开始通过利用某些特定的Jemalloc功能在连续的内存区域中创建值的新副本（以便了解分配是否导致碎片并进行分配更好的位置），同时将释放数据的旧副本。对于所有键，以增量方式重复此过程将导致碎片恢复到正常值，默认情况下，此功能是禁用的，并且仅当您编译Redis以使用我们随Redis的源代码提供的Jemalloc副本时才可用。这是Linux构建的默认设置。如果没有碎片问题，则无需启用此功能</p>
<p>遇到碎片之后，可以在需要时使用命令“ CONFIG SET activedefrag yes”启用此功能。</p>
<p>Activedefrag 配置参数能够微调碎片整理过程的行为，默认为No<br>active-defrag-ignore-bytes 启动主动碎片整理的最小碎片废物量默认100mb<br>active-defrag-threshold-lower: 启动主动碎片整理的最小碎片百分比，默认10<br>active-defrag-cycle-min：达到下限阈值时使用的最小的CPU碎片整理工作，默认1<br>active-defrag-cycle-max：达到上限时使用的最大的CPU碎片整理工作，默认25<br>active-defrag-max-scan-fields 主字典扫描将处理的sethashzsetlist字段的最大数目，默认1000<br>active-defrag-cycle-min：达到下限阈值时使用的最小的CPU碎片整理工作，默认1x</p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>NoSQL</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
